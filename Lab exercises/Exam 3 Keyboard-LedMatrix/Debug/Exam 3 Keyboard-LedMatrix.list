
Exam 3 Keyboard-LedMatrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006770  08006770  00016770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006804  08006804  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006804  08006804  00016804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800680c  0800680c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800680c  0800680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006810  08006810  00016810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006814  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  20000080  08006894  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  08006894  00020738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ee81  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ffc  00000000  00000000  0002ef74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00030f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b29  00000000  00000000  00031da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016802  00000000  00000000  000328d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ffc7  00000000  00000000  000490d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f5b7  00000000  00000000  0005909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004650  00000000  00000000  000e8654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000ecca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006758 	.word	0x08006758

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08006758 	.word	0x08006758

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	0000      	movs	r0, r0
	...

08000ea8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	f040 8090 	bne.w	8000fda <HAL_TIM_PeriodElapsedCallback+0x132>
		static int col = 0; //index for column

		uint8_t leds[2] = {0, pow(2, 4-col)};
 8000eba:	2300      	movs	r3, #0
 8000ebc:	733b      	strb	r3, [r7, #12]
 8000ebe:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f1c3 0304 	rsb	r3, r3, #4
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fb34 	bl	8000534 <__aeabi_i2d>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	ec43 2b11 	vmov	d1, r2, r3
 8000ed4:	ed9f 0b44 	vldr	d0, [pc, #272]	; 8000fe8 <HAL_TIM_PeriodElapsedCallback+0x140>
 8000ed8:	f004 f84c 	bl	8004f74 <pow>
 8000edc:	ec53 2b10 	vmov	r2, r3, d0
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f7ff fe40 	bl	8000b68 <__aeabi_d2uiz>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	737b      	strb	r3, [r7, #13]
		for (int i = 0; i < N_ROWS; i++) {
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e048      	b.n	8000f86 <HAL_TIM_PeriodElapsedCallback+0xde>
			int on = !HAL_GPIO_ReadPin(GPIOC, k_input[i]);
 8000ef4:	4a40      	ldr	r2, [pc, #256]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000efc:	4619      	mov	r1, r3
 8000efe:	483f      	ldr	r0, [pc, #252]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000f00:	f001 fb62 	bl	80025c8 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf0c      	ite	eq
 8000f0a:	2301      	moveq	r3, #1
 8000f0c:	2300      	movne	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	613b      	str	r3, [r7, #16]

			if(on){
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d033      	beq.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0xd8>
				PRINT("Input %d,%d\r\n", i, col);
 8000f18:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	4a37      	ldr	r2, [pc, #220]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000f22:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8000f26:	4837      	ldr	r0, [pc, #220]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f28:	f004 ff5e 	bl	8005de8 <sniprintf>
 8000f2c:	4835      	ldr	r0, [pc, #212]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f2e:	f7ff f957 	bl	80001e0 <strlen>
 8000f32:	4603      	mov	r3, r0
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	2364      	movs	r3, #100	; 0x64
 8000f38:	4932      	ldr	r1, [pc, #200]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f3a:	4833      	ldr	r0, [pc, #204]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000f3c:	f003 f868 	bl	8004010 <HAL_UART_Transmit>
				leds[0] += pow(2, i);
 8000f40:	6978      	ldr	r0, [r7, #20]
 8000f42:	f7ff faf7 	bl	8000534 <__aeabi_i2d>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	ec43 2b11 	vmov	d1, r2, r3
 8000f4e:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8000fe8 <HAL_TIM_PeriodElapsedCallback+0x140>
 8000f52:	f004 f80f 	bl	8004f74 <pow>
 8000f56:	ec55 4b10 	vmov	r4, r5, d0
 8000f5a:	7b3b      	ldrb	r3, [r7, #12]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fae9 	bl	8000534 <__aeabi_i2d>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4620      	mov	r0, r4
 8000f68:	4629      	mov	r1, r5
 8000f6a:	f7ff f997 	bl	800029c <__adddf3>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4610      	mov	r0, r2
 8000f74:	4619      	mov	r1, r3
 8000f76:	f7ff fdf7 	bl	8000b68 <__aeabi_d2uiz>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	733b      	strb	r3, [r7, #12]
		for (int i = 0; i < N_ROWS; i++) {
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3301      	adds	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	ddb3      	ble.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0x4c>
			}

		}

		HAL_SPI_Transmit_DMA(&hspi1, leds, 2);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2202      	movs	r2, #2
 8000f92:	4619      	mov	r1, r3
 8000f94:	481d      	ldr	r0, [pc, #116]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000f96:	f002 f885 	bl	80030a4 <HAL_SPI_Transmit_DMA>

		HAL_GPIO_WritePin(GPIOC, k_output[col], 0);
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4814      	ldr	r0, [pc, #80]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000faa:	f001 fb25 	bl	80025f8 <HAL_GPIO_WritePin>
		col = (col+1) % N_COLS;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	425a      	negs	r2, r3
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	bf58      	it	pl
 8000fc0:	4253      	negpl	r3, r2
 8000fc2:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000fc4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOC, k_output[col], 1);
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a11      	ldr	r2, [pc, #68]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000fd6:	f001 fb0f 	bl	80025f8 <HAL_GPIO_WritePin>
	}
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	40000000 	.word	0x40000000
 8000ff0:	20000554 	.word	0x20000554
 8000ff4:	200005e4 	.word	0x200005e4
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	40020800 	.word	0x40020800
 8001000:	08006770 	.word	0x08006770
 8001004:	2000009c 	.word	0x2000009c
 8001008:	2000059c 	.word	0x2000059c
 800100c:	2000049c 	.word	0x2000049c
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef* hspi){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(MAT_PIN);
 800101c:	2140      	movs	r1, #64	; 0x40
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_SPI_TxCpltCallback+0x20>)
 8001020:	f001 fb03 	bl	800262a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(MAT_PIN);
 8001024:	2140      	movs	r1, #64	; 0x40
 8001026:	4803      	ldr	r0, [pc, #12]	; (8001034 <HAL_SPI_TxCpltCallback+0x20>)
 8001028:	f001 faff 	bl	800262a <HAL_GPIO_TogglePin>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40020400 	.word	0x40020400

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103c:	f000 fbba 	bl	80017b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001040:	f000 f810 	bl	8001064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001044:	f000 f948 	bl	80012d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001048:	f000 f926 	bl	8001298 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800104c:	f000 f8fa 	bl	8001244 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001050:	f000 f874 	bl	800113c <MX_SPI1_Init>
  MX_TIM3_Init();
 8001054:	f000 f8a8 	bl	80011a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001058:	4801      	ldr	r0, [pc, #4]	; (8001060 <main+0x28>)
 800105a:	f002 fb9f 	bl	800379c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800105e:	e7fe      	b.n	800105e <main+0x26>
 8001060:	20000554 	.word	0x20000554

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	; 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	2230      	movs	r2, #48	; 0x30
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f004 feec 	bl	8005e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <SystemClock_Config+0xd0>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <SystemClock_Config+0xd0>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <SystemClock_Config+0xd0>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <SystemClock_Config+0xd4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <SystemClock_Config+0xd4>)
 80010b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <SystemClock_Config+0xd4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010cc:	2310      	movs	r3, #16
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010d8:	2310      	movs	r3, #16
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010e2:	2304      	movs	r3, #4
 80010e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010e6:	2307      	movs	r3, #7
 80010e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 fab6 	bl	8002660 <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010fa:	f000 f96f 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001102:	2302      	movs	r3, #2
 8001104:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2102      	movs	r1, #2
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fd18 	bl	8002b50 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001126:	f000 f959 	bl	80013dc <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	; 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001142:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <MX_SPI1_Init+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001148:	f44f 7282 	mov.w	r2, #260	; 0x104
 800114c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_SPI1_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001170:	2208      	movs	r2, #8
 8001172:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_SPI1_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001188:	220a      	movs	r2, #10
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_SPI1_Init+0x64>)
 800118e:	f001 feff 	bl	8002f90 <HAL_SPI_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001198:	f000 f920 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2000049c 	.word	0x2000049c
 80011a4:	40013000 	.word	0x40013000

080011a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_TIM3_Init+0x94>)
 80011c6:	4a1e      	ldr	r2, [pc, #120]	; (8001240 <MX_TIM3_Init+0x98>)
 80011c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_TIM3_Init+0x94>)
 80011cc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80011d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_TIM3_Init+0x94>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_TIM3_Init+0x94>)
 80011da:	2227      	movs	r2, #39	; 0x27
 80011dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_TIM3_Init+0x94>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_TIM3_Init+0x94>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ea:	4814      	ldr	r0, [pc, #80]	; (800123c <MX_TIM3_Init+0x94>)
 80011ec:	f002 fa86 	bl	80036fc <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011f6:	f000 f8f1 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	4619      	mov	r1, r3
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_TIM3_Init+0x94>)
 8001208:	f002 fc1a 	bl	8003a40 <HAL_TIM_ConfigClockSource>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001212:	f000 f8e3 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800121e:	463b      	mov	r3, r7
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	; (800123c <MX_TIM3_Init+0x94>)
 8001224:	f002 fe22 	bl	8003e6c <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800122e:	f000 f8d5 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000554 	.word	0x20000554
 8001240:	40000400 	.word	0x40000400

08001244 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <MX_USART2_UART_Init+0x50>)
 800124c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 800127c:	f002 fe78 	bl	8003f70 <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001286:	f000 f8a9 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000059c 	.word	0x2000059c
 8001294:	40004400 	.word	0x40004400

08001298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_DMA_Init+0x3c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <MX_DMA_Init+0x3c>)
 80012a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_DMA_Init+0x3c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	203b      	movs	r0, #59	; 0x3b
 80012c0:	f000 fbc5 	bl	8001a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80012c4:	203b      	movs	r0, #59	; 0x3b
 80012c6:	f000 fbde 	bl	8001a86 <HAL_NVIC_EnableIRQ>

}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <MX_GPIO_Init+0xf8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a36      	ldr	r2, [pc, #216]	; (80013d0 <MX_GPIO_Init+0xf8>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <MX_GPIO_Init+0xf8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_GPIO_Init+0xf8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <MX_GPIO_Init+0xf8>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001364:	481b      	ldr	r0, [pc, #108]	; (80013d4 <MX_GPIO_Init+0xfc>)
 8001366:	f001 f947 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2140      	movs	r1, #64	; 0x40
 800136e:	481a      	ldr	r0, [pc, #104]	; (80013d8 <MX_GPIO_Init+0x100>)
 8001370:	f001 f942 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12;
 8001374:	f243 030c 	movw	r3, #12300	; 0x300c
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4812      	ldr	r0, [pc, #72]	; (80013d4 <MX_GPIO_Init+0xfc>)
 800138a:	f000 ff99 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800138e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	480b      	ldr	r0, [pc, #44]	; (80013d4 <MX_GPIO_Init+0xfc>)
 80013a8:	f000 ff8a 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013ac:	2340      	movs	r3, #64	; 0x40
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_GPIO_Init+0x100>)
 80013c4:	f000 ff7c 	bl	80022c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020400 	.word	0x40020400

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <Error_Handler+0x8>
	...

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <HAL_MspInit+0x4c>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_MspInit+0x4c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001426:	2007      	movs	r0, #7
 8001428:	f000 fb06 	bl	8001a38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a34      	ldr	r2, [pc, #208]	; (8001528 <HAL_SPI_MspInit+0xf0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d161      	bne.n	800151e <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b33      	ldr	r3, [pc, #204]	; (800152c <HAL_SPI_MspInit+0xf4>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a32      	ldr	r2, [pc, #200]	; (800152c <HAL_SPI_MspInit+0xf4>)
 8001464:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b30      	ldr	r3, [pc, #192]	; (800152c <HAL_SPI_MspInit+0xf4>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b2c      	ldr	r3, [pc, #176]	; (800152c <HAL_SPI_MspInit+0xf4>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a2b      	ldr	r2, [pc, #172]	; (800152c <HAL_SPI_MspInit+0xf4>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b29      	ldr	r3, [pc, #164]	; (800152c <HAL_SPI_MspInit+0xf4>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001492:	23a0      	movs	r3, #160	; 0xa0
 8001494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014a2:	2305      	movs	r3, #5
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4820      	ldr	r0, [pc, #128]	; (8001530 <HAL_SPI_MspInit+0xf8>)
 80014ae:	f000 ff07 	bl	80022c0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_SPI_MspInit+0xfc>)
 80014b4:	4a20      	ldr	r2, [pc, #128]	; (8001538 <HAL_SPI_MspInit+0x100>)
 80014b6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <HAL_SPI_MspInit+0xfc>)
 80014ba:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014be:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014c0:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <HAL_SPI_MspInit+0xfc>)
 80014c2:	2240      	movs	r2, #64	; 0x40
 80014c4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_SPI_MspInit+0xfc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_SPI_MspInit+0xfc>)
 80014ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <HAL_SPI_MspInit+0xfc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_SPI_MspInit+0xfc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_SPI_MspInit+0xfc>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_SPI_MspInit+0xfc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_SPI_MspInit+0xfc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014f2:	4810      	ldr	r0, [pc, #64]	; (8001534 <HAL_SPI_MspInit+0xfc>)
 80014f4:	f000 fae2 	bl	8001abc <HAL_DMA_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80014fe:	f7ff ff6d 	bl	80013dc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <HAL_SPI_MspInit+0xfc>)
 8001506:	649a      	str	r2, [r3, #72]	; 0x48
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <HAL_SPI_MspInit+0xfc>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	2023      	movs	r0, #35	; 0x23
 8001514:	f000 fa9b 	bl	8001a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001518:	2023      	movs	r0, #35	; 0x23
 800151a:	f000 fab4 	bl	8001a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40013000 	.word	0x40013000
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	200004f4 	.word	0x200004f4
 8001538:	40026458 	.word	0x40026458

0800153c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <HAL_TIM_Base_MspInit+0x48>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d115      	bne.n	800157a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_TIM_Base_MspInit+0x4c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a0c      	ldr	r2, [pc, #48]	; (8001588 <HAL_TIM_Base_MspInit+0x4c>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_TIM_Base_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	201d      	movs	r0, #29
 8001570:	f000 fa6d 	bl	8001a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001574:	201d      	movs	r0, #29
 8001576:	f000 fa86 	bl	8001a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40000400 	.word	0x40000400
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1d      	ldr	r2, [pc, #116]	; (8001620 <HAL_UART_MspInit+0x94>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d133      	bne.n	8001616 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_UART_MspInit+0x98>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <HAL_UART_MspInit+0x98>)
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_UART_MspInit+0x98>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_UART_MspInit+0x98>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a14      	ldr	r2, [pc, #80]	; (8001624 <HAL_UART_MspInit+0x98>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_UART_MspInit+0x98>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015e6:	230c      	movs	r3, #12
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f6:	2307      	movs	r3, #7
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4809      	ldr	r0, [pc, #36]	; (8001628 <HAL_UART_MspInit+0x9c>)
 8001602:	f000 fe5d 	bl	80022c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2026      	movs	r0, #38	; 0x26
 800160c:	f000 fa1f 	bl	8001a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001610:	2026      	movs	r0, #38	; 0x26
 8001612:	f000 fa38 	bl	8001a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	; 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40004400 	.word	0x40004400
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	e7fe      	b.n	8001630 <NMI_Handler+0x4>

08001632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <HardFault_Handler+0x4>

08001638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <MemManage_Handler+0x4>

0800163e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <UsageFault_Handler+0x4>

0800164a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001678:	f000 f8ee 	bl	8001858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <TIM3_IRQHandler+0x10>)
 8001686:	f002 f8eb 	bl	8003860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000554 	.word	0x20000554

08001694 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <SPI1_IRQHandler+0x10>)
 800169a:	f001 fdb5 	bl	8003208 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000049c 	.word	0x2000049c

080016a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <USART2_IRQHandler+0x10>)
 80016ae:	f002 fd3b 	bl	8004128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000059c 	.word	0x2000059c

080016bc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <DMA2_Stream3_IRQHandler+0x10>)
 80016c2:	f000 fb93 	bl	8001dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200004f4 	.word	0x200004f4

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f004 fbae 	bl	8005e60 <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20018000 	.word	0x20018000
 8001730:	00000400 	.word	0x00000400
 8001734:	200005e8 	.word	0x200005e8
 8001738:	20000738 	.word	0x20000738

0800173c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SystemInit+0x20>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <SystemInit+0x20>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001798 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001764:	f7ff ffea 	bl	800173c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800176a:	490d      	ldr	r1, [pc, #52]	; (80017a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001780:	4c0a      	ldr	r4, [pc, #40]	; (80017ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800178e:	f004 fb6d 	bl	8005e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001792:	f7ff fc51 	bl	8001038 <main>
  bx  lr    
 8001796:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001798:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800179c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80017a4:	08006814 	.word	0x08006814
  ldr r2, =_sbss
 80017a8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80017ac:	20000738 	.word	0x20000738

080017b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC_IRQHandler>
	...

080017b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <HAL_Init+0x40>)
 80017be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_Init+0x40>)
 80017ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_Init+0x40>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 f92b 	bl	8001a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f808 	bl	80017f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fdfe 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_InitTick+0x54>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_InitTick+0x58>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f943 	bl	8001aa2 <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00e      	b.n	8001844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d80a      	bhi.n	8001842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f000 f90b 	bl	8001a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <HAL_InitTick+0x5c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000010 	.word	0x20000010
 8001850:	20000018 	.word	0x20000018
 8001854:	20000014 	.word	0x20000014

08001858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000018 	.word	0x20000018
 800187c:	200005ec 	.word	0x200005ec

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	200005ec 	.word	0x200005ec

08001898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b4:	4013      	ands	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ca:	4a04      	ldr	r2, [pc, #16]	; (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <__NVIC_GetPriorityGrouping+0x18>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	f003 0307 	and.w	r3, r3, #7
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	db0b      	blt.n	8001926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	f003 021f 	and.w	r2, r3, #31
 8001914:	4907      	ldr	r1, [pc, #28]	; (8001934 <__NVIC_EnableIRQ+0x38>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	2001      	movs	r0, #1
 800191e:	fa00 f202 	lsl.w	r2, r0, r2
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	; (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	; (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	; 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a04:	d301      	bcc.n	8001a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00f      	b.n	8001a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <SysTick_Config+0x40>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a12:	210f      	movs	r1, #15
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	f7ff ff8e 	bl	8001938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <SysTick_Config+0x40>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <SysTick_Config+0x40>)
 8001a24:	2207      	movs	r2, #7
 8001a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	e000e010 	.word	0xe000e010

08001a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff29 	bl	8001898 <__NVIC_SetPriorityGrouping>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a60:	f7ff ff3e 	bl	80018e0 <__NVIC_GetPriorityGrouping>
 8001a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	6978      	ldr	r0, [r7, #20]
 8001a6c:	f7ff ff8e 	bl	800198c <NVIC_EncodePriority>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff5d 	bl	8001938 <__NVIC_SetPriority>
}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff31 	bl	80018fc <__NVIC_EnableIRQ>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ffa2 	bl	80019f4 <SysTick_Config>
 8001ab0:	4603      	mov	r3, r0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ac8:	f7ff feda 	bl	8001880 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e099      	b.n	8001c0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af8:	e00f      	b.n	8001b1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001afa:	f7ff fec1 	bl	8001880 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d908      	bls.n	8001b1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2203      	movs	r2, #3
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e078      	b.n	8001c0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1e8      	bne.n	8001afa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <HAL_DMA_Init+0x158>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d107      	bne.n	8001b84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f023 0307 	bic.w	r3, r3, #7
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d117      	bne.n	8001bde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00e      	beq.n	8001bde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fb01 	bl	80021c8 <DMA_CheckFifoParam>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e016      	b.n	8001c0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 fab8 	bl	800215c <DMA_CalcBaseAndBitshift>
 8001bec:	4603      	mov	r3, r0
 8001bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf4:	223f      	movs	r2, #63	; 0x3f
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	f010803f 	.word	0xf010803f

08001c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_DMA_Start_IT+0x26>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e040      	b.n	8001cc0 <HAL_DMA_Start_IT+0xa8>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d12f      	bne.n	8001cb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2202      	movs	r2, #2
 8001c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 fa4a 	bl	8002100 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c70:	223f      	movs	r2, #63	; 0x3f
 8001c72:	409a      	lsls	r2, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0216 	orr.w	r2, r2, #22
 8001c86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d007      	beq.n	8001ca0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0208 	orr.w	r2, r2, #8
 8001c9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e005      	b.n	8001cbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cd6:	f7ff fdd3 	bl	8001880 <HAL_GetTick>
 8001cda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d008      	beq.n	8001cfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2280      	movs	r2, #128	; 0x80
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e052      	b.n	8001da0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0216 	bic.w	r2, r2, #22
 8001d08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d103      	bne.n	8001d2a <HAL_DMA_Abort+0x62>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d007      	beq.n	8001d3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0208 	bic.w	r2, r2, #8
 8001d38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4a:	e013      	b.n	8001d74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d4c:	f7ff fd98 	bl	8001880 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d90c      	bls.n	8001d74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2203      	movs	r2, #3
 8001d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e015      	b.n	8001da0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1e4      	bne.n	8001d4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d86:	223f      	movs	r2, #63	; 0x3f
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d004      	beq.n	8001dc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2280      	movs	r2, #128	; 0x80
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00c      	b.n	8001de0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2205      	movs	r2, #5
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0201 	bic.w	r2, r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001df8:	4b8e      	ldr	r3, [pc, #568]	; (8002034 <HAL_DMA_IRQHandler+0x248>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a8e      	ldr	r2, [pc, #568]	; (8002038 <HAL_DMA_IRQHandler+0x24c>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0a9b      	lsrs	r3, r3, #10
 8001e04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	2208      	movs	r2, #8
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d01a      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d013      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0204 	bic.w	r2, r2, #4
 8001e3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	2208      	movs	r2, #8
 8001e46:	409a      	lsls	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d012      	beq.n	8001e8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e86:	f043 0202 	orr.w	r2, r3, #2
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	2204      	movs	r2, #4
 8001e94:	409a      	lsls	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d012      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00b      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	f043 0204 	orr.w	r2, r3, #4
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec8:	2210      	movs	r2, #16
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d043      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d03c      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d018      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d108      	bne.n	8001f1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d024      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	4798      	blx	r3
 8001f1a:	e01f      	b.n	8001f5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01b      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	4798      	blx	r3
 8001f2c:	e016      	b.n	8001f5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d107      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0208 	bic.w	r2, r2, #8
 8001f4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	2220      	movs	r2, #32
 8001f62:	409a      	lsls	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 808f 	beq.w	800208c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 8087 	beq.w	800208c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	2220      	movs	r2, #32
 8001f84:	409a      	lsls	r2, r3
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	d136      	bne.n	8002004 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0216 	bic.w	r2, r2, #22
 8001fa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d103      	bne.n	8001fc6 <HAL_DMA_IRQHandler+0x1da>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0208 	bic.w	r2, r2, #8
 8001fd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fda:	223f      	movs	r2, #63	; 0x3f
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d07e      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
        }
        return;
 8002002:	e079      	b.n	80020f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d01d      	beq.n	800204e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10d      	bne.n	800203c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002024:	2b00      	cmp	r3, #0
 8002026:	d031      	beq.n	800208c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	4798      	blx	r3
 8002030:	e02c      	b.n	800208c <HAL_DMA_IRQHandler+0x2a0>
 8002032:	bf00      	nop
 8002034:	20000010 	.word	0x20000010
 8002038:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002040:	2b00      	cmp	r3, #0
 8002042:	d023      	beq.n	800208c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	4798      	blx	r3
 800204c:	e01e      	b.n	800208c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10f      	bne.n	800207c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0210 	bic.w	r2, r2, #16
 800206a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002090:	2b00      	cmp	r3, #0
 8002092:	d032      	beq.n	80020fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d022      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2205      	movs	r2, #5
 80020a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0201 	bic.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	3301      	adds	r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d307      	bcc.n	80020d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f2      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x2cc>
 80020d2:	e000      	b.n	80020d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	4798      	blx	r3
 80020f6:	e000      	b.n	80020fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80020f8:	bf00      	nop
    }
  }
}
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800211c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b40      	cmp	r3, #64	; 0x40
 800212c:	d108      	bne.n	8002140 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800213e:	e007      	b.n	8002150 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	60da      	str	r2, [r3, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	3b10      	subs	r3, #16
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <DMA_CalcBaseAndBitshift+0x64>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b03      	cmp	r3, #3
 8002188:	d909      	bls.n	800219e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	1d1a      	adds	r2, r3, #4
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	659a      	str	r2, [r3, #88]	; 0x58
 800219c:	e007      	b.n	80021ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	aaaaaaab 	.word	0xaaaaaaab
 80021c4:	08006798 	.word	0x08006798

080021c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d11f      	bne.n	8002222 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d856      	bhi.n	8002296 <DMA_CheckFifoParam+0xce>
 80021e8:	a201      	add	r2, pc, #4	; (adr r2, 80021f0 <DMA_CheckFifoParam+0x28>)
 80021ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ee:	bf00      	nop
 80021f0:	08002201 	.word	0x08002201
 80021f4:	08002213 	.word	0x08002213
 80021f8:	08002201 	.word	0x08002201
 80021fc:	08002297 	.word	0x08002297
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d046      	beq.n	800229a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002210:	e043      	b.n	800229a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800221a:	d140      	bne.n	800229e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002220:	e03d      	b.n	800229e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800222a:	d121      	bne.n	8002270 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d837      	bhi.n	80022a2 <DMA_CheckFifoParam+0xda>
 8002232:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <DMA_CheckFifoParam+0x70>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	08002249 	.word	0x08002249
 800223c:	0800224f 	.word	0x0800224f
 8002240:	08002249 	.word	0x08002249
 8002244:	08002261 	.word	0x08002261
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
      break;
 800224c:	e030      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d025      	beq.n	80022a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800225e:	e022      	b.n	80022a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002268:	d11f      	bne.n	80022aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800226e:	e01c      	b.n	80022aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d903      	bls.n	800227e <DMA_CheckFifoParam+0xb6>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d003      	beq.n	8002284 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800227c:	e018      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
      break;
 8002282:	e015      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00e      	beq.n	80022ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
      break;
 8002294:	e00b      	b.n	80022ae <DMA_CheckFifoParam+0xe6>
      break;
 8002296:	bf00      	nop
 8002298:	e00a      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;
 800229a:	bf00      	nop
 800229c:	e008      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;
 800229e:	bf00      	nop
 80022a0:	e006      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;
 80022a2:	bf00      	nop
 80022a4:	e004      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;
 80022a6:	bf00      	nop
 80022a8:	e002      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80022aa:	bf00      	nop
 80022ac:	e000      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;
 80022ae:	bf00      	nop
    }
  } 
  
  return status; 
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	e159      	b.n	8002590 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022dc:	2201      	movs	r2, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	f040 8148 	bne.w	800258a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d005      	beq.n	8002312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230e:	2b02      	cmp	r3, #2
 8002310:	d130      	bne.n	8002374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 0201 	and.w	r2, r3, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b03      	cmp	r3, #3
 800237e:	d017      	beq.n	80023b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d123      	bne.n	8002404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	08da      	lsrs	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3208      	adds	r2, #8
 80023c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	08da      	lsrs	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3208      	adds	r2, #8
 80023fe:	69b9      	ldr	r1, [r7, #24]
 8002400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0203 	and.w	r2, r3, #3
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80a2 	beq.w	800258a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b57      	ldr	r3, [pc, #348]	; (80025a8 <HAL_GPIO_Init+0x2e8>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	4a56      	ldr	r2, [pc, #344]	; (80025a8 <HAL_GPIO_Init+0x2e8>)
 8002450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002454:	6453      	str	r3, [r2, #68]	; 0x44
 8002456:	4b54      	ldr	r3, [pc, #336]	; (80025a8 <HAL_GPIO_Init+0x2e8>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002462:	4a52      	ldr	r2, [pc, #328]	; (80025ac <HAL_GPIO_Init+0x2ec>)
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	3302      	adds	r3, #2
 800246a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	220f      	movs	r2, #15
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a49      	ldr	r2, [pc, #292]	; (80025b0 <HAL_GPIO_Init+0x2f0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d019      	beq.n	80024c2 <HAL_GPIO_Init+0x202>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a48      	ldr	r2, [pc, #288]	; (80025b4 <HAL_GPIO_Init+0x2f4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_GPIO_Init+0x1fe>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a47      	ldr	r2, [pc, #284]	; (80025b8 <HAL_GPIO_Init+0x2f8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00d      	beq.n	80024ba <HAL_GPIO_Init+0x1fa>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a46      	ldr	r2, [pc, #280]	; (80025bc <HAL_GPIO_Init+0x2fc>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <HAL_GPIO_Init+0x1f6>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a45      	ldr	r2, [pc, #276]	; (80025c0 <HAL_GPIO_Init+0x300>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_GPIO_Init+0x1f2>
 80024ae:	2304      	movs	r3, #4
 80024b0:	e008      	b.n	80024c4 <HAL_GPIO_Init+0x204>
 80024b2:	2307      	movs	r3, #7
 80024b4:	e006      	b.n	80024c4 <HAL_GPIO_Init+0x204>
 80024b6:	2303      	movs	r3, #3
 80024b8:	e004      	b.n	80024c4 <HAL_GPIO_Init+0x204>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e002      	b.n	80024c4 <HAL_GPIO_Init+0x204>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <HAL_GPIO_Init+0x204>
 80024c2:	2300      	movs	r3, #0
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	f002 0203 	and.w	r2, r2, #3
 80024ca:	0092      	lsls	r2, r2, #2
 80024cc:	4093      	lsls	r3, r2
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024d4:	4935      	ldr	r1, [pc, #212]	; (80025ac <HAL_GPIO_Init+0x2ec>)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024e2:	4b38      	ldr	r3, [pc, #224]	; (80025c4 <HAL_GPIO_Init+0x304>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002506:	4a2f      	ldr	r2, [pc, #188]	; (80025c4 <HAL_GPIO_Init+0x304>)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800250c:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_GPIO_Init+0x304>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002530:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <HAL_GPIO_Init+0x304>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002536:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <HAL_GPIO_Init+0x304>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800255a:	4a1a      	ldr	r2, [pc, #104]	; (80025c4 <HAL_GPIO_Init+0x304>)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_GPIO_Init+0x304>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002584:	4a0f      	ldr	r2, [pc, #60]	; (80025c4 <HAL_GPIO_Init+0x304>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3301      	adds	r3, #1
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	2b0f      	cmp	r3, #15
 8002594:	f67f aea2 	bls.w	80022dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3724      	adds	r7, #36	; 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40013800 	.word	0x40013800
 80025b0:	40020000 	.word	0x40020000
 80025b4:	40020400 	.word	0x40020400
 80025b8:	40020800 	.word	0x40020800
 80025bc:	40020c00 	.word	0x40020c00
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40013c00 	.word	0x40013c00

080025c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e001      	b.n	80025ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002614:	e003      	b.n	800261e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	041a      	lsls	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800263c:	887a      	ldrh	r2, [r7, #2]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4013      	ands	r3, r2
 8002642:	041a      	lsls	r2, r3, #16
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	43d9      	mvns	r1, r3
 8002648:	887b      	ldrh	r3, [r7, #2]
 800264a:	400b      	ands	r3, r1
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	619a      	str	r2, [r3, #24]
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e267      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d075      	beq.n	800276a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800267e:	4b88      	ldr	r3, [pc, #544]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b04      	cmp	r3, #4
 8002688:	d00c      	beq.n	80026a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800268a:	4b85      	ldr	r3, [pc, #532]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002692:	2b08      	cmp	r3, #8
 8002694:	d112      	bne.n	80026bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002696:	4b82      	ldr	r3, [pc, #520]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026a2:	d10b      	bne.n	80026bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	4b7e      	ldr	r3, [pc, #504]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d05b      	beq.n	8002768 <HAL_RCC_OscConfig+0x108>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d157      	bne.n	8002768 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e242      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c4:	d106      	bne.n	80026d4 <HAL_RCC_OscConfig+0x74>
 80026c6:	4b76      	ldr	r3, [pc, #472]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a75      	ldr	r2, [pc, #468]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e01d      	b.n	8002710 <HAL_RCC_OscConfig+0xb0>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x98>
 80026de:	4b70      	ldr	r3, [pc, #448]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a6f      	ldr	r2, [pc, #444]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b6d      	ldr	r3, [pc, #436]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a6c      	ldr	r2, [pc, #432]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e00b      	b.n	8002710 <HAL_RCC_OscConfig+0xb0>
 80026f8:	4b69      	ldr	r3, [pc, #420]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a68      	ldr	r2, [pc, #416]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	4b66      	ldr	r3, [pc, #408]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a65      	ldr	r2, [pc, #404]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 800270a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7ff f8b2 	bl	8001880 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002720:	f7ff f8ae 	bl	8001880 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	; 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e207      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	4b5b      	ldr	r3, [pc, #364]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0xc0>
 800273e:	e014      	b.n	800276a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7ff f89e 	bl	8001880 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002748:	f7ff f89a 	bl	8001880 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e1f3      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	4b51      	ldr	r3, [pc, #324]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0xe8>
 8002766:	e000      	b.n	800276a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d063      	beq.n	800283e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002776:	4b4a      	ldr	r3, [pc, #296]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002782:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800278a:	2b08      	cmp	r3, #8
 800278c:	d11c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278e:	4b44      	ldr	r3, [pc, #272]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d116      	bne.n	80027c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279a:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_RCC_OscConfig+0x152>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e1c7      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b2:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4937      	ldr	r1, [pc, #220]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	e03a      	b.n	800283e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d0:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <HAL_RCC_OscConfig+0x244>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7ff f853 	bl	8001880 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027de:	f7ff f84f 	bl	8001880 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e1a8      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f0:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fc:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4925      	ldr	r1, [pc, #148]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 800280c:	4313      	orrs	r3, r2
 800280e:	600b      	str	r3, [r1, #0]
 8002810:	e015      	b.n	800283e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002812:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_RCC_OscConfig+0x244>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7ff f832 	bl	8001880 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002820:	f7ff f82e 	bl	8001880 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e187      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002832:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d036      	beq.n	80028b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d016      	beq.n	8002880 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <HAL_RCC_OscConfig+0x248>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7ff f812 	bl	8001880 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002860:	f7ff f80e 	bl	8001880 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e167      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x200>
 800287e:	e01b      	b.n	80028b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_RCC_OscConfig+0x248>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002886:	f7fe fffb 	bl	8001880 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	e00e      	b.n	80028ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288e:	f7fe fff7 	bl	8001880 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d907      	bls.n	80028ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e150      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
 80028a0:	40023800 	.word	0x40023800
 80028a4:	42470000 	.word	0x42470000
 80028a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ac:	4b88      	ldr	r3, [pc, #544]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ea      	bne.n	800288e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8097 	beq.w	80029f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c6:	2300      	movs	r3, #0
 80028c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ca:	4b81      	ldr	r3, [pc, #516]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10f      	bne.n	80028f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	4b7d      	ldr	r3, [pc, #500]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a7c      	ldr	r2, [pc, #496]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b7a      	ldr	r3, [pc, #488]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f2:	2301      	movs	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f6:	4b77      	ldr	r3, [pc, #476]	; (8002ad4 <HAL_RCC_OscConfig+0x474>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d118      	bne.n	8002934 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002902:	4b74      	ldr	r3, [pc, #464]	; (8002ad4 <HAL_RCC_OscConfig+0x474>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a73      	ldr	r2, [pc, #460]	; (8002ad4 <HAL_RCC_OscConfig+0x474>)
 8002908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290e:	f7fe ffb7 	bl	8001880 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002916:	f7fe ffb3 	bl	8001880 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e10c      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <HAL_RCC_OscConfig+0x474>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x2ea>
 800293c:	4b64      	ldr	r3, [pc, #400]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	4a63      	ldr	r2, [pc, #396]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6713      	str	r3, [r2, #112]	; 0x70
 8002948:	e01c      	b.n	8002984 <HAL_RCC_OscConfig+0x324>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b05      	cmp	r3, #5
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x30c>
 8002952:	4b5f      	ldr	r3, [pc, #380]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	4a5e      	ldr	r2, [pc, #376]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	6713      	str	r3, [r2, #112]	; 0x70
 800295e:	4b5c      	ldr	r3, [pc, #368]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002962:	4a5b      	ldr	r2, [pc, #364]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6713      	str	r3, [r2, #112]	; 0x70
 800296a:	e00b      	b.n	8002984 <HAL_RCC_OscConfig+0x324>
 800296c:	4b58      	ldr	r3, [pc, #352]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	4a57      	ldr	r2, [pc, #348]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	6713      	str	r3, [r2, #112]	; 0x70
 8002978:	4b55      	ldr	r3, [pc, #340]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	4a54      	ldr	r2, [pc, #336]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800297e:	f023 0304 	bic.w	r3, r3, #4
 8002982:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d015      	beq.n	80029b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298c:	f7fe ff78 	bl	8001880 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002992:	e00a      	b.n	80029aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002994:	f7fe ff74 	bl	8001880 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e0cb      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029aa:	4b49      	ldr	r3, [pc, #292]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0ee      	beq.n	8002994 <HAL_RCC_OscConfig+0x334>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b8:	f7fe ff62 	bl	8001880 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f7fe ff5e 	bl	8001880 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0b5      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d6:	4b3e      	ldr	r3, [pc, #248]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1ee      	bne.n	80029c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d105      	bne.n	80029f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e8:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	4a38      	ldr	r2, [pc, #224]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80a1 	beq.w	8002b40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029fe:	4b34      	ldr	r3, [pc, #208]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d05c      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d141      	bne.n	8002a96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a12:	4b31      	ldr	r3, [pc, #196]	; (8002ad8 <HAL_RCC_OscConfig+0x478>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe ff32 	bl	8001880 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a20:	f7fe ff2e 	bl	8001880 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e087      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	4b27      	ldr	r3, [pc, #156]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	019b      	lsls	r3, r3, #6
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	3b01      	subs	r3, #1
 8002a58:	041b      	lsls	r3, r3, #16
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	061b      	lsls	r3, r3, #24
 8002a62:	491b      	ldr	r1, [pc, #108]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a68:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <HAL_RCC_OscConfig+0x478>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe ff07 	bl	8001880 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a76:	f7fe ff03 	bl	8001880 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e05c      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x416>
 8002a94:	e054      	b.n	8002b40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <HAL_RCC_OscConfig+0x478>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fef0 	bl	8001880 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7fe feec 	bl	8001880 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e045      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x444>
 8002ac2:	e03d      	b.n	8002b40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e038      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002adc:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_RCC_OscConfig+0x4ec>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d028      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d121      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d11a      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d111      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	3b01      	subs	r3, #1
 8002b26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800

08002b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0cc      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b64:	4b68      	ldr	r3, [pc, #416]	; (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d90c      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b65      	ldr	r3, [pc, #404]	; (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0b8      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba4:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bbc:	4b53      	ldr	r3, [pc, #332]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4a52      	ldr	r2, [pc, #328]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b50      	ldr	r3, [pc, #320]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	494d      	ldr	r1, [pc, #308]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d044      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d119      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e07f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d003      	beq.n	8002c0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e06f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1e:	4b3b      	ldr	r3, [pc, #236]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e067      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	4b37      	ldr	r3, [pc, #220]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4934      	ldr	r1, [pc, #208]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c40:	f7fe fe1e 	bl	8001880 <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c48:	f7fe fe1a 	bl	8001880 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e04f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 020c 	and.w	r2, r3, #12
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1eb      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d20c      	bcs.n	8002c98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b22      	ldr	r3, [pc, #136]	; (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e032      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4916      	ldr	r1, [pc, #88]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	490e      	ldr	r1, [pc, #56]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cd6:	f000 f821 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	490a      	ldr	r1, [pc, #40]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	5ccb      	ldrb	r3, [r1, r3]
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fd7e 	bl	80017f8 <HAL_InitTick>

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023c00 	.word	0x40023c00
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	08006780 	.word	0x08006780
 8002d14:	20000010 	.word	0x20000010
 8002d18:	20000014 	.word	0x20000014

08002d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d20:	b094      	sub	sp, #80	; 0x50
 8002d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	647b      	str	r3, [r7, #68]	; 0x44
 8002d28:	2300      	movs	r3, #0
 8002d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d34:	4b79      	ldr	r3, [pc, #484]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d00d      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0x40>
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	f200 80e1 	bhi.w	8002f08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x34>
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d4e:	e0db      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d50:	4b73      	ldr	r3, [pc, #460]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d54:	e0db      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d56:	4b73      	ldr	r3, [pc, #460]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d5a:	e0d8      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d5c:	4b6f      	ldr	r3, [pc, #444]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d66:	4b6d      	ldr	r3, [pc, #436]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d063      	beq.n	8002e3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d72:	4b6a      	ldr	r3, [pc, #424]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	099b      	lsrs	r3, r3, #6
 8002d78:	2200      	movs	r2, #0
 8002d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
 8002d86:	2300      	movs	r3, #0
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
 8002d8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d8e:	4622      	mov	r2, r4
 8002d90:	462b      	mov	r3, r5
 8002d92:	f04f 0000 	mov.w	r0, #0
 8002d96:	f04f 0100 	mov.w	r1, #0
 8002d9a:	0159      	lsls	r1, r3, #5
 8002d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da0:	0150      	lsls	r0, r2, #5
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4621      	mov	r1, r4
 8002da8:	1a51      	subs	r1, r2, r1
 8002daa:	6139      	str	r1, [r7, #16]
 8002dac:	4629      	mov	r1, r5
 8002dae:	eb63 0301 	sbc.w	r3, r3, r1
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dc0:	4659      	mov	r1, fp
 8002dc2:	018b      	lsls	r3, r1, #6
 8002dc4:	4651      	mov	r1, sl
 8002dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dca:	4651      	mov	r1, sl
 8002dcc:	018a      	lsls	r2, r1, #6
 8002dce:	4651      	mov	r1, sl
 8002dd0:	ebb2 0801 	subs.w	r8, r2, r1
 8002dd4:	4659      	mov	r1, fp
 8002dd6:	eb63 0901 	sbc.w	r9, r3, r1
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dee:	4690      	mov	r8, r2
 8002df0:	4699      	mov	r9, r3
 8002df2:	4623      	mov	r3, r4
 8002df4:	eb18 0303 	adds.w	r3, r8, r3
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	462b      	mov	r3, r5
 8002dfc:	eb49 0303 	adc.w	r3, r9, r3
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e0e:	4629      	mov	r1, r5
 8002e10:	024b      	lsls	r3, r1, #9
 8002e12:	4621      	mov	r1, r4
 8002e14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e18:	4621      	mov	r1, r4
 8002e1a:	024a      	lsls	r2, r1, #9
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e22:	2200      	movs	r2, #0
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e2c:	f7fd febc 	bl	8000ba8 <__aeabi_uldivmod>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4613      	mov	r3, r2
 8002e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e38:	e058      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3a:	4b38      	ldr	r3, [pc, #224]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	2200      	movs	r2, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	4611      	mov	r1, r2
 8002e46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e4a:	623b      	str	r3, [r7, #32]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e54:	4642      	mov	r2, r8
 8002e56:	464b      	mov	r3, r9
 8002e58:	f04f 0000 	mov.w	r0, #0
 8002e5c:	f04f 0100 	mov.w	r1, #0
 8002e60:	0159      	lsls	r1, r3, #5
 8002e62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e66:	0150      	lsls	r0, r2, #5
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4641      	mov	r1, r8
 8002e6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e72:	4649      	mov	r1, r9
 8002e74:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e8c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e90:	eb63 050b 	sbc.w	r5, r3, fp
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	00eb      	lsls	r3, r5, #3
 8002e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea2:	00e2      	lsls	r2, r4, #3
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	461d      	mov	r5, r3
 8002ea8:	4643      	mov	r3, r8
 8002eaa:	18e3      	adds	r3, r4, r3
 8002eac:	603b      	str	r3, [r7, #0]
 8002eae:	464b      	mov	r3, r9
 8002eb0:	eb45 0303 	adc.w	r3, r5, r3
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	028b      	lsls	r3, r1, #10
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ecc:	4621      	mov	r1, r4
 8002ece:	028a      	lsls	r2, r1, #10
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	61fa      	str	r2, [r7, #28]
 8002edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ee0:	f7fd fe62 	bl	8000ba8 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4613      	mov	r3, r2
 8002eea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002efc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f06:	e002      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3750      	adds	r7, #80	; 0x50
 8002f14:	46bd      	mov	sp, r7
 8002f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	00f42400 	.word	0x00f42400
 8002f24:	007a1200 	.word	0x007a1200

08002f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000010 	.word	0x20000010

08002f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f44:	f7ff fff0 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	0a9b      	lsrs	r3, r3, #10
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4903      	ldr	r1, [pc, #12]	; (8002f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	08006790 	.word	0x08006790

08002f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f6c:	f7ff ffdc 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	0b5b      	lsrs	r3, r3, #13
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4903      	ldr	r1, [pc, #12]	; (8002f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	08006790 	.word	0x08006790

08002f90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e07b      	b.n	800309a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d108      	bne.n	8002fbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fb2:	d009      	beq.n	8002fc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	61da      	str	r2, [r3, #28]
 8002fba:	e005      	b.n	8002fc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fe fa28 	bl	8001438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ffe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304c:	ea42 0103 	orr.w	r1, r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	f003 0104 	and.w	r1, r3, #4
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	f003 0210 	and.w	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69da      	ldr	r2, [r3, #28]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003088:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	4613      	mov	r3, r2
 80030b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_SPI_Transmit_DMA+0x20>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e097      	b.n	80031f4 <HAL_SPI_Transmit_DMA+0x150>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d002      	beq.n	80030de <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
 80030da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030dc:	e085      	b.n	80031ea <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_SPI_Transmit_DMA+0x46>
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030ee:	e07c      	b.n	80031ea <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2203      	movs	r2, #3
 80030f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	88fa      	ldrh	r2, [r7, #6]
 8003108:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	88fa      	ldrh	r2, [r7, #6]
 800310e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003136:	d10f      	bne.n	8003158 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003146:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003156:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315c:	4a27      	ldr	r2, [pc, #156]	; (80031fc <HAL_SPI_Transmit_DMA+0x158>)
 800315e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003164:	4a26      	ldr	r2, [pc, #152]	; (8003200 <HAL_SPI_Transmit_DMA+0x15c>)
 8003166:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316c:	4a25      	ldr	r2, [pc, #148]	; (8003204 <HAL_SPI_Transmit_DMA+0x160>)
 800316e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003174:	2200      	movs	r2, #0
 8003176:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	4619      	mov	r1, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	330c      	adds	r3, #12
 8003188:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800318e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003190:	f7fe fd42 	bl	8001c18 <HAL_DMA_Start_IT>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	f043 0210 	orr.w	r2, r3, #16
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]

    goto error;
 80031aa:	e01e      	b.n	80031ea <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b40      	cmp	r3, #64	; 0x40
 80031b8:	d007      	beq.n	80031ca <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031c8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0220 	orr.w	r2, r2, #32
 80031d8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0202 	orr.w	r2, r2, #2
 80031e8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	080034c1 	.word	0x080034c1
 8003200:	08003419 	.word	0x08003419
 8003204:	080034dd 	.word	0x080034dd

08003208 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10e      	bne.n	8003248 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003230:	2b00      	cmp	r3, #0
 8003232:	d009      	beq.n	8003248 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d004      	beq.n	8003248 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	4798      	blx	r3
    return;
 8003246:	e0ce      	b.n	80033e6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_SPI_IRQHandler+0x5e>
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
    return;
 8003264:	e0bf      	b.n	80033e6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10a      	bne.n	8003286 <HAL_SPI_IRQHandler+0x7e>
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80b0 	beq.w	80033e6 <HAL_SPI_IRQHandler+0x1de>
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80aa 	beq.w	80033e6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	d023      	beq.n	80032e4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d011      	beq.n	80032cc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ac:	f043 0204 	orr.w	r2, r3, #4
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	e00b      	b.n	80032e4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032cc:	2300      	movs	r3, #0
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	693b      	ldr	r3, [r7, #16]
        return;
 80032e2:	e080      	b.n	80033e6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d014      	beq.n	8003318 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f043 0201 	orr.w	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00c      	beq.n	800333c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003326:	f043 0208 	orr.w	r2, r3, #8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	2b00      	cmp	r3, #0
 8003342:	d04f      	beq.n	80033e4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003352:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d104      	bne.n	8003370 <HAL_SPI_IRQHandler+0x168>
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d034      	beq.n	80033da <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0203 	bic.w	r2, r2, #3
 800337e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003384:	2b00      	cmp	r3, #0
 8003386:	d011      	beq.n	80033ac <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338c:	4a17      	ldr	r2, [pc, #92]	; (80033ec <HAL_SPI_IRQHandler+0x1e4>)
 800338e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003394:	4618      	mov	r0, r3
 8003396:	f7fe fd07 	bl	8001da8 <HAL_DMA_Abort_IT>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d016      	beq.n	80033e2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b8:	4a0c      	ldr	r2, [pc, #48]	; (80033ec <HAL_SPI_IRQHandler+0x1e4>)
 80033ba:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fcf1 	bl	8001da8 <HAL_DMA_Abort_IT>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80033d8:	e003      	b.n	80033e2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f812 	bl	8003404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80033e0:	e000      	b.n	80033e4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80033e2:	bf00      	nop
    return;
 80033e4:	bf00      	nop
  }
}
 80033e6:	3720      	adds	r7, #32
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	0800351d 	.word	0x0800351d

080033f0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003426:	f7fe fa2b 	bl	8001880 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800343a:	d03b      	beq.n	80034b4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0220 	bic.w	r2, r2, #32
 800344a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0202 	bic.w	r2, r2, #2
 800345a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	2164      	movs	r1, #100	; 0x64
 8003460:	6978      	ldr	r0, [r7, #20]
 8003462:	f000 f8f7 	bl	8003654 <SPI_EndRxTxTransaction>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003470:	f043 0220 	orr.w	r2, r3, #32
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10a      	bne.n	8003496 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2200      	movs	r2, #0
 800349a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80034ac:	6978      	ldr	r0, [r7, #20]
 80034ae:	f7ff ffa9 	bl	8003404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80034b2:	e002      	b.n	80034ba <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80034b4:	6978      	ldr	r0, [r7, #20]
 80034b6:	f7fd fdad 	bl	8001014 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f7ff ff8e 	bl	80033f0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0203 	bic.w	r2, r2, #3
 80034f8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	f043 0210 	orr.w	r2, r3, #16
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f7ff ff78 	bl	8003404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff ff64 	bl	8003404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003554:	f7fe f994 	bl	8001880 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	4413      	add	r3, r2
 8003562:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003564:	f7fe f98c 	bl	8001880 <HAL_GetTick>
 8003568:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800356a:	4b39      	ldr	r3, [pc, #228]	; (8003650 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	015b      	lsls	r3, r3, #5
 8003570:	0d1b      	lsrs	r3, r3, #20
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	fb02 f303 	mul.w	r3, r2, r3
 8003578:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800357a:	e054      	b.n	8003626 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d050      	beq.n	8003626 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003584:	f7fe f97c 	bl	8001880 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	429a      	cmp	r2, r3
 8003592:	d902      	bls.n	800359a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d13d      	bne.n	8003616 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035b2:	d111      	bne.n	80035d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035bc:	d004      	beq.n	80035c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c6:	d107      	bne.n	80035d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e0:	d10f      	bne.n	8003602 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003600:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e017      	b.n	8003646 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	3b01      	subs	r3, #1
 8003624:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4013      	ands	r3, r2
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	429a      	cmp	r2, r3
 8003634:	bf0c      	ite	eq
 8003636:	2301      	moveq	r3, #1
 8003638:	2300      	movne	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	429a      	cmp	r2, r3
 8003642:	d19b      	bne.n	800357c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20000010 	.word	0x20000010

08003654 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2201      	movs	r2, #1
 8003668:	2102      	movs	r1, #2
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f7ff ff6a 	bl	8003544 <SPI_WaitFlagStateUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	f043 0220 	orr.w	r2, r3, #32
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e032      	b.n	80036ec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003686:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <SPI_EndRxTxTransaction+0xa0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <SPI_EndRxTxTransaction+0xa4>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	0d5b      	lsrs	r3, r3, #21
 8003692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036a4:	d112      	bne.n	80036cc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2200      	movs	r2, #0
 80036ae:	2180      	movs	r1, #128	; 0x80
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f7ff ff47 	bl	8003544 <SPI_WaitFlagStateUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d016      	beq.n	80036ea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	f043 0220 	orr.w	r2, r3, #32
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e00f      	b.n	80036ec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e2:	2b80      	cmp	r3, #128	; 0x80
 80036e4:	d0f2      	beq.n	80036cc <SPI_EndRxTxTransaction+0x78>
 80036e6:	e000      	b.n	80036ea <SPI_EndRxTxTransaction+0x96>
        break;
 80036e8:	bf00      	nop
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20000010 	.word	0x20000010
 80036f8:	165e9f81 	.word	0x165e9f81

080036fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e041      	b.n	8003792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fd ff0a 	bl	800153c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	4619      	mov	r1, r3
 800373a:	4610      	mov	r0, r2
 800373c:	f000 fa70 	bl	8003c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d001      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e044      	b.n	800383e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1e      	ldr	r2, [pc, #120]	; (800384c <HAL_TIM_Base_Start_IT+0xb0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d018      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x6c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037de:	d013      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x6c>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1a      	ldr	r2, [pc, #104]	; (8003850 <HAL_TIM_Base_Start_IT+0xb4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00e      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x6c>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a19      	ldr	r2, [pc, #100]	; (8003854 <HAL_TIM_Base_Start_IT+0xb8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d009      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x6c>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a17      	ldr	r2, [pc, #92]	; (8003858 <HAL_TIM_Base_Start_IT+0xbc>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x6c>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a16      	ldr	r2, [pc, #88]	; (800385c <HAL_TIM_Base_Start_IT+0xc0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d111      	bne.n	800382c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b06      	cmp	r3, #6
 8003818:	d010      	beq.n	800383c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0201 	orr.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382a:	e007      	b.n	800383c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40010000 	.word	0x40010000
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40014000 	.word	0x40014000

08003860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d020      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01b      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0202 	mvn.w	r2, #2
 8003894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f999 	bl	8003be2 <HAL_TIM_IC_CaptureCallback>
 80038b0:	e005      	b.n	80038be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f98b 	bl	8003bce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f99c 	bl	8003bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d020      	beq.n	8003910 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01b      	beq.n	8003910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0204 	mvn.w	r2, #4
 80038e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2202      	movs	r2, #2
 80038e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f973 	bl	8003be2 <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f965 	bl	8003bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f976 	bl	8003bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d020      	beq.n	800395c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01b      	beq.n	800395c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0208 	mvn.w	r2, #8
 800392c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2204      	movs	r2, #4
 8003932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f94d 	bl	8003be2 <HAL_TIM_IC_CaptureCallback>
 8003948:	e005      	b.n	8003956 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f93f 	bl	8003bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f950 	bl	8003bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d020      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01b      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0210 	mvn.w	r2, #16
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2208      	movs	r2, #8
 800397e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f927 	bl	8003be2 <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f919 	bl	8003bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f92a 	bl	8003bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00c      	beq.n	80039cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0201 	mvn.w	r2, #1
 80039c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd fa6e 	bl	8000ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00c      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fab6 	bl	8003f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00c      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f8fb 	bl	8003c0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00c      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d007      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0220 	mvn.w	r2, #32
 8003a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fa88 	bl	8003f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_TIM_ConfigClockSource+0x1c>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e0b4      	b.n	8003bc6 <HAL_TIM_ConfigClockSource+0x186>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a94:	d03e      	beq.n	8003b14 <HAL_TIM_ConfigClockSource+0xd4>
 8003a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9a:	f200 8087 	bhi.w	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa2:	f000 8086 	beq.w	8003bb2 <HAL_TIM_ConfigClockSource+0x172>
 8003aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aaa:	d87f      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003aac:	2b70      	cmp	r3, #112	; 0x70
 8003aae:	d01a      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0xa6>
 8003ab0:	2b70      	cmp	r3, #112	; 0x70
 8003ab2:	d87b      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003ab4:	2b60      	cmp	r3, #96	; 0x60
 8003ab6:	d050      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x11a>
 8003ab8:	2b60      	cmp	r3, #96	; 0x60
 8003aba:	d877      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003abc:	2b50      	cmp	r3, #80	; 0x50
 8003abe:	d03c      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0xfa>
 8003ac0:	2b50      	cmp	r3, #80	; 0x50
 8003ac2:	d873      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d058      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0x13a>
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d86f      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003acc:	2b30      	cmp	r3, #48	; 0x30
 8003ace:	d064      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	d86b      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d060      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d867      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d05c      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d05a      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ae4:	e062      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003af6:	f000 f999 	bl	8003e2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	609a      	str	r2, [r3, #8]
      break;
 8003b12:	e04f      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b24:	f000 f982 	bl	8003e2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b36:	609a      	str	r2, [r3, #8]
      break;
 8003b38:	e03c      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b46:	461a      	mov	r2, r3
 8003b48:	f000 f8f6 	bl	8003d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2150      	movs	r1, #80	; 0x50
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 f94f 	bl	8003df6 <TIM_ITRx_SetConfig>
      break;
 8003b58:	e02c      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b66:	461a      	mov	r2, r3
 8003b68:	f000 f915 	bl	8003d96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2160      	movs	r1, #96	; 0x60
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f93f 	bl	8003df6 <TIM_ITRx_SetConfig>
      break;
 8003b78:	e01c      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b86:	461a      	mov	r2, r3
 8003b88:	f000 f8d6 	bl	8003d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2140      	movs	r1, #64	; 0x40
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f92f 	bl	8003df6 <TIM_ITRx_SetConfig>
      break;
 8003b98:	e00c      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	f000 f926 	bl	8003df6 <TIM_ITRx_SetConfig>
      break;
 8003baa:	e003      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb0:	e000      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a3a      	ldr	r2, [pc, #232]	; (8003d1c <TIM_Base_SetConfig+0xfc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00f      	beq.n	8003c58 <TIM_Base_SetConfig+0x38>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3e:	d00b      	beq.n	8003c58 <TIM_Base_SetConfig+0x38>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a37      	ldr	r2, [pc, #220]	; (8003d20 <TIM_Base_SetConfig+0x100>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d007      	beq.n	8003c58 <TIM_Base_SetConfig+0x38>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a36      	ldr	r2, [pc, #216]	; (8003d24 <TIM_Base_SetConfig+0x104>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d003      	beq.n	8003c58 <TIM_Base_SetConfig+0x38>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a35      	ldr	r2, [pc, #212]	; (8003d28 <TIM_Base_SetConfig+0x108>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d108      	bne.n	8003c6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a2b      	ldr	r2, [pc, #172]	; (8003d1c <TIM_Base_SetConfig+0xfc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01b      	beq.n	8003caa <TIM_Base_SetConfig+0x8a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c78:	d017      	beq.n	8003caa <TIM_Base_SetConfig+0x8a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a28      	ldr	r2, [pc, #160]	; (8003d20 <TIM_Base_SetConfig+0x100>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <TIM_Base_SetConfig+0x8a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a27      	ldr	r2, [pc, #156]	; (8003d24 <TIM_Base_SetConfig+0x104>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00f      	beq.n	8003caa <TIM_Base_SetConfig+0x8a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a26      	ldr	r2, [pc, #152]	; (8003d28 <TIM_Base_SetConfig+0x108>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00b      	beq.n	8003caa <TIM_Base_SetConfig+0x8a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a25      	ldr	r2, [pc, #148]	; (8003d2c <TIM_Base_SetConfig+0x10c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d007      	beq.n	8003caa <TIM_Base_SetConfig+0x8a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a24      	ldr	r2, [pc, #144]	; (8003d30 <TIM_Base_SetConfig+0x110>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d003      	beq.n	8003caa <TIM_Base_SetConfig+0x8a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <TIM_Base_SetConfig+0x114>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d108      	bne.n	8003cbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a0e      	ldr	r2, [pc, #56]	; (8003d1c <TIM_Base_SetConfig+0xfc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d103      	bne.n	8003cf0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d105      	bne.n	8003d0e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f023 0201 	bic.w	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	611a      	str	r2, [r3, #16]
  }
}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	40000400 	.word	0x40000400
 8003d24:	40000800 	.word	0x40000800
 8003d28:	40000c00 	.word	0x40000c00
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	40014400 	.word	0x40014400
 8003d34:	40014800 	.word	0x40014800

08003d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f023 0201 	bic.w	r2, r3, #1
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f023 030a 	bic.w	r3, r3, #10
 8003d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	621a      	str	r2, [r3, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b087      	sub	sp, #28
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f023 0210 	bic.w	r2, r3, #16
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	031b      	lsls	r3, r3, #12
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b085      	sub	sp, #20
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f043 0307 	orr.w	r3, r3, #7
 8003e18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	609a      	str	r2, [r3, #8]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	021a      	lsls	r2, r3, #8
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	609a      	str	r2, [r3, #8]
}
 8003e60:	bf00      	nop
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e050      	b.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d018      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed0:	d013      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a18      	ldr	r2, [pc, #96]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00e      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a16      	ldr	r2, [pc, #88]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d009      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d004      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a13      	ldr	r2, [pc, #76]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d10c      	bne.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40000400 	.word	0x40000400
 8003f3c:	40000800 	.word	0x40000800
 8003f40:	40000c00 	.word	0x40000c00
 8003f44:	40014000 	.word	0x40014000

08003f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e042      	b.n	8004008 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd faf8 	bl	800158c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2224      	movs	r2, #36	; 0x24
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fd69 	bl	8004a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	; 0x28
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b20      	cmp	r3, #32
 800402e:	d175      	bne.n	800411c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_UART_Transmit+0x2c>
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e06e      	b.n	800411e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2221      	movs	r2, #33	; 0x21
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800404e:	f7fd fc17 	bl	8001880 <HAL_GetTick>
 8004052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	88fa      	ldrh	r2, [r7, #6]
 8004058:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	88fa      	ldrh	r2, [r7, #6]
 800405e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004068:	d108      	bne.n	800407c <HAL_UART_Transmit+0x6c>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d104      	bne.n	800407c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	e003      	b.n	8004084 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004080:	2300      	movs	r3, #0
 8004082:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004084:	e02e      	b.n	80040e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2200      	movs	r2, #0
 800408e:	2180      	movs	r1, #128	; 0x80
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fb05 	bl	80046a0 <UART_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e03a      	b.n	800411e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10b      	bne.n	80040c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	3302      	adds	r3, #2
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	e007      	b.n	80040d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	781a      	ldrb	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	3301      	adds	r3, #1
 80040d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1cb      	bne.n	8004086 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	2140      	movs	r1, #64	; 0x40
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 fad1 	bl	80046a0 <UART_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e006      	b.n	800411e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	e000      	b.n	800411e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b0ba      	sub	sp, #232	; 0xe8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800414e:	2300      	movs	r3, #0
 8004150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004154:	2300      	movs	r3, #0
 8004156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800415a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10f      	bne.n	800418e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800416e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <HAL_UART_IRQHandler+0x66>
 800417a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fbc2 	bl	8004910 <UART_Receive_IT>
      return;
 800418c:	e25b      	b.n	8004646 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800418e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80de 	beq.w	8004354 <HAL_UART_IRQHandler+0x22c>
 8004198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80d1 	beq.w	8004354 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00b      	beq.n	80041d6 <HAL_UART_IRQHandler+0xae>
 80041be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	f043 0201 	orr.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <HAL_UART_IRQHandler+0xd2>
 80041e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	f043 0202 	orr.w	r2, r3, #2
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00b      	beq.n	800421e <HAL_UART_IRQHandler+0xf6>
 8004206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f043 0204 	orr.w	r2, r3, #4
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800421e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d011      	beq.n	800424e <HAL_UART_IRQHandler+0x126>
 800422a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d105      	bne.n	8004242 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	f043 0208 	orr.w	r2, r3, #8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 81f2 	beq.w	800463c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <HAL_UART_IRQHandler+0x14e>
 8004264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fb4d 	bl	8004910 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	bf0c      	ite	eq
 8004284:	2301      	moveq	r3, #1
 8004286:	2300      	movne	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <HAL_UART_IRQHandler+0x17a>
 800429a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d04f      	beq.n	8004342 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fa55 	bl	8004752 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b2:	2b40      	cmp	r3, #64	; 0x40
 80042b4:	d141      	bne.n	800433a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3314      	adds	r3, #20
 80042bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3314      	adds	r3, #20
 80042de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1d9      	bne.n	80042b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004306:	2b00      	cmp	r3, #0
 8004308:	d013      	beq.n	8004332 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430e:	4a7e      	ldr	r2, [pc, #504]	; (8004508 <HAL_UART_IRQHandler+0x3e0>)
 8004310:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004316:	4618      	mov	r0, r3
 8004318:	f7fd fd46 	bl	8001da8 <HAL_DMA_Abort_IT>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d016      	beq.n	8004350 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800432c:	4610      	mov	r0, r2
 800432e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004330:	e00e      	b.n	8004350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f99e 	bl	8004674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	e00a      	b.n	8004350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f99a 	bl	8004674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004340:	e006      	b.n	8004350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f996 	bl	8004674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800434e:	e175      	b.n	800463c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004350:	bf00      	nop
    return;
 8004352:	e173      	b.n	800463c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	2b01      	cmp	r3, #1
 800435a:	f040 814f 	bne.w	80045fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 8148 	beq.w	80045fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8141 	beq.w	80045fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800437a:	2300      	movs	r3, #0
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	f040 80b6 	bne.w	800450c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8145 	beq.w	8004640 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043be:	429a      	cmp	r2, r3
 80043c0:	f080 813e 	bcs.w	8004640 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d6:	f000 8088 	beq.w	80044ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	330c      	adds	r3, #12
 80043e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	330c      	adds	r3, #12
 8004402:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004406:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800440a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004412:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800441e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1d9      	bne.n	80043da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3314      	adds	r3, #20
 800442c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3314      	adds	r3, #20
 8004446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800444a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800444e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004452:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800445c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e1      	bne.n	8004426 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3314      	adds	r3, #20
 8004468:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3314      	adds	r3, #20
 8004482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004486:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004488:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800448c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e3      	bne.n	8004462 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	330c      	adds	r3, #12
 80044ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ba:	f023 0310 	bic.w	r3, r3, #16
 80044be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	330c      	adds	r3, #12
 80044c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80044cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80044ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e3      	bne.n	80044a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fd fbef 	bl	8001cc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f8c1 	bl	8004688 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004506:	e09b      	b.n	8004640 <HAL_UART_IRQHandler+0x518>
 8004508:	08004819 	.word	0x08004819
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004514:	b29b      	uxth	r3, r3
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 808e 	beq.w	8004644 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 8089 	beq.w	8004644 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004544:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004548:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	330c      	adds	r3, #12
 8004552:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004556:	647a      	str	r2, [r7, #68]	; 0x44
 8004558:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800455c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e3      	bne.n	8004532 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3314      	adds	r3, #20
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	623b      	str	r3, [r7, #32]
   return(result);
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3314      	adds	r3, #20
 800458a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800458e:	633a      	str	r2, [r7, #48]	; 0x30
 8004590:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e3      	bne.n	800456a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	60fb      	str	r3, [r7, #12]
   return(result);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0310 	bic.w	r3, r3, #16
 80045c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80045d4:	61fa      	str	r2, [r7, #28]
 80045d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	69b9      	ldr	r1, [r7, #24]
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	617b      	str	r3, [r7, #20]
   return(result);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e3      	bne.n	80045b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045f2:	4619      	mov	r1, r3
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f847 	bl	8004688 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045fa:	e023      	b.n	8004644 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004604:	2b00      	cmp	r3, #0
 8004606:	d009      	beq.n	800461c <HAL_UART_IRQHandler+0x4f4>
 8004608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800460c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f913 	bl	8004840 <UART_Transmit_IT>
    return;
 800461a:	e014      	b.n	8004646 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800461c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00e      	beq.n	8004646 <HAL_UART_IRQHandler+0x51e>
 8004628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f953 	bl	80048e0 <UART_EndTransmit_IT>
    return;
 800463a:	e004      	b.n	8004646 <HAL_UART_IRQHandler+0x51e>
    return;
 800463c:	bf00      	nop
 800463e:	e002      	b.n	8004646 <HAL_UART_IRQHandler+0x51e>
      return;
 8004640:	bf00      	nop
 8004642:	e000      	b.n	8004646 <HAL_UART_IRQHandler+0x51e>
      return;
 8004644:	bf00      	nop
  }
}
 8004646:	37e8      	adds	r7, #232	; 0xe8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b0:	e03b      	b.n	800472a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d037      	beq.n	800472a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ba:	f7fd f8e1 	bl	8001880 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d302      	bcc.n	80046d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e03a      	b.n	800474a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d023      	beq.n	800472a <UART_WaitOnFlagUntilTimeout+0x8a>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b80      	cmp	r3, #128	; 0x80
 80046e6:	d020      	beq.n	800472a <UART_WaitOnFlagUntilTimeout+0x8a>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	d01d      	beq.n	800472a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d116      	bne.n	800472a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f81d 	bl	8004752 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2208      	movs	r2, #8
 800471c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e00f      	b.n	800474a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4013      	ands	r3, r2
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	429a      	cmp	r2, r3
 8004738:	bf0c      	ite	eq
 800473a:	2301      	moveq	r3, #1
 800473c:	2300      	movne	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	429a      	cmp	r2, r3
 8004746:	d0b4      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004752:	b480      	push	{r7}
 8004754:	b095      	sub	sp, #84	; 0x54
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004770:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	330c      	adds	r3, #12
 8004778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800477a:	643a      	str	r2, [r7, #64]	; 0x40
 800477c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004780:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e5      	bne.n	800475a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3314      	adds	r3, #20
 8004794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	61fb      	str	r3, [r7, #28]
   return(result);
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	f023 0301 	bic.w	r3, r3, #1
 80047a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3314      	adds	r3, #20
 80047ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e5      	bne.n	800478e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d119      	bne.n	80047fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	330c      	adds	r3, #12
 80047d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f023 0310 	bic.w	r3, r3, #16
 80047e0:	647b      	str	r3, [r7, #68]	; 0x44
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047ea:	61ba      	str	r2, [r7, #24]
 80047ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	6979      	ldr	r1, [r7, #20]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	613b      	str	r3, [r7, #16]
   return(result);
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e5      	bne.n	80047ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800480c:	bf00      	nop
 800480e:	3754      	adds	r7, #84	; 0x54
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7ff ff1e 	bl	8004674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004838:	bf00      	nop
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b21      	cmp	r3, #33	; 0x21
 8004852:	d13e      	bne.n	80048d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485c:	d114      	bne.n	8004888 <UART_Transmit_IT+0x48>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d110      	bne.n	8004888 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800487a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	1c9a      	adds	r2, r3, #2
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	621a      	str	r2, [r3, #32]
 8004886:	e008      	b.n	800489a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	1c59      	adds	r1, r3, #1
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6211      	str	r1, [r2, #32]
 8004892:	781a      	ldrb	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	4619      	mov	r1, r3
 80048a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10f      	bne.n	80048ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff fea3 	bl	800464c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08c      	sub	sp, #48	; 0x30
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b22      	cmp	r3, #34	; 0x22
 8004922:	f040 80ae 	bne.w	8004a82 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492e:	d117      	bne.n	8004960 <UART_Receive_IT+0x50>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d113      	bne.n	8004960 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004938:	2300      	movs	r3, #0
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	b29b      	uxth	r3, r3
 800494a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494e:	b29a      	uxth	r2, r3
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004958:	1c9a      	adds	r2, r3, #2
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	629a      	str	r2, [r3, #40]	; 0x28
 800495e:	e026      	b.n	80049ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004966:	2300      	movs	r3, #0
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004972:	d007      	beq.n	8004984 <UART_Receive_IT+0x74>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10a      	bne.n	8004992 <UART_Receive_IT+0x82>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d106      	bne.n	8004992 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	b2da      	uxtb	r2, r3
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	e008      	b.n	80049a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	4619      	mov	r1, r3
 80049bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d15d      	bne.n	8004a7e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0220 	bic.w	r2, r2, #32
 80049d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695a      	ldr	r2, [r3, #20]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0201 	bic.w	r2, r2, #1
 80049f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d135      	bne.n	8004a74 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f023 0310 	bic.w	r3, r3, #16
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	330c      	adds	r3, #12
 8004a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2e:	623a      	str	r2, [r7, #32]
 8004a30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	69f9      	ldr	r1, [r7, #28]
 8004a34:	6a3a      	ldr	r2, [r7, #32]
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e5      	bne.n	8004a0e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b10      	cmp	r3, #16
 8004a4e:	d10a      	bne.n	8004a66 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff fe0b 	bl	8004688 <HAL_UARTEx_RxEventCallback>
 8004a72:	e002      	b.n	8004a7a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff fdf3 	bl	8004660 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e002      	b.n	8004a84 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e000      	b.n	8004a84 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a82:	2302      	movs	r3, #2
  }
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3730      	adds	r7, #48	; 0x30
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a90:	b0c0      	sub	sp, #256	; 0x100
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	68d9      	ldr	r1, [r3, #12]
 8004aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	ea40 0301 	orr.w	r3, r0, r1
 8004ab4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ae4:	f021 010c 	bic.w	r1, r1, #12
 8004ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004af2:	430b      	orrs	r3, r1
 8004af4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b06:	6999      	ldr	r1, [r3, #24]
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	ea40 0301 	orr.w	r3, r0, r1
 8004b12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4b8f      	ldr	r3, [pc, #572]	; (8004d58 <UART_SetConfig+0x2cc>)
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d005      	beq.n	8004b2c <UART_SetConfig+0xa0>
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b8d      	ldr	r3, [pc, #564]	; (8004d5c <UART_SetConfig+0x2d0>)
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d104      	bne.n	8004b36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b2c:	f7fe fa1c 	bl	8002f68 <HAL_RCC_GetPCLK2Freq>
 8004b30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b34:	e003      	b.n	8004b3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b36:	f7fe fa03 	bl	8002f40 <HAL_RCC_GetPCLK1Freq>
 8004b3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b48:	f040 810c 	bne.w	8004d64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b50:	2200      	movs	r2, #0
 8004b52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b5e:	4622      	mov	r2, r4
 8004b60:	462b      	mov	r3, r5
 8004b62:	1891      	adds	r1, r2, r2
 8004b64:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b66:	415b      	adcs	r3, r3
 8004b68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b6e:	4621      	mov	r1, r4
 8004b70:	eb12 0801 	adds.w	r8, r2, r1
 8004b74:	4629      	mov	r1, r5
 8004b76:	eb43 0901 	adc.w	r9, r3, r1
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b8e:	4690      	mov	r8, r2
 8004b90:	4699      	mov	r9, r3
 8004b92:	4623      	mov	r3, r4
 8004b94:	eb18 0303 	adds.w	r3, r8, r3
 8004b98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	eb49 0303 	adc.w	r3, r9, r3
 8004ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bba:	460b      	mov	r3, r1
 8004bbc:	18db      	adds	r3, r3, r3
 8004bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	eb42 0303 	adc.w	r3, r2, r3
 8004bc6:	657b      	str	r3, [r7, #84]	; 0x54
 8004bc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004bd0:	f7fb ffea 	bl	8000ba8 <__aeabi_uldivmod>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4b61      	ldr	r3, [pc, #388]	; (8004d60 <UART_SetConfig+0x2d4>)
 8004bda:	fba3 2302 	umull	r2, r3, r3, r2
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	011c      	lsls	r4, r3, #4
 8004be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004bf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	1891      	adds	r1, r2, r2
 8004bfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004bfc:	415b      	adcs	r3, r3
 8004bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c04:	4641      	mov	r1, r8
 8004c06:	eb12 0a01 	adds.w	sl, r2, r1
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c24:	4692      	mov	sl, r2
 8004c26:	469b      	mov	fp, r3
 8004c28:	4643      	mov	r3, r8
 8004c2a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c32:	464b      	mov	r3, r9
 8004c34:	eb4b 0303 	adc.w	r3, fp, r3
 8004c38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c50:	460b      	mov	r3, r1
 8004c52:	18db      	adds	r3, r3, r3
 8004c54:	643b      	str	r3, [r7, #64]	; 0x40
 8004c56:	4613      	mov	r3, r2
 8004c58:	eb42 0303 	adc.w	r3, r2, r3
 8004c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c66:	f7fb ff9f 	bl	8000ba8 <__aeabi_uldivmod>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4611      	mov	r1, r2
 8004c70:	4b3b      	ldr	r3, [pc, #236]	; (8004d60 <UART_SetConfig+0x2d4>)
 8004c72:	fba3 2301 	umull	r2, r3, r3, r1
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	2264      	movs	r2, #100	; 0x64
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	1acb      	subs	r3, r1, r3
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c86:	4b36      	ldr	r3, [pc, #216]	; (8004d60 <UART_SetConfig+0x2d4>)
 8004c88:	fba3 2302 	umull	r2, r3, r3, r2
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c94:	441c      	add	r4, r3
 8004c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ca0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ca4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ca8:	4642      	mov	r2, r8
 8004caa:	464b      	mov	r3, r9
 8004cac:	1891      	adds	r1, r2, r2
 8004cae:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cb0:	415b      	adcs	r3, r3
 8004cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cb8:	4641      	mov	r1, r8
 8004cba:	1851      	adds	r1, r2, r1
 8004cbc:	6339      	str	r1, [r7, #48]	; 0x30
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	414b      	adcs	r3, r1
 8004cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004cd0:	4659      	mov	r1, fp
 8004cd2:	00cb      	lsls	r3, r1, #3
 8004cd4:	4651      	mov	r1, sl
 8004cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cda:	4651      	mov	r1, sl
 8004cdc:	00ca      	lsls	r2, r1, #3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	189b      	adds	r3, r3, r2
 8004ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cec:	464b      	mov	r3, r9
 8004cee:	460a      	mov	r2, r1
 8004cf0:	eb42 0303 	adc.w	r3, r2, r3
 8004cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	18db      	adds	r3, r3, r3
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d12:	4613      	mov	r3, r2
 8004d14:	eb42 0303 	adc.w	r3, r2, r3
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d22:	f7fb ff41 	bl	8000ba8 <__aeabi_uldivmod>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <UART_SetConfig+0x2d4>)
 8004d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	2164      	movs	r1, #100	; 0x64
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	3332      	adds	r3, #50	; 0x32
 8004d3e:	4a08      	ldr	r2, [pc, #32]	; (8004d60 <UART_SetConfig+0x2d4>)
 8004d40:	fba2 2303 	umull	r2, r3, r2, r3
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	f003 0207 	and.w	r2, r3, #7
 8004d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4422      	add	r2, r4
 8004d52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d54:	e106      	b.n	8004f64 <UART_SetConfig+0x4d8>
 8004d56:	bf00      	nop
 8004d58:	40011000 	.word	0x40011000
 8004d5c:	40011400 	.word	0x40011400
 8004d60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d76:	4642      	mov	r2, r8
 8004d78:	464b      	mov	r3, r9
 8004d7a:	1891      	adds	r1, r2, r2
 8004d7c:	6239      	str	r1, [r7, #32]
 8004d7e:	415b      	adcs	r3, r3
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
 8004d82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d86:	4641      	mov	r1, r8
 8004d88:	1854      	adds	r4, r2, r1
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	eb43 0501 	adc.w	r5, r3, r1
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	00eb      	lsls	r3, r5, #3
 8004d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d9e:	00e2      	lsls	r2, r4, #3
 8004da0:	4614      	mov	r4, r2
 8004da2:	461d      	mov	r5, r3
 8004da4:	4643      	mov	r3, r8
 8004da6:	18e3      	adds	r3, r4, r3
 8004da8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dac:	464b      	mov	r3, r9
 8004dae:	eb45 0303 	adc.w	r3, r5, r3
 8004db2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	008b      	lsls	r3, r1, #2
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ddc:	4621      	mov	r1, r4
 8004dde:	008a      	lsls	r2, r1, #2
 8004de0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004de4:	f7fb fee0 	bl	8000ba8 <__aeabi_uldivmod>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4b60      	ldr	r3, [pc, #384]	; (8004f70 <UART_SetConfig+0x4e4>)
 8004dee:	fba3 2302 	umull	r2, r3, r3, r2
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	011c      	lsls	r4, r3, #4
 8004df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e08:	4642      	mov	r2, r8
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	1891      	adds	r1, r2, r2
 8004e0e:	61b9      	str	r1, [r7, #24]
 8004e10:	415b      	adcs	r3, r3
 8004e12:	61fb      	str	r3, [r7, #28]
 8004e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e18:	4641      	mov	r1, r8
 8004e1a:	1851      	adds	r1, r2, r1
 8004e1c:	6139      	str	r1, [r7, #16]
 8004e1e:	4649      	mov	r1, r9
 8004e20:	414b      	adcs	r3, r1
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e30:	4659      	mov	r1, fp
 8004e32:	00cb      	lsls	r3, r1, #3
 8004e34:	4651      	mov	r1, sl
 8004e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e3a:	4651      	mov	r1, sl
 8004e3c:	00ca      	lsls	r2, r1, #3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	4603      	mov	r3, r0
 8004e44:	4642      	mov	r2, r8
 8004e46:	189b      	adds	r3, r3, r2
 8004e48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	460a      	mov	r2, r1
 8004e50:	eb42 0303 	adc.w	r3, r2, r3
 8004e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e70:	4649      	mov	r1, r9
 8004e72:	008b      	lsls	r3, r1, #2
 8004e74:	4641      	mov	r1, r8
 8004e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e7a:	4641      	mov	r1, r8
 8004e7c:	008a      	lsls	r2, r1, #2
 8004e7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e82:	f7fb fe91 	bl	8000ba8 <__aeabi_uldivmod>
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	4b38      	ldr	r3, [pc, #224]	; (8004f70 <UART_SetConfig+0x4e4>)
 8004e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	2264      	movs	r2, #100	; 0x64
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	1acb      	subs	r3, r1, r3
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	3332      	adds	r3, #50	; 0x32
 8004ea0:	4a33      	ldr	r2, [pc, #204]	; (8004f70 <UART_SetConfig+0x4e4>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eac:	441c      	add	r4, r3
 8004eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	673b      	str	r3, [r7, #112]	; 0x70
 8004eb6:	677a      	str	r2, [r7, #116]	; 0x74
 8004eb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	1891      	adds	r1, r2, r2
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	415b      	adcs	r3, r3
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ecc:	4641      	mov	r1, r8
 8004ece:	1851      	adds	r1, r2, r1
 8004ed0:	6039      	str	r1, [r7, #0]
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	414b      	adcs	r3, r1
 8004ed6:	607b      	str	r3, [r7, #4]
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ee4:	4659      	mov	r1, fp
 8004ee6:	00cb      	lsls	r3, r1, #3
 8004ee8:	4651      	mov	r1, sl
 8004eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eee:	4651      	mov	r1, sl
 8004ef0:	00ca      	lsls	r2, r1, #3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4642      	mov	r2, r8
 8004efa:	189b      	adds	r3, r3, r2
 8004efc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004efe:	464b      	mov	r3, r9
 8004f00:	460a      	mov	r2, r1
 8004f02:	eb42 0303 	adc.w	r3, r2, r3
 8004f06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	663b      	str	r3, [r7, #96]	; 0x60
 8004f12:	667a      	str	r2, [r7, #100]	; 0x64
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f20:	4649      	mov	r1, r9
 8004f22:	008b      	lsls	r3, r1, #2
 8004f24:	4641      	mov	r1, r8
 8004f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f2a:	4641      	mov	r1, r8
 8004f2c:	008a      	lsls	r2, r1, #2
 8004f2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f32:	f7fb fe39 	bl	8000ba8 <__aeabi_uldivmod>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <UART_SetConfig+0x4e4>)
 8004f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	2164      	movs	r1, #100	; 0x64
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	3332      	adds	r3, #50	; 0x32
 8004f4e:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <UART_SetConfig+0x4e4>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	f003 020f 	and.w	r2, r3, #15
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4422      	add	r2, r4
 8004f62:	609a      	str	r2, [r3, #8]
}
 8004f64:	bf00      	nop
 8004f66:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f70:	51eb851f 	.word	0x51eb851f

08004f74 <pow>:
 8004f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f76:	ed2d 8b02 	vpush	{d8}
 8004f7a:	eeb0 8a40 	vmov.f32	s16, s0
 8004f7e:	eef0 8a60 	vmov.f32	s17, s1
 8004f82:	ec55 4b11 	vmov	r4, r5, d1
 8004f86:	f000 f873 	bl	8005070 <__ieee754_pow>
 8004f8a:	4622      	mov	r2, r4
 8004f8c:	462b      	mov	r3, r5
 8004f8e:	4620      	mov	r0, r4
 8004f90:	4629      	mov	r1, r5
 8004f92:	ec57 6b10 	vmov	r6, r7, d0
 8004f96:	f7fb fdd1 	bl	8000b3c <__aeabi_dcmpun>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d13b      	bne.n	8005016 <pow+0xa2>
 8004f9e:	ec51 0b18 	vmov	r0, r1, d8
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f7fb fd97 	bl	8000ad8 <__aeabi_dcmpeq>
 8004faa:	b1b8      	cbz	r0, 8004fdc <pow+0x68>
 8004fac:	2200      	movs	r2, #0
 8004fae:	2300      	movs	r3, #0
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	f7fb fd90 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d146      	bne.n	800504a <pow+0xd6>
 8004fbc:	ec45 4b10 	vmov	d0, r4, r5
 8004fc0:	f000 f848 	bl	8005054 <finite>
 8004fc4:	b338      	cbz	r0, 8005016 <pow+0xa2>
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2300      	movs	r3, #0
 8004fca:	4620      	mov	r0, r4
 8004fcc:	4629      	mov	r1, r5
 8004fce:	f7fb fd8d 	bl	8000aec <__aeabi_dcmplt>
 8004fd2:	b300      	cbz	r0, 8005016 <pow+0xa2>
 8004fd4:	f000 ff44 	bl	8005e60 <__errno>
 8004fd8:	2322      	movs	r3, #34	; 0x22
 8004fda:	e01b      	b.n	8005014 <pow+0xa0>
 8004fdc:	ec47 6b10 	vmov	d0, r6, r7
 8004fe0:	f000 f838 	bl	8005054 <finite>
 8004fe4:	b9e0      	cbnz	r0, 8005020 <pow+0xac>
 8004fe6:	eeb0 0a48 	vmov.f32	s0, s16
 8004fea:	eef0 0a68 	vmov.f32	s1, s17
 8004fee:	f000 f831 	bl	8005054 <finite>
 8004ff2:	b1a8      	cbz	r0, 8005020 <pow+0xac>
 8004ff4:	ec45 4b10 	vmov	d0, r4, r5
 8004ff8:	f000 f82c 	bl	8005054 <finite>
 8004ffc:	b180      	cbz	r0, 8005020 <pow+0xac>
 8004ffe:	4632      	mov	r2, r6
 8005000:	463b      	mov	r3, r7
 8005002:	4630      	mov	r0, r6
 8005004:	4639      	mov	r1, r7
 8005006:	f7fb fd99 	bl	8000b3c <__aeabi_dcmpun>
 800500a:	2800      	cmp	r0, #0
 800500c:	d0e2      	beq.n	8004fd4 <pow+0x60>
 800500e:	f000 ff27 	bl	8005e60 <__errno>
 8005012:	2321      	movs	r3, #33	; 0x21
 8005014:	6003      	str	r3, [r0, #0]
 8005016:	ecbd 8b02 	vpop	{d8}
 800501a:	ec47 6b10 	vmov	d0, r6, r7
 800501e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005020:	2200      	movs	r2, #0
 8005022:	2300      	movs	r3, #0
 8005024:	4630      	mov	r0, r6
 8005026:	4639      	mov	r1, r7
 8005028:	f7fb fd56 	bl	8000ad8 <__aeabi_dcmpeq>
 800502c:	2800      	cmp	r0, #0
 800502e:	d0f2      	beq.n	8005016 <pow+0xa2>
 8005030:	eeb0 0a48 	vmov.f32	s0, s16
 8005034:	eef0 0a68 	vmov.f32	s1, s17
 8005038:	f000 f80c 	bl	8005054 <finite>
 800503c:	2800      	cmp	r0, #0
 800503e:	d0ea      	beq.n	8005016 <pow+0xa2>
 8005040:	ec45 4b10 	vmov	d0, r4, r5
 8005044:	f000 f806 	bl	8005054 <finite>
 8005048:	e7c3      	b.n	8004fd2 <pow+0x5e>
 800504a:	4f01      	ldr	r7, [pc, #4]	; (8005050 <pow+0xdc>)
 800504c:	2600      	movs	r6, #0
 800504e:	e7e2      	b.n	8005016 <pow+0xa2>
 8005050:	3ff00000 	.word	0x3ff00000

08005054 <finite>:
 8005054:	b082      	sub	sp, #8
 8005056:	ed8d 0b00 	vstr	d0, [sp]
 800505a:	9801      	ldr	r0, [sp, #4]
 800505c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005060:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005064:	0fc0      	lsrs	r0, r0, #31
 8005066:	b002      	add	sp, #8
 8005068:	4770      	bx	lr
 800506a:	0000      	movs	r0, r0
 800506c:	0000      	movs	r0, r0
	...

08005070 <__ieee754_pow>:
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	ed2d 8b06 	vpush	{d8-d10}
 8005078:	b089      	sub	sp, #36	; 0x24
 800507a:	ed8d 1b00 	vstr	d1, [sp]
 800507e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005082:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005086:	ea58 0102 	orrs.w	r1, r8, r2
 800508a:	ec57 6b10 	vmov	r6, r7, d0
 800508e:	d115      	bne.n	80050bc <__ieee754_pow+0x4c>
 8005090:	19b3      	adds	r3, r6, r6
 8005092:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005096:	4152      	adcs	r2, r2
 8005098:	4299      	cmp	r1, r3
 800509a:	4b89      	ldr	r3, [pc, #548]	; (80052c0 <__ieee754_pow+0x250>)
 800509c:	4193      	sbcs	r3, r2
 800509e:	f080 84d1 	bcs.w	8005a44 <__ieee754_pow+0x9d4>
 80050a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050a6:	4630      	mov	r0, r6
 80050a8:	4639      	mov	r1, r7
 80050aa:	f7fb f8f7 	bl	800029c <__adddf3>
 80050ae:	ec41 0b10 	vmov	d0, r0, r1
 80050b2:	b009      	add	sp, #36	; 0x24
 80050b4:	ecbd 8b06 	vpop	{d8-d10}
 80050b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050bc:	4b81      	ldr	r3, [pc, #516]	; (80052c4 <__ieee754_pow+0x254>)
 80050be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80050c2:	429c      	cmp	r4, r3
 80050c4:	ee10 aa10 	vmov	sl, s0
 80050c8:	463d      	mov	r5, r7
 80050ca:	dc06      	bgt.n	80050da <__ieee754_pow+0x6a>
 80050cc:	d101      	bne.n	80050d2 <__ieee754_pow+0x62>
 80050ce:	2e00      	cmp	r6, #0
 80050d0:	d1e7      	bne.n	80050a2 <__ieee754_pow+0x32>
 80050d2:	4598      	cmp	r8, r3
 80050d4:	dc01      	bgt.n	80050da <__ieee754_pow+0x6a>
 80050d6:	d10f      	bne.n	80050f8 <__ieee754_pow+0x88>
 80050d8:	b172      	cbz	r2, 80050f8 <__ieee754_pow+0x88>
 80050da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80050de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80050e2:	ea55 050a 	orrs.w	r5, r5, sl
 80050e6:	d1dc      	bne.n	80050a2 <__ieee754_pow+0x32>
 80050e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80050ec:	18db      	adds	r3, r3, r3
 80050ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80050f2:	4152      	adcs	r2, r2
 80050f4:	429d      	cmp	r5, r3
 80050f6:	e7d0      	b.n	800509a <__ieee754_pow+0x2a>
 80050f8:	2d00      	cmp	r5, #0
 80050fa:	da3b      	bge.n	8005174 <__ieee754_pow+0x104>
 80050fc:	4b72      	ldr	r3, [pc, #456]	; (80052c8 <__ieee754_pow+0x258>)
 80050fe:	4598      	cmp	r8, r3
 8005100:	dc51      	bgt.n	80051a6 <__ieee754_pow+0x136>
 8005102:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005106:	4598      	cmp	r8, r3
 8005108:	f340 84ab 	ble.w	8005a62 <__ieee754_pow+0x9f2>
 800510c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005110:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005114:	2b14      	cmp	r3, #20
 8005116:	dd0f      	ble.n	8005138 <__ieee754_pow+0xc8>
 8005118:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800511c:	fa22 f103 	lsr.w	r1, r2, r3
 8005120:	fa01 f303 	lsl.w	r3, r1, r3
 8005124:	4293      	cmp	r3, r2
 8005126:	f040 849c 	bne.w	8005a62 <__ieee754_pow+0x9f2>
 800512a:	f001 0101 	and.w	r1, r1, #1
 800512e:	f1c1 0302 	rsb	r3, r1, #2
 8005132:	9304      	str	r3, [sp, #16]
 8005134:	b182      	cbz	r2, 8005158 <__ieee754_pow+0xe8>
 8005136:	e05f      	b.n	80051f8 <__ieee754_pow+0x188>
 8005138:	2a00      	cmp	r2, #0
 800513a:	d15b      	bne.n	80051f4 <__ieee754_pow+0x184>
 800513c:	f1c3 0314 	rsb	r3, r3, #20
 8005140:	fa48 f103 	asr.w	r1, r8, r3
 8005144:	fa01 f303 	lsl.w	r3, r1, r3
 8005148:	4543      	cmp	r3, r8
 800514a:	f040 8487 	bne.w	8005a5c <__ieee754_pow+0x9ec>
 800514e:	f001 0101 	and.w	r1, r1, #1
 8005152:	f1c1 0302 	rsb	r3, r1, #2
 8005156:	9304      	str	r3, [sp, #16]
 8005158:	4b5c      	ldr	r3, [pc, #368]	; (80052cc <__ieee754_pow+0x25c>)
 800515a:	4598      	cmp	r8, r3
 800515c:	d132      	bne.n	80051c4 <__ieee754_pow+0x154>
 800515e:	f1b9 0f00 	cmp.w	r9, #0
 8005162:	f280 8477 	bge.w	8005a54 <__ieee754_pow+0x9e4>
 8005166:	4959      	ldr	r1, [pc, #356]	; (80052cc <__ieee754_pow+0x25c>)
 8005168:	4632      	mov	r2, r6
 800516a:	463b      	mov	r3, r7
 800516c:	2000      	movs	r0, #0
 800516e:	f7fb fb75 	bl	800085c <__aeabi_ddiv>
 8005172:	e79c      	b.n	80050ae <__ieee754_pow+0x3e>
 8005174:	2300      	movs	r3, #0
 8005176:	9304      	str	r3, [sp, #16]
 8005178:	2a00      	cmp	r2, #0
 800517a:	d13d      	bne.n	80051f8 <__ieee754_pow+0x188>
 800517c:	4b51      	ldr	r3, [pc, #324]	; (80052c4 <__ieee754_pow+0x254>)
 800517e:	4598      	cmp	r8, r3
 8005180:	d1ea      	bne.n	8005158 <__ieee754_pow+0xe8>
 8005182:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005186:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800518a:	ea53 030a 	orrs.w	r3, r3, sl
 800518e:	f000 8459 	beq.w	8005a44 <__ieee754_pow+0x9d4>
 8005192:	4b4f      	ldr	r3, [pc, #316]	; (80052d0 <__ieee754_pow+0x260>)
 8005194:	429c      	cmp	r4, r3
 8005196:	dd08      	ble.n	80051aa <__ieee754_pow+0x13a>
 8005198:	f1b9 0f00 	cmp.w	r9, #0
 800519c:	f2c0 8456 	blt.w	8005a4c <__ieee754_pow+0x9dc>
 80051a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051a4:	e783      	b.n	80050ae <__ieee754_pow+0x3e>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e7e5      	b.n	8005176 <__ieee754_pow+0x106>
 80051aa:	f1b9 0f00 	cmp.w	r9, #0
 80051ae:	f04f 0000 	mov.w	r0, #0
 80051b2:	f04f 0100 	mov.w	r1, #0
 80051b6:	f6bf af7a 	bge.w	80050ae <__ieee754_pow+0x3e>
 80051ba:	e9dd 0300 	ldrd	r0, r3, [sp]
 80051be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80051c2:	e774      	b.n	80050ae <__ieee754_pow+0x3e>
 80051c4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80051c8:	d106      	bne.n	80051d8 <__ieee754_pow+0x168>
 80051ca:	4632      	mov	r2, r6
 80051cc:	463b      	mov	r3, r7
 80051ce:	4630      	mov	r0, r6
 80051d0:	4639      	mov	r1, r7
 80051d2:	f7fb fa19 	bl	8000608 <__aeabi_dmul>
 80051d6:	e76a      	b.n	80050ae <__ieee754_pow+0x3e>
 80051d8:	4b3e      	ldr	r3, [pc, #248]	; (80052d4 <__ieee754_pow+0x264>)
 80051da:	4599      	cmp	r9, r3
 80051dc:	d10c      	bne.n	80051f8 <__ieee754_pow+0x188>
 80051de:	2d00      	cmp	r5, #0
 80051e0:	db0a      	blt.n	80051f8 <__ieee754_pow+0x188>
 80051e2:	ec47 6b10 	vmov	d0, r6, r7
 80051e6:	b009      	add	sp, #36	; 0x24
 80051e8:	ecbd 8b06 	vpop	{d8-d10}
 80051ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f0:	f000 bd20 	b.w	8005c34 <__ieee754_sqrt>
 80051f4:	2300      	movs	r3, #0
 80051f6:	9304      	str	r3, [sp, #16]
 80051f8:	ec47 6b10 	vmov	d0, r6, r7
 80051fc:	f000 fc62 	bl	8005ac4 <fabs>
 8005200:	ec51 0b10 	vmov	r0, r1, d0
 8005204:	f1ba 0f00 	cmp.w	sl, #0
 8005208:	d129      	bne.n	800525e <__ieee754_pow+0x1ee>
 800520a:	b124      	cbz	r4, 8005216 <__ieee754_pow+0x1a6>
 800520c:	4b2f      	ldr	r3, [pc, #188]	; (80052cc <__ieee754_pow+0x25c>)
 800520e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005212:	429a      	cmp	r2, r3
 8005214:	d123      	bne.n	800525e <__ieee754_pow+0x1ee>
 8005216:	f1b9 0f00 	cmp.w	r9, #0
 800521a:	da05      	bge.n	8005228 <__ieee754_pow+0x1b8>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	2000      	movs	r0, #0
 8005222:	492a      	ldr	r1, [pc, #168]	; (80052cc <__ieee754_pow+0x25c>)
 8005224:	f7fb fb1a 	bl	800085c <__aeabi_ddiv>
 8005228:	2d00      	cmp	r5, #0
 800522a:	f6bf af40 	bge.w	80050ae <__ieee754_pow+0x3e>
 800522e:	9b04      	ldr	r3, [sp, #16]
 8005230:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005234:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005238:	431c      	orrs	r4, r3
 800523a:	d108      	bne.n	800524e <__ieee754_pow+0x1de>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4610      	mov	r0, r2
 8005242:	4619      	mov	r1, r3
 8005244:	f7fb f828 	bl	8000298 <__aeabi_dsub>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	e78f      	b.n	800516e <__ieee754_pow+0xfe>
 800524e:	9b04      	ldr	r3, [sp, #16]
 8005250:	2b01      	cmp	r3, #1
 8005252:	f47f af2c 	bne.w	80050ae <__ieee754_pow+0x3e>
 8005256:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800525a:	4619      	mov	r1, r3
 800525c:	e727      	b.n	80050ae <__ieee754_pow+0x3e>
 800525e:	0feb      	lsrs	r3, r5, #31
 8005260:	3b01      	subs	r3, #1
 8005262:	9306      	str	r3, [sp, #24]
 8005264:	9a06      	ldr	r2, [sp, #24]
 8005266:	9b04      	ldr	r3, [sp, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	d102      	bne.n	8005272 <__ieee754_pow+0x202>
 800526c:	4632      	mov	r2, r6
 800526e:	463b      	mov	r3, r7
 8005270:	e7e6      	b.n	8005240 <__ieee754_pow+0x1d0>
 8005272:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <__ieee754_pow+0x268>)
 8005274:	4598      	cmp	r8, r3
 8005276:	f340 80fb 	ble.w	8005470 <__ieee754_pow+0x400>
 800527a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800527e:	4598      	cmp	r8, r3
 8005280:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <__ieee754_pow+0x260>)
 8005282:	dd0c      	ble.n	800529e <__ieee754_pow+0x22e>
 8005284:	429c      	cmp	r4, r3
 8005286:	dc0f      	bgt.n	80052a8 <__ieee754_pow+0x238>
 8005288:	f1b9 0f00 	cmp.w	r9, #0
 800528c:	da0f      	bge.n	80052ae <__ieee754_pow+0x23e>
 800528e:	2000      	movs	r0, #0
 8005290:	b009      	add	sp, #36	; 0x24
 8005292:	ecbd 8b06 	vpop	{d8-d10}
 8005296:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529a:	f000 bcc2 	b.w	8005c22 <__math_oflow>
 800529e:	429c      	cmp	r4, r3
 80052a0:	dbf2      	blt.n	8005288 <__ieee754_pow+0x218>
 80052a2:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <__ieee754_pow+0x25c>)
 80052a4:	429c      	cmp	r4, r3
 80052a6:	dd19      	ble.n	80052dc <__ieee754_pow+0x26c>
 80052a8:	f1b9 0f00 	cmp.w	r9, #0
 80052ac:	dcef      	bgt.n	800528e <__ieee754_pow+0x21e>
 80052ae:	2000      	movs	r0, #0
 80052b0:	b009      	add	sp, #36	; 0x24
 80052b2:	ecbd 8b06 	vpop	{d8-d10}
 80052b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ba:	f000 bca9 	b.w	8005c10 <__math_uflow>
 80052be:	bf00      	nop
 80052c0:	fff00000 	.word	0xfff00000
 80052c4:	7ff00000 	.word	0x7ff00000
 80052c8:	433fffff 	.word	0x433fffff
 80052cc:	3ff00000 	.word	0x3ff00000
 80052d0:	3fefffff 	.word	0x3fefffff
 80052d4:	3fe00000 	.word	0x3fe00000
 80052d8:	41e00000 	.word	0x41e00000
 80052dc:	4b60      	ldr	r3, [pc, #384]	; (8005460 <__ieee754_pow+0x3f0>)
 80052de:	2200      	movs	r2, #0
 80052e0:	f7fa ffda 	bl	8000298 <__aeabi_dsub>
 80052e4:	a354      	add	r3, pc, #336	; (adr r3, 8005438 <__ieee754_pow+0x3c8>)
 80052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ea:	4604      	mov	r4, r0
 80052ec:	460d      	mov	r5, r1
 80052ee:	f7fb f98b 	bl	8000608 <__aeabi_dmul>
 80052f2:	a353      	add	r3, pc, #332	; (adr r3, 8005440 <__ieee754_pow+0x3d0>)
 80052f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f8:	4606      	mov	r6, r0
 80052fa:	460f      	mov	r7, r1
 80052fc:	4620      	mov	r0, r4
 80052fe:	4629      	mov	r1, r5
 8005300:	f7fb f982 	bl	8000608 <__aeabi_dmul>
 8005304:	4b57      	ldr	r3, [pc, #348]	; (8005464 <__ieee754_pow+0x3f4>)
 8005306:	4682      	mov	sl, r0
 8005308:	468b      	mov	fp, r1
 800530a:	2200      	movs	r2, #0
 800530c:	4620      	mov	r0, r4
 800530e:	4629      	mov	r1, r5
 8005310:	f7fb f97a 	bl	8000608 <__aeabi_dmul>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	a14b      	add	r1, pc, #300	; (adr r1, 8005448 <__ieee754_pow+0x3d8>)
 800531a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800531e:	f7fa ffbb 	bl	8000298 <__aeabi_dsub>
 8005322:	4622      	mov	r2, r4
 8005324:	462b      	mov	r3, r5
 8005326:	f7fb f96f 	bl	8000608 <__aeabi_dmul>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	2000      	movs	r0, #0
 8005330:	494d      	ldr	r1, [pc, #308]	; (8005468 <__ieee754_pow+0x3f8>)
 8005332:	f7fa ffb1 	bl	8000298 <__aeabi_dsub>
 8005336:	4622      	mov	r2, r4
 8005338:	4680      	mov	r8, r0
 800533a:	4689      	mov	r9, r1
 800533c:	462b      	mov	r3, r5
 800533e:	4620      	mov	r0, r4
 8005340:	4629      	mov	r1, r5
 8005342:	f7fb f961 	bl	8000608 <__aeabi_dmul>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4640      	mov	r0, r8
 800534c:	4649      	mov	r1, r9
 800534e:	f7fb f95b 	bl	8000608 <__aeabi_dmul>
 8005352:	a33f      	add	r3, pc, #252	; (adr r3, 8005450 <__ieee754_pow+0x3e0>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f7fb f956 	bl	8000608 <__aeabi_dmul>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4650      	mov	r0, sl
 8005362:	4659      	mov	r1, fp
 8005364:	f7fa ff98 	bl	8000298 <__aeabi_dsub>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4680      	mov	r8, r0
 800536e:	4689      	mov	r9, r1
 8005370:	4630      	mov	r0, r6
 8005372:	4639      	mov	r1, r7
 8005374:	f7fa ff92 	bl	800029c <__adddf3>
 8005378:	2000      	movs	r0, #0
 800537a:	4632      	mov	r2, r6
 800537c:	463b      	mov	r3, r7
 800537e:	4604      	mov	r4, r0
 8005380:	460d      	mov	r5, r1
 8005382:	f7fa ff89 	bl	8000298 <__aeabi_dsub>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4640      	mov	r0, r8
 800538c:	4649      	mov	r1, r9
 800538e:	f7fa ff83 	bl	8000298 <__aeabi_dsub>
 8005392:	9b04      	ldr	r3, [sp, #16]
 8005394:	9a06      	ldr	r2, [sp, #24]
 8005396:	3b01      	subs	r3, #1
 8005398:	4313      	orrs	r3, r2
 800539a:	4682      	mov	sl, r0
 800539c:	468b      	mov	fp, r1
 800539e:	f040 81e7 	bne.w	8005770 <__ieee754_pow+0x700>
 80053a2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005458 <__ieee754_pow+0x3e8>
 80053a6:	eeb0 8a47 	vmov.f32	s16, s14
 80053aa:	eef0 8a67 	vmov.f32	s17, s15
 80053ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80053b2:	2600      	movs	r6, #0
 80053b4:	4632      	mov	r2, r6
 80053b6:	463b      	mov	r3, r7
 80053b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053bc:	f7fa ff6c 	bl	8000298 <__aeabi_dsub>
 80053c0:	4622      	mov	r2, r4
 80053c2:	462b      	mov	r3, r5
 80053c4:	f7fb f920 	bl	8000608 <__aeabi_dmul>
 80053c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053cc:	4680      	mov	r8, r0
 80053ce:	4689      	mov	r9, r1
 80053d0:	4650      	mov	r0, sl
 80053d2:	4659      	mov	r1, fp
 80053d4:	f7fb f918 	bl	8000608 <__aeabi_dmul>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4640      	mov	r0, r8
 80053de:	4649      	mov	r1, r9
 80053e0:	f7fa ff5c 	bl	800029c <__adddf3>
 80053e4:	4632      	mov	r2, r6
 80053e6:	463b      	mov	r3, r7
 80053e8:	4680      	mov	r8, r0
 80053ea:	4689      	mov	r9, r1
 80053ec:	4620      	mov	r0, r4
 80053ee:	4629      	mov	r1, r5
 80053f0:	f7fb f90a 	bl	8000608 <__aeabi_dmul>
 80053f4:	460b      	mov	r3, r1
 80053f6:	4604      	mov	r4, r0
 80053f8:	460d      	mov	r5, r1
 80053fa:	4602      	mov	r2, r0
 80053fc:	4649      	mov	r1, r9
 80053fe:	4640      	mov	r0, r8
 8005400:	f7fa ff4c 	bl	800029c <__adddf3>
 8005404:	4b19      	ldr	r3, [pc, #100]	; (800546c <__ieee754_pow+0x3fc>)
 8005406:	4299      	cmp	r1, r3
 8005408:	ec45 4b19 	vmov	d9, r4, r5
 800540c:	4606      	mov	r6, r0
 800540e:	460f      	mov	r7, r1
 8005410:	468b      	mov	fp, r1
 8005412:	f340 82f0 	ble.w	80059f6 <__ieee754_pow+0x986>
 8005416:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800541a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800541e:	4303      	orrs	r3, r0
 8005420:	f000 81e4 	beq.w	80057ec <__ieee754_pow+0x77c>
 8005424:	ec51 0b18 	vmov	r0, r1, d8
 8005428:	2200      	movs	r2, #0
 800542a:	2300      	movs	r3, #0
 800542c:	f7fb fb5e 	bl	8000aec <__aeabi_dcmplt>
 8005430:	3800      	subs	r0, #0
 8005432:	bf18      	it	ne
 8005434:	2001      	movne	r0, #1
 8005436:	e72b      	b.n	8005290 <__ieee754_pow+0x220>
 8005438:	60000000 	.word	0x60000000
 800543c:	3ff71547 	.word	0x3ff71547
 8005440:	f85ddf44 	.word	0xf85ddf44
 8005444:	3e54ae0b 	.word	0x3e54ae0b
 8005448:	55555555 	.word	0x55555555
 800544c:	3fd55555 	.word	0x3fd55555
 8005450:	652b82fe 	.word	0x652b82fe
 8005454:	3ff71547 	.word	0x3ff71547
 8005458:	00000000 	.word	0x00000000
 800545c:	bff00000 	.word	0xbff00000
 8005460:	3ff00000 	.word	0x3ff00000
 8005464:	3fd00000 	.word	0x3fd00000
 8005468:	3fe00000 	.word	0x3fe00000
 800546c:	408fffff 	.word	0x408fffff
 8005470:	4bd5      	ldr	r3, [pc, #852]	; (80057c8 <__ieee754_pow+0x758>)
 8005472:	402b      	ands	r3, r5
 8005474:	2200      	movs	r2, #0
 8005476:	b92b      	cbnz	r3, 8005484 <__ieee754_pow+0x414>
 8005478:	4bd4      	ldr	r3, [pc, #848]	; (80057cc <__ieee754_pow+0x75c>)
 800547a:	f7fb f8c5 	bl	8000608 <__aeabi_dmul>
 800547e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005482:	460c      	mov	r4, r1
 8005484:	1523      	asrs	r3, r4, #20
 8005486:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800548a:	4413      	add	r3, r2
 800548c:	9305      	str	r3, [sp, #20]
 800548e:	4bd0      	ldr	r3, [pc, #832]	; (80057d0 <__ieee754_pow+0x760>)
 8005490:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005494:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005498:	429c      	cmp	r4, r3
 800549a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800549e:	dd08      	ble.n	80054b2 <__ieee754_pow+0x442>
 80054a0:	4bcc      	ldr	r3, [pc, #816]	; (80057d4 <__ieee754_pow+0x764>)
 80054a2:	429c      	cmp	r4, r3
 80054a4:	f340 8162 	ble.w	800576c <__ieee754_pow+0x6fc>
 80054a8:	9b05      	ldr	r3, [sp, #20]
 80054aa:	3301      	adds	r3, #1
 80054ac:	9305      	str	r3, [sp, #20]
 80054ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80054b2:	2400      	movs	r4, #0
 80054b4:	00e3      	lsls	r3, r4, #3
 80054b6:	9307      	str	r3, [sp, #28]
 80054b8:	4bc7      	ldr	r3, [pc, #796]	; (80057d8 <__ieee754_pow+0x768>)
 80054ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054be:	ed93 7b00 	vldr	d7, [r3]
 80054c2:	4629      	mov	r1, r5
 80054c4:	ec53 2b17 	vmov	r2, r3, d7
 80054c8:	eeb0 9a47 	vmov.f32	s18, s14
 80054cc:	eef0 9a67 	vmov.f32	s19, s15
 80054d0:	4682      	mov	sl, r0
 80054d2:	f7fa fee1 	bl	8000298 <__aeabi_dsub>
 80054d6:	4652      	mov	r2, sl
 80054d8:	4606      	mov	r6, r0
 80054da:	460f      	mov	r7, r1
 80054dc:	462b      	mov	r3, r5
 80054de:	ec51 0b19 	vmov	r0, r1, d9
 80054e2:	f7fa fedb 	bl	800029c <__adddf3>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	2000      	movs	r0, #0
 80054ec:	49bb      	ldr	r1, [pc, #748]	; (80057dc <__ieee754_pow+0x76c>)
 80054ee:	f7fb f9b5 	bl	800085c <__aeabi_ddiv>
 80054f2:	ec41 0b1a 	vmov	d10, r0, r1
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4630      	mov	r0, r6
 80054fc:	4639      	mov	r1, r7
 80054fe:	f7fb f883 	bl	8000608 <__aeabi_dmul>
 8005502:	2300      	movs	r3, #0
 8005504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005508:	9302      	str	r3, [sp, #8]
 800550a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800550e:	46ab      	mov	fp, r5
 8005510:	106d      	asrs	r5, r5, #1
 8005512:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005516:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800551a:	ec41 0b18 	vmov	d8, r0, r1
 800551e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005522:	2200      	movs	r2, #0
 8005524:	4640      	mov	r0, r8
 8005526:	4649      	mov	r1, r9
 8005528:	4614      	mov	r4, r2
 800552a:	461d      	mov	r5, r3
 800552c:	f7fb f86c 	bl	8000608 <__aeabi_dmul>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4630      	mov	r0, r6
 8005536:	4639      	mov	r1, r7
 8005538:	f7fa feae 	bl	8000298 <__aeabi_dsub>
 800553c:	ec53 2b19 	vmov	r2, r3, d9
 8005540:	4606      	mov	r6, r0
 8005542:	460f      	mov	r7, r1
 8005544:	4620      	mov	r0, r4
 8005546:	4629      	mov	r1, r5
 8005548:	f7fa fea6 	bl	8000298 <__aeabi_dsub>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4650      	mov	r0, sl
 8005552:	4659      	mov	r1, fp
 8005554:	f7fa fea0 	bl	8000298 <__aeabi_dsub>
 8005558:	4642      	mov	r2, r8
 800555a:	464b      	mov	r3, r9
 800555c:	f7fb f854 	bl	8000608 <__aeabi_dmul>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4630      	mov	r0, r6
 8005566:	4639      	mov	r1, r7
 8005568:	f7fa fe96 	bl	8000298 <__aeabi_dsub>
 800556c:	ec53 2b1a 	vmov	r2, r3, d10
 8005570:	f7fb f84a 	bl	8000608 <__aeabi_dmul>
 8005574:	ec53 2b18 	vmov	r2, r3, d8
 8005578:	ec41 0b19 	vmov	d9, r0, r1
 800557c:	ec51 0b18 	vmov	r0, r1, d8
 8005580:	f7fb f842 	bl	8000608 <__aeabi_dmul>
 8005584:	a37c      	add	r3, pc, #496	; (adr r3, 8005778 <__ieee754_pow+0x708>)
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	4604      	mov	r4, r0
 800558c:	460d      	mov	r5, r1
 800558e:	f7fb f83b 	bl	8000608 <__aeabi_dmul>
 8005592:	a37b      	add	r3, pc, #492	; (adr r3, 8005780 <__ieee754_pow+0x710>)
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	f7fa fe80 	bl	800029c <__adddf3>
 800559c:	4622      	mov	r2, r4
 800559e:	462b      	mov	r3, r5
 80055a0:	f7fb f832 	bl	8000608 <__aeabi_dmul>
 80055a4:	a378      	add	r3, pc, #480	; (adr r3, 8005788 <__ieee754_pow+0x718>)
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	f7fa fe77 	bl	800029c <__adddf3>
 80055ae:	4622      	mov	r2, r4
 80055b0:	462b      	mov	r3, r5
 80055b2:	f7fb f829 	bl	8000608 <__aeabi_dmul>
 80055b6:	a376      	add	r3, pc, #472	; (adr r3, 8005790 <__ieee754_pow+0x720>)
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	f7fa fe6e 	bl	800029c <__adddf3>
 80055c0:	4622      	mov	r2, r4
 80055c2:	462b      	mov	r3, r5
 80055c4:	f7fb f820 	bl	8000608 <__aeabi_dmul>
 80055c8:	a373      	add	r3, pc, #460	; (adr r3, 8005798 <__ieee754_pow+0x728>)
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	f7fa fe65 	bl	800029c <__adddf3>
 80055d2:	4622      	mov	r2, r4
 80055d4:	462b      	mov	r3, r5
 80055d6:	f7fb f817 	bl	8000608 <__aeabi_dmul>
 80055da:	a371      	add	r3, pc, #452	; (adr r3, 80057a0 <__ieee754_pow+0x730>)
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f7fa fe5c 	bl	800029c <__adddf3>
 80055e4:	4622      	mov	r2, r4
 80055e6:	4606      	mov	r6, r0
 80055e8:	460f      	mov	r7, r1
 80055ea:	462b      	mov	r3, r5
 80055ec:	4620      	mov	r0, r4
 80055ee:	4629      	mov	r1, r5
 80055f0:	f7fb f80a 	bl	8000608 <__aeabi_dmul>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4630      	mov	r0, r6
 80055fa:	4639      	mov	r1, r7
 80055fc:	f7fb f804 	bl	8000608 <__aeabi_dmul>
 8005600:	4642      	mov	r2, r8
 8005602:	4604      	mov	r4, r0
 8005604:	460d      	mov	r5, r1
 8005606:	464b      	mov	r3, r9
 8005608:	ec51 0b18 	vmov	r0, r1, d8
 800560c:	f7fa fe46 	bl	800029c <__adddf3>
 8005610:	ec53 2b19 	vmov	r2, r3, d9
 8005614:	f7fa fff8 	bl	8000608 <__aeabi_dmul>
 8005618:	4622      	mov	r2, r4
 800561a:	462b      	mov	r3, r5
 800561c:	f7fa fe3e 	bl	800029c <__adddf3>
 8005620:	4642      	mov	r2, r8
 8005622:	4682      	mov	sl, r0
 8005624:	468b      	mov	fp, r1
 8005626:	464b      	mov	r3, r9
 8005628:	4640      	mov	r0, r8
 800562a:	4649      	mov	r1, r9
 800562c:	f7fa ffec 	bl	8000608 <__aeabi_dmul>
 8005630:	4b6b      	ldr	r3, [pc, #428]	; (80057e0 <__ieee754_pow+0x770>)
 8005632:	2200      	movs	r2, #0
 8005634:	4606      	mov	r6, r0
 8005636:	460f      	mov	r7, r1
 8005638:	f7fa fe30 	bl	800029c <__adddf3>
 800563c:	4652      	mov	r2, sl
 800563e:	465b      	mov	r3, fp
 8005640:	f7fa fe2c 	bl	800029c <__adddf3>
 8005644:	2000      	movs	r0, #0
 8005646:	4604      	mov	r4, r0
 8005648:	460d      	mov	r5, r1
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	4640      	mov	r0, r8
 8005650:	4649      	mov	r1, r9
 8005652:	f7fa ffd9 	bl	8000608 <__aeabi_dmul>
 8005656:	4b62      	ldr	r3, [pc, #392]	; (80057e0 <__ieee754_pow+0x770>)
 8005658:	4680      	mov	r8, r0
 800565a:	4689      	mov	r9, r1
 800565c:	2200      	movs	r2, #0
 800565e:	4620      	mov	r0, r4
 8005660:	4629      	mov	r1, r5
 8005662:	f7fa fe19 	bl	8000298 <__aeabi_dsub>
 8005666:	4632      	mov	r2, r6
 8005668:	463b      	mov	r3, r7
 800566a:	f7fa fe15 	bl	8000298 <__aeabi_dsub>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4650      	mov	r0, sl
 8005674:	4659      	mov	r1, fp
 8005676:	f7fa fe0f 	bl	8000298 <__aeabi_dsub>
 800567a:	ec53 2b18 	vmov	r2, r3, d8
 800567e:	f7fa ffc3 	bl	8000608 <__aeabi_dmul>
 8005682:	4622      	mov	r2, r4
 8005684:	4606      	mov	r6, r0
 8005686:	460f      	mov	r7, r1
 8005688:	462b      	mov	r3, r5
 800568a:	ec51 0b19 	vmov	r0, r1, d9
 800568e:	f7fa ffbb 	bl	8000608 <__aeabi_dmul>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4630      	mov	r0, r6
 8005698:	4639      	mov	r1, r7
 800569a:	f7fa fdff 	bl	800029c <__adddf3>
 800569e:	4606      	mov	r6, r0
 80056a0:	460f      	mov	r7, r1
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4640      	mov	r0, r8
 80056a8:	4649      	mov	r1, r9
 80056aa:	f7fa fdf7 	bl	800029c <__adddf3>
 80056ae:	a33e      	add	r3, pc, #248	; (adr r3, 80057a8 <__ieee754_pow+0x738>)
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	2000      	movs	r0, #0
 80056b6:	4604      	mov	r4, r0
 80056b8:	460d      	mov	r5, r1
 80056ba:	f7fa ffa5 	bl	8000608 <__aeabi_dmul>
 80056be:	4642      	mov	r2, r8
 80056c0:	ec41 0b18 	vmov	d8, r0, r1
 80056c4:	464b      	mov	r3, r9
 80056c6:	4620      	mov	r0, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	f7fa fde5 	bl	8000298 <__aeabi_dsub>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4630      	mov	r0, r6
 80056d4:	4639      	mov	r1, r7
 80056d6:	f7fa fddf 	bl	8000298 <__aeabi_dsub>
 80056da:	a335      	add	r3, pc, #212	; (adr r3, 80057b0 <__ieee754_pow+0x740>)
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	f7fa ff92 	bl	8000608 <__aeabi_dmul>
 80056e4:	a334      	add	r3, pc, #208	; (adr r3, 80057b8 <__ieee754_pow+0x748>)
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	4606      	mov	r6, r0
 80056ec:	460f      	mov	r7, r1
 80056ee:	4620      	mov	r0, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	f7fa ff89 	bl	8000608 <__aeabi_dmul>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4630      	mov	r0, r6
 80056fc:	4639      	mov	r1, r7
 80056fe:	f7fa fdcd 	bl	800029c <__adddf3>
 8005702:	9a07      	ldr	r2, [sp, #28]
 8005704:	4b37      	ldr	r3, [pc, #220]	; (80057e4 <__ieee754_pow+0x774>)
 8005706:	4413      	add	r3, r2
 8005708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570c:	f7fa fdc6 	bl	800029c <__adddf3>
 8005710:	4682      	mov	sl, r0
 8005712:	9805      	ldr	r0, [sp, #20]
 8005714:	468b      	mov	fp, r1
 8005716:	f7fa ff0d 	bl	8000534 <__aeabi_i2d>
 800571a:	9a07      	ldr	r2, [sp, #28]
 800571c:	4b32      	ldr	r3, [pc, #200]	; (80057e8 <__ieee754_pow+0x778>)
 800571e:	4413      	add	r3, r2
 8005720:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005724:	4606      	mov	r6, r0
 8005726:	460f      	mov	r7, r1
 8005728:	4652      	mov	r2, sl
 800572a:	465b      	mov	r3, fp
 800572c:	ec51 0b18 	vmov	r0, r1, d8
 8005730:	f7fa fdb4 	bl	800029c <__adddf3>
 8005734:	4642      	mov	r2, r8
 8005736:	464b      	mov	r3, r9
 8005738:	f7fa fdb0 	bl	800029c <__adddf3>
 800573c:	4632      	mov	r2, r6
 800573e:	463b      	mov	r3, r7
 8005740:	f7fa fdac 	bl	800029c <__adddf3>
 8005744:	2000      	movs	r0, #0
 8005746:	4632      	mov	r2, r6
 8005748:	463b      	mov	r3, r7
 800574a:	4604      	mov	r4, r0
 800574c:	460d      	mov	r5, r1
 800574e:	f7fa fda3 	bl	8000298 <__aeabi_dsub>
 8005752:	4642      	mov	r2, r8
 8005754:	464b      	mov	r3, r9
 8005756:	f7fa fd9f 	bl	8000298 <__aeabi_dsub>
 800575a:	ec53 2b18 	vmov	r2, r3, d8
 800575e:	f7fa fd9b 	bl	8000298 <__aeabi_dsub>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4650      	mov	r0, sl
 8005768:	4659      	mov	r1, fp
 800576a:	e610      	b.n	800538e <__ieee754_pow+0x31e>
 800576c:	2401      	movs	r4, #1
 800576e:	e6a1      	b.n	80054b4 <__ieee754_pow+0x444>
 8005770:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80057c0 <__ieee754_pow+0x750>
 8005774:	e617      	b.n	80053a6 <__ieee754_pow+0x336>
 8005776:	bf00      	nop
 8005778:	4a454eef 	.word	0x4a454eef
 800577c:	3fca7e28 	.word	0x3fca7e28
 8005780:	93c9db65 	.word	0x93c9db65
 8005784:	3fcd864a 	.word	0x3fcd864a
 8005788:	a91d4101 	.word	0xa91d4101
 800578c:	3fd17460 	.word	0x3fd17460
 8005790:	518f264d 	.word	0x518f264d
 8005794:	3fd55555 	.word	0x3fd55555
 8005798:	db6fabff 	.word	0xdb6fabff
 800579c:	3fdb6db6 	.word	0x3fdb6db6
 80057a0:	33333303 	.word	0x33333303
 80057a4:	3fe33333 	.word	0x3fe33333
 80057a8:	e0000000 	.word	0xe0000000
 80057ac:	3feec709 	.word	0x3feec709
 80057b0:	dc3a03fd 	.word	0xdc3a03fd
 80057b4:	3feec709 	.word	0x3feec709
 80057b8:	145b01f5 	.word	0x145b01f5
 80057bc:	be3e2fe0 	.word	0xbe3e2fe0
 80057c0:	00000000 	.word	0x00000000
 80057c4:	3ff00000 	.word	0x3ff00000
 80057c8:	7ff00000 	.word	0x7ff00000
 80057cc:	43400000 	.word	0x43400000
 80057d0:	0003988e 	.word	0x0003988e
 80057d4:	000bb679 	.word	0x000bb679
 80057d8:	080067a0 	.word	0x080067a0
 80057dc:	3ff00000 	.word	0x3ff00000
 80057e0:	40080000 	.word	0x40080000
 80057e4:	080067c0 	.word	0x080067c0
 80057e8:	080067b0 	.word	0x080067b0
 80057ec:	a3b3      	add	r3, pc, #716	; (adr r3, 8005abc <__ieee754_pow+0xa4c>)
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	4640      	mov	r0, r8
 80057f4:	4649      	mov	r1, r9
 80057f6:	f7fa fd51 	bl	800029c <__adddf3>
 80057fa:	4622      	mov	r2, r4
 80057fc:	ec41 0b1a 	vmov	d10, r0, r1
 8005800:	462b      	mov	r3, r5
 8005802:	4630      	mov	r0, r6
 8005804:	4639      	mov	r1, r7
 8005806:	f7fa fd47 	bl	8000298 <__aeabi_dsub>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	ec51 0b1a 	vmov	r0, r1, d10
 8005812:	f7fb f989 	bl	8000b28 <__aeabi_dcmpgt>
 8005816:	2800      	cmp	r0, #0
 8005818:	f47f ae04 	bne.w	8005424 <__ieee754_pow+0x3b4>
 800581c:	4aa2      	ldr	r2, [pc, #648]	; (8005aa8 <__ieee754_pow+0xa38>)
 800581e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005822:	4293      	cmp	r3, r2
 8005824:	f340 8107 	ble.w	8005a36 <__ieee754_pow+0x9c6>
 8005828:	151b      	asrs	r3, r3, #20
 800582a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800582e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005832:	fa4a fa03 	asr.w	sl, sl, r3
 8005836:	44da      	add	sl, fp
 8005838:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800583c:	489b      	ldr	r0, [pc, #620]	; (8005aac <__ieee754_pow+0xa3c>)
 800583e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005842:	4108      	asrs	r0, r1
 8005844:	ea00 030a 	and.w	r3, r0, sl
 8005848:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800584c:	f1c1 0114 	rsb	r1, r1, #20
 8005850:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005854:	fa4a fa01 	asr.w	sl, sl, r1
 8005858:	f1bb 0f00 	cmp.w	fp, #0
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	4620      	mov	r0, r4
 8005862:	4629      	mov	r1, r5
 8005864:	bfb8      	it	lt
 8005866:	f1ca 0a00 	rsblt	sl, sl, #0
 800586a:	f7fa fd15 	bl	8000298 <__aeabi_dsub>
 800586e:	ec41 0b19 	vmov	d9, r0, r1
 8005872:	4642      	mov	r2, r8
 8005874:	464b      	mov	r3, r9
 8005876:	ec51 0b19 	vmov	r0, r1, d9
 800587a:	f7fa fd0f 	bl	800029c <__adddf3>
 800587e:	a37a      	add	r3, pc, #488	; (adr r3, 8005a68 <__ieee754_pow+0x9f8>)
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	2000      	movs	r0, #0
 8005886:	4604      	mov	r4, r0
 8005888:	460d      	mov	r5, r1
 800588a:	f7fa febd 	bl	8000608 <__aeabi_dmul>
 800588e:	ec53 2b19 	vmov	r2, r3, d9
 8005892:	4606      	mov	r6, r0
 8005894:	460f      	mov	r7, r1
 8005896:	4620      	mov	r0, r4
 8005898:	4629      	mov	r1, r5
 800589a:	f7fa fcfd 	bl	8000298 <__aeabi_dsub>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4640      	mov	r0, r8
 80058a4:	4649      	mov	r1, r9
 80058a6:	f7fa fcf7 	bl	8000298 <__aeabi_dsub>
 80058aa:	a371      	add	r3, pc, #452	; (adr r3, 8005a70 <__ieee754_pow+0xa00>)
 80058ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b0:	f7fa feaa 	bl	8000608 <__aeabi_dmul>
 80058b4:	a370      	add	r3, pc, #448	; (adr r3, 8005a78 <__ieee754_pow+0xa08>)
 80058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ba:	4680      	mov	r8, r0
 80058bc:	4689      	mov	r9, r1
 80058be:	4620      	mov	r0, r4
 80058c0:	4629      	mov	r1, r5
 80058c2:	f7fa fea1 	bl	8000608 <__aeabi_dmul>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4640      	mov	r0, r8
 80058cc:	4649      	mov	r1, r9
 80058ce:	f7fa fce5 	bl	800029c <__adddf3>
 80058d2:	4604      	mov	r4, r0
 80058d4:	460d      	mov	r5, r1
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4630      	mov	r0, r6
 80058dc:	4639      	mov	r1, r7
 80058de:	f7fa fcdd 	bl	800029c <__adddf3>
 80058e2:	4632      	mov	r2, r6
 80058e4:	463b      	mov	r3, r7
 80058e6:	4680      	mov	r8, r0
 80058e8:	4689      	mov	r9, r1
 80058ea:	f7fa fcd5 	bl	8000298 <__aeabi_dsub>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4620      	mov	r0, r4
 80058f4:	4629      	mov	r1, r5
 80058f6:	f7fa fccf 	bl	8000298 <__aeabi_dsub>
 80058fa:	4642      	mov	r2, r8
 80058fc:	4606      	mov	r6, r0
 80058fe:	460f      	mov	r7, r1
 8005900:	464b      	mov	r3, r9
 8005902:	4640      	mov	r0, r8
 8005904:	4649      	mov	r1, r9
 8005906:	f7fa fe7f 	bl	8000608 <__aeabi_dmul>
 800590a:	a35d      	add	r3, pc, #372	; (adr r3, 8005a80 <__ieee754_pow+0xa10>)
 800590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005910:	4604      	mov	r4, r0
 8005912:	460d      	mov	r5, r1
 8005914:	f7fa fe78 	bl	8000608 <__aeabi_dmul>
 8005918:	a35b      	add	r3, pc, #364	; (adr r3, 8005a88 <__ieee754_pow+0xa18>)
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f7fa fcbb 	bl	8000298 <__aeabi_dsub>
 8005922:	4622      	mov	r2, r4
 8005924:	462b      	mov	r3, r5
 8005926:	f7fa fe6f 	bl	8000608 <__aeabi_dmul>
 800592a:	a359      	add	r3, pc, #356	; (adr r3, 8005a90 <__ieee754_pow+0xa20>)
 800592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005930:	f7fa fcb4 	bl	800029c <__adddf3>
 8005934:	4622      	mov	r2, r4
 8005936:	462b      	mov	r3, r5
 8005938:	f7fa fe66 	bl	8000608 <__aeabi_dmul>
 800593c:	a356      	add	r3, pc, #344	; (adr r3, 8005a98 <__ieee754_pow+0xa28>)
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	f7fa fca9 	bl	8000298 <__aeabi_dsub>
 8005946:	4622      	mov	r2, r4
 8005948:	462b      	mov	r3, r5
 800594a:	f7fa fe5d 	bl	8000608 <__aeabi_dmul>
 800594e:	a354      	add	r3, pc, #336	; (adr r3, 8005aa0 <__ieee754_pow+0xa30>)
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	f7fa fca2 	bl	800029c <__adddf3>
 8005958:	4622      	mov	r2, r4
 800595a:	462b      	mov	r3, r5
 800595c:	f7fa fe54 	bl	8000608 <__aeabi_dmul>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4640      	mov	r0, r8
 8005966:	4649      	mov	r1, r9
 8005968:	f7fa fc96 	bl	8000298 <__aeabi_dsub>
 800596c:	4604      	mov	r4, r0
 800596e:	460d      	mov	r5, r1
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4640      	mov	r0, r8
 8005976:	4649      	mov	r1, r9
 8005978:	f7fa fe46 	bl	8000608 <__aeabi_dmul>
 800597c:	2200      	movs	r2, #0
 800597e:	ec41 0b19 	vmov	d9, r0, r1
 8005982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005986:	4620      	mov	r0, r4
 8005988:	4629      	mov	r1, r5
 800598a:	f7fa fc85 	bl	8000298 <__aeabi_dsub>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	ec51 0b19 	vmov	r0, r1, d9
 8005996:	f7fa ff61 	bl	800085c <__aeabi_ddiv>
 800599a:	4632      	mov	r2, r6
 800599c:	4604      	mov	r4, r0
 800599e:	460d      	mov	r5, r1
 80059a0:	463b      	mov	r3, r7
 80059a2:	4640      	mov	r0, r8
 80059a4:	4649      	mov	r1, r9
 80059a6:	f7fa fe2f 	bl	8000608 <__aeabi_dmul>
 80059aa:	4632      	mov	r2, r6
 80059ac:	463b      	mov	r3, r7
 80059ae:	f7fa fc75 	bl	800029c <__adddf3>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4620      	mov	r0, r4
 80059b8:	4629      	mov	r1, r5
 80059ba:	f7fa fc6d 	bl	8000298 <__aeabi_dsub>
 80059be:	4642      	mov	r2, r8
 80059c0:	464b      	mov	r3, r9
 80059c2:	f7fa fc69 	bl	8000298 <__aeabi_dsub>
 80059c6:	460b      	mov	r3, r1
 80059c8:	4602      	mov	r2, r0
 80059ca:	4939      	ldr	r1, [pc, #228]	; (8005ab0 <__ieee754_pow+0xa40>)
 80059cc:	2000      	movs	r0, #0
 80059ce:	f7fa fc63 	bl	8000298 <__aeabi_dsub>
 80059d2:	ec41 0b10 	vmov	d0, r0, r1
 80059d6:	ee10 3a90 	vmov	r3, s1
 80059da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80059de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059e2:	da2b      	bge.n	8005a3c <__ieee754_pow+0x9cc>
 80059e4:	4650      	mov	r0, sl
 80059e6:	f000 f877 	bl	8005ad8 <scalbn>
 80059ea:	ec51 0b10 	vmov	r0, r1, d0
 80059ee:	ec53 2b18 	vmov	r2, r3, d8
 80059f2:	f7ff bbee 	b.w	80051d2 <__ieee754_pow+0x162>
 80059f6:	4b2f      	ldr	r3, [pc, #188]	; (8005ab4 <__ieee754_pow+0xa44>)
 80059f8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80059fc:	429e      	cmp	r6, r3
 80059fe:	f77f af0d 	ble.w	800581c <__ieee754_pow+0x7ac>
 8005a02:	4b2d      	ldr	r3, [pc, #180]	; (8005ab8 <__ieee754_pow+0xa48>)
 8005a04:	440b      	add	r3, r1
 8005a06:	4303      	orrs	r3, r0
 8005a08:	d009      	beq.n	8005a1e <__ieee754_pow+0x9ae>
 8005a0a:	ec51 0b18 	vmov	r0, r1, d8
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2300      	movs	r3, #0
 8005a12:	f7fb f86b 	bl	8000aec <__aeabi_dcmplt>
 8005a16:	3800      	subs	r0, #0
 8005a18:	bf18      	it	ne
 8005a1a:	2001      	movne	r0, #1
 8005a1c:	e448      	b.n	80052b0 <__ieee754_pow+0x240>
 8005a1e:	4622      	mov	r2, r4
 8005a20:	462b      	mov	r3, r5
 8005a22:	f7fa fc39 	bl	8000298 <__aeabi_dsub>
 8005a26:	4642      	mov	r2, r8
 8005a28:	464b      	mov	r3, r9
 8005a2a:	f7fb f873 	bl	8000b14 <__aeabi_dcmpge>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f43f aef4 	beq.w	800581c <__ieee754_pow+0x7ac>
 8005a34:	e7e9      	b.n	8005a0a <__ieee754_pow+0x99a>
 8005a36:	f04f 0a00 	mov.w	sl, #0
 8005a3a:	e71a      	b.n	8005872 <__ieee754_pow+0x802>
 8005a3c:	ec51 0b10 	vmov	r0, r1, d0
 8005a40:	4619      	mov	r1, r3
 8005a42:	e7d4      	b.n	80059ee <__ieee754_pow+0x97e>
 8005a44:	491a      	ldr	r1, [pc, #104]	; (8005ab0 <__ieee754_pow+0xa40>)
 8005a46:	2000      	movs	r0, #0
 8005a48:	f7ff bb31 	b.w	80050ae <__ieee754_pow+0x3e>
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	2100      	movs	r1, #0
 8005a50:	f7ff bb2d 	b.w	80050ae <__ieee754_pow+0x3e>
 8005a54:	4630      	mov	r0, r6
 8005a56:	4639      	mov	r1, r7
 8005a58:	f7ff bb29 	b.w	80050ae <__ieee754_pow+0x3e>
 8005a5c:	9204      	str	r2, [sp, #16]
 8005a5e:	f7ff bb7b 	b.w	8005158 <__ieee754_pow+0xe8>
 8005a62:	2300      	movs	r3, #0
 8005a64:	f7ff bb65 	b.w	8005132 <__ieee754_pow+0xc2>
 8005a68:	00000000 	.word	0x00000000
 8005a6c:	3fe62e43 	.word	0x3fe62e43
 8005a70:	fefa39ef 	.word	0xfefa39ef
 8005a74:	3fe62e42 	.word	0x3fe62e42
 8005a78:	0ca86c39 	.word	0x0ca86c39
 8005a7c:	be205c61 	.word	0xbe205c61
 8005a80:	72bea4d0 	.word	0x72bea4d0
 8005a84:	3e663769 	.word	0x3e663769
 8005a88:	c5d26bf1 	.word	0xc5d26bf1
 8005a8c:	3ebbbd41 	.word	0x3ebbbd41
 8005a90:	af25de2c 	.word	0xaf25de2c
 8005a94:	3f11566a 	.word	0x3f11566a
 8005a98:	16bebd93 	.word	0x16bebd93
 8005a9c:	3f66c16c 	.word	0x3f66c16c
 8005aa0:	5555553e 	.word	0x5555553e
 8005aa4:	3fc55555 	.word	0x3fc55555
 8005aa8:	3fe00000 	.word	0x3fe00000
 8005aac:	fff00000 	.word	0xfff00000
 8005ab0:	3ff00000 	.word	0x3ff00000
 8005ab4:	4090cbff 	.word	0x4090cbff
 8005ab8:	3f6f3400 	.word	0x3f6f3400
 8005abc:	652b82fe 	.word	0x652b82fe
 8005ac0:	3c971547 	.word	0x3c971547

08005ac4 <fabs>:
 8005ac4:	ec51 0b10 	vmov	r0, r1, d0
 8005ac8:	ee10 2a10 	vmov	r2, s0
 8005acc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ad0:	ec43 2b10 	vmov	d0, r2, r3
 8005ad4:	4770      	bx	lr
	...

08005ad8 <scalbn>:
 8005ad8:	b570      	push	{r4, r5, r6, lr}
 8005ada:	ec55 4b10 	vmov	r4, r5, d0
 8005ade:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	462b      	mov	r3, r5
 8005ae6:	b999      	cbnz	r1, 8005b10 <scalbn+0x38>
 8005ae8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005aec:	4323      	orrs	r3, r4
 8005aee:	d03f      	beq.n	8005b70 <scalbn+0x98>
 8005af0:	4b35      	ldr	r3, [pc, #212]	; (8005bc8 <scalbn+0xf0>)
 8005af2:	4629      	mov	r1, r5
 8005af4:	ee10 0a10 	vmov	r0, s0
 8005af8:	2200      	movs	r2, #0
 8005afa:	f7fa fd85 	bl	8000608 <__aeabi_dmul>
 8005afe:	4b33      	ldr	r3, [pc, #204]	; (8005bcc <scalbn+0xf4>)
 8005b00:	429e      	cmp	r6, r3
 8005b02:	4604      	mov	r4, r0
 8005b04:	460d      	mov	r5, r1
 8005b06:	da10      	bge.n	8005b2a <scalbn+0x52>
 8005b08:	a327      	add	r3, pc, #156	; (adr r3, 8005ba8 <scalbn+0xd0>)
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	e01f      	b.n	8005b50 <scalbn+0x78>
 8005b10:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005b14:	4291      	cmp	r1, r2
 8005b16:	d10c      	bne.n	8005b32 <scalbn+0x5a>
 8005b18:	ee10 2a10 	vmov	r2, s0
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	4629      	mov	r1, r5
 8005b20:	f7fa fbbc 	bl	800029c <__adddf3>
 8005b24:	4604      	mov	r4, r0
 8005b26:	460d      	mov	r5, r1
 8005b28:	e022      	b.n	8005b70 <scalbn+0x98>
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005b30:	3936      	subs	r1, #54	; 0x36
 8005b32:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005b36:	4296      	cmp	r6, r2
 8005b38:	dd0d      	ble.n	8005b56 <scalbn+0x7e>
 8005b3a:	2d00      	cmp	r5, #0
 8005b3c:	a11c      	add	r1, pc, #112	; (adr r1, 8005bb0 <scalbn+0xd8>)
 8005b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b42:	da02      	bge.n	8005b4a <scalbn+0x72>
 8005b44:	a11c      	add	r1, pc, #112	; (adr r1, 8005bb8 <scalbn+0xe0>)
 8005b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b4a:	a319      	add	r3, pc, #100	; (adr r3, 8005bb0 <scalbn+0xd8>)
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	f7fa fd5a 	bl	8000608 <__aeabi_dmul>
 8005b54:	e7e6      	b.n	8005b24 <scalbn+0x4c>
 8005b56:	1872      	adds	r2, r6, r1
 8005b58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005b5c:	428a      	cmp	r2, r1
 8005b5e:	dcec      	bgt.n	8005b3a <scalbn+0x62>
 8005b60:	2a00      	cmp	r2, #0
 8005b62:	dd08      	ble.n	8005b76 <scalbn+0x9e>
 8005b64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005b70:	ec45 4b10 	vmov	d0, r4, r5
 8005b74:	bd70      	pop	{r4, r5, r6, pc}
 8005b76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005b7a:	da08      	bge.n	8005b8e <scalbn+0xb6>
 8005b7c:	2d00      	cmp	r5, #0
 8005b7e:	a10a      	add	r1, pc, #40	; (adr r1, 8005ba8 <scalbn+0xd0>)
 8005b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b84:	dac0      	bge.n	8005b08 <scalbn+0x30>
 8005b86:	a10e      	add	r1, pc, #56	; (adr r1, 8005bc0 <scalbn+0xe8>)
 8005b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b8c:	e7bc      	b.n	8005b08 <scalbn+0x30>
 8005b8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b92:	3236      	adds	r2, #54	; 0x36
 8005b94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <scalbn+0xf8>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	e7d5      	b.n	8005b50 <scalbn+0x78>
 8005ba4:	f3af 8000 	nop.w
 8005ba8:	c2f8f359 	.word	0xc2f8f359
 8005bac:	01a56e1f 	.word	0x01a56e1f
 8005bb0:	8800759c 	.word	0x8800759c
 8005bb4:	7e37e43c 	.word	0x7e37e43c
 8005bb8:	8800759c 	.word	0x8800759c
 8005bbc:	fe37e43c 	.word	0xfe37e43c
 8005bc0:	c2f8f359 	.word	0xc2f8f359
 8005bc4:	81a56e1f 	.word	0x81a56e1f
 8005bc8:	43500000 	.word	0x43500000
 8005bcc:	ffff3cb0 	.word	0xffff3cb0
 8005bd0:	3c900000 	.word	0x3c900000

08005bd4 <with_errno>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	460d      	mov	r5, r1
 8005bda:	4616      	mov	r6, r2
 8005bdc:	f000 f940 	bl	8005e60 <__errno>
 8005be0:	4629      	mov	r1, r5
 8005be2:	6006      	str	r6, [r0, #0]
 8005be4:	4620      	mov	r0, r4
 8005be6:	bd70      	pop	{r4, r5, r6, pc}

08005be8 <xflow>:
 8005be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bea:	4614      	mov	r4, r2
 8005bec:	461d      	mov	r5, r3
 8005bee:	b108      	cbz	r0, 8005bf4 <xflow+0xc>
 8005bf0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005bf4:	e9cd 2300 	strd	r2, r3, [sp]
 8005bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	4629      	mov	r1, r5
 8005c00:	f7fa fd02 	bl	8000608 <__aeabi_dmul>
 8005c04:	2222      	movs	r2, #34	; 0x22
 8005c06:	b003      	add	sp, #12
 8005c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c0c:	f7ff bfe2 	b.w	8005bd4 <with_errno>

08005c10 <__math_uflow>:
 8005c10:	b508      	push	{r3, lr}
 8005c12:	2200      	movs	r2, #0
 8005c14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005c18:	f7ff ffe6 	bl	8005be8 <xflow>
 8005c1c:	ec41 0b10 	vmov	d0, r0, r1
 8005c20:	bd08      	pop	{r3, pc}

08005c22 <__math_oflow>:
 8005c22:	b508      	push	{r3, lr}
 8005c24:	2200      	movs	r2, #0
 8005c26:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005c2a:	f7ff ffdd 	bl	8005be8 <xflow>
 8005c2e:	ec41 0b10 	vmov	d0, r0, r1
 8005c32:	bd08      	pop	{r3, pc}

08005c34 <__ieee754_sqrt>:
 8005c34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	ec55 4b10 	vmov	r4, r5, d0
 8005c3c:	4e67      	ldr	r6, [pc, #412]	; (8005ddc <__ieee754_sqrt+0x1a8>)
 8005c3e:	43ae      	bics	r6, r5
 8005c40:	ee10 0a10 	vmov	r0, s0
 8005c44:	ee10 2a10 	vmov	r2, s0
 8005c48:	4629      	mov	r1, r5
 8005c4a:	462b      	mov	r3, r5
 8005c4c:	d10d      	bne.n	8005c6a <__ieee754_sqrt+0x36>
 8005c4e:	f7fa fcdb 	bl	8000608 <__aeabi_dmul>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4620      	mov	r0, r4
 8005c58:	4629      	mov	r1, r5
 8005c5a:	f7fa fb1f 	bl	800029c <__adddf3>
 8005c5e:	4604      	mov	r4, r0
 8005c60:	460d      	mov	r5, r1
 8005c62:	ec45 4b10 	vmov	d0, r4, r5
 8005c66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6a:	2d00      	cmp	r5, #0
 8005c6c:	dc0b      	bgt.n	8005c86 <__ieee754_sqrt+0x52>
 8005c6e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005c72:	4326      	orrs	r6, r4
 8005c74:	d0f5      	beq.n	8005c62 <__ieee754_sqrt+0x2e>
 8005c76:	b135      	cbz	r5, 8005c86 <__ieee754_sqrt+0x52>
 8005c78:	f7fa fb0e 	bl	8000298 <__aeabi_dsub>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	f7fa fdec 	bl	800085c <__aeabi_ddiv>
 8005c84:	e7eb      	b.n	8005c5e <__ieee754_sqrt+0x2a>
 8005c86:	1509      	asrs	r1, r1, #20
 8005c88:	f000 808d 	beq.w	8005da6 <__ieee754_sqrt+0x172>
 8005c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c90:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8005c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c98:	07c9      	lsls	r1, r1, #31
 8005c9a:	bf5c      	itt	pl
 8005c9c:	005b      	lslpl	r3, r3, #1
 8005c9e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8005ca2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005ca6:	bf58      	it	pl
 8005ca8:	0052      	lslpl	r2, r2, #1
 8005caa:	2500      	movs	r5, #0
 8005cac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005cb0:	1076      	asrs	r6, r6, #1
 8005cb2:	0052      	lsls	r2, r2, #1
 8005cb4:	f04f 0e16 	mov.w	lr, #22
 8005cb8:	46ac      	mov	ip, r5
 8005cba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cbe:	eb0c 0001 	add.w	r0, ip, r1
 8005cc2:	4298      	cmp	r0, r3
 8005cc4:	bfde      	ittt	le
 8005cc6:	1a1b      	suble	r3, r3, r0
 8005cc8:	eb00 0c01 	addle.w	ip, r0, r1
 8005ccc:	186d      	addle	r5, r5, r1
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	f1be 0e01 	subs.w	lr, lr, #1
 8005cd4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005cd8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005cdc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005ce0:	d1ed      	bne.n	8005cbe <__ieee754_sqrt+0x8a>
 8005ce2:	4674      	mov	r4, lr
 8005ce4:	2720      	movs	r7, #32
 8005ce6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005cea:	4563      	cmp	r3, ip
 8005cec:	eb01 000e 	add.w	r0, r1, lr
 8005cf0:	dc02      	bgt.n	8005cf8 <__ieee754_sqrt+0xc4>
 8005cf2:	d113      	bne.n	8005d1c <__ieee754_sqrt+0xe8>
 8005cf4:	4290      	cmp	r0, r2
 8005cf6:	d811      	bhi.n	8005d1c <__ieee754_sqrt+0xe8>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	eb00 0e01 	add.w	lr, r0, r1
 8005cfe:	da57      	bge.n	8005db0 <__ieee754_sqrt+0x17c>
 8005d00:	f1be 0f00 	cmp.w	lr, #0
 8005d04:	db54      	blt.n	8005db0 <__ieee754_sqrt+0x17c>
 8005d06:	f10c 0801 	add.w	r8, ip, #1
 8005d0a:	eba3 030c 	sub.w	r3, r3, ip
 8005d0e:	4290      	cmp	r0, r2
 8005d10:	bf88      	it	hi
 8005d12:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005d16:	1a12      	subs	r2, r2, r0
 8005d18:	440c      	add	r4, r1
 8005d1a:	46c4      	mov	ip, r8
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	3f01      	subs	r7, #1
 8005d20:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005d24:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005d28:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005d2c:	d1dd      	bne.n	8005cea <__ieee754_sqrt+0xb6>
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	d01b      	beq.n	8005d6a <__ieee754_sqrt+0x136>
 8005d32:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005de0 <__ieee754_sqrt+0x1ac>
 8005d36:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005de4 <__ieee754_sqrt+0x1b0>
 8005d3a:	e9da 0100 	ldrd	r0, r1, [sl]
 8005d3e:	e9db 2300 	ldrd	r2, r3, [fp]
 8005d42:	f7fa faa9 	bl	8000298 <__aeabi_dsub>
 8005d46:	e9da 8900 	ldrd	r8, r9, [sl]
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4640      	mov	r0, r8
 8005d50:	4649      	mov	r1, r9
 8005d52:	f7fa fed5 	bl	8000b00 <__aeabi_dcmple>
 8005d56:	b140      	cbz	r0, 8005d6a <__ieee754_sqrt+0x136>
 8005d58:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005d5c:	e9da 0100 	ldrd	r0, r1, [sl]
 8005d60:	e9db 2300 	ldrd	r2, r3, [fp]
 8005d64:	d126      	bne.n	8005db4 <__ieee754_sqrt+0x180>
 8005d66:	3501      	adds	r5, #1
 8005d68:	463c      	mov	r4, r7
 8005d6a:	106a      	asrs	r2, r5, #1
 8005d6c:	0863      	lsrs	r3, r4, #1
 8005d6e:	07e9      	lsls	r1, r5, #31
 8005d70:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005d74:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005d78:	bf48      	it	mi
 8005d7a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005d7e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8005d82:	461c      	mov	r4, r3
 8005d84:	e76d      	b.n	8005c62 <__ieee754_sqrt+0x2e>
 8005d86:	0ad3      	lsrs	r3, r2, #11
 8005d88:	3815      	subs	r0, #21
 8005d8a:	0552      	lsls	r2, r2, #21
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0fa      	beq.n	8005d86 <__ieee754_sqrt+0x152>
 8005d90:	02dc      	lsls	r4, r3, #11
 8005d92:	d50a      	bpl.n	8005daa <__ieee754_sqrt+0x176>
 8005d94:	f1c1 0420 	rsb	r4, r1, #32
 8005d98:	fa22 f404 	lsr.w	r4, r2, r4
 8005d9c:	1e4d      	subs	r5, r1, #1
 8005d9e:	408a      	lsls	r2, r1
 8005da0:	4323      	orrs	r3, r4
 8005da2:	1b41      	subs	r1, r0, r5
 8005da4:	e772      	b.n	8005c8c <__ieee754_sqrt+0x58>
 8005da6:	4608      	mov	r0, r1
 8005da8:	e7f0      	b.n	8005d8c <__ieee754_sqrt+0x158>
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	3101      	adds	r1, #1
 8005dae:	e7ef      	b.n	8005d90 <__ieee754_sqrt+0x15c>
 8005db0:	46e0      	mov	r8, ip
 8005db2:	e7aa      	b.n	8005d0a <__ieee754_sqrt+0xd6>
 8005db4:	f7fa fa72 	bl	800029c <__adddf3>
 8005db8:	e9da 8900 	ldrd	r8, r9, [sl]
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4640      	mov	r0, r8
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	f7fa fe92 	bl	8000aec <__aeabi_dcmplt>
 8005dc8:	b120      	cbz	r0, 8005dd4 <__ieee754_sqrt+0x1a0>
 8005dca:	1ca0      	adds	r0, r4, #2
 8005dcc:	bf08      	it	eq
 8005dce:	3501      	addeq	r5, #1
 8005dd0:	3402      	adds	r4, #2
 8005dd2:	e7ca      	b.n	8005d6a <__ieee754_sqrt+0x136>
 8005dd4:	3401      	adds	r4, #1
 8005dd6:	f024 0401 	bic.w	r4, r4, #1
 8005dda:	e7c6      	b.n	8005d6a <__ieee754_sqrt+0x136>
 8005ddc:	7ff00000 	.word	0x7ff00000
 8005de0:	20000020 	.word	0x20000020
 8005de4:	20000028 	.word	0x20000028

08005de8 <sniprintf>:
 8005de8:	b40c      	push	{r2, r3}
 8005dea:	b530      	push	{r4, r5, lr}
 8005dec:	4b17      	ldr	r3, [pc, #92]	; (8005e4c <sniprintf+0x64>)
 8005dee:	1e0c      	subs	r4, r1, #0
 8005df0:	681d      	ldr	r5, [r3, #0]
 8005df2:	b09d      	sub	sp, #116	; 0x74
 8005df4:	da08      	bge.n	8005e08 <sniprintf+0x20>
 8005df6:	238b      	movs	r3, #139	; 0x8b
 8005df8:	602b      	str	r3, [r5, #0]
 8005dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfe:	b01d      	add	sp, #116	; 0x74
 8005e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e04:	b002      	add	sp, #8
 8005e06:	4770      	bx	lr
 8005e08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005e0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e10:	bf14      	ite	ne
 8005e12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e16:	4623      	moveq	r3, r4
 8005e18:	9304      	str	r3, [sp, #16]
 8005e1a:	9307      	str	r3, [sp, #28]
 8005e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e20:	9002      	str	r0, [sp, #8]
 8005e22:	9006      	str	r0, [sp, #24]
 8005e24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e2a:	ab21      	add	r3, sp, #132	; 0x84
 8005e2c:	a902      	add	r1, sp, #8
 8005e2e:	4628      	mov	r0, r5
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	f000 f993 	bl	800615c <_svfiprintf_r>
 8005e36:	1c43      	adds	r3, r0, #1
 8005e38:	bfbc      	itt	lt
 8005e3a:	238b      	movlt	r3, #139	; 0x8b
 8005e3c:	602b      	strlt	r3, [r5, #0]
 8005e3e:	2c00      	cmp	r4, #0
 8005e40:	d0dd      	beq.n	8005dfe <sniprintf+0x16>
 8005e42:	9b02      	ldr	r3, [sp, #8]
 8005e44:	2200      	movs	r2, #0
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	e7d9      	b.n	8005dfe <sniprintf+0x16>
 8005e4a:	bf00      	nop
 8005e4c:	2000007c 	.word	0x2000007c

08005e50 <memset>:
 8005e50:	4402      	add	r2, r0
 8005e52:	4603      	mov	r3, r0
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d100      	bne.n	8005e5a <memset+0xa>
 8005e58:	4770      	bx	lr
 8005e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e5e:	e7f9      	b.n	8005e54 <memset+0x4>

08005e60 <__errno>:
 8005e60:	4b01      	ldr	r3, [pc, #4]	; (8005e68 <__errno+0x8>)
 8005e62:	6818      	ldr	r0, [r3, #0]
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	2000007c 	.word	0x2000007c

08005e6c <__libc_init_array>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	4d0d      	ldr	r5, [pc, #52]	; (8005ea4 <__libc_init_array+0x38>)
 8005e70:	4c0d      	ldr	r4, [pc, #52]	; (8005ea8 <__libc_init_array+0x3c>)
 8005e72:	1b64      	subs	r4, r4, r5
 8005e74:	10a4      	asrs	r4, r4, #2
 8005e76:	2600      	movs	r6, #0
 8005e78:	42a6      	cmp	r6, r4
 8005e7a:	d109      	bne.n	8005e90 <__libc_init_array+0x24>
 8005e7c:	4d0b      	ldr	r5, [pc, #44]	; (8005eac <__libc_init_array+0x40>)
 8005e7e:	4c0c      	ldr	r4, [pc, #48]	; (8005eb0 <__libc_init_array+0x44>)
 8005e80:	f000 fc6a 	bl	8006758 <_init>
 8005e84:	1b64      	subs	r4, r4, r5
 8005e86:	10a4      	asrs	r4, r4, #2
 8005e88:	2600      	movs	r6, #0
 8005e8a:	42a6      	cmp	r6, r4
 8005e8c:	d105      	bne.n	8005e9a <__libc_init_array+0x2e>
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e94:	4798      	blx	r3
 8005e96:	3601      	adds	r6, #1
 8005e98:	e7ee      	b.n	8005e78 <__libc_init_array+0xc>
 8005e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9e:	4798      	blx	r3
 8005ea0:	3601      	adds	r6, #1
 8005ea2:	e7f2      	b.n	8005e8a <__libc_init_array+0x1e>
 8005ea4:	0800680c 	.word	0x0800680c
 8005ea8:	0800680c 	.word	0x0800680c
 8005eac:	0800680c 	.word	0x0800680c
 8005eb0:	08006810 	.word	0x08006810

08005eb4 <__retarget_lock_acquire_recursive>:
 8005eb4:	4770      	bx	lr

08005eb6 <__retarget_lock_release_recursive>:
 8005eb6:	4770      	bx	lr

08005eb8 <_free_r>:
 8005eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eba:	2900      	cmp	r1, #0
 8005ebc:	d044      	beq.n	8005f48 <_free_r+0x90>
 8005ebe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec2:	9001      	str	r0, [sp, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f1a1 0404 	sub.w	r4, r1, #4
 8005eca:	bfb8      	it	lt
 8005ecc:	18e4      	addlt	r4, r4, r3
 8005ece:	f000 f8df 	bl	8006090 <__malloc_lock>
 8005ed2:	4a1e      	ldr	r2, [pc, #120]	; (8005f4c <_free_r+0x94>)
 8005ed4:	9801      	ldr	r0, [sp, #4]
 8005ed6:	6813      	ldr	r3, [r2, #0]
 8005ed8:	b933      	cbnz	r3, 8005ee8 <_free_r+0x30>
 8005eda:	6063      	str	r3, [r4, #4]
 8005edc:	6014      	str	r4, [r2, #0]
 8005ede:	b003      	add	sp, #12
 8005ee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ee4:	f000 b8da 	b.w	800609c <__malloc_unlock>
 8005ee8:	42a3      	cmp	r3, r4
 8005eea:	d908      	bls.n	8005efe <_free_r+0x46>
 8005eec:	6825      	ldr	r5, [r4, #0]
 8005eee:	1961      	adds	r1, r4, r5
 8005ef0:	428b      	cmp	r3, r1
 8005ef2:	bf01      	itttt	eq
 8005ef4:	6819      	ldreq	r1, [r3, #0]
 8005ef6:	685b      	ldreq	r3, [r3, #4]
 8005ef8:	1949      	addeq	r1, r1, r5
 8005efa:	6021      	streq	r1, [r4, #0]
 8005efc:	e7ed      	b.n	8005eda <_free_r+0x22>
 8005efe:	461a      	mov	r2, r3
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	b10b      	cbz	r3, 8005f08 <_free_r+0x50>
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	d9fa      	bls.n	8005efe <_free_r+0x46>
 8005f08:	6811      	ldr	r1, [r2, #0]
 8005f0a:	1855      	adds	r5, r2, r1
 8005f0c:	42a5      	cmp	r5, r4
 8005f0e:	d10b      	bne.n	8005f28 <_free_r+0x70>
 8005f10:	6824      	ldr	r4, [r4, #0]
 8005f12:	4421      	add	r1, r4
 8005f14:	1854      	adds	r4, r2, r1
 8005f16:	42a3      	cmp	r3, r4
 8005f18:	6011      	str	r1, [r2, #0]
 8005f1a:	d1e0      	bne.n	8005ede <_free_r+0x26>
 8005f1c:	681c      	ldr	r4, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	6053      	str	r3, [r2, #4]
 8005f22:	440c      	add	r4, r1
 8005f24:	6014      	str	r4, [r2, #0]
 8005f26:	e7da      	b.n	8005ede <_free_r+0x26>
 8005f28:	d902      	bls.n	8005f30 <_free_r+0x78>
 8005f2a:	230c      	movs	r3, #12
 8005f2c:	6003      	str	r3, [r0, #0]
 8005f2e:	e7d6      	b.n	8005ede <_free_r+0x26>
 8005f30:	6825      	ldr	r5, [r4, #0]
 8005f32:	1961      	adds	r1, r4, r5
 8005f34:	428b      	cmp	r3, r1
 8005f36:	bf04      	itt	eq
 8005f38:	6819      	ldreq	r1, [r3, #0]
 8005f3a:	685b      	ldreq	r3, [r3, #4]
 8005f3c:	6063      	str	r3, [r4, #4]
 8005f3e:	bf04      	itt	eq
 8005f40:	1949      	addeq	r1, r1, r5
 8005f42:	6021      	streq	r1, [r4, #0]
 8005f44:	6054      	str	r4, [r2, #4]
 8005f46:	e7ca      	b.n	8005ede <_free_r+0x26>
 8005f48:	b003      	add	sp, #12
 8005f4a:	bd30      	pop	{r4, r5, pc}
 8005f4c:	20000730 	.word	0x20000730

08005f50 <sbrk_aligned>:
 8005f50:	b570      	push	{r4, r5, r6, lr}
 8005f52:	4e0e      	ldr	r6, [pc, #56]	; (8005f8c <sbrk_aligned+0x3c>)
 8005f54:	460c      	mov	r4, r1
 8005f56:	6831      	ldr	r1, [r6, #0]
 8005f58:	4605      	mov	r5, r0
 8005f5a:	b911      	cbnz	r1, 8005f62 <sbrk_aligned+0x12>
 8005f5c:	f000 fba6 	bl	80066ac <_sbrk_r>
 8005f60:	6030      	str	r0, [r6, #0]
 8005f62:	4621      	mov	r1, r4
 8005f64:	4628      	mov	r0, r5
 8005f66:	f000 fba1 	bl	80066ac <_sbrk_r>
 8005f6a:	1c43      	adds	r3, r0, #1
 8005f6c:	d00a      	beq.n	8005f84 <sbrk_aligned+0x34>
 8005f6e:	1cc4      	adds	r4, r0, #3
 8005f70:	f024 0403 	bic.w	r4, r4, #3
 8005f74:	42a0      	cmp	r0, r4
 8005f76:	d007      	beq.n	8005f88 <sbrk_aligned+0x38>
 8005f78:	1a21      	subs	r1, r4, r0
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	f000 fb96 	bl	80066ac <_sbrk_r>
 8005f80:	3001      	adds	r0, #1
 8005f82:	d101      	bne.n	8005f88 <sbrk_aligned+0x38>
 8005f84:	f04f 34ff 	mov.w	r4, #4294967295
 8005f88:	4620      	mov	r0, r4
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
 8005f8c:	20000734 	.word	0x20000734

08005f90 <_malloc_r>:
 8005f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f94:	1ccd      	adds	r5, r1, #3
 8005f96:	f025 0503 	bic.w	r5, r5, #3
 8005f9a:	3508      	adds	r5, #8
 8005f9c:	2d0c      	cmp	r5, #12
 8005f9e:	bf38      	it	cc
 8005fa0:	250c      	movcc	r5, #12
 8005fa2:	2d00      	cmp	r5, #0
 8005fa4:	4607      	mov	r7, r0
 8005fa6:	db01      	blt.n	8005fac <_malloc_r+0x1c>
 8005fa8:	42a9      	cmp	r1, r5
 8005faa:	d905      	bls.n	8005fb8 <_malloc_r+0x28>
 8005fac:	230c      	movs	r3, #12
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	2600      	movs	r6, #0
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fb8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800608c <_malloc_r+0xfc>
 8005fbc:	f000 f868 	bl	8006090 <__malloc_lock>
 8005fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8005fc4:	461c      	mov	r4, r3
 8005fc6:	bb5c      	cbnz	r4, 8006020 <_malloc_r+0x90>
 8005fc8:	4629      	mov	r1, r5
 8005fca:	4638      	mov	r0, r7
 8005fcc:	f7ff ffc0 	bl	8005f50 <sbrk_aligned>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	d155      	bne.n	8006082 <_malloc_r+0xf2>
 8005fd6:	f8d8 4000 	ldr.w	r4, [r8]
 8005fda:	4626      	mov	r6, r4
 8005fdc:	2e00      	cmp	r6, #0
 8005fde:	d145      	bne.n	800606c <_malloc_r+0xdc>
 8005fe0:	2c00      	cmp	r4, #0
 8005fe2:	d048      	beq.n	8006076 <_malloc_r+0xe6>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	4631      	mov	r1, r6
 8005fe8:	4638      	mov	r0, r7
 8005fea:	eb04 0903 	add.w	r9, r4, r3
 8005fee:	f000 fb5d 	bl	80066ac <_sbrk_r>
 8005ff2:	4581      	cmp	r9, r0
 8005ff4:	d13f      	bne.n	8006076 <_malloc_r+0xe6>
 8005ff6:	6821      	ldr	r1, [r4, #0]
 8005ff8:	1a6d      	subs	r5, r5, r1
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	f7ff ffa7 	bl	8005f50 <sbrk_aligned>
 8006002:	3001      	adds	r0, #1
 8006004:	d037      	beq.n	8006076 <_malloc_r+0xe6>
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	442b      	add	r3, r5
 800600a:	6023      	str	r3, [r4, #0]
 800600c:	f8d8 3000 	ldr.w	r3, [r8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d038      	beq.n	8006086 <_malloc_r+0xf6>
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	42a2      	cmp	r2, r4
 8006018:	d12b      	bne.n	8006072 <_malloc_r+0xe2>
 800601a:	2200      	movs	r2, #0
 800601c:	605a      	str	r2, [r3, #4]
 800601e:	e00f      	b.n	8006040 <_malloc_r+0xb0>
 8006020:	6822      	ldr	r2, [r4, #0]
 8006022:	1b52      	subs	r2, r2, r5
 8006024:	d41f      	bmi.n	8006066 <_malloc_r+0xd6>
 8006026:	2a0b      	cmp	r2, #11
 8006028:	d917      	bls.n	800605a <_malloc_r+0xca>
 800602a:	1961      	adds	r1, r4, r5
 800602c:	42a3      	cmp	r3, r4
 800602e:	6025      	str	r5, [r4, #0]
 8006030:	bf18      	it	ne
 8006032:	6059      	strne	r1, [r3, #4]
 8006034:	6863      	ldr	r3, [r4, #4]
 8006036:	bf08      	it	eq
 8006038:	f8c8 1000 	streq.w	r1, [r8]
 800603c:	5162      	str	r2, [r4, r5]
 800603e:	604b      	str	r3, [r1, #4]
 8006040:	4638      	mov	r0, r7
 8006042:	f104 060b 	add.w	r6, r4, #11
 8006046:	f000 f829 	bl	800609c <__malloc_unlock>
 800604a:	f026 0607 	bic.w	r6, r6, #7
 800604e:	1d23      	adds	r3, r4, #4
 8006050:	1af2      	subs	r2, r6, r3
 8006052:	d0ae      	beq.n	8005fb2 <_malloc_r+0x22>
 8006054:	1b9b      	subs	r3, r3, r6
 8006056:	50a3      	str	r3, [r4, r2]
 8006058:	e7ab      	b.n	8005fb2 <_malloc_r+0x22>
 800605a:	42a3      	cmp	r3, r4
 800605c:	6862      	ldr	r2, [r4, #4]
 800605e:	d1dd      	bne.n	800601c <_malloc_r+0x8c>
 8006060:	f8c8 2000 	str.w	r2, [r8]
 8006064:	e7ec      	b.n	8006040 <_malloc_r+0xb0>
 8006066:	4623      	mov	r3, r4
 8006068:	6864      	ldr	r4, [r4, #4]
 800606a:	e7ac      	b.n	8005fc6 <_malloc_r+0x36>
 800606c:	4634      	mov	r4, r6
 800606e:	6876      	ldr	r6, [r6, #4]
 8006070:	e7b4      	b.n	8005fdc <_malloc_r+0x4c>
 8006072:	4613      	mov	r3, r2
 8006074:	e7cc      	b.n	8006010 <_malloc_r+0x80>
 8006076:	230c      	movs	r3, #12
 8006078:	603b      	str	r3, [r7, #0]
 800607a:	4638      	mov	r0, r7
 800607c:	f000 f80e 	bl	800609c <__malloc_unlock>
 8006080:	e797      	b.n	8005fb2 <_malloc_r+0x22>
 8006082:	6025      	str	r5, [r4, #0]
 8006084:	e7dc      	b.n	8006040 <_malloc_r+0xb0>
 8006086:	605b      	str	r3, [r3, #4]
 8006088:	deff      	udf	#255	; 0xff
 800608a:	bf00      	nop
 800608c:	20000730 	.word	0x20000730

08006090 <__malloc_lock>:
 8006090:	4801      	ldr	r0, [pc, #4]	; (8006098 <__malloc_lock+0x8>)
 8006092:	f7ff bf0f 	b.w	8005eb4 <__retarget_lock_acquire_recursive>
 8006096:	bf00      	nop
 8006098:	2000072c 	.word	0x2000072c

0800609c <__malloc_unlock>:
 800609c:	4801      	ldr	r0, [pc, #4]	; (80060a4 <__malloc_unlock+0x8>)
 800609e:	f7ff bf0a 	b.w	8005eb6 <__retarget_lock_release_recursive>
 80060a2:	bf00      	nop
 80060a4:	2000072c 	.word	0x2000072c

080060a8 <__ssputs_r>:
 80060a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	688e      	ldr	r6, [r1, #8]
 80060ae:	461f      	mov	r7, r3
 80060b0:	42be      	cmp	r6, r7
 80060b2:	680b      	ldr	r3, [r1, #0]
 80060b4:	4682      	mov	sl, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	4690      	mov	r8, r2
 80060ba:	d82c      	bhi.n	8006116 <__ssputs_r+0x6e>
 80060bc:	898a      	ldrh	r2, [r1, #12]
 80060be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060c2:	d026      	beq.n	8006112 <__ssputs_r+0x6a>
 80060c4:	6965      	ldr	r5, [r4, #20]
 80060c6:	6909      	ldr	r1, [r1, #16]
 80060c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060cc:	eba3 0901 	sub.w	r9, r3, r1
 80060d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060d4:	1c7b      	adds	r3, r7, #1
 80060d6:	444b      	add	r3, r9
 80060d8:	106d      	asrs	r5, r5, #1
 80060da:	429d      	cmp	r5, r3
 80060dc:	bf38      	it	cc
 80060de:	461d      	movcc	r5, r3
 80060e0:	0553      	lsls	r3, r2, #21
 80060e2:	d527      	bpl.n	8006134 <__ssputs_r+0x8c>
 80060e4:	4629      	mov	r1, r5
 80060e6:	f7ff ff53 	bl	8005f90 <_malloc_r>
 80060ea:	4606      	mov	r6, r0
 80060ec:	b360      	cbz	r0, 8006148 <__ssputs_r+0xa0>
 80060ee:	6921      	ldr	r1, [r4, #16]
 80060f0:	464a      	mov	r2, r9
 80060f2:	f000 faeb 	bl	80066cc <memcpy>
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006100:	81a3      	strh	r3, [r4, #12]
 8006102:	6126      	str	r6, [r4, #16]
 8006104:	6165      	str	r5, [r4, #20]
 8006106:	444e      	add	r6, r9
 8006108:	eba5 0509 	sub.w	r5, r5, r9
 800610c:	6026      	str	r6, [r4, #0]
 800610e:	60a5      	str	r5, [r4, #8]
 8006110:	463e      	mov	r6, r7
 8006112:	42be      	cmp	r6, r7
 8006114:	d900      	bls.n	8006118 <__ssputs_r+0x70>
 8006116:	463e      	mov	r6, r7
 8006118:	6820      	ldr	r0, [r4, #0]
 800611a:	4632      	mov	r2, r6
 800611c:	4641      	mov	r1, r8
 800611e:	f000 faab 	bl	8006678 <memmove>
 8006122:	68a3      	ldr	r3, [r4, #8]
 8006124:	1b9b      	subs	r3, r3, r6
 8006126:	60a3      	str	r3, [r4, #8]
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	4433      	add	r3, r6
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	2000      	movs	r0, #0
 8006130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006134:	462a      	mov	r2, r5
 8006136:	f000 fad7 	bl	80066e8 <_realloc_r>
 800613a:	4606      	mov	r6, r0
 800613c:	2800      	cmp	r0, #0
 800613e:	d1e0      	bne.n	8006102 <__ssputs_r+0x5a>
 8006140:	6921      	ldr	r1, [r4, #16]
 8006142:	4650      	mov	r0, sl
 8006144:	f7ff feb8 	bl	8005eb8 <_free_r>
 8006148:	230c      	movs	r3, #12
 800614a:	f8ca 3000 	str.w	r3, [sl]
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006154:	81a3      	strh	r3, [r4, #12]
 8006156:	f04f 30ff 	mov.w	r0, #4294967295
 800615a:	e7e9      	b.n	8006130 <__ssputs_r+0x88>

0800615c <_svfiprintf_r>:
 800615c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006160:	4698      	mov	r8, r3
 8006162:	898b      	ldrh	r3, [r1, #12]
 8006164:	061b      	lsls	r3, r3, #24
 8006166:	b09d      	sub	sp, #116	; 0x74
 8006168:	4607      	mov	r7, r0
 800616a:	460d      	mov	r5, r1
 800616c:	4614      	mov	r4, r2
 800616e:	d50e      	bpl.n	800618e <_svfiprintf_r+0x32>
 8006170:	690b      	ldr	r3, [r1, #16]
 8006172:	b963      	cbnz	r3, 800618e <_svfiprintf_r+0x32>
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	f7ff ff0b 	bl	8005f90 <_malloc_r>
 800617a:	6028      	str	r0, [r5, #0]
 800617c:	6128      	str	r0, [r5, #16]
 800617e:	b920      	cbnz	r0, 800618a <_svfiprintf_r+0x2e>
 8006180:	230c      	movs	r3, #12
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	f04f 30ff 	mov.w	r0, #4294967295
 8006188:	e0d0      	b.n	800632c <_svfiprintf_r+0x1d0>
 800618a:	2340      	movs	r3, #64	; 0x40
 800618c:	616b      	str	r3, [r5, #20]
 800618e:	2300      	movs	r3, #0
 8006190:	9309      	str	r3, [sp, #36]	; 0x24
 8006192:	2320      	movs	r3, #32
 8006194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006198:	f8cd 800c 	str.w	r8, [sp, #12]
 800619c:	2330      	movs	r3, #48	; 0x30
 800619e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006344 <_svfiprintf_r+0x1e8>
 80061a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061a6:	f04f 0901 	mov.w	r9, #1
 80061aa:	4623      	mov	r3, r4
 80061ac:	469a      	mov	sl, r3
 80061ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061b2:	b10a      	cbz	r2, 80061b8 <_svfiprintf_r+0x5c>
 80061b4:	2a25      	cmp	r2, #37	; 0x25
 80061b6:	d1f9      	bne.n	80061ac <_svfiprintf_r+0x50>
 80061b8:	ebba 0b04 	subs.w	fp, sl, r4
 80061bc:	d00b      	beq.n	80061d6 <_svfiprintf_r+0x7a>
 80061be:	465b      	mov	r3, fp
 80061c0:	4622      	mov	r2, r4
 80061c2:	4629      	mov	r1, r5
 80061c4:	4638      	mov	r0, r7
 80061c6:	f7ff ff6f 	bl	80060a8 <__ssputs_r>
 80061ca:	3001      	adds	r0, #1
 80061cc:	f000 80a9 	beq.w	8006322 <_svfiprintf_r+0x1c6>
 80061d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d2:	445a      	add	r2, fp
 80061d4:	9209      	str	r2, [sp, #36]	; 0x24
 80061d6:	f89a 3000 	ldrb.w	r3, [sl]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 80a1 	beq.w	8006322 <_svfiprintf_r+0x1c6>
 80061e0:	2300      	movs	r3, #0
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295
 80061e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ea:	f10a 0a01 	add.w	sl, sl, #1
 80061ee:	9304      	str	r3, [sp, #16]
 80061f0:	9307      	str	r3, [sp, #28]
 80061f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061f6:	931a      	str	r3, [sp, #104]	; 0x68
 80061f8:	4654      	mov	r4, sl
 80061fa:	2205      	movs	r2, #5
 80061fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006200:	4850      	ldr	r0, [pc, #320]	; (8006344 <_svfiprintf_r+0x1e8>)
 8006202:	f7f9 fff5 	bl	80001f0 <memchr>
 8006206:	9a04      	ldr	r2, [sp, #16]
 8006208:	b9d8      	cbnz	r0, 8006242 <_svfiprintf_r+0xe6>
 800620a:	06d0      	lsls	r0, r2, #27
 800620c:	bf44      	itt	mi
 800620e:	2320      	movmi	r3, #32
 8006210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006214:	0711      	lsls	r1, r2, #28
 8006216:	bf44      	itt	mi
 8006218:	232b      	movmi	r3, #43	; 0x2b
 800621a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800621e:	f89a 3000 	ldrb.w	r3, [sl]
 8006222:	2b2a      	cmp	r3, #42	; 0x2a
 8006224:	d015      	beq.n	8006252 <_svfiprintf_r+0xf6>
 8006226:	9a07      	ldr	r2, [sp, #28]
 8006228:	4654      	mov	r4, sl
 800622a:	2000      	movs	r0, #0
 800622c:	f04f 0c0a 	mov.w	ip, #10
 8006230:	4621      	mov	r1, r4
 8006232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006236:	3b30      	subs	r3, #48	; 0x30
 8006238:	2b09      	cmp	r3, #9
 800623a:	d94d      	bls.n	80062d8 <_svfiprintf_r+0x17c>
 800623c:	b1b0      	cbz	r0, 800626c <_svfiprintf_r+0x110>
 800623e:	9207      	str	r2, [sp, #28]
 8006240:	e014      	b.n	800626c <_svfiprintf_r+0x110>
 8006242:	eba0 0308 	sub.w	r3, r0, r8
 8006246:	fa09 f303 	lsl.w	r3, r9, r3
 800624a:	4313      	orrs	r3, r2
 800624c:	9304      	str	r3, [sp, #16]
 800624e:	46a2      	mov	sl, r4
 8006250:	e7d2      	b.n	80061f8 <_svfiprintf_r+0x9c>
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	1d19      	adds	r1, r3, #4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	9103      	str	r1, [sp, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	bfbb      	ittet	lt
 800625e:	425b      	neglt	r3, r3
 8006260:	f042 0202 	orrlt.w	r2, r2, #2
 8006264:	9307      	strge	r3, [sp, #28]
 8006266:	9307      	strlt	r3, [sp, #28]
 8006268:	bfb8      	it	lt
 800626a:	9204      	strlt	r2, [sp, #16]
 800626c:	7823      	ldrb	r3, [r4, #0]
 800626e:	2b2e      	cmp	r3, #46	; 0x2e
 8006270:	d10c      	bne.n	800628c <_svfiprintf_r+0x130>
 8006272:	7863      	ldrb	r3, [r4, #1]
 8006274:	2b2a      	cmp	r3, #42	; 0x2a
 8006276:	d134      	bne.n	80062e2 <_svfiprintf_r+0x186>
 8006278:	9b03      	ldr	r3, [sp, #12]
 800627a:	1d1a      	adds	r2, r3, #4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	9203      	str	r2, [sp, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	bfb8      	it	lt
 8006284:	f04f 33ff 	movlt.w	r3, #4294967295
 8006288:	3402      	adds	r4, #2
 800628a:	9305      	str	r3, [sp, #20]
 800628c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006354 <_svfiprintf_r+0x1f8>
 8006290:	7821      	ldrb	r1, [r4, #0]
 8006292:	2203      	movs	r2, #3
 8006294:	4650      	mov	r0, sl
 8006296:	f7f9 ffab 	bl	80001f0 <memchr>
 800629a:	b138      	cbz	r0, 80062ac <_svfiprintf_r+0x150>
 800629c:	9b04      	ldr	r3, [sp, #16]
 800629e:	eba0 000a 	sub.w	r0, r0, sl
 80062a2:	2240      	movs	r2, #64	; 0x40
 80062a4:	4082      	lsls	r2, r0
 80062a6:	4313      	orrs	r3, r2
 80062a8:	3401      	adds	r4, #1
 80062aa:	9304      	str	r3, [sp, #16]
 80062ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b0:	4825      	ldr	r0, [pc, #148]	; (8006348 <_svfiprintf_r+0x1ec>)
 80062b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062b6:	2206      	movs	r2, #6
 80062b8:	f7f9 ff9a 	bl	80001f0 <memchr>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d038      	beq.n	8006332 <_svfiprintf_r+0x1d6>
 80062c0:	4b22      	ldr	r3, [pc, #136]	; (800634c <_svfiprintf_r+0x1f0>)
 80062c2:	bb1b      	cbnz	r3, 800630c <_svfiprintf_r+0x1b0>
 80062c4:	9b03      	ldr	r3, [sp, #12]
 80062c6:	3307      	adds	r3, #7
 80062c8:	f023 0307 	bic.w	r3, r3, #7
 80062cc:	3308      	adds	r3, #8
 80062ce:	9303      	str	r3, [sp, #12]
 80062d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d2:	4433      	add	r3, r6
 80062d4:	9309      	str	r3, [sp, #36]	; 0x24
 80062d6:	e768      	b.n	80061aa <_svfiprintf_r+0x4e>
 80062d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80062dc:	460c      	mov	r4, r1
 80062de:	2001      	movs	r0, #1
 80062e0:	e7a6      	b.n	8006230 <_svfiprintf_r+0xd4>
 80062e2:	2300      	movs	r3, #0
 80062e4:	3401      	adds	r4, #1
 80062e6:	9305      	str	r3, [sp, #20]
 80062e8:	4619      	mov	r1, r3
 80062ea:	f04f 0c0a 	mov.w	ip, #10
 80062ee:	4620      	mov	r0, r4
 80062f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062f4:	3a30      	subs	r2, #48	; 0x30
 80062f6:	2a09      	cmp	r2, #9
 80062f8:	d903      	bls.n	8006302 <_svfiprintf_r+0x1a6>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0c6      	beq.n	800628c <_svfiprintf_r+0x130>
 80062fe:	9105      	str	r1, [sp, #20]
 8006300:	e7c4      	b.n	800628c <_svfiprintf_r+0x130>
 8006302:	fb0c 2101 	mla	r1, ip, r1, r2
 8006306:	4604      	mov	r4, r0
 8006308:	2301      	movs	r3, #1
 800630a:	e7f0      	b.n	80062ee <_svfiprintf_r+0x192>
 800630c:	ab03      	add	r3, sp, #12
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	462a      	mov	r2, r5
 8006312:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <_svfiprintf_r+0x1f4>)
 8006314:	a904      	add	r1, sp, #16
 8006316:	4638      	mov	r0, r7
 8006318:	f3af 8000 	nop.w
 800631c:	1c42      	adds	r2, r0, #1
 800631e:	4606      	mov	r6, r0
 8006320:	d1d6      	bne.n	80062d0 <_svfiprintf_r+0x174>
 8006322:	89ab      	ldrh	r3, [r5, #12]
 8006324:	065b      	lsls	r3, r3, #25
 8006326:	f53f af2d 	bmi.w	8006184 <_svfiprintf_r+0x28>
 800632a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800632c:	b01d      	add	sp, #116	; 0x74
 800632e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006332:	ab03      	add	r3, sp, #12
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	462a      	mov	r2, r5
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <_svfiprintf_r+0x1f4>)
 800633a:	a904      	add	r1, sp, #16
 800633c:	4638      	mov	r0, r7
 800633e:	f000 f879 	bl	8006434 <_printf_i>
 8006342:	e7eb      	b.n	800631c <_svfiprintf_r+0x1c0>
 8006344:	080067d0 	.word	0x080067d0
 8006348:	080067da 	.word	0x080067da
 800634c:	00000000 	.word	0x00000000
 8006350:	080060a9 	.word	0x080060a9
 8006354:	080067d6 	.word	0x080067d6

08006358 <_printf_common>:
 8006358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800635c:	4616      	mov	r6, r2
 800635e:	4699      	mov	r9, r3
 8006360:	688a      	ldr	r2, [r1, #8]
 8006362:	690b      	ldr	r3, [r1, #16]
 8006364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006368:	4293      	cmp	r3, r2
 800636a:	bfb8      	it	lt
 800636c:	4613      	movlt	r3, r2
 800636e:	6033      	str	r3, [r6, #0]
 8006370:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006374:	4607      	mov	r7, r0
 8006376:	460c      	mov	r4, r1
 8006378:	b10a      	cbz	r2, 800637e <_printf_common+0x26>
 800637a:	3301      	adds	r3, #1
 800637c:	6033      	str	r3, [r6, #0]
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	0699      	lsls	r1, r3, #26
 8006382:	bf42      	ittt	mi
 8006384:	6833      	ldrmi	r3, [r6, #0]
 8006386:	3302      	addmi	r3, #2
 8006388:	6033      	strmi	r3, [r6, #0]
 800638a:	6825      	ldr	r5, [r4, #0]
 800638c:	f015 0506 	ands.w	r5, r5, #6
 8006390:	d106      	bne.n	80063a0 <_printf_common+0x48>
 8006392:	f104 0a19 	add.w	sl, r4, #25
 8006396:	68e3      	ldr	r3, [r4, #12]
 8006398:	6832      	ldr	r2, [r6, #0]
 800639a:	1a9b      	subs	r3, r3, r2
 800639c:	42ab      	cmp	r3, r5
 800639e:	dc26      	bgt.n	80063ee <_printf_common+0x96>
 80063a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063a4:	1e13      	subs	r3, r2, #0
 80063a6:	6822      	ldr	r2, [r4, #0]
 80063a8:	bf18      	it	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	0692      	lsls	r2, r2, #26
 80063ae:	d42b      	bmi.n	8006408 <_printf_common+0xb0>
 80063b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063b4:	4649      	mov	r1, r9
 80063b6:	4638      	mov	r0, r7
 80063b8:	47c0      	blx	r8
 80063ba:	3001      	adds	r0, #1
 80063bc:	d01e      	beq.n	80063fc <_printf_common+0xa4>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	6922      	ldr	r2, [r4, #16]
 80063c2:	f003 0306 	and.w	r3, r3, #6
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	bf02      	ittt	eq
 80063ca:	68e5      	ldreq	r5, [r4, #12]
 80063cc:	6833      	ldreq	r3, [r6, #0]
 80063ce:	1aed      	subeq	r5, r5, r3
 80063d0:	68a3      	ldr	r3, [r4, #8]
 80063d2:	bf0c      	ite	eq
 80063d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063d8:	2500      	movne	r5, #0
 80063da:	4293      	cmp	r3, r2
 80063dc:	bfc4      	itt	gt
 80063de:	1a9b      	subgt	r3, r3, r2
 80063e0:	18ed      	addgt	r5, r5, r3
 80063e2:	2600      	movs	r6, #0
 80063e4:	341a      	adds	r4, #26
 80063e6:	42b5      	cmp	r5, r6
 80063e8:	d11a      	bne.n	8006420 <_printf_common+0xc8>
 80063ea:	2000      	movs	r0, #0
 80063ec:	e008      	b.n	8006400 <_printf_common+0xa8>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4652      	mov	r2, sl
 80063f2:	4649      	mov	r1, r9
 80063f4:	4638      	mov	r0, r7
 80063f6:	47c0      	blx	r8
 80063f8:	3001      	adds	r0, #1
 80063fa:	d103      	bne.n	8006404 <_printf_common+0xac>
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006404:	3501      	adds	r5, #1
 8006406:	e7c6      	b.n	8006396 <_printf_common+0x3e>
 8006408:	18e1      	adds	r1, r4, r3
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	2030      	movs	r0, #48	; 0x30
 800640e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006412:	4422      	add	r2, r4
 8006414:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006418:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800641c:	3302      	adds	r3, #2
 800641e:	e7c7      	b.n	80063b0 <_printf_common+0x58>
 8006420:	2301      	movs	r3, #1
 8006422:	4622      	mov	r2, r4
 8006424:	4649      	mov	r1, r9
 8006426:	4638      	mov	r0, r7
 8006428:	47c0      	blx	r8
 800642a:	3001      	adds	r0, #1
 800642c:	d0e6      	beq.n	80063fc <_printf_common+0xa4>
 800642e:	3601      	adds	r6, #1
 8006430:	e7d9      	b.n	80063e6 <_printf_common+0x8e>
	...

08006434 <_printf_i>:
 8006434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006438:	7e0f      	ldrb	r7, [r1, #24]
 800643a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800643c:	2f78      	cmp	r7, #120	; 0x78
 800643e:	4691      	mov	r9, r2
 8006440:	4680      	mov	r8, r0
 8006442:	460c      	mov	r4, r1
 8006444:	469a      	mov	sl, r3
 8006446:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800644a:	d807      	bhi.n	800645c <_printf_i+0x28>
 800644c:	2f62      	cmp	r7, #98	; 0x62
 800644e:	d80a      	bhi.n	8006466 <_printf_i+0x32>
 8006450:	2f00      	cmp	r7, #0
 8006452:	f000 80d4 	beq.w	80065fe <_printf_i+0x1ca>
 8006456:	2f58      	cmp	r7, #88	; 0x58
 8006458:	f000 80c0 	beq.w	80065dc <_printf_i+0x1a8>
 800645c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006460:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006464:	e03a      	b.n	80064dc <_printf_i+0xa8>
 8006466:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800646a:	2b15      	cmp	r3, #21
 800646c:	d8f6      	bhi.n	800645c <_printf_i+0x28>
 800646e:	a101      	add	r1, pc, #4	; (adr r1, 8006474 <_printf_i+0x40>)
 8006470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006474:	080064cd 	.word	0x080064cd
 8006478:	080064e1 	.word	0x080064e1
 800647c:	0800645d 	.word	0x0800645d
 8006480:	0800645d 	.word	0x0800645d
 8006484:	0800645d 	.word	0x0800645d
 8006488:	0800645d 	.word	0x0800645d
 800648c:	080064e1 	.word	0x080064e1
 8006490:	0800645d 	.word	0x0800645d
 8006494:	0800645d 	.word	0x0800645d
 8006498:	0800645d 	.word	0x0800645d
 800649c:	0800645d 	.word	0x0800645d
 80064a0:	080065e5 	.word	0x080065e5
 80064a4:	0800650d 	.word	0x0800650d
 80064a8:	0800659f 	.word	0x0800659f
 80064ac:	0800645d 	.word	0x0800645d
 80064b0:	0800645d 	.word	0x0800645d
 80064b4:	08006607 	.word	0x08006607
 80064b8:	0800645d 	.word	0x0800645d
 80064bc:	0800650d 	.word	0x0800650d
 80064c0:	0800645d 	.word	0x0800645d
 80064c4:	0800645d 	.word	0x0800645d
 80064c8:	080065a7 	.word	0x080065a7
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	1d1a      	adds	r2, r3, #4
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	602a      	str	r2, [r5, #0]
 80064d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064dc:	2301      	movs	r3, #1
 80064de:	e09f      	b.n	8006620 <_printf_i+0x1ec>
 80064e0:	6820      	ldr	r0, [r4, #0]
 80064e2:	682b      	ldr	r3, [r5, #0]
 80064e4:	0607      	lsls	r7, r0, #24
 80064e6:	f103 0104 	add.w	r1, r3, #4
 80064ea:	6029      	str	r1, [r5, #0]
 80064ec:	d501      	bpl.n	80064f2 <_printf_i+0xbe>
 80064ee:	681e      	ldr	r6, [r3, #0]
 80064f0:	e003      	b.n	80064fa <_printf_i+0xc6>
 80064f2:	0646      	lsls	r6, r0, #25
 80064f4:	d5fb      	bpl.n	80064ee <_printf_i+0xba>
 80064f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80064fa:	2e00      	cmp	r6, #0
 80064fc:	da03      	bge.n	8006506 <_printf_i+0xd2>
 80064fe:	232d      	movs	r3, #45	; 0x2d
 8006500:	4276      	negs	r6, r6
 8006502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006506:	485a      	ldr	r0, [pc, #360]	; (8006670 <_printf_i+0x23c>)
 8006508:	230a      	movs	r3, #10
 800650a:	e012      	b.n	8006532 <_printf_i+0xfe>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	6820      	ldr	r0, [r4, #0]
 8006510:	1d19      	adds	r1, r3, #4
 8006512:	6029      	str	r1, [r5, #0]
 8006514:	0605      	lsls	r5, r0, #24
 8006516:	d501      	bpl.n	800651c <_printf_i+0xe8>
 8006518:	681e      	ldr	r6, [r3, #0]
 800651a:	e002      	b.n	8006522 <_printf_i+0xee>
 800651c:	0641      	lsls	r1, r0, #25
 800651e:	d5fb      	bpl.n	8006518 <_printf_i+0xe4>
 8006520:	881e      	ldrh	r6, [r3, #0]
 8006522:	4853      	ldr	r0, [pc, #332]	; (8006670 <_printf_i+0x23c>)
 8006524:	2f6f      	cmp	r7, #111	; 0x6f
 8006526:	bf0c      	ite	eq
 8006528:	2308      	moveq	r3, #8
 800652a:	230a      	movne	r3, #10
 800652c:	2100      	movs	r1, #0
 800652e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006532:	6865      	ldr	r5, [r4, #4]
 8006534:	60a5      	str	r5, [r4, #8]
 8006536:	2d00      	cmp	r5, #0
 8006538:	bfa2      	ittt	ge
 800653a:	6821      	ldrge	r1, [r4, #0]
 800653c:	f021 0104 	bicge.w	r1, r1, #4
 8006540:	6021      	strge	r1, [r4, #0]
 8006542:	b90e      	cbnz	r6, 8006548 <_printf_i+0x114>
 8006544:	2d00      	cmp	r5, #0
 8006546:	d04b      	beq.n	80065e0 <_printf_i+0x1ac>
 8006548:	4615      	mov	r5, r2
 800654a:	fbb6 f1f3 	udiv	r1, r6, r3
 800654e:	fb03 6711 	mls	r7, r3, r1, r6
 8006552:	5dc7      	ldrb	r7, [r0, r7]
 8006554:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006558:	4637      	mov	r7, r6
 800655a:	42bb      	cmp	r3, r7
 800655c:	460e      	mov	r6, r1
 800655e:	d9f4      	bls.n	800654a <_printf_i+0x116>
 8006560:	2b08      	cmp	r3, #8
 8006562:	d10b      	bne.n	800657c <_printf_i+0x148>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	07de      	lsls	r6, r3, #31
 8006568:	d508      	bpl.n	800657c <_printf_i+0x148>
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	6861      	ldr	r1, [r4, #4]
 800656e:	4299      	cmp	r1, r3
 8006570:	bfde      	ittt	le
 8006572:	2330      	movle	r3, #48	; 0x30
 8006574:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006578:	f105 35ff 	addle.w	r5, r5, #4294967295
 800657c:	1b52      	subs	r2, r2, r5
 800657e:	6122      	str	r2, [r4, #16]
 8006580:	f8cd a000 	str.w	sl, [sp]
 8006584:	464b      	mov	r3, r9
 8006586:	aa03      	add	r2, sp, #12
 8006588:	4621      	mov	r1, r4
 800658a:	4640      	mov	r0, r8
 800658c:	f7ff fee4 	bl	8006358 <_printf_common>
 8006590:	3001      	adds	r0, #1
 8006592:	d14a      	bne.n	800662a <_printf_i+0x1f6>
 8006594:	f04f 30ff 	mov.w	r0, #4294967295
 8006598:	b004      	add	sp, #16
 800659a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	f043 0320 	orr.w	r3, r3, #32
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	4833      	ldr	r0, [pc, #204]	; (8006674 <_printf_i+0x240>)
 80065a8:	2778      	movs	r7, #120	; 0x78
 80065aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	6829      	ldr	r1, [r5, #0]
 80065b2:	061f      	lsls	r7, r3, #24
 80065b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80065b8:	d402      	bmi.n	80065c0 <_printf_i+0x18c>
 80065ba:	065f      	lsls	r7, r3, #25
 80065bc:	bf48      	it	mi
 80065be:	b2b6      	uxthmi	r6, r6
 80065c0:	07df      	lsls	r7, r3, #31
 80065c2:	bf48      	it	mi
 80065c4:	f043 0320 	orrmi.w	r3, r3, #32
 80065c8:	6029      	str	r1, [r5, #0]
 80065ca:	bf48      	it	mi
 80065cc:	6023      	strmi	r3, [r4, #0]
 80065ce:	b91e      	cbnz	r6, 80065d8 <_printf_i+0x1a4>
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	f023 0320 	bic.w	r3, r3, #32
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	2310      	movs	r3, #16
 80065da:	e7a7      	b.n	800652c <_printf_i+0xf8>
 80065dc:	4824      	ldr	r0, [pc, #144]	; (8006670 <_printf_i+0x23c>)
 80065de:	e7e4      	b.n	80065aa <_printf_i+0x176>
 80065e0:	4615      	mov	r5, r2
 80065e2:	e7bd      	b.n	8006560 <_printf_i+0x12c>
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	6826      	ldr	r6, [r4, #0]
 80065e8:	6961      	ldr	r1, [r4, #20]
 80065ea:	1d18      	adds	r0, r3, #4
 80065ec:	6028      	str	r0, [r5, #0]
 80065ee:	0635      	lsls	r5, r6, #24
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	d501      	bpl.n	80065f8 <_printf_i+0x1c4>
 80065f4:	6019      	str	r1, [r3, #0]
 80065f6:	e002      	b.n	80065fe <_printf_i+0x1ca>
 80065f8:	0670      	lsls	r0, r6, #25
 80065fa:	d5fb      	bpl.n	80065f4 <_printf_i+0x1c0>
 80065fc:	8019      	strh	r1, [r3, #0]
 80065fe:	2300      	movs	r3, #0
 8006600:	6123      	str	r3, [r4, #16]
 8006602:	4615      	mov	r5, r2
 8006604:	e7bc      	b.n	8006580 <_printf_i+0x14c>
 8006606:	682b      	ldr	r3, [r5, #0]
 8006608:	1d1a      	adds	r2, r3, #4
 800660a:	602a      	str	r2, [r5, #0]
 800660c:	681d      	ldr	r5, [r3, #0]
 800660e:	6862      	ldr	r2, [r4, #4]
 8006610:	2100      	movs	r1, #0
 8006612:	4628      	mov	r0, r5
 8006614:	f7f9 fdec 	bl	80001f0 <memchr>
 8006618:	b108      	cbz	r0, 800661e <_printf_i+0x1ea>
 800661a:	1b40      	subs	r0, r0, r5
 800661c:	6060      	str	r0, [r4, #4]
 800661e:	6863      	ldr	r3, [r4, #4]
 8006620:	6123      	str	r3, [r4, #16]
 8006622:	2300      	movs	r3, #0
 8006624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006628:	e7aa      	b.n	8006580 <_printf_i+0x14c>
 800662a:	6923      	ldr	r3, [r4, #16]
 800662c:	462a      	mov	r2, r5
 800662e:	4649      	mov	r1, r9
 8006630:	4640      	mov	r0, r8
 8006632:	47d0      	blx	sl
 8006634:	3001      	adds	r0, #1
 8006636:	d0ad      	beq.n	8006594 <_printf_i+0x160>
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	079b      	lsls	r3, r3, #30
 800663c:	d413      	bmi.n	8006666 <_printf_i+0x232>
 800663e:	68e0      	ldr	r0, [r4, #12]
 8006640:	9b03      	ldr	r3, [sp, #12]
 8006642:	4298      	cmp	r0, r3
 8006644:	bfb8      	it	lt
 8006646:	4618      	movlt	r0, r3
 8006648:	e7a6      	b.n	8006598 <_printf_i+0x164>
 800664a:	2301      	movs	r3, #1
 800664c:	4632      	mov	r2, r6
 800664e:	4649      	mov	r1, r9
 8006650:	4640      	mov	r0, r8
 8006652:	47d0      	blx	sl
 8006654:	3001      	adds	r0, #1
 8006656:	d09d      	beq.n	8006594 <_printf_i+0x160>
 8006658:	3501      	adds	r5, #1
 800665a:	68e3      	ldr	r3, [r4, #12]
 800665c:	9903      	ldr	r1, [sp, #12]
 800665e:	1a5b      	subs	r3, r3, r1
 8006660:	42ab      	cmp	r3, r5
 8006662:	dcf2      	bgt.n	800664a <_printf_i+0x216>
 8006664:	e7eb      	b.n	800663e <_printf_i+0x20a>
 8006666:	2500      	movs	r5, #0
 8006668:	f104 0619 	add.w	r6, r4, #25
 800666c:	e7f5      	b.n	800665a <_printf_i+0x226>
 800666e:	bf00      	nop
 8006670:	080067e1 	.word	0x080067e1
 8006674:	080067f2 	.word	0x080067f2

08006678 <memmove>:
 8006678:	4288      	cmp	r0, r1
 800667a:	b510      	push	{r4, lr}
 800667c:	eb01 0402 	add.w	r4, r1, r2
 8006680:	d902      	bls.n	8006688 <memmove+0x10>
 8006682:	4284      	cmp	r4, r0
 8006684:	4623      	mov	r3, r4
 8006686:	d807      	bhi.n	8006698 <memmove+0x20>
 8006688:	1e43      	subs	r3, r0, #1
 800668a:	42a1      	cmp	r1, r4
 800668c:	d008      	beq.n	80066a0 <memmove+0x28>
 800668e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006692:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006696:	e7f8      	b.n	800668a <memmove+0x12>
 8006698:	4402      	add	r2, r0
 800669a:	4601      	mov	r1, r0
 800669c:	428a      	cmp	r2, r1
 800669e:	d100      	bne.n	80066a2 <memmove+0x2a>
 80066a0:	bd10      	pop	{r4, pc}
 80066a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066aa:	e7f7      	b.n	800669c <memmove+0x24>

080066ac <_sbrk_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	4d06      	ldr	r5, [pc, #24]	; (80066c8 <_sbrk_r+0x1c>)
 80066b0:	2300      	movs	r3, #0
 80066b2:	4604      	mov	r4, r0
 80066b4:	4608      	mov	r0, r1
 80066b6:	602b      	str	r3, [r5, #0]
 80066b8:	f7fb f80a 	bl	80016d0 <_sbrk>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	d102      	bne.n	80066c6 <_sbrk_r+0x1a>
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	b103      	cbz	r3, 80066c6 <_sbrk_r+0x1a>
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
 80066c8:	20000728 	.word	0x20000728

080066cc <memcpy>:
 80066cc:	440a      	add	r2, r1
 80066ce:	4291      	cmp	r1, r2
 80066d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80066d4:	d100      	bne.n	80066d8 <memcpy+0xc>
 80066d6:	4770      	bx	lr
 80066d8:	b510      	push	{r4, lr}
 80066da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066e2:	4291      	cmp	r1, r2
 80066e4:	d1f9      	bne.n	80066da <memcpy+0xe>
 80066e6:	bd10      	pop	{r4, pc}

080066e8 <_realloc_r>:
 80066e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ec:	4680      	mov	r8, r0
 80066ee:	4614      	mov	r4, r2
 80066f0:	460e      	mov	r6, r1
 80066f2:	b921      	cbnz	r1, 80066fe <_realloc_r+0x16>
 80066f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066f8:	4611      	mov	r1, r2
 80066fa:	f7ff bc49 	b.w	8005f90 <_malloc_r>
 80066fe:	b92a      	cbnz	r2, 800670c <_realloc_r+0x24>
 8006700:	f7ff fbda 	bl	8005eb8 <_free_r>
 8006704:	4625      	mov	r5, r4
 8006706:	4628      	mov	r0, r5
 8006708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800670c:	f000 f81b 	bl	8006746 <_malloc_usable_size_r>
 8006710:	4284      	cmp	r4, r0
 8006712:	4607      	mov	r7, r0
 8006714:	d802      	bhi.n	800671c <_realloc_r+0x34>
 8006716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800671a:	d812      	bhi.n	8006742 <_realloc_r+0x5a>
 800671c:	4621      	mov	r1, r4
 800671e:	4640      	mov	r0, r8
 8006720:	f7ff fc36 	bl	8005f90 <_malloc_r>
 8006724:	4605      	mov	r5, r0
 8006726:	2800      	cmp	r0, #0
 8006728:	d0ed      	beq.n	8006706 <_realloc_r+0x1e>
 800672a:	42bc      	cmp	r4, r7
 800672c:	4622      	mov	r2, r4
 800672e:	4631      	mov	r1, r6
 8006730:	bf28      	it	cs
 8006732:	463a      	movcs	r2, r7
 8006734:	f7ff ffca 	bl	80066cc <memcpy>
 8006738:	4631      	mov	r1, r6
 800673a:	4640      	mov	r0, r8
 800673c:	f7ff fbbc 	bl	8005eb8 <_free_r>
 8006740:	e7e1      	b.n	8006706 <_realloc_r+0x1e>
 8006742:	4635      	mov	r5, r6
 8006744:	e7df      	b.n	8006706 <_realloc_r+0x1e>

08006746 <_malloc_usable_size_r>:
 8006746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800674a:	1f18      	subs	r0, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	bfbc      	itt	lt
 8006750:	580b      	ldrlt	r3, [r1, r0]
 8006752:	18c0      	addlt	r0, r0, r3
 8006754:	4770      	bx	lr
	...

08006758 <_init>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	bf00      	nop
 800675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675e:	bc08      	pop	{r3}
 8006760:	469e      	mov	lr, r3
 8006762:	4770      	bx	lr

08006764 <_fini>:
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	bf00      	nop
 8006768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676a:	bc08      	pop	{r3}
 800676c:	469e      	mov	lr, r3
 800676e:	4770      	bx	lr
