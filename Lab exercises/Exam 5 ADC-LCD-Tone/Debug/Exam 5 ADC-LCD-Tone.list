
Exam 5 ADC-LCD-Tone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008528  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080086c8  080086c8  000186c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a84  08008a84  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008a84  08008a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a8c  08008a8c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a8c  08008a8c  00018a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08008a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  200001fc  08008c90  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  08008c90  0002089c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc29  00000000  00000000  0002026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024cf  00000000  00000000  0002fe98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00032368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc6  00000000  00000000  00033280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c8d  00000000  00000000  00033e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ce7  00000000  00000000  0004cad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ba6c  00000000  00000000  0005e7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005108  00000000  00000000  000fa228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000ff330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080086b0 	.word	0x080086b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	080086b0 	.word	0x080086b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <DWT_Delay_Init+0x58>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	4a13      	ldr	r2, [pc, #76]	; (8000fac <DWT_Delay_Init+0x58>)
 8000f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f62:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <DWT_Delay_Init+0x58>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4a10      	ldr	r2, [pc, #64]	; (8000fac <DWT_Delay_Init+0x58>)
 8000f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f6e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f76:	f023 0301 	bic.w	r3, r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000f8e:	bf00      	nop
    __ASM volatile ("NOP");
 8000f90:	bf00      	nop
    __ASM volatile ("NOP");
 8000f92:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <DWT_Delay_Init+0x5c>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e000      	b.n	8000fa2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000fa0:	2301      	movs	r3, #1
    }
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000edf0 	.word	0xe000edf0
 8000fb0:	e0001000 	.word	0xe0001000

08000fb4 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <DWT_Delay_us+0x48>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000fc2:	f002 fd1d 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <DWT_Delay_us+0x4c>)
 8000fca:	fba2 2303 	umull	r2, r3, r2, r3
 8000fce:	0c9b      	lsrs	r3, r3, #18
 8000fd0:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	fb02 f303 	mul.w	r3, r2, r3
 8000fda:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000fdc:	bf00      	nop
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <DWT_Delay_us+0x48>)
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	1ad2      	subs	r2, r2, r3
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	1acb      	subs	r3, r1, r3
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d3f6      	bcc.n	8000fde <DWT_Delay_us+0x2a>
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e0001000 	.word	0xe0001000
 8001000:	431bde83 	.word	0x431bde83

08001004 <lcd_enable>:


//  LCD code


void lcd_enable(){
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 8001008:	2201      	movs	r2, #1
 800100a:	2102      	movs	r1, #2
 800100c:	4807      	ldr	r0, [pc, #28]	; (800102c <lcd_enable+0x28>)
 800100e:	f002 f855 	bl	80030bc <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8001012:	2032      	movs	r0, #50	; 0x32
 8001014:	f7ff ffce 	bl	8000fb4 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2102      	movs	r1, #2
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <lcd_enable+0x28>)
 800101e:	f002 f84d 	bl	80030bc <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8001022:	2032      	movs	r0, #50	; 0x32
 8001024:	f7ff ffc6 	bl	8000fb4 <DWT_Delay_us>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40020400 	.word	0x40020400

08001030 <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	461a      	mov	r2, r3
 8001044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001048:	4816      	ldr	r0, [pc, #88]	; (80010a4 <lcd_write4+0x74>)
 800104a:	f002 f837 	bl	80030bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	105b      	asrs	r3, r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	461a      	mov	r2, r3
 800105c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <lcd_write4+0x74>)
 8001062:	f002 f82b 	bl	80030bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	109b      	asrs	r3, r3, #2
 800106a:	b2db      	uxtb	r3, r3
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	461a      	mov	r2, r3
 8001074:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <lcd_write4+0x74>)
 800107a:	f002 f81f 	bl	80030bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	10db      	asrs	r3, r3, #3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	461a      	mov	r2, r3
 800108c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <lcd_write4+0x74>)
 8001092:	f002 f813 	bl	80030bc <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 8001096:	f7ff ffb5 	bl	8001004 <lcd_enable>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40020400 	.word	0x40020400

080010a8 <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ffb9 	bl	8001030 <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ffb5 	bl	8001030 <lcd_write4>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 80010da:	2200      	movs	r2, #0
 80010dc:	2104      	movs	r1, #4
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <lcd_command+0x24>)
 80010e0:	f001 ffec 	bl	80030bc <HAL_GPIO_WritePin>
	lcd_write(byte);
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffde 	bl	80010a8 <lcd_write>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40020400 	.word	0x40020400

080010f8 <lcd_data>:
	lcd_command(LCD_CLEAR_COMMAND);
	DWT_Delay_us(2000);
}

//  send data to the LCD
void lcd_data(uint8_t byte){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 8001102:	2201      	movs	r2, #1
 8001104:	2104      	movs	r1, #4
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <lcd_data+0x24>)
 8001108:	f001 ffd8 	bl	80030bc <HAL_GPIO_WritePin>
	lcd_write(byte);
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ffca 	bl	80010a8 <lcd_write>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40020400 	.word	0x40020400

08001120 <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	460a      	mov	r2, r1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	3301      	adds	r3, #1
 8001134:	79ba      	ldrb	r2, [r7, #6]
 8001136:	3201      	adds	r2, #1
 8001138:	fb02 f303 	mul.w	r3, r2, r3
 800113c:	2b4f      	cmp	r3, #79	; 0x4f
 800113e:	dc10      	bgt.n	8001162 <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	461a      	mov	r2, r3
 8001144:	0092      	lsls	r2, r2, #2
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	b2da      	uxtb	r2, r3
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	4413      	add	r3, r2
 8001150:	b2db      	uxtb	r3, r3
 8001152:	b25b      	sxtb	r3, r3
 8001154:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001158:	b25b      	sxtb	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ffb7 	bl	80010d0 <lcd_command>
	}
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff f884 	bl	8000280 <strlen>
 8001178:	4603      	mov	r3, r0
 800117a:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 800117c:	e006      	b.n	800118c <lcd_print+0x22>
		lcd_data(*string++);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ffb6 	bl	80010f8 <lcd_data>
	while (size--){
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	1e5a      	subs	r2, r3, #1
 8001190:	60fa      	str	r2, [r7, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f3      	bne.n	800117e <lcd_print+0x14>
	}
}
 8001196:	bf00      	nop
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <lcd_println>:

void lcd_println(char string[], uint8_t row){
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <lcd_println+0x6c>)
 80011ae:	f107 0408 	add.w	r4, r7, #8
 80011b2:	461d      	mov	r5, r3
 80011b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b8:	682b      	ldr	r3, [r5, #0]
 80011ba:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff f85f 	bl	8000280 <strlen>
 80011c2:	4603      	mov	r3, r0
 80011c4:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	2b10      	cmp	r3, #16
 80011ca:	dd0c      	ble.n	80011e6 <lcd_println+0x46>
		size = 16;
 80011cc:	2310      	movs	r3, #16
 80011ce:	61fb      	str	r3, [r7, #28]

	while (size--){
 80011d0:	e009      	b.n	80011e6 <lcd_println+0x46>
		line[size] = string[size];
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	7819      	ldrb	r1, [r3, #0]
 80011da:	f107 0208 	add.w	r2, r7, #8
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	4413      	add	r3, r2
 80011e2:	460a      	mov	r2, r1
 80011e4:	701a      	strb	r2, [r3, #0]
	while (size--){
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	1e5a      	subs	r2, r3, #1
 80011ea:	61fa      	str	r2, [r7, #28]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f0      	bne.n	80011d2 <lcd_println+0x32>
	}
	setCursor(0, row);
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	4619      	mov	r1, r3
 80011f4:	2000      	movs	r0, #0
 80011f6:	f7ff ff93 	bl	8001120 <setCursor>
	lcd_print(line);
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ffb3 	bl	800116a <lcd_print>
}
 8001204:	bf00      	nop
 8001206:	3720      	adds	r7, #32
 8001208:	46bd      	mov	sp, r7
 800120a:	bdb0      	pop	{r4, r5, r7, pc}
 800120c:	080086c8 	.word	0x080086c8

08001210 <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	b25b      	sxtb	r3, r3
 800122a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122e:	b25b      	sxtb	r3, r3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff4c 	bl	80010d0 <lcd_command>
	for (int i = 0; i<8; i++){
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e009      	b.n	8001252 <writeCustomChar+0x42>
		lcd_data(map[i]);	
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff56 	bl	80010f8 <lcd_data>
	for (int i = 0; i<8; i++){
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3301      	adds	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2b07      	cmp	r3, #7
 8001256:	ddf2      	ble.n	800123e <writeCustomChar+0x2e>
	}
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 8001268:	490a      	ldr	r1, [pc, #40]	; (8001294 <loadCustomChars+0x30>)
 800126a:	2001      	movs	r0, #1
 800126c:	f7ff ffd0 	bl	8001210 <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 8001270:	4909      	ldr	r1, [pc, #36]	; (8001298 <loadCustomChars+0x34>)
 8001272:	2002      	movs	r0, #2
 8001274:	f7ff ffcc 	bl	8001210 <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 8001278:	4908      	ldr	r1, [pc, #32]	; (800129c <loadCustomChars+0x38>)
 800127a:	2003      	movs	r0, #3
 800127c:	f7ff ffc8 	bl	8001210 <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 8001280:	4907      	ldr	r1, [pc, #28]	; (80012a0 <loadCustomChars+0x3c>)
 8001282:	2004      	movs	r0, #4
 8001284:	f7ff ffc4 	bl	8001210 <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 8001288:	4906      	ldr	r1, [pc, #24]	; (80012a4 <loadCustomChars+0x40>)
 800128a:	2005      	movs	r0, #5
 800128c:	f7ff ffc0 	bl	8001210 <writeCustomChar>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000000 	.word	0x20000000
 8001298:	20000008 	.word	0x20000008
 800129c:	20000010 	.word	0x20000010
 80012a0:	20000018 	.word	0x20000018
 80012a4:	20000020 	.word	0x20000020

080012a8 <lcd_drawBar>:

void lcd_drawBar(int value){ //draws a bar using custom characters and spaces
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	setCursor(0,1); //bar is placed in the bottom row
 80012b0:	2101      	movs	r1, #1
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff ff34 	bl	8001120 <setCursor>

	if (value>80)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b50      	cmp	r3, #80	; 0x50
 80012bc:	dd01      	ble.n	80012c2 <lcd_drawBar+0x1a>
		value = 80;
 80012be:	2350      	movs	r3, #80	; 0x50
 80012c0:	607b      	str	r3, [r7, #4]
	int quotient = value / 5;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a25      	ldr	r2, [pc, #148]	; (800135c <lcd_drawBar+0xb4>)
 80012c6:	fb82 1203 	smull	r1, r2, r2, r3
 80012ca:	1052      	asrs	r2, r2, #1
 80012cc:	17db      	asrs	r3, r3, #31
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	613b      	str	r3, [r7, #16]
	int modulo = value % 5;
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <lcd_drawBar+0xb4>)
 80012d6:	fb83 1302 	smull	r1, r3, r3, r2
 80012da:	1059      	asrs	r1, r3, #1
 80012dc:	17d3      	asrs	r3, r2, #31
 80012de:	1ac9      	subs	r1, r1, r3
 80012e0:	460b      	mov	r3, r1
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	60fb      	str	r3, [r7, #12]
	
	int i = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
	
	while (i<quotient){ //we write the required number of CHAR_5_5
 80012ee:	e007      	b.n	8001300 <lcd_drawBar+0x58>
		bar[i] = CHAR_5_5;
 80012f0:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <lcd_drawBar+0xb8>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	4413      	add	r3, r2
 80012f6:	2205      	movs	r2, #5
 80012f8:	701a      	strb	r2, [r3, #0]
		i++;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3301      	adds	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
	while (i<quotient){ //we write the required number of CHAR_5_5
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	dbf3      	blt.n	80012f0 <lcd_drawBar+0x48>
	}
	if (i < 16){
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	dc1b      	bgt.n	8001346 <lcd_drawBar+0x9e>
	if (modulo == 0) bar[i] = ' '; //then we either place a space
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d105      	bne.n	8001320 <lcd_drawBar+0x78>
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <lcd_drawBar+0xb8>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	4413      	add	r3, r2
 800131a:	2220      	movs	r2, #32
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	e006      	b.n	800132e <lcd_drawBar+0x86>
	else {
		bar[i] = CHAR_1_5 + modulo -1; //or the correct partial block
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	b2d9      	uxtb	r1, r3
 8001324:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <lcd_drawBar+0xb8>)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	4413      	add	r3, r2
 800132a:	460a      	mov	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]
	}
	i++;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
	}
	while (i<16){ //and we fill the remainder with spaces
 8001334:	e007      	b.n	8001346 <lcd_drawBar+0x9e>
		bar[i] = ' ';
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <lcd_drawBar+0xb8>)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	4413      	add	r3, r2
 800133c:	2220      	movs	r2, #32
 800133e:	701a      	strb	r2, [r3, #0]
		i++;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
	while (i<16){ //and we fill the remainder with spaces
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	ddf4      	ble.n	8001336 <lcd_drawBar+0x8e>
	}
	lcd_print(bar); //finally we write to the LCD
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <lcd_drawBar+0xb8>)
 800134e:	f7ff ff0c 	bl	800116a <lcd_print>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	66666667 	.word	0x66666667
 8001360:	20000218 	.word	0x20000218

08001364 <lcd_initialize>:

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 8001368:	2032      	movs	r0, #50	; 0x32
 800136a:	f000 feff 	bl	800216c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2104      	movs	r1, #4
 8001372:	4824      	ldr	r0, [pc, #144]	; (8001404 <lcd_initialize+0xa0>)
 8001374:	f001 fea2 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2102      	movs	r1, #2
 800137c:	4821      	ldr	r0, [pc, #132]	; (8001404 <lcd_initialize+0xa0>)
 800137e:	f001 fe9d 	bl	80030bc <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 8001382:	f7ff fde7 	bl	8000f54 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 8001386:	2003      	movs	r0, #3
 8001388:	f7ff fe52 	bl	8001030 <lcd_write4>
	HAL_Delay(5);
 800138c:	2005      	movs	r0, #5
 800138e:	f000 feed 	bl	800216c <HAL_Delay>
	lcd_write4(0x03);
 8001392:	2003      	movs	r0, #3
 8001394:	f7ff fe4c 	bl	8001030 <lcd_write4>
	HAL_Delay(5);
 8001398:	2005      	movs	r0, #5
 800139a:	f000 fee7 	bl	800216c <HAL_Delay>
	lcd_write4(0x03);
 800139e:	2003      	movs	r0, #3
 80013a0:	f7ff fe46 	bl	8001030 <lcd_write4>
	HAL_Delay(5);
 80013a4:	2005      	movs	r0, #5
 80013a6:	f000 fee1 	bl	800216c <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 80013aa:	2002      	movs	r0, #2
 80013ac:	f7ff fe40 	bl	8001030 <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 80013b0:	2028      	movs	r0, #40	; 0x28
 80013b2:	f7ff fe79 	bl	80010a8 <lcd_write>
	HAL_Delay(5);
 80013b6:	2005      	movs	r0, #5
 80013b8:	f000 fed8 	bl	800216c <HAL_Delay>
	lcd_write(0x08); //display off;
 80013bc:	2008      	movs	r0, #8
 80013be:	f7ff fe73 	bl	80010a8 <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff fe70 	bl	80010a8 <lcd_write>
	HAL_Delay(5);
 80013c8:	2005      	movs	r0, #5
 80013ca:	f000 fecf 	bl	800216c <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 80013ce:	2006      	movs	r0, #6
 80013d0:	f7ff fe6a 	bl	80010a8 <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 80013d4:	2201      	movs	r2, #1
 80013d6:	2110      	movs	r1, #16
 80013d8:	480b      	ldr	r0, [pc, #44]	; (8001408 <lcd_initialize+0xa4>)
 80013da:	f001 fe6f 	bl	80030bc <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <lcd_initialize+0xa8>)
 80013e0:	220c      	movs	r2, #12
 80013e2:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <lcd_initialize+0xa8>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fe5d 	bl	80010a8 <lcd_write>
	lcd_write(0x02); //go home
 80013ee:	2002      	movs	r0, #2
 80013f0:	f7ff fe5a 	bl	80010a8 <lcd_write>
	HAL_Delay(2);
 80013f4:	2002      	movs	r0, #2
 80013f6:	f000 feb9 	bl	800216c <HAL_Delay>
	loadCustomChars();
 80013fa:	f7ff ff33 	bl	8001264 <loadCustomChars>

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40020400 	.word	0x40020400
 8001408:	40020000 	.word	0x40020000
 800140c:	20000228 	.word	0x20000228

08001410 <lcd_backlight_ON>:

void lcd_backlight_ON(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	2110      	movs	r1, #16
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <lcd_backlight_ON+0x14>)
 800141a:	f001 fe4f 	bl	80030bc <HAL_GPIO_WritePin>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40020000 	.word	0x40020000

08001428 <set_pwm>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_pwm(float freq) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	ed87 0a01 	vstr	s0, [r7, #4]
	htim1.Init.Period = 1000000 / freq - 1;
 8001432:	eddf 6a28 	vldr	s13, [pc, #160]	; 80014d4 <set_pwm+0xac>
 8001436:	ed97 7a01 	vldr	s14, [r7, #4]
 800143a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001442:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144a:	ee17 2a90 	vmov	r2, s15
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <set_pwm+0xb0>)
 8001450:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001452:	4821      	ldr	r0, [pc, #132]	; (80014d8 <set_pwm+0xb0>)
 8001454:	f002 fbb2 	bl	8003bbc <HAL_TIM_PWM_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <set_pwm+0x3a>
		Error_Handler();
 800145e:	f000 fb8f 	bl	8001b80 <Error_Handler>

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]
 8001472:	615a      	str	r2, [r3, #20]
 8001474:	619a      	str	r2, [r3, #24]

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001476:	2360      	movs	r3, #96	; 0x60
 8001478:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = 1000000 / freq / 2 - 1;
 800147a:	eddf 6a16 	vldr	s13, [pc, #88]	; 80014d4 <set_pwm+0xac>
 800147e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001486:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800148a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001492:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800149a:	ee17 3a90 	vmov	r3, s15
 800149e:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2204      	movs	r2, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <set_pwm+0xb0>)
 80014be:	f002 fceb 	bl	8003e98 <HAL_TIM_PWM_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <set_pwm+0xa4>
		Error_Handler();
 80014c8:	f000 fb5a 	bl	8001b80 <Error_Handler>
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	49742400 	.word	0x49742400
 80014d8:	20000674 	.word	0x20000674
 80014dc:	00000000 	.word	0x00000000

080014e0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b096      	sub	sp, #88	; 0x58
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1){
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a53      	ldr	r2, [pc, #332]	; (8001638 <HAL_ADC_ConvCpltCallback+0x158>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	f040 8094 	bne.w	800161a <HAL_ADC_ConvCpltCallback+0x13a>
		float aux = HAL_ADC_GetValue(&hadc1);
 80014f2:	4851      	ldr	r0, [pc, #324]	; (8001638 <HAL_ADC_ConvCpltCallback+0x158>)
 80014f4:	f001 f870 	bl	80025d8 <HAL_ADC_GetValue>
 80014f8:	ee07 0a90 	vmov	s15, r0
 80014fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001500:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		char string[64];
		float voltage = aux*3.3/4096;
 8001504:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001506:	f7ff f827 	bl	8000558 <__aeabi_f2d>
 800150a:	a347      	add	r3, pc, #284	; (adr r3, 8001628 <HAL_ADC_ConvCpltCallback+0x148>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f87a 	bl	8000608 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b46      	ldr	r3, [pc, #280]	; (800163c <HAL_ADC_ConvCpltCallback+0x15c>)
 8001522:	f7ff f99b 	bl	800085c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb43 	bl	8000bb8 <__aeabi_d2f>
 8001532:	4603      	mov	r3, r0
 8001534:	64bb      	str	r3, [r7, #72]	; 0x48
		snprintf(string, sizeof(string), "Voltage: %.3f", voltage);
 8001536:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001538:	f7ff f80e 	bl	8000558 <__aeabi_f2d>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	f107 0008 	add.w	r0, r7, #8
 8001544:	e9cd 2300 	strd	r2, r3, [sp]
 8001548:	4a3d      	ldr	r2, [pc, #244]	; (8001640 <HAL_ADC_ConvCpltCallback+0x160>)
 800154a:	2140      	movs	r1, #64	; 0x40
 800154c:	f004 fef6 	bl	800633c <sniprintf>

		lcd_println(string, 0);
 8001550:	f107 0308 	add.w	r3, r7, #8
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fe22 	bl	80011a0 <lcd_println>
		lcd_drawBar(round(aux/4096*80));
 800155c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001560:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001644 <HAL_ADC_ConvCpltCallback+0x164>
 8001564:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001568:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001648 <HAL_ADC_ConvCpltCallback+0x168>
 800156c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001570:	ee17 0a90 	vmov	r0, s15
 8001574:	f7fe fff0 	bl	8000558 <__aeabi_f2d>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	ec43 2b10 	vmov	d0, r2, r3
 8001580:	f007 f84e 	bl	8008620 <round>
 8001584:	ec53 2b10 	vmov	r2, r3, d0
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	f7ff faec 	bl	8000b68 <__aeabi_d2iz>
 8001590:	4603      	mov	r3, r0
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fe88 	bl	80012a8 <lcd_drawBar>

		if(voltage < 0.5){
 8001598:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800159c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	d508      	bpl.n	80015bc <HAL_ADC_ConvCpltCallback+0xdc>
			//set_pwm(440*voltage);
			set_pwm(440/2);
 80015aa:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800164c <HAL_ADC_ConvCpltCallback+0x16c>
 80015ae:	f7ff ff3b 	bl	8001428 <set_pwm>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015b2:	2104      	movs	r1, #4
 80015b4:	4826      	ldr	r0, [pc, #152]	; (8001650 <HAL_ADC_ConvCpltCallback+0x170>)
 80015b6:	f002 fb5b 	bl	8003c70 <HAL_TIM_PWM_Start>
 80015ba:	e017      	b.n	80015ec <HAL_ADC_ConvCpltCallback+0x10c>
		}else if(voltage > 2.8){
 80015bc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80015be:	f7fe ffcb 	bl	8000558 <__aeabi_f2d>
 80015c2:	a31b      	add	r3, pc, #108	; (adr r3, 8001630 <HAL_ADC_ConvCpltCallback+0x150>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7ff faae 	bl	8000b28 <__aeabi_dcmpgt>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d008      	beq.n	80015e4 <HAL_ADC_ConvCpltCallback+0x104>
			//set_pwm(440*voltage);
			set_pwm(440*2);
 80015d2:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001654 <HAL_ADC_ConvCpltCallback+0x174>
 80015d6:	f7ff ff27 	bl	8001428 <set_pwm>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015da:	2104      	movs	r1, #4
 80015dc:	481c      	ldr	r0, [pc, #112]	; (8001650 <HAL_ADC_ConvCpltCallback+0x170>)
 80015de:	f002 fb47 	bl	8003c70 <HAL_TIM_PWM_Start>
 80015e2:	e003      	b.n	80015ec <HAL_ADC_ConvCpltCallback+0x10c>
		}else{
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80015e4:	2104      	movs	r1, #4
 80015e6:	481a      	ldr	r0, [pc, #104]	; (8001650 <HAL_ADC_ConvCpltCallback+0x170>)
 80015e8:	f002 fbf2 	bl	8003dd0 <HAL_TIM_PWM_Stop>
		}

		PRINT("Voltage %.3f\n\r", voltage);
 80015ec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80015ee:	f7fe ffb3 	bl	8000558 <__aeabi_f2d>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	e9cd 2300 	strd	r2, r3, [sp]
 80015fa:	4a17      	ldr	r2, [pc, #92]	; (8001658 <HAL_ADC_ConvCpltCallback+0x178>)
 80015fc:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8001600:	4816      	ldr	r0, [pc, #88]	; (800165c <HAL_ADC_ConvCpltCallback+0x17c>)
 8001602:	f004 fe9b 	bl	800633c <sniprintf>
 8001606:	4815      	ldr	r0, [pc, #84]	; (800165c <HAL_ADC_ConvCpltCallback+0x17c>)
 8001608:	f7fe fe3a 	bl	8000280 <strlen>
 800160c:	4603      	mov	r3, r0
 800160e:	b29a      	uxth	r2, r3
 8001610:	2364      	movs	r3, #100	; 0x64
 8001612:	4912      	ldr	r1, [pc, #72]	; (800165c <HAL_ADC_ConvCpltCallback+0x17c>)
 8001614:	4812      	ldr	r0, [pc, #72]	; (8001660 <HAL_ADC_ConvCpltCallback+0x180>)
 8001616:	f003 f9a2 	bl	800495e <HAL_UART_Transmit>

	}

}
 800161a:	bf00      	nop
 800161c:	3750      	adds	r7, #80	; 0x50
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	f3af 8000 	nop.w
 8001628:	66666666 	.word	0x66666666
 800162c:	400a6666 	.word	0x400a6666
 8001630:	66666666 	.word	0x66666666
 8001634:	40066666 	.word	0x40066666
 8001638:	2000062c 	.word	0x2000062c
 800163c:	40b00000 	.word	0x40b00000
 8001640:	080086dc 	.word	0x080086dc
 8001644:	45800000 	.word	0x45800000
 8001648:	42a00000 	.word	0x42a00000
 800164c:	435c0000 	.word	0x435c0000
 8001650:	20000674 	.word	0x20000674
 8001654:	445c0000 	.word	0x445c0000
 8001658:	080086ec 	.word	0x080086ec
 800165c:	2000022c 	.word	0x2000022c
 8001660:	20000704 	.word	0x20000704

08001664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001668:	f000 fd0e 	bl	8002088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166c:	f000 f824 	bl	80016b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001670:	f000 f9f8 	bl	8001a64 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001674:	f000 f88c 	bl	8001790 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001678:	f000 f97c 	bl	8001974 <MX_TIM3_Init>
  MX_TIM1_Init();
 800167c:	f000 f8da 	bl	8001834 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001680:	f000 f9c6 	bl	8001a10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_initialize();
 8001684:	f7ff fe6e 	bl	8001364 <lcd_initialize>
  lcd_backlight_ON();
 8001688:	f7ff fec2 	bl	8001410 <lcd_backlight_ON>

  if(HAL_TIM_Base_Start(&htim3) != HAL_OK)
 800168c:	4808      	ldr	r0, [pc, #32]	; (80016b0 <main+0x4c>)
 800168e:	f002 fa3b 	bl	8003b08 <HAL_TIM_Base_Start>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <main+0x38>
	  Error_Handler();
 8001698:	f000 fa72 	bl	8001b80 <Error_Handler>
  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <main+0x50>)
 800169e:	f000 fdcd 	bl	800223c <HAL_ADC_Start_IT>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <main+0x48>
		  Error_Handler();
 80016a8:	f000 fa6a 	bl	8001b80 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <main+0x48>
 80016ae:	bf00      	nop
 80016b0:	200006bc 	.word	0x200006bc
 80016b4:	2000062c 	.word	0x2000062c

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b094      	sub	sp, #80	; 0x50
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	f107 0320 	add.w	r3, r7, #32
 80016c2:	2230      	movs	r2, #48	; 0x30
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 feaf 	bl	800642a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	4b29      	ldr	r3, [pc, #164]	; (8001788 <SystemClock_Config+0xd0>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	4a28      	ldr	r2, [pc, #160]	; (8001788 <SystemClock_Config+0xd0>)
 80016e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ea:	6413      	str	r3, [r2, #64]	; 0x40
 80016ec:	4b26      	ldr	r3, [pc, #152]	; (8001788 <SystemClock_Config+0xd0>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016f8:	2300      	movs	r3, #0
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <SystemClock_Config+0xd4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001704:	4a21      	ldr	r2, [pc, #132]	; (800178c <SystemClock_Config+0xd4>)
 8001706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <SystemClock_Config+0xd4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001718:	2302      	movs	r3, #2
 800171a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171c:	2301      	movs	r3, #1
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001720:	2310      	movs	r3, #16
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001724:	2302      	movs	r3, #2
 8001726:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001728:	2300      	movs	r3, #0
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800172c:	2310      	movs	r3, #16
 800172e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001730:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001734:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001736:	2304      	movs	r3, #4
 8001738:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800173a:	2307      	movs	r3, #7
 800173c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173e:	f107 0320 	add.w	r3, r7, #32
 8001742:	4618      	mov	r0, r3
 8001744:	f001 fcf8 	bl	8003138 <HAL_RCC_OscConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800174e:	f000 fa17 	bl	8001b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2302      	movs	r3, #2
 8001758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2102      	movs	r1, #2
 800176e:	4618      	mov	r0, r3
 8001770:	f001 ff5a 	bl	8003628 <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800177a:	f000 fa01 	bl	8001b80 <Error_Handler>
  }
}
 800177e:	bf00      	nop
 8001780:	3750      	adds	r7, #80	; 0x50
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000

08001790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001796:	463b      	mov	r3, r7
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <MX_ADC1_Init+0x9c>)
 80017a4:	4a22      	ldr	r2, [pc, #136]	; (8001830 <MX_ADC1_Init+0xa0>)
 80017a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017a8:	4b20      	ldr	r3, [pc, #128]	; (800182c <MX_ADC1_Init+0x9c>)
 80017aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <MX_ADC1_Init+0x9c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <MX_ADC1_Init+0x9c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <MX_ADC1_Init+0x9c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MX_ADC1_Init+0x9c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <MX_ADC1_Init+0x9c>)
 80017cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_ADC1_Init+0x9c>)
 80017d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_ADC1_Init+0x9c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <MX_ADC1_Init+0x9c>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_ADC1_Init+0x9c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_ADC1_Init+0x9c>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <MX_ADC1_Init+0x9c>)
 80017f6:	f000 fcdd 	bl	80021b4 <HAL_ADC_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001800:	f000 f9be 	bl	8001b80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001804:	2301      	movs	r3, #1
 8001806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001808:	2301      	movs	r3, #1
 800180a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800180c:	2307      	movs	r3, #7
 800180e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001810:	463b      	mov	r3, r7
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_ADC1_Init+0x9c>)
 8001816:	f000 ff01 	bl	800261c <HAL_ADC_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001820:	f000 f9ae 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2000062c 	.word	0x2000062c
 8001830:	40012000 	.word	0x40012000

08001834 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b096      	sub	sp, #88	; 0x58
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
 8001862:	615a      	str	r2, [r3, #20]
 8001864:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2220      	movs	r2, #32
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f004 fddc 	bl	800642a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001872:	4b3e      	ldr	r3, [pc, #248]	; (800196c <MX_TIM1_Init+0x138>)
 8001874:	4a3e      	ldr	r2, [pc, #248]	; (8001970 <MX_TIM1_Init+0x13c>)
 8001876:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8001878:	4b3c      	ldr	r3, [pc, #240]	; (800196c <MX_TIM1_Init+0x138>)
 800187a:	2254      	movs	r2, #84	; 0x54
 800187c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <MX_TIM1_Init+0x138>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001884:	4b39      	ldr	r3, [pc, #228]	; (800196c <MX_TIM1_Init+0x138>)
 8001886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800188a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188c:	4b37      	ldr	r3, [pc, #220]	; (800196c <MX_TIM1_Init+0x138>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001892:	4b36      	ldr	r3, [pc, #216]	; (800196c <MX_TIM1_Init+0x138>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001898:	4b34      	ldr	r3, [pc, #208]	; (800196c <MX_TIM1_Init+0x138>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800189e:	4833      	ldr	r0, [pc, #204]	; (800196c <MX_TIM1_Init+0x138>)
 80018a0:	f002 f8e2 	bl	8003a68 <HAL_TIM_Base_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80018aa:	f000 f969 	bl	8001b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018b8:	4619      	mov	r1, r3
 80018ba:	482c      	ldr	r0, [pc, #176]	; (800196c <MX_TIM1_Init+0x138>)
 80018bc:	f002 fbae 	bl	800401c <HAL_TIM_ConfigClockSource>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018c6:	f000 f95b 	bl	8001b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018ca:	4828      	ldr	r0, [pc, #160]	; (800196c <MX_TIM1_Init+0x138>)
 80018cc:	f002 f976 	bl	8003bbc <HAL_TIM_PWM_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80018d6:	f000 f953 	bl	8001b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018e6:	4619      	mov	r1, r3
 80018e8:	4820      	ldr	r0, [pc, #128]	; (800196c <MX_TIM1_Init+0x138>)
 80018ea:	f002 ff2b 	bl	8004744 <HAL_TIMEx_MasterConfigSynchronization>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018f4:	f000 f944 	bl	8001b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f8:	2360      	movs	r3, #96	; 0x60
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001904:	2300      	movs	r3, #0
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800190c:	2300      	movs	r3, #0
 800190e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001918:	2204      	movs	r2, #4
 800191a:	4619      	mov	r1, r3
 800191c:	4813      	ldr	r0, [pc, #76]	; (800196c <MX_TIM1_Init+0x138>)
 800191e:	f002 fabb 	bl	8003e98 <HAL_TIM_PWM_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001928:	f000 f92a 	bl	8001b80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001944:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	4619      	mov	r1, r3
 800194e:	4807      	ldr	r0, [pc, #28]	; (800196c <MX_TIM1_Init+0x138>)
 8001950:	f002 ff66 	bl	8004820 <HAL_TIMEx_ConfigBreakDeadTime>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800195a:	f000 f911 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800195e:	4803      	ldr	r0, [pc, #12]	; (800196c <MX_TIM1_Init+0x138>)
 8001960:	f000 f9c0 	bl	8001ce4 <HAL_TIM_MspPostInit>

}
 8001964:	bf00      	nop
 8001966:	3758      	adds	r7, #88	; 0x58
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000674 	.word	0x20000674
 8001970:	40010000 	.word	0x40010000

08001974 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001988:	463b      	mov	r3, r7
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001990:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <MX_TIM3_Init+0x94>)
 8001992:	4a1e      	ldr	r2, [pc, #120]	; (8001a0c <MX_TIM3_Init+0x98>)
 8001994:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <MX_TIM3_Init+0x94>)
 8001998:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800199c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <MX_TIM3_Init+0x94>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <MX_TIM3_Init+0x94>)
 80019a6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80019aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <MX_TIM3_Init+0x94>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <MX_TIM3_Init+0x94>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019b8:	4813      	ldr	r0, [pc, #76]	; (8001a08 <MX_TIM3_Init+0x94>)
 80019ba:	f002 f855 	bl	8003a68 <HAL_TIM_Base_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80019c4:	f000 f8dc 	bl	8001b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	4619      	mov	r1, r3
 80019d4:	480c      	ldr	r0, [pc, #48]	; (8001a08 <MX_TIM3_Init+0x94>)
 80019d6:	f002 fb21 	bl	800401c <HAL_TIM_ConfigClockSource>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80019e0:	f000 f8ce 	bl	8001b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019e4:	2320      	movs	r3, #32
 80019e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ec:	463b      	mov	r3, r7
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_TIM3_Init+0x94>)
 80019f2:	f002 fea7 	bl	8004744 <HAL_TIMEx_MasterConfigSynchronization>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80019fc:	f000 f8c0 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200006bc 	.word	0x200006bc
 8001a0c:	40000400 	.word	0x40000400

08001a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <MX_USART2_UART_Init+0x50>)
 8001a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a36:	220c      	movs	r2, #12
 8001a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_USART2_UART_Init+0x4c>)
 8001a48:	f002 ff3c 	bl	80048c4 <HAL_UART_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a52:	f000 f895 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000704 	.word	0x20000704
 8001a60:	40004400 	.word	0x40004400

08001a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <MX_GPIO_Init+0x10c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a3b      	ldr	r2, [pc, #236]	; (8001b70 <MX_GPIO_Init+0x10c>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <MX_GPIO_Init+0x10c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <MX_GPIO_Init+0x10c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a34      	ldr	r2, [pc, #208]	; (8001b70 <MX_GPIO_Init+0x10c>)
 8001aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <MX_GPIO_Init+0x10c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <MX_GPIO_Init+0x10c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a2d      	ldr	r2, [pc, #180]	; (8001b70 <MX_GPIO_Init+0x10c>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <MX_GPIO_Init+0x10c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <MX_GPIO_Init+0x10c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <MX_GPIO_Init+0x10c>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <MX_GPIO_Init+0x10c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2130      	movs	r1, #48	; 0x30
 8001aee:	4821      	ldr	r0, [pc, #132]	; (8001b74 <MX_GPIO_Init+0x110>)
 8001af0:	f001 fae4 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001af4:	2200      	movs	r2, #0
 8001af6:	f24f 0106 	movw	r1, #61446	; 0xf006
 8001afa:	481f      	ldr	r0, [pc, #124]	; (8001b78 <MX_GPIO_Init+0x114>)
 8001afc:	f001 fade 	bl	80030bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b06:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	4819      	ldr	r0, [pc, #100]	; (8001b7c <MX_GPIO_Init+0x118>)
 8001b18:	f001 f94c 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001b1c:	2330      	movs	r3, #48	; 0x30
 8001b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	4810      	ldr	r0, [pc, #64]	; (8001b74 <MX_GPIO_Init+0x110>)
 8001b34:	f001 f93e 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001b38:	f24f 0306 	movw	r3, #61446	; 0xf006
 8001b3c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4809      	ldr	r0, [pc, #36]	; (8001b78 <MX_GPIO_Init+0x114>)
 8001b52:	f001 f92f 	bl	8002db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2028      	movs	r0, #40	; 0x28
 8001b5c:	f001 f861 	bl	8002c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b60:	2028      	movs	r0, #40	; 0x28
 8001b62:	f001 f87a 	bl	8002c5a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	; 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40020800 	.word	0x40020800

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <Error_Handler+0x8>
	...

08001b8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001bca:	2006      	movs	r0, #6
 8001bcc:	f001 f81e 	bl	8002c0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800

08001bdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <HAL_ADC_MspInit+0x8c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d12f      	bne.n	8001c5e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_ADC_MspInit+0x90>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <HAL_ADC_MspInit+0x90>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_ADC_MspInit+0x90>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <HAL_ADC_MspInit+0x90>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <HAL_ADC_MspInit+0x90>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_ADC_MspInit+0x90>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c36:	2302      	movs	r3, #2
 8001c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	4809      	ldr	r0, [pc, #36]	; (8001c70 <HAL_ADC_MspInit+0x94>)
 8001c4a:	f001 f8b3 	bl	8002db4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	2012      	movs	r0, #18
 8001c54:	f000 ffe5 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c58:	2012      	movs	r0, #18
 8001c5a:	f000 fffe 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c5e:	bf00      	nop
 8001c60:	3728      	adds	r7, #40	; 0x28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40012000 	.word	0x40012000
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40020000 	.word	0x40020000

08001c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <HAL_TIM_Base_MspInit+0x64>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d10e      	bne.n	8001ca4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_TIM_Base_MspInit+0x68>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <HAL_TIM_Base_MspInit+0x68>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_TIM_Base_MspInit+0x68>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ca2:	e012      	b.n	8001cca <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <HAL_TIM_Base_MspInit+0x6c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d10d      	bne.n	8001cca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_TIM_Base_MspInit+0x68>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <HAL_TIM_Base_MspInit+0x68>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <HAL_TIM_Base_MspInit+0x68>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40000400 	.word	0x40000400

08001ce4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <HAL_TIM_MspPostInit+0x68>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d11e      	bne.n	8001d44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_TIM_MspPostInit+0x6c>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a10      	ldr	r2, [pc, #64]	; (8001d50 <HAL_TIM_MspPostInit+0x6c>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_TIM_MspPostInit+0x6c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d34:	2301      	movs	r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <HAL_TIM_MspPostInit+0x70>)
 8001d40:	f001 f838 	bl	8002db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d44:	bf00      	nop
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40010000 	.word	0x40010000
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020000 	.word	0x40020000

08001d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a1d      	ldr	r2, [pc, #116]	; (8001dec <HAL_UART_MspInit+0x94>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d133      	bne.n	8001de2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <HAL_UART_MspInit+0x98>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <HAL_UART_MspInit+0x98>)
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_UART_MspInit+0x98>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_UART_MspInit+0x98>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <HAL_UART_MspInit+0x98>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_UART_MspInit+0x98>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001db2:	230c      	movs	r3, #12
 8001db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dc2:	2307      	movs	r3, #7
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <HAL_UART_MspInit+0x9c>)
 8001dce:	f000 fff1 	bl	8002db4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2026      	movs	r0, #38	; 0x26
 8001dd8:	f000 ff23 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ddc:	2026      	movs	r0, #38	; 0x26
 8001dde:	f000 ff3c 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001de2:	bf00      	nop
 8001de4:	3728      	adds	r7, #40	; 0x28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40004400 	.word	0x40004400
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020000 	.word	0x40020000

08001df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <NMI_Handler+0x4>

08001dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e02:	e7fe      	b.n	8001e02 <HardFault_Handler+0x4>

08001e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <MemManage_Handler+0x4>

08001e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <BusFault_Handler+0x4>

08001e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <UsageFault_Handler+0x4>

08001e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e44:	f000 f972 	bl	800212c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <ADC_IRQHandler+0x10>)
 8001e52:	f000 fab1 	bl	80023b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000062c 	.word	0x2000062c

08001e60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <USART2_IRQHandler+0x10>)
 8001e66:	f002 fe0d 	bl	8004a84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000704 	.word	0x20000704

08001e74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e7c:	f001 f938 	bl	80030f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return 1;
 8001e88:	2301      	movs	r3, #1
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <_kill>:

int _kill(int pid, int sig)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e9e:	f004 fb17 	bl	80064d0 <__errno>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2216      	movs	r2, #22
 8001ea6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_exit>:

void _exit (int status)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ffe7 	bl	8001e94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ec6:	e7fe      	b.n	8001ec6 <_exit+0x12>

08001ec8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e00a      	b.n	8001ef0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eda:	f3af 8000 	nop.w
 8001ede:	4601      	mov	r1, r0
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	60ba      	str	r2, [r7, #8]
 8001ee6:	b2ca      	uxtb	r2, r1
 8001ee8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3301      	adds	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	dbf0      	blt.n	8001eda <_read+0x12>
  }

  return len;
 8001ef8:	687b      	ldr	r3, [r7, #4]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	e009      	b.n	8001f28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	60ba      	str	r2, [r7, #8]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	3301      	adds	r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dbf1      	blt.n	8001f14 <_write+0x12>
  }
  return len;
 8001f30:	687b      	ldr	r3, [r7, #4]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <_close>:

int _close(int file)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f62:	605a      	str	r2, [r3, #4]
  return 0;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <_isatty>:

int _isatty(int file)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fac:	4a14      	ldr	r2, [pc, #80]	; (8002000 <_sbrk+0x5c>)
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <_sbrk+0x60>)
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <_sbrk+0x64>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <_sbrk+0x64>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <_sbrk+0x68>)
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d207      	bcs.n	8001fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd4:	f004 fa7c 	bl	80064d0 <__errno>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	220c      	movs	r2, #12
 8001fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	e009      	b.n	8001ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <_sbrk+0x64>)
 8001ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20018000 	.word	0x20018000
 8002004:	00000400 	.word	0x00000400
 8002008:	20000748 	.word	0x20000748
 800200c:	200008a0 	.word	0x200008a0

08002010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <SystemInit+0x20>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <SystemInit+0x20>)
 800201c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800206c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002038:	480d      	ldr	r0, [pc, #52]	; (8002070 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800203a:	490e      	ldr	r1, [pc, #56]	; (8002074 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800203c:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002040:	e002      	b.n	8002048 <LoopCopyDataInit>

08002042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002046:	3304      	adds	r3, #4

08002048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800204c:	d3f9      	bcc.n	8002042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204e:	4a0b      	ldr	r2, [pc, #44]	; (800207c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002050:	4c0b      	ldr	r4, [pc, #44]	; (8002080 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002054:	e001      	b.n	800205a <LoopFillZerobss>

08002056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002058:	3204      	adds	r2, #4

0800205a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800205c:	d3fb      	bcc.n	8002056 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800205e:	f7ff ffd7 	bl	8002010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002062:	f004 fa3b 	bl	80064dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002066:	f7ff fafd 	bl	8001664 <main>
  bx  lr    
 800206a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800206c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002074:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002078:	08008a94 	.word	0x08008a94
  ldr r2, =_sbss
 800207c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002080:	2000089c 	.word	0x2000089c

08002084 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <DMA1_Stream0_IRQHandler>
	...

08002088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_Init+0x40>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0d      	ldr	r2, [pc, #52]	; (80020c8 <HAL_Init+0x40>)
 8002092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002096:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_Init+0x40>)
 800209e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_Init+0x40>)
 80020aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b0:	2003      	movs	r0, #3
 80020b2:	f000 fdab 	bl	8002c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f000 f808 	bl	80020cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020bc:	f7ff fd66 	bl	8001b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023c00 	.word	0x40023c00

080020cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_InitTick+0x54>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_InitTick+0x58>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 fdc3 	bl	8002c76 <HAL_SYSTICK_Config>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00e      	b.n	8002118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b0f      	cmp	r3, #15
 80020fe:	d80a      	bhi.n	8002116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002100:	2200      	movs	r2, #0
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f000 fd8b 	bl	8002c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800210c:	4a06      	ldr	r2, [pc, #24]	; (8002128 <HAL_InitTick+0x5c>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	e000      	b.n	8002118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000028 	.word	0x20000028
 8002124:	20000030 	.word	0x20000030
 8002128:	2000002c 	.word	0x2000002c

0800212c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_IncTick+0x20>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_IncTick+0x24>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4413      	add	r3, r2
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <HAL_IncTick+0x24>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000030 	.word	0x20000030
 8002150:	2000074c 	.word	0x2000074c

08002154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return uwTick;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_GetTick+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	2000074c 	.word	0x2000074c

0800216c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff ffee 	bl	8002154 <HAL_GetTick>
 8002178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d005      	beq.n	8002192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_Delay+0x44>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002192:	bf00      	nop
 8002194:	f7ff ffde 	bl	8002154 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d8f7      	bhi.n	8002194 <HAL_Delay+0x28>
  {
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000030 	.word	0x20000030

080021b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e033      	b.n	8002232 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff fd02 	bl	8001bdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d118      	bne.n	8002224 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021fa:	f023 0302 	bic.w	r3, r3, #2
 80021fe:	f043 0202 	orr.w	r2, r3, #2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fb2a 	bl	8002860 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f023 0303 	bic.w	r3, r3, #3
 800221a:	f043 0201 	orr.w	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
 8002222:	e001      	b.n	8002228 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002230:	7bfb      	ldrb	r3, [r7, #15]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_ADC_Start_IT+0x1a>
 8002252:	2302      	movs	r3, #2
 8002254:	e0a1      	b.n	800239a <HAL_ADC_Start_IT+0x15e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b01      	cmp	r3, #1
 800226a:	d018      	beq.n	800229e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800227c:	4b4a      	ldr	r3, [pc, #296]	; (80023a8 <HAL_ADC_Start_IT+0x16c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a4a      	ldr	r2, [pc, #296]	; (80023ac <HAL_ADC_Start_IT+0x170>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0c9a      	lsrs	r2, r3, #18
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002290:	e002      	b.n	8002298 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	3b01      	subs	r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f9      	bne.n	8002292 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d169      	bne.n	8002380 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d007      	beq.n	80022de <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ea:	d106      	bne.n	80022fa <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	f023 0206 	bic.w	r2, r3, #6
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	645a      	str	r2, [r3, #68]	; 0x44
 80022f8:	e002      	b.n	8002300 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002308:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <HAL_ADC_Start_IT+0x174>)
 800230a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002314:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002324:	f043 0320 	orr.w	r3, r3, #32
 8002328:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10f      	bne.n	8002356 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d129      	bne.n	8002398 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	e020      	b.n	8002398 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a16      	ldr	r2, [pc, #88]	; (80023b4 <HAL_ADC_Start_IT+0x178>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d11b      	bne.n	8002398 <HAL_ADC_Start_IT+0x15c>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d114      	bne.n	8002398 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	e00b      	b.n	8002398 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f043 0210 	orr.w	r2, r3, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002390:	f043 0201 	orr.w	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000028 	.word	0x20000028
 80023ac:	431bde83 	.word	0x431bde83
 80023b0:	40012300 	.word	0x40012300
 80023b4:	40012000 	.word	0x40012000

080023b8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d049      	beq.n	8002482 <HAL_ADC_IRQHandler+0xca>
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d046      	beq.n	8002482 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d105      	bne.n	800240c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d12b      	bne.n	8002472 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800241e:	2b00      	cmp	r3, #0
 8002420:	d127      	bne.n	8002472 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800242c:	2b00      	cmp	r3, #0
 800242e:	d006      	beq.n	800243e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800243a:	2b00      	cmp	r3, #0
 800243c:	d119      	bne.n	8002472 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0220 	bic.w	r2, r2, #32
 800244c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff f834 	bl	80014e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0212 	mvn.w	r2, #18
 8002480:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002490:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d057      	beq.n	8002548 <HAL_ADC_IRQHandler+0x190>
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d054      	beq.n	8002548 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d105      	bne.n	80024b6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d139      	bne.n	8002538 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d006      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d12b      	bne.n	8002538 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d124      	bne.n	8002538 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d11d      	bne.n	8002538 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002500:	2b00      	cmp	r3, #0
 8002502:	d119      	bne.n	8002538 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002512:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f043 0201 	orr.w	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fa8d 	bl	8002a58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f06f 020c 	mvn.w	r2, #12
 8002546:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d017      	beq.n	800258e <HAL_ADC_IRQHandler+0x1d6>
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d014      	beq.n	800258e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	d10d      	bne.n	800258e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f837 	bl	80025f2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0201 	mvn.w	r2, #1
 800258c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800259c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d015      	beq.n	80025d0 <HAL_ADC_IRQHandler+0x218>
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d012      	beq.n	80025d0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f043 0202 	orr.w	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f06f 0220 	mvn.w	r2, #32
 80025be:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f820 	bl	8002606 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f06f 0220 	mvn.w	r2, #32
 80025ce:	601a      	str	r2, [r3, #0]
  }
}
 80025d0:	bf00      	nop
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x1c>
 8002634:	2302      	movs	r3, #2
 8002636:	e105      	b.n	8002844 <HAL_ADC_ConfigChannel+0x228>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b09      	cmp	r3, #9
 8002646:	d925      	bls.n	8002694 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68d9      	ldr	r1, [r3, #12]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	3b1e      	subs	r3, #30
 800265e:	2207      	movs	r2, #7
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43da      	mvns	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	400a      	ands	r2, r1
 800266c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68d9      	ldr	r1, [r3, #12]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	4618      	mov	r0, r3
 8002680:	4603      	mov	r3, r0
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4403      	add	r3, r0
 8002686:	3b1e      	subs	r3, #30
 8002688:	409a      	lsls	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	e022      	b.n	80026da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6919      	ldr	r1, [r3, #16]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	2207      	movs	r2, #7
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	400a      	ands	r2, r1
 80026b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6919      	ldr	r1, [r3, #16]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	4618      	mov	r0, r3
 80026ca:	4603      	mov	r3, r0
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4403      	add	r3, r0
 80026d0:	409a      	lsls	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b06      	cmp	r3, #6
 80026e0:	d824      	bhi.n	800272c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	3b05      	subs	r3, #5
 80026f4:	221f      	movs	r2, #31
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	400a      	ands	r2, r1
 8002702:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	4618      	mov	r0, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	3b05      	subs	r3, #5
 800271e:	fa00 f203 	lsl.w	r2, r0, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	635a      	str	r2, [r3, #52]	; 0x34
 800272a:	e04c      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b0c      	cmp	r3, #12
 8002732:	d824      	bhi.n	800277e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	3b23      	subs	r3, #35	; 0x23
 8002746:	221f      	movs	r2, #31
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43da      	mvns	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	400a      	ands	r2, r1
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	b29b      	uxth	r3, r3
 8002762:	4618      	mov	r0, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	3b23      	subs	r3, #35	; 0x23
 8002770:	fa00 f203 	lsl.w	r2, r0, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
 800277c:	e023      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	3b41      	subs	r3, #65	; 0x41
 8002790:	221f      	movs	r2, #31
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	400a      	ands	r2, r1
 800279e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4618      	mov	r0, r3
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	3b41      	subs	r3, #65	; 0x41
 80027ba:	fa00 f203 	lsl.w	r2, r0, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027c6:	4b22      	ldr	r3, [pc, #136]	; (8002850 <HAL_ADC_ConfigChannel+0x234>)
 80027c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a21      	ldr	r2, [pc, #132]	; (8002854 <HAL_ADC_ConfigChannel+0x238>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d109      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1cc>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b12      	cmp	r3, #18
 80027da:	d105      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a19      	ldr	r2, [pc, #100]	; (8002854 <HAL_ADC_ConfigChannel+0x238>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d123      	bne.n	800283a <HAL_ADC_ConfigChannel+0x21e>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d003      	beq.n	8002802 <HAL_ADC_ConfigChannel+0x1e6>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b11      	cmp	r3, #17
 8002800:	d11b      	bne.n	800283a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b10      	cmp	r3, #16
 8002814:	d111      	bne.n	800283a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <HAL_ADC_ConfigChannel+0x23c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a10      	ldr	r2, [pc, #64]	; (800285c <HAL_ADC_ConfigChannel+0x240>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	0c9a      	lsrs	r2, r3, #18
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800282c:	e002      	b.n	8002834 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	3b01      	subs	r3, #1
 8002832:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f9      	bne.n	800282e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40012300 	.word	0x40012300
 8002854:	40012000 	.word	0x40012000
 8002858:	20000028 	.word	0x20000028
 800285c:	431bde83 	.word	0x431bde83

08002860 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002868:	4b79      	ldr	r3, [pc, #484]	; (8002a50 <ADC_Init+0x1f0>)
 800286a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	431a      	orrs	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002894:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	021a      	lsls	r2, r3, #8
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6899      	ldr	r1, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <ADC_Init+0x1f4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d022      	beq.n	800293e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002906:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6899      	ldr	r1, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	e00f      	b.n	800295e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800294c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800295c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0202 	bic.w	r2, r2, #2
 800296c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6899      	ldr	r1, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7e1b      	ldrb	r3, [r3, #24]
 8002978:	005a      	lsls	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01b      	beq.n	80029c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800299a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6859      	ldr	r1, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	3b01      	subs	r3, #1
 80029b8:	035a      	lsls	r2, r3, #13
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	e007      	b.n	80029d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	051a      	lsls	r2, r3, #20
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6899      	ldr	r1, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a16:	025a      	lsls	r2, r3, #9
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6899      	ldr	r1, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	029a      	lsls	r2, r3, #10
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	40012300 	.word	0x40012300
 8002a54:	0f000001 	.word	0x0f000001

08002a58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a9e:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	60d3      	str	r3, [r2, #12]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <__NVIC_GetPriorityGrouping+0x18>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	f003 0307 	and.w	r3, r3, #7
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	db0b      	blt.n	8002afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	f003 021f 	and.w	r2, r3, #31
 8002ae8:	4907      	ldr	r1, [pc, #28]	; (8002b08 <__NVIC_EnableIRQ+0x38>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	2001      	movs	r0, #1
 8002af2:	fa00 f202 	lsl.w	r2, r0, r2
 8002af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000e100 	.word	0xe000e100

08002b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	db0a      	blt.n	8002b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	490c      	ldr	r1, [pc, #48]	; (8002b58 <__NVIC_SetPriority+0x4c>)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	0112      	lsls	r2, r2, #4
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	440b      	add	r3, r1
 8002b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b34:	e00a      	b.n	8002b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4908      	ldr	r1, [pc, #32]	; (8002b5c <__NVIC_SetPriority+0x50>)
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	3b04      	subs	r3, #4
 8002b44:	0112      	lsls	r2, r2, #4
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	440b      	add	r3, r1
 8002b4a:	761a      	strb	r2, [r3, #24]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000e100 	.word	0xe000e100
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	; 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f1c3 0307 	rsb	r3, r3, #7
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	bf28      	it	cs
 8002b7e:	2304      	movcs	r3, #4
 8002b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3304      	adds	r3, #4
 8002b86:	2b06      	cmp	r3, #6
 8002b88:	d902      	bls.n	8002b90 <NVIC_EncodePriority+0x30>
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3b03      	subs	r3, #3
 8002b8e:	e000      	b.n	8002b92 <NVIC_EncodePriority+0x32>
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	f04f 32ff 	mov.w	r2, #4294967295
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	43d9      	mvns	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	4313      	orrs	r3, r2
         );
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3724      	adds	r7, #36	; 0x24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd8:	d301      	bcc.n	8002bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e00f      	b.n	8002bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <SysTick_Config+0x40>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be6:	210f      	movs	r1, #15
 8002be8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bec:	f7ff ff8e 	bl	8002b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <SysTick_Config+0x40>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <SysTick_Config+0x40>)
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	e000e010 	.word	0xe000e010

08002c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ff29 	bl	8002a6c <__NVIC_SetPriorityGrouping>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c34:	f7ff ff3e 	bl	8002ab4 <__NVIC_GetPriorityGrouping>
 8002c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	6978      	ldr	r0, [r7, #20]
 8002c40:	f7ff ff8e 	bl	8002b60 <NVIC_EncodePriority>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff5d 	bl	8002b0c <__NVIC_SetPriority>
}
 8002c52:	bf00      	nop
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff31 	bl	8002ad0 <__NVIC_EnableIRQ>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ffa2 	bl	8002bc8 <SysTick_Config>
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c9c:	f7ff fa5a 	bl	8002154 <HAL_GetTick>
 8002ca0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d008      	beq.n	8002cc0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e052      	b.n	8002d66 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0216 	bic.w	r2, r2, #22
 8002cce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cde:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d103      	bne.n	8002cf0 <HAL_DMA_Abort+0x62>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0208 	bic.w	r2, r2, #8
 8002cfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d10:	e013      	b.n	8002d3a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d12:	f7ff fa1f 	bl	8002154 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	d90c      	bls.n	8002d3a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2203      	movs	r2, #3
 8002d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e015      	b.n	8002d66 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e4      	bne.n	8002d12 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4c:	223f      	movs	r2, #63	; 0x3f
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d004      	beq.n	8002d8c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2280      	movs	r2, #128	; 0x80
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e00c      	b.n	8002da6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2205      	movs	r2, #5
 8002d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b089      	sub	sp, #36	; 0x24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	e159      	b.n	8003084 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	f040 8148 	bne.w	800307e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d005      	beq.n	8002e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d130      	bne.n	8002e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	2203      	movs	r2, #3
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 0201 	and.w	r2, r3, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d017      	beq.n	8002ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d123      	bne.n	8002ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	08da      	lsrs	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3208      	adds	r2, #8
 8002eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	220f      	movs	r2, #15
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	08da      	lsrs	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3208      	adds	r2, #8
 8002ef2:	69b9      	ldr	r1, [r7, #24]
 8002ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	2203      	movs	r2, #3
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0203 	and.w	r2, r3, #3
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80a2 	beq.w	800307e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4b57      	ldr	r3, [pc, #348]	; (800309c <HAL_GPIO_Init+0x2e8>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	4a56      	ldr	r2, [pc, #344]	; (800309c <HAL_GPIO_Init+0x2e8>)
 8002f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f48:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4a:	4b54      	ldr	r3, [pc, #336]	; (800309c <HAL_GPIO_Init+0x2e8>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f56:	4a52      	ldr	r2, [pc, #328]	; (80030a0 <HAL_GPIO_Init+0x2ec>)
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	089b      	lsrs	r3, r3, #2
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	220f      	movs	r2, #15
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a49      	ldr	r2, [pc, #292]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d019      	beq.n	8002fb6 <HAL_GPIO_Init+0x202>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a48      	ldr	r2, [pc, #288]	; (80030a8 <HAL_GPIO_Init+0x2f4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_GPIO_Init+0x1fe>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a47      	ldr	r2, [pc, #284]	; (80030ac <HAL_GPIO_Init+0x2f8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00d      	beq.n	8002fae <HAL_GPIO_Init+0x1fa>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a46      	ldr	r2, [pc, #280]	; (80030b0 <HAL_GPIO_Init+0x2fc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d007      	beq.n	8002faa <HAL_GPIO_Init+0x1f6>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a45      	ldr	r2, [pc, #276]	; (80030b4 <HAL_GPIO_Init+0x300>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_GPIO_Init+0x1f2>
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	e008      	b.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002fa6:	2307      	movs	r3, #7
 8002fa8:	e006      	b.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002faa:	2303      	movs	r3, #3
 8002fac:	e004      	b.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e002      	b.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	f002 0203 	and.w	r2, r2, #3
 8002fbe:	0092      	lsls	r2, r2, #2
 8002fc0:	4093      	lsls	r3, r2
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fc8:	4935      	ldr	r1, [pc, #212]	; (80030a0 <HAL_GPIO_Init+0x2ec>)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	3302      	adds	r3, #2
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fd6:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ffa:	4a2f      	ldr	r2, [pc, #188]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003000:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003024:	4a24      	ldr	r2, [pc, #144]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800302a:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <HAL_GPIO_Init+0x304>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800304e:	4a1a      	ldr	r2, [pc, #104]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003054:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003078:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <HAL_GPIO_Init+0x304>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3301      	adds	r3, #1
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	2b0f      	cmp	r3, #15
 8003088:	f67f aea2 	bls.w	8002dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800
 80030a0:	40013800 	.word	0x40013800
 80030a4:	40020000 	.word	0x40020000
 80030a8:	40020400 	.word	0x40020400
 80030ac:	40020800 	.word	0x40020800
 80030b0:	40020c00 	.word	0x40020c00
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40013c00 	.word	0x40013c00

080030bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
 80030c8:	4613      	mov	r3, r2
 80030ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030cc:	787b      	ldrb	r3, [r7, #1]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030d8:	e003      	b.n	80030e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030da:	887b      	ldrh	r3, [r7, #2]
 80030dc:	041a      	lsls	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	619a      	str	r2, [r3, #24]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	4013      	ands	r3, r2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d006      	beq.n	8003114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003106:	4a05      	ldr	r2, [pc, #20]	; (800311c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	4618      	mov	r0, r3
 8003110:	f000 f806 	bl	8003120 <HAL_GPIO_EXTI_Callback>
  }
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40013c00 	.word	0x40013c00

08003120 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e267      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d075      	beq.n	8003242 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003156:	4b88      	ldr	r3, [pc, #544]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b04      	cmp	r3, #4
 8003160:	d00c      	beq.n	800317c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003162:	4b85      	ldr	r3, [pc, #532]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800316a:	2b08      	cmp	r3, #8
 800316c:	d112      	bne.n	8003194 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316e:	4b82      	ldr	r3, [pc, #520]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800317a:	d10b      	bne.n	8003194 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317c:	4b7e      	ldr	r3, [pc, #504]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d05b      	beq.n	8003240 <HAL_RCC_OscConfig+0x108>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d157      	bne.n	8003240 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e242      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319c:	d106      	bne.n	80031ac <HAL_RCC_OscConfig+0x74>
 800319e:	4b76      	ldr	r3, [pc, #472]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a75      	ldr	r2, [pc, #468]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e01d      	b.n	80031e8 <HAL_RCC_OscConfig+0xb0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x98>
 80031b6:	4b70      	ldr	r3, [pc, #448]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6f      	ldr	r2, [pc, #444]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4b6d      	ldr	r3, [pc, #436]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6c      	ldr	r2, [pc, #432]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e00b      	b.n	80031e8 <HAL_RCC_OscConfig+0xb0>
 80031d0:	4b69      	ldr	r3, [pc, #420]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a68      	ldr	r2, [pc, #416]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b66      	ldr	r3, [pc, #408]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a65      	ldr	r2, [pc, #404]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d013      	beq.n	8003218 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7fe ffb0 	bl	8002154 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f8:	f7fe ffac 	bl	8002154 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e207      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	4b5b      	ldr	r3, [pc, #364]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0xc0>
 8003216:	e014      	b.n	8003242 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fe ff9c 	bl	8002154 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003220:	f7fe ff98 	bl	8002154 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e1f3      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003232:	4b51      	ldr	r3, [pc, #324]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0xe8>
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d063      	beq.n	8003316 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800324e:	4b4a      	ldr	r3, [pc, #296]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00b      	beq.n	8003272 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325a:	4b47      	ldr	r3, [pc, #284]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003262:	2b08      	cmp	r3, #8
 8003264:	d11c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b44      	ldr	r3, [pc, #272]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d116      	bne.n	80032a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003272:	4b41      	ldr	r3, [pc, #260]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_RCC_OscConfig+0x152>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e1c7      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328a:	4b3b      	ldr	r3, [pc, #236]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4937      	ldr	r1, [pc, #220]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800329a:	4313      	orrs	r3, r2
 800329c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329e:	e03a      	b.n	8003316 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a8:	4b34      	ldr	r3, [pc, #208]	; (800337c <HAL_RCC_OscConfig+0x244>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7fe ff51 	bl	8002154 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b6:	f7fe ff4d 	bl	8002154 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e1a8      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c8:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d4:	4b28      	ldr	r3, [pc, #160]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4925      	ldr	r1, [pc, #148]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]
 80032e8:	e015      	b.n	8003316 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <HAL_RCC_OscConfig+0x244>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fe ff30 	bl	8002154 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f8:	f7fe ff2c 	bl	8002154 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e187      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330a:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d036      	beq.n	8003390 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d016      	beq.n	8003358 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_RCC_OscConfig+0x248>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fe ff10 	bl	8002154 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003338:	f7fe ff0c 	bl	8002154 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e167      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800334c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x200>
 8003356:	e01b      	b.n	8003390 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_RCC_OscConfig+0x248>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335e:	f7fe fef9 	bl	8002154 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003364:	e00e      	b.n	8003384 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003366:	f7fe fef5 	bl	8002154 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d907      	bls.n	8003384 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e150      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
 8003378:	40023800 	.word	0x40023800
 800337c:	42470000 	.word	0x42470000
 8003380:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	4b88      	ldr	r3, [pc, #544]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1ea      	bne.n	8003366 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8097 	beq.w	80034cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a2:	4b81      	ldr	r3, [pc, #516]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10f      	bne.n	80033ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	4b7d      	ldr	r3, [pc, #500]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	4a7c      	ldr	r2, [pc, #496]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033bc:	6413      	str	r3, [r2, #64]	; 0x40
 80033be:	4b7a      	ldr	r3, [pc, #488]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ce:	4b77      	ldr	r3, [pc, #476]	; (80035ac <HAL_RCC_OscConfig+0x474>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d118      	bne.n	800340c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033da:	4b74      	ldr	r3, [pc, #464]	; (80035ac <HAL_RCC_OscConfig+0x474>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a73      	ldr	r2, [pc, #460]	; (80035ac <HAL_RCC_OscConfig+0x474>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7fe feb5 	bl	8002154 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7fe feb1 	bl	8002154 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e10c      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCC_OscConfig+0x474>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x2ea>
 8003414:	4b64      	ldr	r3, [pc, #400]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	4a63      	ldr	r2, [pc, #396]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6713      	str	r3, [r2, #112]	; 0x70
 8003420:	e01c      	b.n	800345c <HAL_RCC_OscConfig+0x324>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b05      	cmp	r3, #5
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x30c>
 800342a:	4b5f      	ldr	r3, [pc, #380]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	4a5e      	ldr	r2, [pc, #376]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003430:	f043 0304 	orr.w	r3, r3, #4
 8003434:	6713      	str	r3, [r2, #112]	; 0x70
 8003436:	4b5c      	ldr	r3, [pc, #368]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a5b      	ldr	r2, [pc, #364]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0x324>
 8003444:	4b58      	ldr	r3, [pc, #352]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	4a57      	ldr	r2, [pc, #348]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	6713      	str	r3, [r2, #112]	; 0x70
 8003450:	4b55      	ldr	r3, [pc, #340]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	4a54      	ldr	r2, [pc, #336]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003456:	f023 0304 	bic.w	r3, r3, #4
 800345a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d015      	beq.n	8003490 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7fe fe76 	bl	8002154 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346a:	e00a      	b.n	8003482 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fe fe72 	bl	8002154 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e0cb      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003482:	4b49      	ldr	r3, [pc, #292]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0ee      	beq.n	800346c <HAL_RCC_OscConfig+0x334>
 800348e:	e014      	b.n	80034ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003490:	f7fe fe60 	bl	8002154 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003496:	e00a      	b.n	80034ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003498:	f7fe fe5c 	bl	8002154 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0b5      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ae:	4b3e      	ldr	r3, [pc, #248]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1ee      	bne.n	8003498 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d105      	bne.n	80034cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c0:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	4a38      	ldr	r2, [pc, #224]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80a1 	beq.w	8003618 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d6:	4b34      	ldr	r3, [pc, #208]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d05c      	beq.n	800359c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d141      	bne.n	800356e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <HAL_RCC_OscConfig+0x478>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fe fe30 	bl	8002154 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe fe2c 	bl	8002154 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e087      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	019b      	lsls	r3, r3, #6
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	3b01      	subs	r3, #1
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	061b      	lsls	r3, r3, #24
 800353a:	491b      	ldr	r1, [pc, #108]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800353c:	4313      	orrs	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_RCC_OscConfig+0x478>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7fe fe05 	bl	8002154 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354e:	f7fe fe01 	bl	8002154 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e05c      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003560:	4b11      	ldr	r3, [pc, #68]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x416>
 800356c:	e054      	b.n	8003618 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <HAL_RCC_OscConfig+0x478>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fe fdee 	bl	8002154 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357c:	f7fe fdea 	bl	8002154 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e045      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x444>
 800359a:	e03d      	b.n	8003618 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e038      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40007000 	.word	0x40007000
 80035b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x4ec>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d028      	beq.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d121      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d11a      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035e4:	4013      	ands	r3, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d111      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	085b      	lsrs	r3, r3, #1
 80035fc:	3b01      	subs	r3, #1
 80035fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d107      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800

08003628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0cc      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800363c:	4b68      	ldr	r3, [pc, #416]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d90c      	bls.n	8003664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b65      	ldr	r3, [pc, #404]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b63      	ldr	r3, [pc, #396]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0b8      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800367c:	4b59      	ldr	r3, [pc, #356]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a58      	ldr	r2, [pc, #352]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003694:	4b53      	ldr	r3, [pc, #332]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a52      	ldr	r2, [pc, #328]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800369e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a0:	4b50      	ldr	r3, [pc, #320]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	494d      	ldr	r1, [pc, #308]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d044      	beq.n	8003748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	4b47      	ldr	r3, [pc, #284]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d119      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e07f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d003      	beq.n	80036e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e6:	4b3f      	ldr	r3, [pc, #252]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e06f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f6:	4b3b      	ldr	r3, [pc, #236]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e067      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003706:	4b37      	ldr	r3, [pc, #220]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f023 0203 	bic.w	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4934      	ldr	r1, [pc, #208]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003718:	f7fe fd1c 	bl	8002154 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	e00a      	b.n	8003736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003720:	f7fe fd18 	bl	8002154 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	; 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e04f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	4b2b      	ldr	r3, [pc, #172]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 020c 	and.w	r2, r3, #12
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	429a      	cmp	r2, r3
 8003746:	d1eb      	bne.n	8003720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003748:	4b25      	ldr	r3, [pc, #148]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d20c      	bcs.n	8003770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e032      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800377c:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4916      	ldr	r1, [pc, #88]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	490e      	ldr	r1, [pc, #56]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ae:	f000 f821 	bl	80037f4 <HAL_RCC_GetSysClockFreq>
 80037b2:	4602      	mov	r2, r0
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	490a      	ldr	r1, [pc, #40]	; (80037e8 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	5ccb      	ldrb	r3, [r1, r3]
 80037c2:	fa22 f303 	lsr.w	r3, r2, r3
 80037c6:	4a09      	ldr	r2, [pc, #36]	; (80037ec <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ca:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe fc7c 	bl	80020cc <HAL_InitTick>

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023c00 	.word	0x40023c00
 80037e4:	40023800 	.word	0x40023800
 80037e8:	080086fc 	.word	0x080086fc
 80037ec:	20000028 	.word	0x20000028
 80037f0:	2000002c 	.word	0x2000002c

080037f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f8:	b094      	sub	sp, #80	; 0x50
 80037fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003800:	2300      	movs	r3, #0
 8003802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003804:	2300      	movs	r3, #0
 8003806:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800380c:	4b79      	ldr	r3, [pc, #484]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	2b08      	cmp	r3, #8
 8003816:	d00d      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x40>
 8003818:	2b08      	cmp	r3, #8
 800381a:	f200 80e1 	bhi.w	80039e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0x34>
 8003822:	2b04      	cmp	r3, #4
 8003824:	d003      	beq.n	800382e <HAL_RCC_GetSysClockFreq+0x3a>
 8003826:	e0db      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003828:	4b73      	ldr	r3, [pc, #460]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800382a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800382c:	e0db      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800382e:	4b73      	ldr	r3, [pc, #460]	; (80039fc <HAL_RCC_GetSysClockFreq+0x208>)
 8003830:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003832:	e0d8      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003834:	4b6f      	ldr	r3, [pc, #444]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800383c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800383e:	4b6d      	ldr	r3, [pc, #436]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d063      	beq.n	8003912 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384a:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	099b      	lsrs	r3, r3, #6
 8003850:	2200      	movs	r2, #0
 8003852:	63bb      	str	r3, [r7, #56]	; 0x38
 8003854:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385c:	633b      	str	r3, [r7, #48]	; 0x30
 800385e:	2300      	movs	r3, #0
 8003860:	637b      	str	r3, [r7, #52]	; 0x34
 8003862:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003866:	4622      	mov	r2, r4
 8003868:	462b      	mov	r3, r5
 800386a:	f04f 0000 	mov.w	r0, #0
 800386e:	f04f 0100 	mov.w	r1, #0
 8003872:	0159      	lsls	r1, r3, #5
 8003874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003878:	0150      	lsls	r0, r2, #5
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4621      	mov	r1, r4
 8003880:	1a51      	subs	r1, r2, r1
 8003882:	6139      	str	r1, [r7, #16]
 8003884:	4629      	mov	r1, r5
 8003886:	eb63 0301 	sbc.w	r3, r3, r1
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003898:	4659      	mov	r1, fp
 800389a:	018b      	lsls	r3, r1, #6
 800389c:	4651      	mov	r1, sl
 800389e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038a2:	4651      	mov	r1, sl
 80038a4:	018a      	lsls	r2, r1, #6
 80038a6:	4651      	mov	r1, sl
 80038a8:	ebb2 0801 	subs.w	r8, r2, r1
 80038ac:	4659      	mov	r1, fp
 80038ae:	eb63 0901 	sbc.w	r9, r3, r1
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038c6:	4690      	mov	r8, r2
 80038c8:	4699      	mov	r9, r3
 80038ca:	4623      	mov	r3, r4
 80038cc:	eb18 0303 	adds.w	r3, r8, r3
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	462b      	mov	r3, r5
 80038d4:	eb49 0303 	adc.w	r3, r9, r3
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038e6:	4629      	mov	r1, r5
 80038e8:	024b      	lsls	r3, r1, #9
 80038ea:	4621      	mov	r1, r4
 80038ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038f0:	4621      	mov	r1, r4
 80038f2:	024a      	lsls	r2, r1, #9
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038fa:	2200      	movs	r2, #0
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003900:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003904:	f7fd f9a8 	bl	8000c58 <__aeabi_uldivmod>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4613      	mov	r3, r2
 800390e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003910:	e058      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003912:	4b38      	ldr	r3, [pc, #224]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	099b      	lsrs	r3, r3, #6
 8003918:	2200      	movs	r2, #0
 800391a:	4618      	mov	r0, r3
 800391c:	4611      	mov	r1, r2
 800391e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003922:	623b      	str	r3, [r7, #32]
 8003924:	2300      	movs	r3, #0
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
 8003928:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800392c:	4642      	mov	r2, r8
 800392e:	464b      	mov	r3, r9
 8003930:	f04f 0000 	mov.w	r0, #0
 8003934:	f04f 0100 	mov.w	r1, #0
 8003938:	0159      	lsls	r1, r3, #5
 800393a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800393e:	0150      	lsls	r0, r2, #5
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4641      	mov	r1, r8
 8003946:	ebb2 0a01 	subs.w	sl, r2, r1
 800394a:	4649      	mov	r1, r9
 800394c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800395c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003960:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003964:	ebb2 040a 	subs.w	r4, r2, sl
 8003968:	eb63 050b 	sbc.w	r5, r3, fp
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	00eb      	lsls	r3, r5, #3
 8003976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800397a:	00e2      	lsls	r2, r4, #3
 800397c:	4614      	mov	r4, r2
 800397e:	461d      	mov	r5, r3
 8003980:	4643      	mov	r3, r8
 8003982:	18e3      	adds	r3, r4, r3
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	464b      	mov	r3, r9
 8003988:	eb45 0303 	adc.w	r3, r5, r3
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800399a:	4629      	mov	r1, r5
 800399c:	028b      	lsls	r3, r1, #10
 800399e:	4621      	mov	r1, r4
 80039a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a4:	4621      	mov	r1, r4
 80039a6:	028a      	lsls	r2, r1, #10
 80039a8:	4610      	mov	r0, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ae:	2200      	movs	r2, #0
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	61fa      	str	r2, [r7, #28]
 80039b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039b8:	f7fd f94e 	bl	8000c58 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4613      	mov	r3, r2
 80039c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	3301      	adds	r3, #1
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039de:	e002      	b.n	80039e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80039e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3750      	adds	r7, #80	; 0x50
 80039ec:	46bd      	mov	sp, r7
 80039ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800
 80039f8:	00f42400 	.word	0x00f42400
 80039fc:	007a1200 	.word	0x007a1200

08003a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000028 	.word	0x20000028

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a1c:	f7ff fff0 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	0a9b      	lsrs	r3, r3, #10
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4903      	ldr	r1, [pc, #12]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	0800870c 	.word	0x0800870c

08003a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a44:	f7ff ffdc 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	0b5b      	lsrs	r3, r3, #13
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4903      	ldr	r1, [pc, #12]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a56:	5ccb      	ldrb	r3, [r1, r3]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40023800 	.word	0x40023800
 8003a64:	0800870c 	.word	0x0800870c

08003a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e041      	b.n	8003afe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fe f8f0 	bl	8001c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f000 fb80 	bl	80041ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d001      	beq.n	8003b20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e03c      	b.n	8003b9a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <HAL_TIM_Base_Start+0xa0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d018      	beq.n	8003b64 <HAL_TIM_Base_Start+0x5c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3a:	d013      	beq.n	8003b64 <HAL_TIM_Base_Start+0x5c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1a      	ldr	r2, [pc, #104]	; (8003bac <HAL_TIM_Base_Start+0xa4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00e      	beq.n	8003b64 <HAL_TIM_Base_Start+0x5c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a19      	ldr	r2, [pc, #100]	; (8003bb0 <HAL_TIM_Base_Start+0xa8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d009      	beq.n	8003b64 <HAL_TIM_Base_Start+0x5c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <HAL_TIM_Base_Start+0xac>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <HAL_TIM_Base_Start+0x5c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <HAL_TIM_Base_Start+0xb0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d111      	bne.n	8003b88 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b06      	cmp	r3, #6
 8003b74:	d010      	beq.n	8003b98 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b86:	e007      	b.n	8003b98 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	40000800 	.word	0x40000800
 8003bb4:	40000c00 	.word	0x40000c00
 8003bb8:	40014000 	.word	0x40014000

08003bbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e041      	b.n	8003c52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f839 	bl	8003c5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	f000 fad6 	bl	80041ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d109      	bne.n	8003c94 <HAL_TIM_PWM_Start+0x24>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	e022      	b.n	8003cda <HAL_TIM_PWM_Start+0x6a>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d109      	bne.n	8003cae <HAL_TIM_PWM_Start+0x3e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	bf14      	ite	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	2300      	moveq	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	e015      	b.n	8003cda <HAL_TIM_PWM_Start+0x6a>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d109      	bne.n	8003cc8 <HAL_TIM_PWM_Start+0x58>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	e008      	b.n	8003cda <HAL_TIM_PWM_Start+0x6a>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	bf14      	ite	ne
 8003cd4:	2301      	movne	r3, #1
 8003cd6:	2300      	moveq	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e068      	b.n	8003db4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d104      	bne.n	8003cf2 <HAL_TIM_PWM_Start+0x82>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf0:	e013      	b.n	8003d1a <HAL_TIM_PWM_Start+0xaa>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d104      	bne.n	8003d02 <HAL_TIM_PWM_Start+0x92>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d00:	e00b      	b.n	8003d1a <HAL_TIM_PWM_Start+0xaa>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d104      	bne.n	8003d12 <HAL_TIM_PWM_Start+0xa2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d10:	e003      	b.n	8003d1a <HAL_TIM_PWM_Start+0xaa>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2202      	movs	r2, #2
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	6839      	ldr	r1, [r7, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fce8 	bl	80046f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a23      	ldr	r2, [pc, #140]	; (8003dbc <HAL_TIM_PWM_Start+0x14c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d107      	bne.n	8003d42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1d      	ldr	r2, [pc, #116]	; (8003dbc <HAL_TIM_PWM_Start+0x14c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d018      	beq.n	8003d7e <HAL_TIM_PWM_Start+0x10e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d54:	d013      	beq.n	8003d7e <HAL_TIM_PWM_Start+0x10e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a19      	ldr	r2, [pc, #100]	; (8003dc0 <HAL_TIM_PWM_Start+0x150>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <HAL_TIM_PWM_Start+0x10e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a17      	ldr	r2, [pc, #92]	; (8003dc4 <HAL_TIM_PWM_Start+0x154>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d009      	beq.n	8003d7e <HAL_TIM_PWM_Start+0x10e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a16      	ldr	r2, [pc, #88]	; (8003dc8 <HAL_TIM_PWM_Start+0x158>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_TIM_PWM_Start+0x10e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <HAL_TIM_PWM_Start+0x15c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d111      	bne.n	8003da2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b06      	cmp	r3, #6
 8003d8e:	d010      	beq.n	8003db2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da0:	e007      	b.n	8003db2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0201 	orr.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40010000 	.word	0x40010000
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	40000800 	.word	0x40000800
 8003dc8:	40000c00 	.word	0x40000c00
 8003dcc:	40014000 	.word	0x40014000

08003dd0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	6839      	ldr	r1, [r7, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fc88 	bl	80046f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a29      	ldr	r2, [pc, #164]	; (8003e94 <HAL_TIM_PWM_Stop+0xc4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d117      	bne.n	8003e22 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6a1a      	ldr	r2, [r3, #32]
 8003df8:	f241 1311 	movw	r3, #4369	; 0x1111
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10f      	bne.n	8003e22 <HAL_TIM_PWM_Stop+0x52>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a1a      	ldr	r2, [r3, #32]
 8003e08:	f240 4344 	movw	r3, #1092	; 0x444
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d107      	bne.n	8003e22 <HAL_TIM_PWM_Stop+0x52>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6a1a      	ldr	r2, [r3, #32]
 8003e28:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10f      	bne.n	8003e52 <HAL_TIM_PWM_Stop+0x82>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6a1a      	ldr	r2, [r3, #32]
 8003e38:	f240 4344 	movw	r3, #1092	; 0x444
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d107      	bne.n	8003e52 <HAL_TIM_PWM_Stop+0x82>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_PWM_Stop+0x92>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e60:	e013      	b.n	8003e8a <HAL_TIM_PWM_Stop+0xba>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d104      	bne.n	8003e72 <HAL_TIM_PWM_Stop+0xa2>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e70:	e00b      	b.n	8003e8a <HAL_TIM_PWM_Stop+0xba>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d104      	bne.n	8003e82 <HAL_TIM_PWM_Stop+0xb2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e80:	e003      	b.n	8003e8a <HAL_TIM_PWM_Stop+0xba>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40010000 	.word	0x40010000

08003e98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e0ae      	b.n	8004014 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b0c      	cmp	r3, #12
 8003ec2:	f200 809f 	bhi.w	8004004 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ec6:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ecc:	08003f01 	.word	0x08003f01
 8003ed0:	08004005 	.word	0x08004005
 8003ed4:	08004005 	.word	0x08004005
 8003ed8:	08004005 	.word	0x08004005
 8003edc:	08003f41 	.word	0x08003f41
 8003ee0:	08004005 	.word	0x08004005
 8003ee4:	08004005 	.word	0x08004005
 8003ee8:	08004005 	.word	0x08004005
 8003eec:	08003f83 	.word	0x08003f83
 8003ef0:	08004005 	.word	0x08004005
 8003ef4:	08004005 	.word	0x08004005
 8003ef8:	08004005 	.word	0x08004005
 8003efc:	08003fc3 	.word	0x08003fc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68b9      	ldr	r1, [r7, #8]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 f9d0 	bl	80042ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0208 	orr.w	r2, r2, #8
 8003f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0204 	bic.w	r2, r2, #4
 8003f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6999      	ldr	r1, [r3, #24]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	619a      	str	r2, [r3, #24]
      break;
 8003f3e:	e064      	b.n	800400a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fa16 	bl	8004378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6999      	ldr	r1, [r3, #24]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	021a      	lsls	r2, r3, #8
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	619a      	str	r2, [r3, #24]
      break;
 8003f80:	e043      	b.n	800400a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fa61 	bl	8004450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69da      	ldr	r2, [r3, #28]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0208 	orr.w	r2, r2, #8
 8003f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0204 	bic.w	r2, r2, #4
 8003fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69d9      	ldr	r1, [r3, #28]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	61da      	str	r2, [r3, #28]
      break;
 8003fc0:	e023      	b.n	800400a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 faab 	bl	8004524 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69da      	ldr	r2, [r3, #28]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69d9      	ldr	r1, [r3, #28]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	021a      	lsls	r2, r3, #8
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	61da      	str	r2, [r3, #28]
      break;
 8004002:	e002      	b.n	800400a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	75fb      	strb	r3, [r7, #23]
      break;
 8004008:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004012:	7dfb      	ldrb	r3, [r7, #23]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_TIM_ConfigClockSource+0x1c>
 8004034:	2302      	movs	r3, #2
 8004036:	e0b4      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x186>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800405e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004070:	d03e      	beq.n	80040f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004076:	f200 8087 	bhi.w	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 800407a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407e:	f000 8086 	beq.w	800418e <HAL_TIM_ConfigClockSource+0x172>
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	d87f      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 8004088:	2b70      	cmp	r3, #112	; 0x70
 800408a:	d01a      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0xa6>
 800408c:	2b70      	cmp	r3, #112	; 0x70
 800408e:	d87b      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 8004090:	2b60      	cmp	r3, #96	; 0x60
 8004092:	d050      	beq.n	8004136 <HAL_TIM_ConfigClockSource+0x11a>
 8004094:	2b60      	cmp	r3, #96	; 0x60
 8004096:	d877      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 8004098:	2b50      	cmp	r3, #80	; 0x50
 800409a:	d03c      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0xfa>
 800409c:	2b50      	cmp	r3, #80	; 0x50
 800409e:	d873      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	d058      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x13a>
 80040a4:	2b40      	cmp	r3, #64	; 0x40
 80040a6:	d86f      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040a8:	2b30      	cmp	r3, #48	; 0x30
 80040aa:	d064      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040ac:	2b30      	cmp	r3, #48	; 0x30
 80040ae:	d86b      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d060      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d867      	bhi.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d05c      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040bc:	2b10      	cmp	r3, #16
 80040be:	d05a      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x15a>
 80040c0:	e062      	b.n	8004188 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6899      	ldr	r1, [r3, #8]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f000 faf1 	bl	80046b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	609a      	str	r2, [r3, #8]
      break;
 80040ee:	e04f      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	6899      	ldr	r1, [r3, #8]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f000 fada 	bl	80046b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004112:	609a      	str	r2, [r3, #8]
      break;
 8004114:	e03c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6859      	ldr	r1, [r3, #4]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	461a      	mov	r2, r3
 8004124:	f000 fa4e 	bl	80045c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2150      	movs	r1, #80	; 0x50
 800412e:	4618      	mov	r0, r3
 8004130:	f000 faa7 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 8004134:	e02c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6859      	ldr	r1, [r3, #4]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	461a      	mov	r2, r3
 8004144:	f000 fa6d 	bl	8004622 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2160      	movs	r1, #96	; 0x60
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fa97 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 8004154:	e01c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6859      	ldr	r1, [r3, #4]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	461a      	mov	r2, r3
 8004164:	f000 fa2e 	bl	80045c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2140      	movs	r1, #64	; 0x40
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fa87 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 8004174:	e00c      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4619      	mov	r1, r3
 8004180:	4610      	mov	r0, r2
 8004182:	f000 fa7e 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 8004186:	e003      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	73fb      	strb	r3, [r7, #15]
      break;
 800418c:	e000      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800418e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a34      	ldr	r2, [pc, #208]	; (8004290 <TIM_Base_SetConfig+0xe4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00f      	beq.n	80041e4 <TIM_Base_SetConfig+0x38>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ca:	d00b      	beq.n	80041e4 <TIM_Base_SetConfig+0x38>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a31      	ldr	r2, [pc, #196]	; (8004294 <TIM_Base_SetConfig+0xe8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d007      	beq.n	80041e4 <TIM_Base_SetConfig+0x38>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a30      	ldr	r2, [pc, #192]	; (8004298 <TIM_Base_SetConfig+0xec>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d003      	beq.n	80041e4 <TIM_Base_SetConfig+0x38>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a2f      	ldr	r2, [pc, #188]	; (800429c <TIM_Base_SetConfig+0xf0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d108      	bne.n	80041f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a25      	ldr	r2, [pc, #148]	; (8004290 <TIM_Base_SetConfig+0xe4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01b      	beq.n	8004236 <TIM_Base_SetConfig+0x8a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004204:	d017      	beq.n	8004236 <TIM_Base_SetConfig+0x8a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a22      	ldr	r2, [pc, #136]	; (8004294 <TIM_Base_SetConfig+0xe8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <TIM_Base_SetConfig+0x8a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a21      	ldr	r2, [pc, #132]	; (8004298 <TIM_Base_SetConfig+0xec>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00f      	beq.n	8004236 <TIM_Base_SetConfig+0x8a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a20      	ldr	r2, [pc, #128]	; (800429c <TIM_Base_SetConfig+0xf0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00b      	beq.n	8004236 <TIM_Base_SetConfig+0x8a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a1f      	ldr	r2, [pc, #124]	; (80042a0 <TIM_Base_SetConfig+0xf4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d007      	beq.n	8004236 <TIM_Base_SetConfig+0x8a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <TIM_Base_SetConfig+0xf8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d003      	beq.n	8004236 <TIM_Base_SetConfig+0x8a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <TIM_Base_SetConfig+0xfc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d108      	bne.n	8004248 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a08      	ldr	r2, [pc, #32]	; (8004290 <TIM_Base_SetConfig+0xe4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d103      	bne.n	800427c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	615a      	str	r2, [r3, #20]
}
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40010000 	.word	0x40010000
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800
 800429c:	40000c00 	.word	0x40000c00
 80042a0:	40014000 	.word	0x40014000
 80042a4:	40014400 	.word	0x40014400
 80042a8:	40014800 	.word	0x40014800

080042ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f023 0201 	bic.w	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0303 	bic.w	r3, r3, #3
 80042e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f023 0302 	bic.w	r3, r3, #2
 80042f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a1c      	ldr	r2, [pc, #112]	; (8004374 <TIM_OC1_SetConfig+0xc8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d10c      	bne.n	8004322 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f023 0308 	bic.w	r3, r3, #8
 800430e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f023 0304 	bic.w	r3, r3, #4
 8004320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a13      	ldr	r2, [pc, #76]	; (8004374 <TIM_OC1_SetConfig+0xc8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d111      	bne.n	800434e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	621a      	str	r2, [r3, #32]
}
 8004368:	bf00      	nop
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40010000 	.word	0x40010000

08004378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f023 0210 	bic.w	r2, r3, #16
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f023 0320 	bic.w	r3, r3, #32
 80043c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a1e      	ldr	r2, [pc, #120]	; (800444c <TIM_OC2_SetConfig+0xd4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d10d      	bne.n	80043f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a15      	ldr	r2, [pc, #84]	; (800444c <TIM_OC2_SetConfig+0xd4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d113      	bne.n	8004424 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800440a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	621a      	str	r2, [r3, #32]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40010000 	.word	0x40010000

08004450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0303 	bic.w	r3, r3, #3
 8004486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a1d      	ldr	r2, [pc, #116]	; (8004520 <TIM_OC3_SetConfig+0xd0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d10d      	bne.n	80044ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a14      	ldr	r2, [pc, #80]	; (8004520 <TIM_OC3_SetConfig+0xd0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d113      	bne.n	80044fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	621a      	str	r2, [r3, #32]
}
 8004514:	bf00      	nop
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40010000 	.word	0x40010000

08004524 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	031b      	lsls	r3, r3, #12
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a10      	ldr	r2, [pc, #64]	; (80045c0 <TIM_OC4_SetConfig+0x9c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d109      	bne.n	8004598 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800458a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	019b      	lsls	r3, r3, #6
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40010000 	.word	0x40010000

080045c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f023 0201 	bic.w	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f023 030a 	bic.w	r3, r3, #10
 8004600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004622:	b480      	push	{r7}
 8004624:	b087      	sub	sp, #28
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f023 0210 	bic.w	r2, r3, #16
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800464c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	031b      	lsls	r3, r3, #12
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800465e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	621a      	str	r2, [r3, #32]
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	f043 0307 	orr.w	r3, r3, #7
 80046a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	609a      	str	r2, [r3, #8]
}
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	021a      	lsls	r2, r3, #8
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	431a      	orrs	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4313      	orrs	r3, r2
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	609a      	str	r2, [r3, #8]
}
 80046ec:	bf00      	nop
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 031f 	and.w	r3, r3, #31
 800470a:	2201      	movs	r2, #1
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a1a      	ldr	r2, [r3, #32]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	43db      	mvns	r3, r3
 800471a:	401a      	ands	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a1a      	ldr	r2, [r3, #32]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	fa01 f303 	lsl.w	r3, r1, r3
 8004730:	431a      	orrs	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	bf00      	nop
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004758:	2302      	movs	r3, #2
 800475a:	e050      	b.n	80047fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1c      	ldr	r2, [pc, #112]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d018      	beq.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a8:	d013      	beq.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a18      	ldr	r2, [pc, #96]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00e      	beq.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a16      	ldr	r2, [pc, #88]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d009      	beq.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a15      	ldr	r2, [pc, #84]	; (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d004      	beq.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a13      	ldr	r2, [pc, #76]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d10c      	bne.n	80047ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40010000 	.word	0x40010000
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800
 8004818:	40000c00 	.word	0x40000c00
 800481c:	40014000 	.word	0x40014000

08004820 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004838:	2302      	movs	r3, #2
 800483a:	e03d      	b.n	80048b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	4313      	orrs	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e03f      	b.n	8004956 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fd fa34 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2224      	movs	r2, #36	; 0x24
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fd7b 	bl	8005404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800491c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800492c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800493c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b08a      	sub	sp, #40	; 0x28
 8004962:	af02      	add	r7, sp, #8
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	4613      	mov	r3, r2
 800496c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b20      	cmp	r3, #32
 800497c:	d17c      	bne.n	8004a78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_UART_Transmit+0x2c>
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e075      	b.n	8004a7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_UART_Transmit+0x3e>
 8004998:	2302      	movs	r3, #2
 800499a:	e06e      	b.n	8004a7a <HAL_UART_Transmit+0x11c>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2221      	movs	r2, #33	; 0x21
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049b2:	f7fd fbcf 	bl	8002154 <HAL_GetTick>
 80049b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	88fa      	ldrh	r2, [r7, #6]
 80049bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	88fa      	ldrh	r2, [r7, #6]
 80049c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049cc:	d108      	bne.n	80049e0 <HAL_UART_Transmit+0x82>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d104      	bne.n	80049e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	e003      	b.n	80049e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049f0:	e02a      	b.n	8004a48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2200      	movs	r2, #0
 80049fa:	2180      	movs	r1, #128	; 0x80
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 faf9 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e036      	b.n	8004a7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	3302      	adds	r3, #2
 8004a26:	61bb      	str	r3, [r7, #24]
 8004a28:	e007      	b.n	8004a3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	3301      	adds	r3, #1
 8004a38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1cf      	bne.n	80049f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2140      	movs	r1, #64	; 0x40
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 fac9 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e006      	b.n	8004a7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	e000      	b.n	8004a7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a78:	2302      	movs	r3, #2
  }
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b0ba      	sub	sp, #232	; 0xe8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10f      	bne.n	8004aea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_UART_IRQHandler+0x66>
 8004ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fbd3 	bl	800528e <UART_Receive_IT>
      return;
 8004ae8:	e256      	b.n	8004f98 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 80de 	beq.w	8004cb0 <HAL_UART_IRQHandler+0x22c>
 8004af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d106      	bne.n	8004b0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80d1 	beq.w	8004cb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <HAL_UART_IRQHandler+0xae>
 8004b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <HAL_UART_IRQHandler+0xd2>
 8004b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f043 0202 	orr.w	r2, r3, #2
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <HAL_UART_IRQHandler+0xf6>
 8004b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f043 0204 	orr.w	r2, r3, #4
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d011      	beq.n	8004baa <HAL_UART_IRQHandler+0x126>
 8004b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d105      	bne.n	8004b9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f043 0208 	orr.w	r2, r3, #8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 81ed 	beq.w	8004f8e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x14e>
 8004bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc4:	f003 0320 	and.w	r3, r3, #32
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 fb5e 	bl	800528e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	bf0c      	ite	eq
 8004be0:	2301      	moveq	r3, #1
 8004be2:	2300      	movne	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d103      	bne.n	8004bfe <HAL_UART_IRQHandler+0x17a>
 8004bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d04f      	beq.n	8004c9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa66 	bl	80050d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0e:	2b40      	cmp	r3, #64	; 0x40
 8004c10:	d141      	bne.n	8004c96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3314      	adds	r3, #20
 8004c18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3314      	adds	r3, #20
 8004c3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1d9      	bne.n	8004c12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d013      	beq.n	8004c8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	4a7d      	ldr	r2, [pc, #500]	; (8004e60 <HAL_UART_IRQHandler+0x3dc>)
 8004c6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe f87b 	bl	8002d6e <HAL_DMA_Abort_IT>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d016      	beq.n	8004cac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c8c:	e00e      	b.n	8004cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f99a 	bl	8004fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c94:	e00a      	b.n	8004cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f996 	bl	8004fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c9c:	e006      	b.n	8004cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f992 	bl	8004fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004caa:	e170      	b.n	8004f8e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cac:	bf00      	nop
    return;
 8004cae:	e16e      	b.n	8004f8e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	f040 814a 	bne.w	8004f4e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 8143 	beq.w	8004f4e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 813c 	beq.w	8004f4e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf6:	2b40      	cmp	r3, #64	; 0x40
 8004cf8:	f040 80b4 	bne.w	8004e64 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 8140 	beq.w	8004f92 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	f080 8139 	bcs.w	8004f92 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d32:	f000 8088 	beq.w	8004e46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	330c      	adds	r3, #12
 8004d5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1d9      	bne.n	8004d36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3314      	adds	r3, #20
 8004d88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d94:	f023 0301 	bic.w	r3, r3, #1
 8004d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3314      	adds	r3, #20
 8004da2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004da6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004daa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004dae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004db2:	e841 2300 	strex	r3, r2, [r1]
 8004db6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1e1      	bne.n	8004d82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3314      	adds	r3, #20
 8004dc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3314      	adds	r3, #20
 8004dde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004de2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004de4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004de8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e3      	bne.n	8004dbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e16:	f023 0310 	bic.w	r3, r3, #16
 8004e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	330c      	adds	r3, #12
 8004e24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e28:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e30:	e841 2300 	strex	r3, r2, [r1]
 8004e34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e3      	bne.n	8004e04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fd ff24 	bl	8002c8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f8c0 	bl	8004fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e5c:	e099      	b.n	8004f92 <HAL_UART_IRQHandler+0x50e>
 8004e5e:	bf00      	nop
 8004e60:	08005197 	.word	0x08005197
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 808b 	beq.w	8004f96 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 8086 	beq.w	8004f96 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	330c      	adds	r3, #12
 8004e90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ea0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004eae:	647a      	str	r2, [r7, #68]	; 0x44
 8004eb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004eb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e3      	bne.n	8004e8a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3314      	adds	r3, #20
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3314      	adds	r3, #20
 8004ee2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ee6:	633a      	str	r2, [r7, #48]	; 0x30
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e3      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	330c      	adds	r3, #12
 8004f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0310 	bic.w	r3, r3, #16
 8004f1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	330c      	adds	r3, #12
 8004f28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f2c:	61fa      	str	r2, [r7, #28]
 8004f2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	69b9      	ldr	r1, [r7, #24]
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	617b      	str	r3, [r7, #20]
   return(result);
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e3      	bne.n	8004f08 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f44:	4619      	mov	r1, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f848 	bl	8004fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f4c:	e023      	b.n	8004f96 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <HAL_UART_IRQHandler+0x4ea>
 8004f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f929 	bl	80051be <UART_Transmit_IT>
    return;
 8004f6c:	e014      	b.n	8004f98 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00e      	beq.n	8004f98 <HAL_UART_IRQHandler+0x514>
 8004f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f969 	bl	800525e <UART_EndTransmit_IT>
    return;
 8004f8c:	e004      	b.n	8004f98 <HAL_UART_IRQHandler+0x514>
    return;
 8004f8e:	bf00      	nop
 8004f90:	e002      	b.n	8004f98 <HAL_UART_IRQHandler+0x514>
      return;
 8004f92:	bf00      	nop
 8004f94:	e000      	b.n	8004f98 <HAL_UART_IRQHandler+0x514>
      return;
 8004f96:	bf00      	nop
  }
}
 8004f98:	37e8      	adds	r7, #232	; 0xe8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop

08004fa0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b090      	sub	sp, #64	; 0x40
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	4613      	mov	r3, r2
 8005002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005004:	e050      	b.n	80050a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500c:	d04c      	beq.n	80050a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800500e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <UART_WaitOnFlagUntilTimeout+0x30>
 8005014:	f7fd f89e 	bl	8002154 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005020:	429a      	cmp	r2, r3
 8005022:	d241      	bcs.n	80050a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800503a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005044:	637a      	str	r2, [r7, #52]	; 0x34
 8005046:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800504a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800504c:	e841 2300 	strex	r3, r2, [r1]
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1e5      	bne.n	8005024 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3314      	adds	r3, #20
 800505e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	613b      	str	r3, [r7, #16]
   return(result);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3314      	adds	r3, #20
 8005076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005078:	623a      	str	r2, [r7, #32]
 800507a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	69f9      	ldr	r1, [r7, #28]
 800507e:	6a3a      	ldr	r2, [r7, #32]
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	61bb      	str	r3, [r7, #24]
   return(result);
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e5      	bne.n	8005058 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e00f      	b.n	80050c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4013      	ands	r3, r2
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	bf0c      	ite	eq
 80050b8:	2301      	moveq	r3, #1
 80050ba:	2300      	movne	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d09f      	beq.n	8005006 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3740      	adds	r7, #64	; 0x40
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b095      	sub	sp, #84	; 0x54
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330c      	adds	r3, #12
 80050de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	330c      	adds	r3, #12
 80050f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050f8:	643a      	str	r2, [r7, #64]	; 0x40
 80050fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e5      	bne.n	80050d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3314      	adds	r3, #20
 8005112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	61fb      	str	r3, [r7, #28]
   return(result);
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	64bb      	str	r3, [r7, #72]	; 0x48
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3314      	adds	r3, #20
 800512a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800512c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e5      	bne.n	800510c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	2b01      	cmp	r3, #1
 8005146:	d119      	bne.n	800517c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	60bb      	str	r3, [r7, #8]
   return(result);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f023 0310 	bic.w	r3, r3, #16
 800515e:	647b      	str	r3, [r7, #68]	; 0x44
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	330c      	adds	r3, #12
 8005166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005168:	61ba      	str	r2, [r7, #24]
 800516a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	6979      	ldr	r1, [r7, #20]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	613b      	str	r3, [r7, #16]
   return(result);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e5      	bne.n	8005148 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	631a      	str	r2, [r3, #48]	; 0x30
}
 800518a:	bf00      	nop
 800518c:	3754      	adds	r7, #84	; 0x54
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7ff ff09 	bl	8004fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b6:	bf00      	nop
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b21      	cmp	r3, #33	; 0x21
 80051d0:	d13e      	bne.n	8005250 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051da:	d114      	bne.n	8005206 <UART_Transmit_IT+0x48>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d110      	bne.n	8005206 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	1c9a      	adds	r2, r3, #2
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	621a      	str	r2, [r3, #32]
 8005204:	e008      	b.n	8005218 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	1c59      	adds	r1, r3, #1
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6211      	str	r1, [r2, #32]
 8005210:	781a      	ldrb	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29b      	uxth	r3, r3
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4619      	mov	r1, r3
 8005226:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10f      	bne.n	800524c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800523a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800524a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	e000      	b.n	8005252 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005250:	2302      	movs	r3, #2
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b082      	sub	sp, #8
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005274:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff fe8e 	bl	8004fa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b08c      	sub	sp, #48	; 0x30
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b22      	cmp	r3, #34	; 0x22
 80052a0:	f040 80ab 	bne.w	80053fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ac:	d117      	bne.n	80052de <UART_Receive_IT+0x50>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d113      	bne.n	80052de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	1c9a      	adds	r2, r3, #2
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	629a      	str	r2, [r3, #40]	; 0x28
 80052dc:	e026      	b.n	800532c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052e4:	2300      	movs	r3, #0
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f0:	d007      	beq.n	8005302 <UART_Receive_IT+0x74>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10a      	bne.n	8005310 <UART_Receive_IT+0x82>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	b2da      	uxtb	r2, r3
 800530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	e008      	b.n	8005322 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800531c:	b2da      	uxtb	r2, r3
 800531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005320:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b01      	subs	r3, #1
 8005334:	b29b      	uxth	r3, r3
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	4619      	mov	r1, r3
 800533a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800533c:	2b00      	cmp	r3, #0
 800533e:	d15a      	bne.n	80053f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0220 	bic.w	r2, r2, #32
 800534e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800535e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0201 	bic.w	r2, r2, #1
 800536e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	2b01      	cmp	r3, #1
 800537e:	d135      	bne.n	80053ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	330c      	adds	r3, #12
 800538c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	613b      	str	r3, [r7, #16]
   return(result);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f023 0310 	bic.w	r3, r3, #16
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	330c      	adds	r3, #12
 80053a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a6:	623a      	str	r2, [r7, #32]
 80053a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	69f9      	ldr	r1, [r7, #28]
 80053ac:	6a3a      	ldr	r2, [r7, #32]
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e5      	bne.n	8005386 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d10a      	bne.n	80053de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff fdf9 	bl	8004fdc <HAL_UARTEx_RxEventCallback>
 80053ea:	e002      	b.n	80053f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff fde1 	bl	8004fb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e002      	b.n	80053fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	e000      	b.n	80053fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80053fa:	2302      	movs	r3, #2
  }
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3730      	adds	r7, #48	; 0x30
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005408:	b0c0      	sub	sp, #256	; 0x100
 800540a:	af00      	add	r7, sp, #0
 800540c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005420:	68d9      	ldr	r1, [r3, #12]
 8005422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	ea40 0301 	orr.w	r3, r0, r1
 800542c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800542e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	431a      	orrs	r2, r3
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	431a      	orrs	r2, r3
 8005444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800545c:	f021 010c 	bic.w	r1, r1, #12
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800546a:	430b      	orrs	r3, r1
 800546c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800546e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800547a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547e:	6999      	ldr	r1, [r3, #24]
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	ea40 0301 	orr.w	r3, r0, r1
 800548a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4b8f      	ldr	r3, [pc, #572]	; (80056d0 <UART_SetConfig+0x2cc>)
 8005494:	429a      	cmp	r2, r3
 8005496:	d005      	beq.n	80054a4 <UART_SetConfig+0xa0>
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b8d      	ldr	r3, [pc, #564]	; (80056d4 <UART_SetConfig+0x2d0>)
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d104      	bne.n	80054ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054a4:	f7fe facc 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 80054a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054ac:	e003      	b.n	80054b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054ae:	f7fe fab3 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 80054b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c0:	f040 810c 	bne.w	80056dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054c8:	2200      	movs	r2, #0
 80054ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80054d6:	4622      	mov	r2, r4
 80054d8:	462b      	mov	r3, r5
 80054da:	1891      	adds	r1, r2, r2
 80054dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80054de:	415b      	adcs	r3, r3
 80054e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054e6:	4621      	mov	r1, r4
 80054e8:	eb12 0801 	adds.w	r8, r2, r1
 80054ec:	4629      	mov	r1, r5
 80054ee:	eb43 0901 	adc.w	r9, r3, r1
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005506:	4690      	mov	r8, r2
 8005508:	4699      	mov	r9, r3
 800550a:	4623      	mov	r3, r4
 800550c:	eb18 0303 	adds.w	r3, r8, r3
 8005510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005514:	462b      	mov	r3, r5
 8005516:	eb49 0303 	adc.w	r3, r9, r3
 800551a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800552a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800552e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005532:	460b      	mov	r3, r1
 8005534:	18db      	adds	r3, r3, r3
 8005536:	653b      	str	r3, [r7, #80]	; 0x50
 8005538:	4613      	mov	r3, r2
 800553a:	eb42 0303 	adc.w	r3, r2, r3
 800553e:	657b      	str	r3, [r7, #84]	; 0x54
 8005540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005548:	f7fb fb86 	bl	8000c58 <__aeabi_uldivmod>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4b61      	ldr	r3, [pc, #388]	; (80056d8 <UART_SetConfig+0x2d4>)
 8005552:	fba3 2302 	umull	r2, r3, r3, r2
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	011c      	lsls	r4, r3, #4
 800555a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800555e:	2200      	movs	r2, #0
 8005560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005564:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800556c:	4642      	mov	r2, r8
 800556e:	464b      	mov	r3, r9
 8005570:	1891      	adds	r1, r2, r2
 8005572:	64b9      	str	r1, [r7, #72]	; 0x48
 8005574:	415b      	adcs	r3, r3
 8005576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800557c:	4641      	mov	r1, r8
 800557e:	eb12 0a01 	adds.w	sl, r2, r1
 8005582:	4649      	mov	r1, r9
 8005584:	eb43 0b01 	adc.w	fp, r3, r1
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800559c:	4692      	mov	sl, r2
 800559e:	469b      	mov	fp, r3
 80055a0:	4643      	mov	r3, r8
 80055a2:	eb1a 0303 	adds.w	r3, sl, r3
 80055a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055aa:	464b      	mov	r3, r9
 80055ac:	eb4b 0303 	adc.w	r3, fp, r3
 80055b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80055c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055c8:	460b      	mov	r3, r1
 80055ca:	18db      	adds	r3, r3, r3
 80055cc:	643b      	str	r3, [r7, #64]	; 0x40
 80055ce:	4613      	mov	r3, r2
 80055d0:	eb42 0303 	adc.w	r3, r2, r3
 80055d4:	647b      	str	r3, [r7, #68]	; 0x44
 80055d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80055de:	f7fb fb3b 	bl	8000c58 <__aeabi_uldivmod>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4611      	mov	r1, r2
 80055e8:	4b3b      	ldr	r3, [pc, #236]	; (80056d8 <UART_SetConfig+0x2d4>)
 80055ea:	fba3 2301 	umull	r2, r3, r3, r1
 80055ee:	095b      	lsrs	r3, r3, #5
 80055f0:	2264      	movs	r2, #100	; 0x64
 80055f2:	fb02 f303 	mul.w	r3, r2, r3
 80055f6:	1acb      	subs	r3, r1, r3
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80055fe:	4b36      	ldr	r3, [pc, #216]	; (80056d8 <UART_SetConfig+0x2d4>)
 8005600:	fba3 2302 	umull	r2, r3, r3, r2
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800560c:	441c      	add	r4, r3
 800560e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005612:	2200      	movs	r2, #0
 8005614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005618:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800561c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	1891      	adds	r1, r2, r2
 8005626:	63b9      	str	r1, [r7, #56]	; 0x38
 8005628:	415b      	adcs	r3, r3
 800562a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800562c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005630:	4641      	mov	r1, r8
 8005632:	1851      	adds	r1, r2, r1
 8005634:	6339      	str	r1, [r7, #48]	; 0x30
 8005636:	4649      	mov	r1, r9
 8005638:	414b      	adcs	r3, r1
 800563a:	637b      	str	r3, [r7, #52]	; 0x34
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005648:	4659      	mov	r1, fp
 800564a:	00cb      	lsls	r3, r1, #3
 800564c:	4651      	mov	r1, sl
 800564e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005652:	4651      	mov	r1, sl
 8005654:	00ca      	lsls	r2, r1, #3
 8005656:	4610      	mov	r0, r2
 8005658:	4619      	mov	r1, r3
 800565a:	4603      	mov	r3, r0
 800565c:	4642      	mov	r2, r8
 800565e:	189b      	adds	r3, r3, r2
 8005660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005664:	464b      	mov	r3, r9
 8005666:	460a      	mov	r2, r1
 8005668:	eb42 0303 	adc.w	r3, r2, r3
 800566c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800567c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005684:	460b      	mov	r3, r1
 8005686:	18db      	adds	r3, r3, r3
 8005688:	62bb      	str	r3, [r7, #40]	; 0x28
 800568a:	4613      	mov	r3, r2
 800568c:	eb42 0303 	adc.w	r3, r2, r3
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800569a:	f7fb fadd 	bl	8000c58 <__aeabi_uldivmod>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <UART_SetConfig+0x2d4>)
 80056a4:	fba3 1302 	umull	r1, r3, r3, r2
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	2164      	movs	r1, #100	; 0x64
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	3332      	adds	r3, #50	; 0x32
 80056b6:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <UART_SetConfig+0x2d4>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	f003 0207 	and.w	r2, r3, #7
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4422      	add	r2, r4
 80056ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056cc:	e106      	b.n	80058dc <UART_SetConfig+0x4d8>
 80056ce:	bf00      	nop
 80056d0:	40011000 	.word	0x40011000
 80056d4:	40011400 	.word	0x40011400
 80056d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056e0:	2200      	movs	r2, #0
 80056e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80056ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80056ee:	4642      	mov	r2, r8
 80056f0:	464b      	mov	r3, r9
 80056f2:	1891      	adds	r1, r2, r2
 80056f4:	6239      	str	r1, [r7, #32]
 80056f6:	415b      	adcs	r3, r3
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
 80056fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056fe:	4641      	mov	r1, r8
 8005700:	1854      	adds	r4, r2, r1
 8005702:	4649      	mov	r1, r9
 8005704:	eb43 0501 	adc.w	r5, r3, r1
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	00eb      	lsls	r3, r5, #3
 8005712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005716:	00e2      	lsls	r2, r4, #3
 8005718:	4614      	mov	r4, r2
 800571a:	461d      	mov	r5, r3
 800571c:	4643      	mov	r3, r8
 800571e:	18e3      	adds	r3, r4, r3
 8005720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005724:	464b      	mov	r3, r9
 8005726:	eb45 0303 	adc.w	r3, r5, r3
 800572a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800573a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800574a:	4629      	mov	r1, r5
 800574c:	008b      	lsls	r3, r1, #2
 800574e:	4621      	mov	r1, r4
 8005750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005754:	4621      	mov	r1, r4
 8005756:	008a      	lsls	r2, r1, #2
 8005758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800575c:	f7fb fa7c 	bl	8000c58 <__aeabi_uldivmod>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4b60      	ldr	r3, [pc, #384]	; (80058e8 <UART_SetConfig+0x4e4>)
 8005766:	fba3 2302 	umull	r2, r3, r3, r2
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	011c      	lsls	r4, r3, #4
 800576e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005772:	2200      	movs	r2, #0
 8005774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005778:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800577c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005780:	4642      	mov	r2, r8
 8005782:	464b      	mov	r3, r9
 8005784:	1891      	adds	r1, r2, r2
 8005786:	61b9      	str	r1, [r7, #24]
 8005788:	415b      	adcs	r3, r3
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005790:	4641      	mov	r1, r8
 8005792:	1851      	adds	r1, r2, r1
 8005794:	6139      	str	r1, [r7, #16]
 8005796:	4649      	mov	r1, r9
 8005798:	414b      	adcs	r3, r1
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057a8:	4659      	mov	r1, fp
 80057aa:	00cb      	lsls	r3, r1, #3
 80057ac:	4651      	mov	r1, sl
 80057ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057b2:	4651      	mov	r1, sl
 80057b4:	00ca      	lsls	r2, r1, #3
 80057b6:	4610      	mov	r0, r2
 80057b8:	4619      	mov	r1, r3
 80057ba:	4603      	mov	r3, r0
 80057bc:	4642      	mov	r2, r8
 80057be:	189b      	adds	r3, r3, r2
 80057c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057c4:	464b      	mov	r3, r9
 80057c6:	460a      	mov	r2, r1
 80057c8:	eb42 0303 	adc.w	r3, r2, r3
 80057cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80057da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80057e8:	4649      	mov	r1, r9
 80057ea:	008b      	lsls	r3, r1, #2
 80057ec:	4641      	mov	r1, r8
 80057ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057f2:	4641      	mov	r1, r8
 80057f4:	008a      	lsls	r2, r1, #2
 80057f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80057fa:	f7fb fa2d 	bl	8000c58 <__aeabi_uldivmod>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4611      	mov	r1, r2
 8005804:	4b38      	ldr	r3, [pc, #224]	; (80058e8 <UART_SetConfig+0x4e4>)
 8005806:	fba3 2301 	umull	r2, r3, r3, r1
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	2264      	movs	r2, #100	; 0x64
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	1acb      	subs	r3, r1, r3
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	3332      	adds	r3, #50	; 0x32
 8005818:	4a33      	ldr	r2, [pc, #204]	; (80058e8 <UART_SetConfig+0x4e4>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005824:	441c      	add	r4, r3
 8005826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800582a:	2200      	movs	r2, #0
 800582c:	673b      	str	r3, [r7, #112]	; 0x70
 800582e:	677a      	str	r2, [r7, #116]	; 0x74
 8005830:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	1891      	adds	r1, r2, r2
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	415b      	adcs	r3, r3
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005844:	4641      	mov	r1, r8
 8005846:	1851      	adds	r1, r2, r1
 8005848:	6039      	str	r1, [r7, #0]
 800584a:	4649      	mov	r1, r9
 800584c:	414b      	adcs	r3, r1
 800584e:	607b      	str	r3, [r7, #4]
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800585c:	4659      	mov	r1, fp
 800585e:	00cb      	lsls	r3, r1, #3
 8005860:	4651      	mov	r1, sl
 8005862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005866:	4651      	mov	r1, sl
 8005868:	00ca      	lsls	r2, r1, #3
 800586a:	4610      	mov	r0, r2
 800586c:	4619      	mov	r1, r3
 800586e:	4603      	mov	r3, r0
 8005870:	4642      	mov	r2, r8
 8005872:	189b      	adds	r3, r3, r2
 8005874:	66bb      	str	r3, [r7, #104]	; 0x68
 8005876:	464b      	mov	r3, r9
 8005878:	460a      	mov	r2, r1
 800587a:	eb42 0303 	adc.w	r3, r2, r3
 800587e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	663b      	str	r3, [r7, #96]	; 0x60
 800588a:	667a      	str	r2, [r7, #100]	; 0x64
 800588c:	f04f 0200 	mov.w	r2, #0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005898:	4649      	mov	r1, r9
 800589a:	008b      	lsls	r3, r1, #2
 800589c:	4641      	mov	r1, r8
 800589e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a2:	4641      	mov	r1, r8
 80058a4:	008a      	lsls	r2, r1, #2
 80058a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058aa:	f7fb f9d5 	bl	8000c58 <__aeabi_uldivmod>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <UART_SetConfig+0x4e4>)
 80058b4:	fba3 1302 	umull	r1, r3, r3, r2
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	2164      	movs	r1, #100	; 0x64
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	3332      	adds	r3, #50	; 0x32
 80058c6:	4a08      	ldr	r2, [pc, #32]	; (80058e8 <UART_SetConfig+0x4e4>)
 80058c8:	fba2 2303 	umull	r2, r3, r2, r3
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	f003 020f 	and.w	r2, r3, #15
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4422      	add	r2, r4
 80058da:	609a      	str	r2, [r3, #8]
}
 80058dc:	bf00      	nop
 80058de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80058e2:	46bd      	mov	sp, r7
 80058e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058e8:	51eb851f 	.word	0x51eb851f

080058ec <__cvt>:
 80058ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	ec55 4b10 	vmov	r4, r5, d0
 80058f4:	2d00      	cmp	r5, #0
 80058f6:	460e      	mov	r6, r1
 80058f8:	4619      	mov	r1, r3
 80058fa:	462b      	mov	r3, r5
 80058fc:	bfbb      	ittet	lt
 80058fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005902:	461d      	movlt	r5, r3
 8005904:	2300      	movge	r3, #0
 8005906:	232d      	movlt	r3, #45	; 0x2d
 8005908:	700b      	strb	r3, [r1, #0]
 800590a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800590c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005910:	4691      	mov	r9, r2
 8005912:	f023 0820 	bic.w	r8, r3, #32
 8005916:	bfbc      	itt	lt
 8005918:	4622      	movlt	r2, r4
 800591a:	4614      	movlt	r4, r2
 800591c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005920:	d005      	beq.n	800592e <__cvt+0x42>
 8005922:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005926:	d100      	bne.n	800592a <__cvt+0x3e>
 8005928:	3601      	adds	r6, #1
 800592a:	2102      	movs	r1, #2
 800592c:	e000      	b.n	8005930 <__cvt+0x44>
 800592e:	2103      	movs	r1, #3
 8005930:	ab03      	add	r3, sp, #12
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	ab02      	add	r3, sp, #8
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	ec45 4b10 	vmov	d0, r4, r5
 800593c:	4653      	mov	r3, sl
 800593e:	4632      	mov	r2, r6
 8005940:	f000 fe7e 	bl	8006640 <_dtoa_r>
 8005944:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005948:	4607      	mov	r7, r0
 800594a:	d102      	bne.n	8005952 <__cvt+0x66>
 800594c:	f019 0f01 	tst.w	r9, #1
 8005950:	d022      	beq.n	8005998 <__cvt+0xac>
 8005952:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005956:	eb07 0906 	add.w	r9, r7, r6
 800595a:	d110      	bne.n	800597e <__cvt+0x92>
 800595c:	783b      	ldrb	r3, [r7, #0]
 800595e:	2b30      	cmp	r3, #48	; 0x30
 8005960:	d10a      	bne.n	8005978 <__cvt+0x8c>
 8005962:	2200      	movs	r2, #0
 8005964:	2300      	movs	r3, #0
 8005966:	4620      	mov	r0, r4
 8005968:	4629      	mov	r1, r5
 800596a:	f7fb f8b5 	bl	8000ad8 <__aeabi_dcmpeq>
 800596e:	b918      	cbnz	r0, 8005978 <__cvt+0x8c>
 8005970:	f1c6 0601 	rsb	r6, r6, #1
 8005974:	f8ca 6000 	str.w	r6, [sl]
 8005978:	f8da 3000 	ldr.w	r3, [sl]
 800597c:	4499      	add	r9, r3
 800597e:	2200      	movs	r2, #0
 8005980:	2300      	movs	r3, #0
 8005982:	4620      	mov	r0, r4
 8005984:	4629      	mov	r1, r5
 8005986:	f7fb f8a7 	bl	8000ad8 <__aeabi_dcmpeq>
 800598a:	b108      	cbz	r0, 8005990 <__cvt+0xa4>
 800598c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005990:	2230      	movs	r2, #48	; 0x30
 8005992:	9b03      	ldr	r3, [sp, #12]
 8005994:	454b      	cmp	r3, r9
 8005996:	d307      	bcc.n	80059a8 <__cvt+0xbc>
 8005998:	9b03      	ldr	r3, [sp, #12]
 800599a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800599c:	1bdb      	subs	r3, r3, r7
 800599e:	4638      	mov	r0, r7
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	b004      	add	sp, #16
 80059a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a8:	1c59      	adds	r1, r3, #1
 80059aa:	9103      	str	r1, [sp, #12]
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	e7f0      	b.n	8005992 <__cvt+0xa6>

080059b0 <__exponent>:
 80059b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059b2:	4603      	mov	r3, r0
 80059b4:	2900      	cmp	r1, #0
 80059b6:	bfb8      	it	lt
 80059b8:	4249      	neglt	r1, r1
 80059ba:	f803 2b02 	strb.w	r2, [r3], #2
 80059be:	bfb4      	ite	lt
 80059c0:	222d      	movlt	r2, #45	; 0x2d
 80059c2:	222b      	movge	r2, #43	; 0x2b
 80059c4:	2909      	cmp	r1, #9
 80059c6:	7042      	strb	r2, [r0, #1]
 80059c8:	dd2a      	ble.n	8005a20 <__exponent+0x70>
 80059ca:	f10d 0207 	add.w	r2, sp, #7
 80059ce:	4617      	mov	r7, r2
 80059d0:	260a      	movs	r6, #10
 80059d2:	4694      	mov	ip, r2
 80059d4:	fb91 f5f6 	sdiv	r5, r1, r6
 80059d8:	fb06 1415 	mls	r4, r6, r5, r1
 80059dc:	3430      	adds	r4, #48	; 0x30
 80059de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80059e2:	460c      	mov	r4, r1
 80059e4:	2c63      	cmp	r4, #99	; 0x63
 80059e6:	f102 32ff 	add.w	r2, r2, #4294967295
 80059ea:	4629      	mov	r1, r5
 80059ec:	dcf1      	bgt.n	80059d2 <__exponent+0x22>
 80059ee:	3130      	adds	r1, #48	; 0x30
 80059f0:	f1ac 0402 	sub.w	r4, ip, #2
 80059f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80059f8:	1c41      	adds	r1, r0, #1
 80059fa:	4622      	mov	r2, r4
 80059fc:	42ba      	cmp	r2, r7
 80059fe:	d30a      	bcc.n	8005a16 <__exponent+0x66>
 8005a00:	f10d 0209 	add.w	r2, sp, #9
 8005a04:	eba2 020c 	sub.w	r2, r2, ip
 8005a08:	42bc      	cmp	r4, r7
 8005a0a:	bf88      	it	hi
 8005a0c:	2200      	movhi	r2, #0
 8005a0e:	4413      	add	r3, r2
 8005a10:	1a18      	subs	r0, r3, r0
 8005a12:	b003      	add	sp, #12
 8005a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a16:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005a1a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005a1e:	e7ed      	b.n	80059fc <__exponent+0x4c>
 8005a20:	2330      	movs	r3, #48	; 0x30
 8005a22:	3130      	adds	r1, #48	; 0x30
 8005a24:	7083      	strb	r3, [r0, #2]
 8005a26:	70c1      	strb	r1, [r0, #3]
 8005a28:	1d03      	adds	r3, r0, #4
 8005a2a:	e7f1      	b.n	8005a10 <__exponent+0x60>

08005a2c <_printf_float>:
 8005a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a30:	ed2d 8b02 	vpush	{d8}
 8005a34:	b08d      	sub	sp, #52	; 0x34
 8005a36:	460c      	mov	r4, r1
 8005a38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a3c:	4616      	mov	r6, r2
 8005a3e:	461f      	mov	r7, r3
 8005a40:	4605      	mov	r5, r0
 8005a42:	f000 fcfb 	bl	800643c <_localeconv_r>
 8005a46:	f8d0 a000 	ldr.w	sl, [r0]
 8005a4a:	4650      	mov	r0, sl
 8005a4c:	f7fa fc18 	bl	8000280 <strlen>
 8005a50:	2300      	movs	r3, #0
 8005a52:	930a      	str	r3, [sp, #40]	; 0x28
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	9305      	str	r3, [sp, #20]
 8005a58:	f8d8 3000 	ldr.w	r3, [r8]
 8005a5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a60:	3307      	adds	r3, #7
 8005a62:	f023 0307 	bic.w	r3, r3, #7
 8005a66:	f103 0208 	add.w	r2, r3, #8
 8005a6a:	f8c8 2000 	str.w	r2, [r8]
 8005a6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a76:	9307      	str	r3, [sp, #28]
 8005a78:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a7c:	ee08 0a10 	vmov	s16, r0
 8005a80:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005a84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a88:	4b9e      	ldr	r3, [pc, #632]	; (8005d04 <_printf_float+0x2d8>)
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	f7fb f855 	bl	8000b3c <__aeabi_dcmpun>
 8005a92:	bb88      	cbnz	r0, 8005af8 <_printf_float+0xcc>
 8005a94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a98:	4b9a      	ldr	r3, [pc, #616]	; (8005d04 <_printf_float+0x2d8>)
 8005a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9e:	f7fb f82f 	bl	8000b00 <__aeabi_dcmple>
 8005aa2:	bb48      	cbnz	r0, 8005af8 <_printf_float+0xcc>
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	4640      	mov	r0, r8
 8005aaa:	4649      	mov	r1, r9
 8005aac:	f7fb f81e 	bl	8000aec <__aeabi_dcmplt>
 8005ab0:	b110      	cbz	r0, 8005ab8 <_printf_float+0x8c>
 8005ab2:	232d      	movs	r3, #45	; 0x2d
 8005ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab8:	4a93      	ldr	r2, [pc, #588]	; (8005d08 <_printf_float+0x2dc>)
 8005aba:	4b94      	ldr	r3, [pc, #592]	; (8005d0c <_printf_float+0x2e0>)
 8005abc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ac0:	bf94      	ite	ls
 8005ac2:	4690      	movls	r8, r2
 8005ac4:	4698      	movhi	r8, r3
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	6123      	str	r3, [r4, #16]
 8005aca:	9b05      	ldr	r3, [sp, #20]
 8005acc:	f023 0304 	bic.w	r3, r3, #4
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	f04f 0900 	mov.w	r9, #0
 8005ad6:	9700      	str	r7, [sp, #0]
 8005ad8:	4633      	mov	r3, r6
 8005ada:	aa0b      	add	r2, sp, #44	; 0x2c
 8005adc:	4621      	mov	r1, r4
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 f9da 	bl	8005e98 <_printf_common>
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	f040 8090 	bne.w	8005c0a <_printf_float+0x1de>
 8005aea:	f04f 30ff 	mov.w	r0, #4294967295
 8005aee:	b00d      	add	sp, #52	; 0x34
 8005af0:	ecbd 8b02 	vpop	{d8}
 8005af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af8:	4642      	mov	r2, r8
 8005afa:	464b      	mov	r3, r9
 8005afc:	4640      	mov	r0, r8
 8005afe:	4649      	mov	r1, r9
 8005b00:	f7fb f81c 	bl	8000b3c <__aeabi_dcmpun>
 8005b04:	b140      	cbz	r0, 8005b18 <_printf_float+0xec>
 8005b06:	464b      	mov	r3, r9
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bfbc      	itt	lt
 8005b0c:	232d      	movlt	r3, #45	; 0x2d
 8005b0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b12:	4a7f      	ldr	r2, [pc, #508]	; (8005d10 <_printf_float+0x2e4>)
 8005b14:	4b7f      	ldr	r3, [pc, #508]	; (8005d14 <_printf_float+0x2e8>)
 8005b16:	e7d1      	b.n	8005abc <_printf_float+0x90>
 8005b18:	6863      	ldr	r3, [r4, #4]
 8005b1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b1e:	9206      	str	r2, [sp, #24]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	d13f      	bne.n	8005ba4 <_printf_float+0x178>
 8005b24:	2306      	movs	r3, #6
 8005b26:	6063      	str	r3, [r4, #4]
 8005b28:	9b05      	ldr	r3, [sp, #20]
 8005b2a:	6861      	ldr	r1, [r4, #4]
 8005b2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b30:	2300      	movs	r3, #0
 8005b32:	9303      	str	r3, [sp, #12]
 8005b34:	ab0a      	add	r3, sp, #40	; 0x28
 8005b36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b3a:	ab09      	add	r3, sp, #36	; 0x24
 8005b3c:	ec49 8b10 	vmov	d0, r8, r9
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	6022      	str	r2, [r4, #0]
 8005b44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f7ff fecf 	bl	80058ec <__cvt>
 8005b4e:	9b06      	ldr	r3, [sp, #24]
 8005b50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b52:	2b47      	cmp	r3, #71	; 0x47
 8005b54:	4680      	mov	r8, r0
 8005b56:	d108      	bne.n	8005b6a <_printf_float+0x13e>
 8005b58:	1cc8      	adds	r0, r1, #3
 8005b5a:	db02      	blt.n	8005b62 <_printf_float+0x136>
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	4299      	cmp	r1, r3
 8005b60:	dd41      	ble.n	8005be6 <_printf_float+0x1ba>
 8005b62:	f1ab 0302 	sub.w	r3, fp, #2
 8005b66:	fa5f fb83 	uxtb.w	fp, r3
 8005b6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b6e:	d820      	bhi.n	8005bb2 <_printf_float+0x186>
 8005b70:	3901      	subs	r1, #1
 8005b72:	465a      	mov	r2, fp
 8005b74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b78:	9109      	str	r1, [sp, #36]	; 0x24
 8005b7a:	f7ff ff19 	bl	80059b0 <__exponent>
 8005b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b80:	1813      	adds	r3, r2, r0
 8005b82:	2a01      	cmp	r2, #1
 8005b84:	4681      	mov	r9, r0
 8005b86:	6123      	str	r3, [r4, #16]
 8005b88:	dc02      	bgt.n	8005b90 <_printf_float+0x164>
 8005b8a:	6822      	ldr	r2, [r4, #0]
 8005b8c:	07d2      	lsls	r2, r2, #31
 8005b8e:	d501      	bpl.n	8005b94 <_printf_float+0x168>
 8005b90:	3301      	adds	r3, #1
 8005b92:	6123      	str	r3, [r4, #16]
 8005b94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d09c      	beq.n	8005ad6 <_printf_float+0xaa>
 8005b9c:	232d      	movs	r3, #45	; 0x2d
 8005b9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba2:	e798      	b.n	8005ad6 <_printf_float+0xaa>
 8005ba4:	9a06      	ldr	r2, [sp, #24]
 8005ba6:	2a47      	cmp	r2, #71	; 0x47
 8005ba8:	d1be      	bne.n	8005b28 <_printf_float+0xfc>
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1bc      	bne.n	8005b28 <_printf_float+0xfc>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e7b9      	b.n	8005b26 <_printf_float+0xfa>
 8005bb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005bb6:	d118      	bne.n	8005bea <_printf_float+0x1be>
 8005bb8:	2900      	cmp	r1, #0
 8005bba:	6863      	ldr	r3, [r4, #4]
 8005bbc:	dd0b      	ble.n	8005bd6 <_printf_float+0x1aa>
 8005bbe:	6121      	str	r1, [r4, #16]
 8005bc0:	b913      	cbnz	r3, 8005bc8 <_printf_float+0x19c>
 8005bc2:	6822      	ldr	r2, [r4, #0]
 8005bc4:	07d0      	lsls	r0, r2, #31
 8005bc6:	d502      	bpl.n	8005bce <_printf_float+0x1a2>
 8005bc8:	3301      	adds	r3, #1
 8005bca:	440b      	add	r3, r1
 8005bcc:	6123      	str	r3, [r4, #16]
 8005bce:	65a1      	str	r1, [r4, #88]	; 0x58
 8005bd0:	f04f 0900 	mov.w	r9, #0
 8005bd4:	e7de      	b.n	8005b94 <_printf_float+0x168>
 8005bd6:	b913      	cbnz	r3, 8005bde <_printf_float+0x1b2>
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	07d2      	lsls	r2, r2, #31
 8005bdc:	d501      	bpl.n	8005be2 <_printf_float+0x1b6>
 8005bde:	3302      	adds	r3, #2
 8005be0:	e7f4      	b.n	8005bcc <_printf_float+0x1a0>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e7f2      	b.n	8005bcc <_printf_float+0x1a0>
 8005be6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bec:	4299      	cmp	r1, r3
 8005bee:	db05      	blt.n	8005bfc <_printf_float+0x1d0>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	6121      	str	r1, [r4, #16]
 8005bf4:	07d8      	lsls	r0, r3, #31
 8005bf6:	d5ea      	bpl.n	8005bce <_printf_float+0x1a2>
 8005bf8:	1c4b      	adds	r3, r1, #1
 8005bfa:	e7e7      	b.n	8005bcc <_printf_float+0x1a0>
 8005bfc:	2900      	cmp	r1, #0
 8005bfe:	bfd4      	ite	le
 8005c00:	f1c1 0202 	rsble	r2, r1, #2
 8005c04:	2201      	movgt	r2, #1
 8005c06:	4413      	add	r3, r2
 8005c08:	e7e0      	b.n	8005bcc <_printf_float+0x1a0>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	055a      	lsls	r2, r3, #21
 8005c0e:	d407      	bmi.n	8005c20 <_printf_float+0x1f4>
 8005c10:	6923      	ldr	r3, [r4, #16]
 8005c12:	4642      	mov	r2, r8
 8005c14:	4631      	mov	r1, r6
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b8      	blx	r7
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d12c      	bne.n	8005c78 <_printf_float+0x24c>
 8005c1e:	e764      	b.n	8005aea <_printf_float+0xbe>
 8005c20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c24:	f240 80e0 	bls.w	8005de8 <_printf_float+0x3bc>
 8005c28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f7fa ff52 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d034      	beq.n	8005ca2 <_printf_float+0x276>
 8005c38:	4a37      	ldr	r2, [pc, #220]	; (8005d18 <_printf_float+0x2ec>)
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4628      	mov	r0, r5
 8005c40:	47b8      	blx	r7
 8005c42:	3001      	adds	r0, #1
 8005c44:	f43f af51 	beq.w	8005aea <_printf_float+0xbe>
 8005c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	db02      	blt.n	8005c56 <_printf_float+0x22a>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	07d8      	lsls	r0, r3, #31
 8005c54:	d510      	bpl.n	8005c78 <_printf_float+0x24c>
 8005c56:	ee18 3a10 	vmov	r3, s16
 8005c5a:	4652      	mov	r2, sl
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4628      	mov	r0, r5
 8005c60:	47b8      	blx	r7
 8005c62:	3001      	adds	r0, #1
 8005c64:	f43f af41 	beq.w	8005aea <_printf_float+0xbe>
 8005c68:	f04f 0800 	mov.w	r8, #0
 8005c6c:	f104 091a 	add.w	r9, r4, #26
 8005c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c72:	3b01      	subs	r3, #1
 8005c74:	4543      	cmp	r3, r8
 8005c76:	dc09      	bgt.n	8005c8c <_printf_float+0x260>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	079b      	lsls	r3, r3, #30
 8005c7c:	f100 8107 	bmi.w	8005e8e <_printf_float+0x462>
 8005c80:	68e0      	ldr	r0, [r4, #12]
 8005c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c84:	4298      	cmp	r0, r3
 8005c86:	bfb8      	it	lt
 8005c88:	4618      	movlt	r0, r3
 8005c8a:	e730      	b.n	8005aee <_printf_float+0xc2>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	464a      	mov	r2, r9
 8005c90:	4631      	mov	r1, r6
 8005c92:	4628      	mov	r0, r5
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	f43f af27 	beq.w	8005aea <_printf_float+0xbe>
 8005c9c:	f108 0801 	add.w	r8, r8, #1
 8005ca0:	e7e6      	b.n	8005c70 <_printf_float+0x244>
 8005ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	dc39      	bgt.n	8005d1c <_printf_float+0x2f0>
 8005ca8:	4a1b      	ldr	r2, [pc, #108]	; (8005d18 <_printf_float+0x2ec>)
 8005caa:	2301      	movs	r3, #1
 8005cac:	4631      	mov	r1, r6
 8005cae:	4628      	mov	r0, r5
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	f43f af19 	beq.w	8005aea <_printf_float+0xbe>
 8005cb8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	d102      	bne.n	8005cc6 <_printf_float+0x29a>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	07d9      	lsls	r1, r3, #31
 8005cc4:	d5d8      	bpl.n	8005c78 <_printf_float+0x24c>
 8005cc6:	ee18 3a10 	vmov	r3, s16
 8005cca:	4652      	mov	r2, sl
 8005ccc:	4631      	mov	r1, r6
 8005cce:	4628      	mov	r0, r5
 8005cd0:	47b8      	blx	r7
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	f43f af09 	beq.w	8005aea <_printf_float+0xbe>
 8005cd8:	f04f 0900 	mov.w	r9, #0
 8005cdc:	f104 0a1a 	add.w	sl, r4, #26
 8005ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce2:	425b      	negs	r3, r3
 8005ce4:	454b      	cmp	r3, r9
 8005ce6:	dc01      	bgt.n	8005cec <_printf_float+0x2c0>
 8005ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cea:	e792      	b.n	8005c12 <_printf_float+0x1e6>
 8005cec:	2301      	movs	r3, #1
 8005cee:	4652      	mov	r2, sl
 8005cf0:	4631      	mov	r1, r6
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	47b8      	blx	r7
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	f43f aef7 	beq.w	8005aea <_printf_float+0xbe>
 8005cfc:	f109 0901 	add.w	r9, r9, #1
 8005d00:	e7ee      	b.n	8005ce0 <_printf_float+0x2b4>
 8005d02:	bf00      	nop
 8005d04:	7fefffff 	.word	0x7fefffff
 8005d08:	08008714 	.word	0x08008714
 8005d0c:	08008718 	.word	0x08008718
 8005d10:	0800871c 	.word	0x0800871c
 8005d14:	08008720 	.word	0x08008720
 8005d18:	08008724 	.word	0x08008724
 8005d1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d20:	429a      	cmp	r2, r3
 8005d22:	bfa8      	it	ge
 8005d24:	461a      	movge	r2, r3
 8005d26:	2a00      	cmp	r2, #0
 8005d28:	4691      	mov	r9, r2
 8005d2a:	dc37      	bgt.n	8005d9c <_printf_float+0x370>
 8005d2c:	f04f 0b00 	mov.w	fp, #0
 8005d30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d34:	f104 021a 	add.w	r2, r4, #26
 8005d38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d3a:	9305      	str	r3, [sp, #20]
 8005d3c:	eba3 0309 	sub.w	r3, r3, r9
 8005d40:	455b      	cmp	r3, fp
 8005d42:	dc33      	bgt.n	8005dac <_printf_float+0x380>
 8005d44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	db3b      	blt.n	8005dc4 <_printf_float+0x398>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	07da      	lsls	r2, r3, #31
 8005d50:	d438      	bmi.n	8005dc4 <_printf_float+0x398>
 8005d52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005d56:	eba2 0903 	sub.w	r9, r2, r3
 8005d5a:	9b05      	ldr	r3, [sp, #20]
 8005d5c:	1ad2      	subs	r2, r2, r3
 8005d5e:	4591      	cmp	r9, r2
 8005d60:	bfa8      	it	ge
 8005d62:	4691      	movge	r9, r2
 8005d64:	f1b9 0f00 	cmp.w	r9, #0
 8005d68:	dc35      	bgt.n	8005dd6 <_printf_float+0x3aa>
 8005d6a:	f04f 0800 	mov.w	r8, #0
 8005d6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d72:	f104 0a1a 	add.w	sl, r4, #26
 8005d76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	eba3 0309 	sub.w	r3, r3, r9
 8005d80:	4543      	cmp	r3, r8
 8005d82:	f77f af79 	ble.w	8005c78 <_printf_float+0x24c>
 8005d86:	2301      	movs	r3, #1
 8005d88:	4652      	mov	r2, sl
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	47b8      	blx	r7
 8005d90:	3001      	adds	r0, #1
 8005d92:	f43f aeaa 	beq.w	8005aea <_printf_float+0xbe>
 8005d96:	f108 0801 	add.w	r8, r8, #1
 8005d9a:	e7ec      	b.n	8005d76 <_printf_float+0x34a>
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4642      	mov	r2, r8
 8005da2:	4628      	mov	r0, r5
 8005da4:	47b8      	blx	r7
 8005da6:	3001      	adds	r0, #1
 8005da8:	d1c0      	bne.n	8005d2c <_printf_float+0x300>
 8005daa:	e69e      	b.n	8005aea <_printf_float+0xbe>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	9205      	str	r2, [sp, #20]
 8005db4:	47b8      	blx	r7
 8005db6:	3001      	adds	r0, #1
 8005db8:	f43f ae97 	beq.w	8005aea <_printf_float+0xbe>
 8005dbc:	9a05      	ldr	r2, [sp, #20]
 8005dbe:	f10b 0b01 	add.w	fp, fp, #1
 8005dc2:	e7b9      	b.n	8005d38 <_printf_float+0x30c>
 8005dc4:	ee18 3a10 	vmov	r3, s16
 8005dc8:	4652      	mov	r2, sl
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4628      	mov	r0, r5
 8005dce:	47b8      	blx	r7
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d1be      	bne.n	8005d52 <_printf_float+0x326>
 8005dd4:	e689      	b.n	8005aea <_printf_float+0xbe>
 8005dd6:	9a05      	ldr	r2, [sp, #20]
 8005dd8:	464b      	mov	r3, r9
 8005dda:	4442      	add	r2, r8
 8005ddc:	4631      	mov	r1, r6
 8005dde:	4628      	mov	r0, r5
 8005de0:	47b8      	blx	r7
 8005de2:	3001      	adds	r0, #1
 8005de4:	d1c1      	bne.n	8005d6a <_printf_float+0x33e>
 8005de6:	e680      	b.n	8005aea <_printf_float+0xbe>
 8005de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dea:	2a01      	cmp	r2, #1
 8005dec:	dc01      	bgt.n	8005df2 <_printf_float+0x3c6>
 8005dee:	07db      	lsls	r3, r3, #31
 8005df0:	d53a      	bpl.n	8005e68 <_printf_float+0x43c>
 8005df2:	2301      	movs	r3, #1
 8005df4:	4642      	mov	r2, r8
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b8      	blx	r7
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	f43f ae74 	beq.w	8005aea <_printf_float+0xbe>
 8005e02:	ee18 3a10 	vmov	r3, s16
 8005e06:	4652      	mov	r2, sl
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f43f ae6b 	beq.w	8005aea <_printf_float+0xbe>
 8005e14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005e20:	f7fa fe5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e24:	b9d8      	cbnz	r0, 8005e5e <_printf_float+0x432>
 8005e26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005e2a:	f108 0201 	add.w	r2, r8, #1
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b8      	blx	r7
 8005e34:	3001      	adds	r0, #1
 8005e36:	d10e      	bne.n	8005e56 <_printf_float+0x42a>
 8005e38:	e657      	b.n	8005aea <_printf_float+0xbe>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	4652      	mov	r2, sl
 8005e3e:	4631      	mov	r1, r6
 8005e40:	4628      	mov	r0, r5
 8005e42:	47b8      	blx	r7
 8005e44:	3001      	adds	r0, #1
 8005e46:	f43f ae50 	beq.w	8005aea <_printf_float+0xbe>
 8005e4a:	f108 0801 	add.w	r8, r8, #1
 8005e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e50:	3b01      	subs	r3, #1
 8005e52:	4543      	cmp	r3, r8
 8005e54:	dcf1      	bgt.n	8005e3a <_printf_float+0x40e>
 8005e56:	464b      	mov	r3, r9
 8005e58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e5c:	e6da      	b.n	8005c14 <_printf_float+0x1e8>
 8005e5e:	f04f 0800 	mov.w	r8, #0
 8005e62:	f104 0a1a 	add.w	sl, r4, #26
 8005e66:	e7f2      	b.n	8005e4e <_printf_float+0x422>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4642      	mov	r2, r8
 8005e6c:	e7df      	b.n	8005e2e <_printf_float+0x402>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	464a      	mov	r2, r9
 8005e72:	4631      	mov	r1, r6
 8005e74:	4628      	mov	r0, r5
 8005e76:	47b8      	blx	r7
 8005e78:	3001      	adds	r0, #1
 8005e7a:	f43f ae36 	beq.w	8005aea <_printf_float+0xbe>
 8005e7e:	f108 0801 	add.w	r8, r8, #1
 8005e82:	68e3      	ldr	r3, [r4, #12]
 8005e84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e86:	1a5b      	subs	r3, r3, r1
 8005e88:	4543      	cmp	r3, r8
 8005e8a:	dcf0      	bgt.n	8005e6e <_printf_float+0x442>
 8005e8c:	e6f8      	b.n	8005c80 <_printf_float+0x254>
 8005e8e:	f04f 0800 	mov.w	r8, #0
 8005e92:	f104 0919 	add.w	r9, r4, #25
 8005e96:	e7f4      	b.n	8005e82 <_printf_float+0x456>

08005e98 <_printf_common>:
 8005e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9c:	4616      	mov	r6, r2
 8005e9e:	4699      	mov	r9, r3
 8005ea0:	688a      	ldr	r2, [r1, #8]
 8005ea2:	690b      	ldr	r3, [r1, #16]
 8005ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	bfb8      	it	lt
 8005eac:	4613      	movlt	r3, r2
 8005eae:	6033      	str	r3, [r6, #0]
 8005eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eb4:	4607      	mov	r7, r0
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	b10a      	cbz	r2, 8005ebe <_printf_common+0x26>
 8005eba:	3301      	adds	r3, #1
 8005ebc:	6033      	str	r3, [r6, #0]
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	0699      	lsls	r1, r3, #26
 8005ec2:	bf42      	ittt	mi
 8005ec4:	6833      	ldrmi	r3, [r6, #0]
 8005ec6:	3302      	addmi	r3, #2
 8005ec8:	6033      	strmi	r3, [r6, #0]
 8005eca:	6825      	ldr	r5, [r4, #0]
 8005ecc:	f015 0506 	ands.w	r5, r5, #6
 8005ed0:	d106      	bne.n	8005ee0 <_printf_common+0x48>
 8005ed2:	f104 0a19 	add.w	sl, r4, #25
 8005ed6:	68e3      	ldr	r3, [r4, #12]
 8005ed8:	6832      	ldr	r2, [r6, #0]
 8005eda:	1a9b      	subs	r3, r3, r2
 8005edc:	42ab      	cmp	r3, r5
 8005ede:	dc26      	bgt.n	8005f2e <_printf_common+0x96>
 8005ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ee4:	1e13      	subs	r3, r2, #0
 8005ee6:	6822      	ldr	r2, [r4, #0]
 8005ee8:	bf18      	it	ne
 8005eea:	2301      	movne	r3, #1
 8005eec:	0692      	lsls	r2, r2, #26
 8005eee:	d42b      	bmi.n	8005f48 <_printf_common+0xb0>
 8005ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	47c0      	blx	r8
 8005efa:	3001      	adds	r0, #1
 8005efc:	d01e      	beq.n	8005f3c <_printf_common+0xa4>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	6922      	ldr	r2, [r4, #16]
 8005f02:	f003 0306 	and.w	r3, r3, #6
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	bf02      	ittt	eq
 8005f0a:	68e5      	ldreq	r5, [r4, #12]
 8005f0c:	6833      	ldreq	r3, [r6, #0]
 8005f0e:	1aed      	subeq	r5, r5, r3
 8005f10:	68a3      	ldr	r3, [r4, #8]
 8005f12:	bf0c      	ite	eq
 8005f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f18:	2500      	movne	r5, #0
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	bfc4      	itt	gt
 8005f1e:	1a9b      	subgt	r3, r3, r2
 8005f20:	18ed      	addgt	r5, r5, r3
 8005f22:	2600      	movs	r6, #0
 8005f24:	341a      	adds	r4, #26
 8005f26:	42b5      	cmp	r5, r6
 8005f28:	d11a      	bne.n	8005f60 <_printf_common+0xc8>
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	e008      	b.n	8005f40 <_printf_common+0xa8>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4652      	mov	r2, sl
 8005f32:	4649      	mov	r1, r9
 8005f34:	4638      	mov	r0, r7
 8005f36:	47c0      	blx	r8
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d103      	bne.n	8005f44 <_printf_common+0xac>
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f44:	3501      	adds	r5, #1
 8005f46:	e7c6      	b.n	8005ed6 <_printf_common+0x3e>
 8005f48:	18e1      	adds	r1, r4, r3
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	2030      	movs	r0, #48	; 0x30
 8005f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f52:	4422      	add	r2, r4
 8005f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f5c:	3302      	adds	r3, #2
 8005f5e:	e7c7      	b.n	8005ef0 <_printf_common+0x58>
 8005f60:	2301      	movs	r3, #1
 8005f62:	4622      	mov	r2, r4
 8005f64:	4649      	mov	r1, r9
 8005f66:	4638      	mov	r0, r7
 8005f68:	47c0      	blx	r8
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d0e6      	beq.n	8005f3c <_printf_common+0xa4>
 8005f6e:	3601      	adds	r6, #1
 8005f70:	e7d9      	b.n	8005f26 <_printf_common+0x8e>
	...

08005f74 <_printf_i>:
 8005f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f78:	7e0f      	ldrb	r7, [r1, #24]
 8005f7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f7c:	2f78      	cmp	r7, #120	; 0x78
 8005f7e:	4691      	mov	r9, r2
 8005f80:	4680      	mov	r8, r0
 8005f82:	460c      	mov	r4, r1
 8005f84:	469a      	mov	sl, r3
 8005f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f8a:	d807      	bhi.n	8005f9c <_printf_i+0x28>
 8005f8c:	2f62      	cmp	r7, #98	; 0x62
 8005f8e:	d80a      	bhi.n	8005fa6 <_printf_i+0x32>
 8005f90:	2f00      	cmp	r7, #0
 8005f92:	f000 80d4 	beq.w	800613e <_printf_i+0x1ca>
 8005f96:	2f58      	cmp	r7, #88	; 0x58
 8005f98:	f000 80c0 	beq.w	800611c <_printf_i+0x1a8>
 8005f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fa4:	e03a      	b.n	800601c <_printf_i+0xa8>
 8005fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005faa:	2b15      	cmp	r3, #21
 8005fac:	d8f6      	bhi.n	8005f9c <_printf_i+0x28>
 8005fae:	a101      	add	r1, pc, #4	; (adr r1, 8005fb4 <_printf_i+0x40>)
 8005fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fb4:	0800600d 	.word	0x0800600d
 8005fb8:	08006021 	.word	0x08006021
 8005fbc:	08005f9d 	.word	0x08005f9d
 8005fc0:	08005f9d 	.word	0x08005f9d
 8005fc4:	08005f9d 	.word	0x08005f9d
 8005fc8:	08005f9d 	.word	0x08005f9d
 8005fcc:	08006021 	.word	0x08006021
 8005fd0:	08005f9d 	.word	0x08005f9d
 8005fd4:	08005f9d 	.word	0x08005f9d
 8005fd8:	08005f9d 	.word	0x08005f9d
 8005fdc:	08005f9d 	.word	0x08005f9d
 8005fe0:	08006125 	.word	0x08006125
 8005fe4:	0800604d 	.word	0x0800604d
 8005fe8:	080060df 	.word	0x080060df
 8005fec:	08005f9d 	.word	0x08005f9d
 8005ff0:	08005f9d 	.word	0x08005f9d
 8005ff4:	08006147 	.word	0x08006147
 8005ff8:	08005f9d 	.word	0x08005f9d
 8005ffc:	0800604d 	.word	0x0800604d
 8006000:	08005f9d 	.word	0x08005f9d
 8006004:	08005f9d 	.word	0x08005f9d
 8006008:	080060e7 	.word	0x080060e7
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	1d1a      	adds	r2, r3, #4
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	602a      	str	r2, [r5, #0]
 8006014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800601c:	2301      	movs	r3, #1
 800601e:	e09f      	b.n	8006160 <_printf_i+0x1ec>
 8006020:	6820      	ldr	r0, [r4, #0]
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	0607      	lsls	r7, r0, #24
 8006026:	f103 0104 	add.w	r1, r3, #4
 800602a:	6029      	str	r1, [r5, #0]
 800602c:	d501      	bpl.n	8006032 <_printf_i+0xbe>
 800602e:	681e      	ldr	r6, [r3, #0]
 8006030:	e003      	b.n	800603a <_printf_i+0xc6>
 8006032:	0646      	lsls	r6, r0, #25
 8006034:	d5fb      	bpl.n	800602e <_printf_i+0xba>
 8006036:	f9b3 6000 	ldrsh.w	r6, [r3]
 800603a:	2e00      	cmp	r6, #0
 800603c:	da03      	bge.n	8006046 <_printf_i+0xd2>
 800603e:	232d      	movs	r3, #45	; 0x2d
 8006040:	4276      	negs	r6, r6
 8006042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006046:	485a      	ldr	r0, [pc, #360]	; (80061b0 <_printf_i+0x23c>)
 8006048:	230a      	movs	r3, #10
 800604a:	e012      	b.n	8006072 <_printf_i+0xfe>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	6820      	ldr	r0, [r4, #0]
 8006050:	1d19      	adds	r1, r3, #4
 8006052:	6029      	str	r1, [r5, #0]
 8006054:	0605      	lsls	r5, r0, #24
 8006056:	d501      	bpl.n	800605c <_printf_i+0xe8>
 8006058:	681e      	ldr	r6, [r3, #0]
 800605a:	e002      	b.n	8006062 <_printf_i+0xee>
 800605c:	0641      	lsls	r1, r0, #25
 800605e:	d5fb      	bpl.n	8006058 <_printf_i+0xe4>
 8006060:	881e      	ldrh	r6, [r3, #0]
 8006062:	4853      	ldr	r0, [pc, #332]	; (80061b0 <_printf_i+0x23c>)
 8006064:	2f6f      	cmp	r7, #111	; 0x6f
 8006066:	bf0c      	ite	eq
 8006068:	2308      	moveq	r3, #8
 800606a:	230a      	movne	r3, #10
 800606c:	2100      	movs	r1, #0
 800606e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006072:	6865      	ldr	r5, [r4, #4]
 8006074:	60a5      	str	r5, [r4, #8]
 8006076:	2d00      	cmp	r5, #0
 8006078:	bfa2      	ittt	ge
 800607a:	6821      	ldrge	r1, [r4, #0]
 800607c:	f021 0104 	bicge.w	r1, r1, #4
 8006080:	6021      	strge	r1, [r4, #0]
 8006082:	b90e      	cbnz	r6, 8006088 <_printf_i+0x114>
 8006084:	2d00      	cmp	r5, #0
 8006086:	d04b      	beq.n	8006120 <_printf_i+0x1ac>
 8006088:	4615      	mov	r5, r2
 800608a:	fbb6 f1f3 	udiv	r1, r6, r3
 800608e:	fb03 6711 	mls	r7, r3, r1, r6
 8006092:	5dc7      	ldrb	r7, [r0, r7]
 8006094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006098:	4637      	mov	r7, r6
 800609a:	42bb      	cmp	r3, r7
 800609c:	460e      	mov	r6, r1
 800609e:	d9f4      	bls.n	800608a <_printf_i+0x116>
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d10b      	bne.n	80060bc <_printf_i+0x148>
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	07de      	lsls	r6, r3, #31
 80060a8:	d508      	bpl.n	80060bc <_printf_i+0x148>
 80060aa:	6923      	ldr	r3, [r4, #16]
 80060ac:	6861      	ldr	r1, [r4, #4]
 80060ae:	4299      	cmp	r1, r3
 80060b0:	bfde      	ittt	le
 80060b2:	2330      	movle	r3, #48	; 0x30
 80060b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060bc:	1b52      	subs	r2, r2, r5
 80060be:	6122      	str	r2, [r4, #16]
 80060c0:	f8cd a000 	str.w	sl, [sp]
 80060c4:	464b      	mov	r3, r9
 80060c6:	aa03      	add	r2, sp, #12
 80060c8:	4621      	mov	r1, r4
 80060ca:	4640      	mov	r0, r8
 80060cc:	f7ff fee4 	bl	8005e98 <_printf_common>
 80060d0:	3001      	adds	r0, #1
 80060d2:	d14a      	bne.n	800616a <_printf_i+0x1f6>
 80060d4:	f04f 30ff 	mov.w	r0, #4294967295
 80060d8:	b004      	add	sp, #16
 80060da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	f043 0320 	orr.w	r3, r3, #32
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	4833      	ldr	r0, [pc, #204]	; (80061b4 <_printf_i+0x240>)
 80060e8:	2778      	movs	r7, #120	; 0x78
 80060ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	6829      	ldr	r1, [r5, #0]
 80060f2:	061f      	lsls	r7, r3, #24
 80060f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80060f8:	d402      	bmi.n	8006100 <_printf_i+0x18c>
 80060fa:	065f      	lsls	r7, r3, #25
 80060fc:	bf48      	it	mi
 80060fe:	b2b6      	uxthmi	r6, r6
 8006100:	07df      	lsls	r7, r3, #31
 8006102:	bf48      	it	mi
 8006104:	f043 0320 	orrmi.w	r3, r3, #32
 8006108:	6029      	str	r1, [r5, #0]
 800610a:	bf48      	it	mi
 800610c:	6023      	strmi	r3, [r4, #0]
 800610e:	b91e      	cbnz	r6, 8006118 <_printf_i+0x1a4>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	f023 0320 	bic.w	r3, r3, #32
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	2310      	movs	r3, #16
 800611a:	e7a7      	b.n	800606c <_printf_i+0xf8>
 800611c:	4824      	ldr	r0, [pc, #144]	; (80061b0 <_printf_i+0x23c>)
 800611e:	e7e4      	b.n	80060ea <_printf_i+0x176>
 8006120:	4615      	mov	r5, r2
 8006122:	e7bd      	b.n	80060a0 <_printf_i+0x12c>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	6826      	ldr	r6, [r4, #0]
 8006128:	6961      	ldr	r1, [r4, #20]
 800612a:	1d18      	adds	r0, r3, #4
 800612c:	6028      	str	r0, [r5, #0]
 800612e:	0635      	lsls	r5, r6, #24
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	d501      	bpl.n	8006138 <_printf_i+0x1c4>
 8006134:	6019      	str	r1, [r3, #0]
 8006136:	e002      	b.n	800613e <_printf_i+0x1ca>
 8006138:	0670      	lsls	r0, r6, #25
 800613a:	d5fb      	bpl.n	8006134 <_printf_i+0x1c0>
 800613c:	8019      	strh	r1, [r3, #0]
 800613e:	2300      	movs	r3, #0
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	4615      	mov	r5, r2
 8006144:	e7bc      	b.n	80060c0 <_printf_i+0x14c>
 8006146:	682b      	ldr	r3, [r5, #0]
 8006148:	1d1a      	adds	r2, r3, #4
 800614a:	602a      	str	r2, [r5, #0]
 800614c:	681d      	ldr	r5, [r3, #0]
 800614e:	6862      	ldr	r2, [r4, #4]
 8006150:	2100      	movs	r1, #0
 8006152:	4628      	mov	r0, r5
 8006154:	f7fa f844 	bl	80001e0 <memchr>
 8006158:	b108      	cbz	r0, 800615e <_printf_i+0x1ea>
 800615a:	1b40      	subs	r0, r0, r5
 800615c:	6060      	str	r0, [r4, #4]
 800615e:	6863      	ldr	r3, [r4, #4]
 8006160:	6123      	str	r3, [r4, #16]
 8006162:	2300      	movs	r3, #0
 8006164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006168:	e7aa      	b.n	80060c0 <_printf_i+0x14c>
 800616a:	6923      	ldr	r3, [r4, #16]
 800616c:	462a      	mov	r2, r5
 800616e:	4649      	mov	r1, r9
 8006170:	4640      	mov	r0, r8
 8006172:	47d0      	blx	sl
 8006174:	3001      	adds	r0, #1
 8006176:	d0ad      	beq.n	80060d4 <_printf_i+0x160>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	079b      	lsls	r3, r3, #30
 800617c:	d413      	bmi.n	80061a6 <_printf_i+0x232>
 800617e:	68e0      	ldr	r0, [r4, #12]
 8006180:	9b03      	ldr	r3, [sp, #12]
 8006182:	4298      	cmp	r0, r3
 8006184:	bfb8      	it	lt
 8006186:	4618      	movlt	r0, r3
 8006188:	e7a6      	b.n	80060d8 <_printf_i+0x164>
 800618a:	2301      	movs	r3, #1
 800618c:	4632      	mov	r2, r6
 800618e:	4649      	mov	r1, r9
 8006190:	4640      	mov	r0, r8
 8006192:	47d0      	blx	sl
 8006194:	3001      	adds	r0, #1
 8006196:	d09d      	beq.n	80060d4 <_printf_i+0x160>
 8006198:	3501      	adds	r5, #1
 800619a:	68e3      	ldr	r3, [r4, #12]
 800619c:	9903      	ldr	r1, [sp, #12]
 800619e:	1a5b      	subs	r3, r3, r1
 80061a0:	42ab      	cmp	r3, r5
 80061a2:	dcf2      	bgt.n	800618a <_printf_i+0x216>
 80061a4:	e7eb      	b.n	800617e <_printf_i+0x20a>
 80061a6:	2500      	movs	r5, #0
 80061a8:	f104 0619 	add.w	r6, r4, #25
 80061ac:	e7f5      	b.n	800619a <_printf_i+0x226>
 80061ae:	bf00      	nop
 80061b0:	08008726 	.word	0x08008726
 80061b4:	08008737 	.word	0x08008737

080061b8 <std>:
 80061b8:	2300      	movs	r3, #0
 80061ba:	b510      	push	{r4, lr}
 80061bc:	4604      	mov	r4, r0
 80061be:	e9c0 3300 	strd	r3, r3, [r0]
 80061c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061c6:	6083      	str	r3, [r0, #8]
 80061c8:	8181      	strh	r1, [r0, #12]
 80061ca:	6643      	str	r3, [r0, #100]	; 0x64
 80061cc:	81c2      	strh	r2, [r0, #14]
 80061ce:	6183      	str	r3, [r0, #24]
 80061d0:	4619      	mov	r1, r3
 80061d2:	2208      	movs	r2, #8
 80061d4:	305c      	adds	r0, #92	; 0x5c
 80061d6:	f000 f928 	bl	800642a <memset>
 80061da:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <std+0x58>)
 80061dc:	6263      	str	r3, [r4, #36]	; 0x24
 80061de:	4b0d      	ldr	r3, [pc, #52]	; (8006214 <std+0x5c>)
 80061e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80061e2:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <std+0x60>)
 80061e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061e6:	4b0d      	ldr	r3, [pc, #52]	; (800621c <std+0x64>)
 80061e8:	6323      	str	r3, [r4, #48]	; 0x30
 80061ea:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <std+0x68>)
 80061ec:	6224      	str	r4, [r4, #32]
 80061ee:	429c      	cmp	r4, r3
 80061f0:	d006      	beq.n	8006200 <std+0x48>
 80061f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80061f6:	4294      	cmp	r4, r2
 80061f8:	d002      	beq.n	8006200 <std+0x48>
 80061fa:	33d0      	adds	r3, #208	; 0xd0
 80061fc:	429c      	cmp	r4, r3
 80061fe:	d105      	bne.n	800620c <std+0x54>
 8006200:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006208:	f000 b98c 	b.w	8006524 <__retarget_lock_init_recursive>
 800620c:	bd10      	pop	{r4, pc}
 800620e:	bf00      	nop
 8006210:	080063a5 	.word	0x080063a5
 8006214:	080063c7 	.word	0x080063c7
 8006218:	080063ff 	.word	0x080063ff
 800621c:	08006423 	.word	0x08006423
 8006220:	20000750 	.word	0x20000750

08006224 <stdio_exit_handler>:
 8006224:	4a02      	ldr	r2, [pc, #8]	; (8006230 <stdio_exit_handler+0xc>)
 8006226:	4903      	ldr	r1, [pc, #12]	; (8006234 <stdio_exit_handler+0x10>)
 8006228:	4803      	ldr	r0, [pc, #12]	; (8006238 <stdio_exit_handler+0x14>)
 800622a:	f000 b869 	b.w	8006300 <_fwalk_sglue>
 800622e:	bf00      	nop
 8006230:	20000034 	.word	0x20000034
 8006234:	08007ed9 	.word	0x08007ed9
 8006238:	20000040 	.word	0x20000040

0800623c <cleanup_stdio>:
 800623c:	6841      	ldr	r1, [r0, #4]
 800623e:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <cleanup_stdio+0x34>)
 8006240:	4299      	cmp	r1, r3
 8006242:	b510      	push	{r4, lr}
 8006244:	4604      	mov	r4, r0
 8006246:	d001      	beq.n	800624c <cleanup_stdio+0x10>
 8006248:	f001 fe46 	bl	8007ed8 <_fflush_r>
 800624c:	68a1      	ldr	r1, [r4, #8]
 800624e:	4b09      	ldr	r3, [pc, #36]	; (8006274 <cleanup_stdio+0x38>)
 8006250:	4299      	cmp	r1, r3
 8006252:	d002      	beq.n	800625a <cleanup_stdio+0x1e>
 8006254:	4620      	mov	r0, r4
 8006256:	f001 fe3f 	bl	8007ed8 <_fflush_r>
 800625a:	68e1      	ldr	r1, [r4, #12]
 800625c:	4b06      	ldr	r3, [pc, #24]	; (8006278 <cleanup_stdio+0x3c>)
 800625e:	4299      	cmp	r1, r3
 8006260:	d004      	beq.n	800626c <cleanup_stdio+0x30>
 8006262:	4620      	mov	r0, r4
 8006264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006268:	f001 be36 	b.w	8007ed8 <_fflush_r>
 800626c:	bd10      	pop	{r4, pc}
 800626e:	bf00      	nop
 8006270:	20000750 	.word	0x20000750
 8006274:	200007b8 	.word	0x200007b8
 8006278:	20000820 	.word	0x20000820

0800627c <global_stdio_init.part.0>:
 800627c:	b510      	push	{r4, lr}
 800627e:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <global_stdio_init.part.0+0x30>)
 8006280:	4c0b      	ldr	r4, [pc, #44]	; (80062b0 <global_stdio_init.part.0+0x34>)
 8006282:	4a0c      	ldr	r2, [pc, #48]	; (80062b4 <global_stdio_init.part.0+0x38>)
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	4620      	mov	r0, r4
 8006288:	2200      	movs	r2, #0
 800628a:	2104      	movs	r1, #4
 800628c:	f7ff ff94 	bl	80061b8 <std>
 8006290:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006294:	2201      	movs	r2, #1
 8006296:	2109      	movs	r1, #9
 8006298:	f7ff ff8e 	bl	80061b8 <std>
 800629c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80062a0:	2202      	movs	r2, #2
 80062a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062a6:	2112      	movs	r1, #18
 80062a8:	f7ff bf86 	b.w	80061b8 <std>
 80062ac:	20000888 	.word	0x20000888
 80062b0:	20000750 	.word	0x20000750
 80062b4:	08006225 	.word	0x08006225

080062b8 <__sfp_lock_acquire>:
 80062b8:	4801      	ldr	r0, [pc, #4]	; (80062c0 <__sfp_lock_acquire+0x8>)
 80062ba:	f000 b934 	b.w	8006526 <__retarget_lock_acquire_recursive>
 80062be:	bf00      	nop
 80062c0:	20000891 	.word	0x20000891

080062c4 <__sfp_lock_release>:
 80062c4:	4801      	ldr	r0, [pc, #4]	; (80062cc <__sfp_lock_release+0x8>)
 80062c6:	f000 b92f 	b.w	8006528 <__retarget_lock_release_recursive>
 80062ca:	bf00      	nop
 80062cc:	20000891 	.word	0x20000891

080062d0 <__sinit>:
 80062d0:	b510      	push	{r4, lr}
 80062d2:	4604      	mov	r4, r0
 80062d4:	f7ff fff0 	bl	80062b8 <__sfp_lock_acquire>
 80062d8:	6a23      	ldr	r3, [r4, #32]
 80062da:	b11b      	cbz	r3, 80062e4 <__sinit+0x14>
 80062dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e0:	f7ff bff0 	b.w	80062c4 <__sfp_lock_release>
 80062e4:	4b04      	ldr	r3, [pc, #16]	; (80062f8 <__sinit+0x28>)
 80062e6:	6223      	str	r3, [r4, #32]
 80062e8:	4b04      	ldr	r3, [pc, #16]	; (80062fc <__sinit+0x2c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1f5      	bne.n	80062dc <__sinit+0xc>
 80062f0:	f7ff ffc4 	bl	800627c <global_stdio_init.part.0>
 80062f4:	e7f2      	b.n	80062dc <__sinit+0xc>
 80062f6:	bf00      	nop
 80062f8:	0800623d 	.word	0x0800623d
 80062fc:	20000888 	.word	0x20000888

08006300 <_fwalk_sglue>:
 8006300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006304:	4607      	mov	r7, r0
 8006306:	4688      	mov	r8, r1
 8006308:	4614      	mov	r4, r2
 800630a:	2600      	movs	r6, #0
 800630c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006310:	f1b9 0901 	subs.w	r9, r9, #1
 8006314:	d505      	bpl.n	8006322 <_fwalk_sglue+0x22>
 8006316:	6824      	ldr	r4, [r4, #0]
 8006318:	2c00      	cmp	r4, #0
 800631a:	d1f7      	bne.n	800630c <_fwalk_sglue+0xc>
 800631c:	4630      	mov	r0, r6
 800631e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006322:	89ab      	ldrh	r3, [r5, #12]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d907      	bls.n	8006338 <_fwalk_sglue+0x38>
 8006328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800632c:	3301      	adds	r3, #1
 800632e:	d003      	beq.n	8006338 <_fwalk_sglue+0x38>
 8006330:	4629      	mov	r1, r5
 8006332:	4638      	mov	r0, r7
 8006334:	47c0      	blx	r8
 8006336:	4306      	orrs	r6, r0
 8006338:	3568      	adds	r5, #104	; 0x68
 800633a:	e7e9      	b.n	8006310 <_fwalk_sglue+0x10>

0800633c <sniprintf>:
 800633c:	b40c      	push	{r2, r3}
 800633e:	b530      	push	{r4, r5, lr}
 8006340:	4b17      	ldr	r3, [pc, #92]	; (80063a0 <sniprintf+0x64>)
 8006342:	1e0c      	subs	r4, r1, #0
 8006344:	681d      	ldr	r5, [r3, #0]
 8006346:	b09d      	sub	sp, #116	; 0x74
 8006348:	da08      	bge.n	800635c <sniprintf+0x20>
 800634a:	238b      	movs	r3, #139	; 0x8b
 800634c:	602b      	str	r3, [r5, #0]
 800634e:	f04f 30ff 	mov.w	r0, #4294967295
 8006352:	b01d      	add	sp, #116	; 0x74
 8006354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006358:	b002      	add	sp, #8
 800635a:	4770      	bx	lr
 800635c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006360:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006364:	bf14      	ite	ne
 8006366:	f104 33ff 	addne.w	r3, r4, #4294967295
 800636a:	4623      	moveq	r3, r4
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	9307      	str	r3, [sp, #28]
 8006370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006374:	9002      	str	r0, [sp, #8]
 8006376:	9006      	str	r0, [sp, #24]
 8006378:	f8ad 3016 	strh.w	r3, [sp, #22]
 800637c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800637e:	ab21      	add	r3, sp, #132	; 0x84
 8006380:	a902      	add	r1, sp, #8
 8006382:	4628      	mov	r0, r5
 8006384:	9301      	str	r3, [sp, #4]
 8006386:	f001 fc23 	bl	8007bd0 <_svfiprintf_r>
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	bfbc      	itt	lt
 800638e:	238b      	movlt	r3, #139	; 0x8b
 8006390:	602b      	strlt	r3, [r5, #0]
 8006392:	2c00      	cmp	r4, #0
 8006394:	d0dd      	beq.n	8006352 <sniprintf+0x16>
 8006396:	9b02      	ldr	r3, [sp, #8]
 8006398:	2200      	movs	r2, #0
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	e7d9      	b.n	8006352 <sniprintf+0x16>
 800639e:	bf00      	nop
 80063a0:	2000008c 	.word	0x2000008c

080063a4 <__sread>:
 80063a4:	b510      	push	{r4, lr}
 80063a6:	460c      	mov	r4, r1
 80063a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ac:	f000 f86c 	bl	8006488 <_read_r>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	bfab      	itete	ge
 80063b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063b6:	89a3      	ldrhlt	r3, [r4, #12]
 80063b8:	181b      	addge	r3, r3, r0
 80063ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063be:	bfac      	ite	ge
 80063c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80063c2:	81a3      	strhlt	r3, [r4, #12]
 80063c4:	bd10      	pop	{r4, pc}

080063c6 <__swrite>:
 80063c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ca:	461f      	mov	r7, r3
 80063cc:	898b      	ldrh	r3, [r1, #12]
 80063ce:	05db      	lsls	r3, r3, #23
 80063d0:	4605      	mov	r5, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	4616      	mov	r6, r2
 80063d6:	d505      	bpl.n	80063e4 <__swrite+0x1e>
 80063d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063dc:	2302      	movs	r3, #2
 80063de:	2200      	movs	r2, #0
 80063e0:	f000 f840 	bl	8006464 <_lseek_r>
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ee:	81a3      	strh	r3, [r4, #12]
 80063f0:	4632      	mov	r2, r6
 80063f2:	463b      	mov	r3, r7
 80063f4:	4628      	mov	r0, r5
 80063f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063fa:	f000 b857 	b.w	80064ac <_write_r>

080063fe <__sseek>:
 80063fe:	b510      	push	{r4, lr}
 8006400:	460c      	mov	r4, r1
 8006402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006406:	f000 f82d 	bl	8006464 <_lseek_r>
 800640a:	1c43      	adds	r3, r0, #1
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	bf15      	itete	ne
 8006410:	6560      	strne	r0, [r4, #84]	; 0x54
 8006412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800641a:	81a3      	strheq	r3, [r4, #12]
 800641c:	bf18      	it	ne
 800641e:	81a3      	strhne	r3, [r4, #12]
 8006420:	bd10      	pop	{r4, pc}

08006422 <__sclose>:
 8006422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006426:	f000 b80d 	b.w	8006444 <_close_r>

0800642a <memset>:
 800642a:	4402      	add	r2, r0
 800642c:	4603      	mov	r3, r0
 800642e:	4293      	cmp	r3, r2
 8006430:	d100      	bne.n	8006434 <memset+0xa>
 8006432:	4770      	bx	lr
 8006434:	f803 1b01 	strb.w	r1, [r3], #1
 8006438:	e7f9      	b.n	800642e <memset+0x4>
	...

0800643c <_localeconv_r>:
 800643c:	4800      	ldr	r0, [pc, #0]	; (8006440 <_localeconv_r+0x4>)
 800643e:	4770      	bx	lr
 8006440:	20000180 	.word	0x20000180

08006444 <_close_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	4d06      	ldr	r5, [pc, #24]	; (8006460 <_close_r+0x1c>)
 8006448:	2300      	movs	r3, #0
 800644a:	4604      	mov	r4, r0
 800644c:	4608      	mov	r0, r1
 800644e:	602b      	str	r3, [r5, #0]
 8006450:	f7fb fd73 	bl	8001f3a <_close>
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d102      	bne.n	800645e <_close_r+0x1a>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	b103      	cbz	r3, 800645e <_close_r+0x1a>
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	bd38      	pop	{r3, r4, r5, pc}
 8006460:	2000088c 	.word	0x2000088c

08006464 <_lseek_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4d07      	ldr	r5, [pc, #28]	; (8006484 <_lseek_r+0x20>)
 8006468:	4604      	mov	r4, r0
 800646a:	4608      	mov	r0, r1
 800646c:	4611      	mov	r1, r2
 800646e:	2200      	movs	r2, #0
 8006470:	602a      	str	r2, [r5, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	f7fb fd88 	bl	8001f88 <_lseek>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d102      	bne.n	8006482 <_lseek_r+0x1e>
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	b103      	cbz	r3, 8006482 <_lseek_r+0x1e>
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	bd38      	pop	{r3, r4, r5, pc}
 8006484:	2000088c 	.word	0x2000088c

08006488 <_read_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	4d07      	ldr	r5, [pc, #28]	; (80064a8 <_read_r+0x20>)
 800648c:	4604      	mov	r4, r0
 800648e:	4608      	mov	r0, r1
 8006490:	4611      	mov	r1, r2
 8006492:	2200      	movs	r2, #0
 8006494:	602a      	str	r2, [r5, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	f7fb fd16 	bl	8001ec8 <_read>
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	d102      	bne.n	80064a6 <_read_r+0x1e>
 80064a0:	682b      	ldr	r3, [r5, #0]
 80064a2:	b103      	cbz	r3, 80064a6 <_read_r+0x1e>
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	bd38      	pop	{r3, r4, r5, pc}
 80064a8:	2000088c 	.word	0x2000088c

080064ac <_write_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4d07      	ldr	r5, [pc, #28]	; (80064cc <_write_r+0x20>)
 80064b0:	4604      	mov	r4, r0
 80064b2:	4608      	mov	r0, r1
 80064b4:	4611      	mov	r1, r2
 80064b6:	2200      	movs	r2, #0
 80064b8:	602a      	str	r2, [r5, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	f7fb fd21 	bl	8001f02 <_write>
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	d102      	bne.n	80064ca <_write_r+0x1e>
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	b103      	cbz	r3, 80064ca <_write_r+0x1e>
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	bd38      	pop	{r3, r4, r5, pc}
 80064cc:	2000088c 	.word	0x2000088c

080064d0 <__errno>:
 80064d0:	4b01      	ldr	r3, [pc, #4]	; (80064d8 <__errno+0x8>)
 80064d2:	6818      	ldr	r0, [r3, #0]
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	2000008c 	.word	0x2000008c

080064dc <__libc_init_array>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	4d0d      	ldr	r5, [pc, #52]	; (8006514 <__libc_init_array+0x38>)
 80064e0:	4c0d      	ldr	r4, [pc, #52]	; (8006518 <__libc_init_array+0x3c>)
 80064e2:	1b64      	subs	r4, r4, r5
 80064e4:	10a4      	asrs	r4, r4, #2
 80064e6:	2600      	movs	r6, #0
 80064e8:	42a6      	cmp	r6, r4
 80064ea:	d109      	bne.n	8006500 <__libc_init_array+0x24>
 80064ec:	4d0b      	ldr	r5, [pc, #44]	; (800651c <__libc_init_array+0x40>)
 80064ee:	4c0c      	ldr	r4, [pc, #48]	; (8006520 <__libc_init_array+0x44>)
 80064f0:	f002 f8de 	bl	80086b0 <_init>
 80064f4:	1b64      	subs	r4, r4, r5
 80064f6:	10a4      	asrs	r4, r4, #2
 80064f8:	2600      	movs	r6, #0
 80064fa:	42a6      	cmp	r6, r4
 80064fc:	d105      	bne.n	800650a <__libc_init_array+0x2e>
 80064fe:	bd70      	pop	{r4, r5, r6, pc}
 8006500:	f855 3b04 	ldr.w	r3, [r5], #4
 8006504:	4798      	blx	r3
 8006506:	3601      	adds	r6, #1
 8006508:	e7ee      	b.n	80064e8 <__libc_init_array+0xc>
 800650a:	f855 3b04 	ldr.w	r3, [r5], #4
 800650e:	4798      	blx	r3
 8006510:	3601      	adds	r6, #1
 8006512:	e7f2      	b.n	80064fa <__libc_init_array+0x1e>
 8006514:	08008a8c 	.word	0x08008a8c
 8006518:	08008a8c 	.word	0x08008a8c
 800651c:	08008a8c 	.word	0x08008a8c
 8006520:	08008a90 	.word	0x08008a90

08006524 <__retarget_lock_init_recursive>:
 8006524:	4770      	bx	lr

08006526 <__retarget_lock_acquire_recursive>:
 8006526:	4770      	bx	lr

08006528 <__retarget_lock_release_recursive>:
 8006528:	4770      	bx	lr

0800652a <quorem>:
 800652a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652e:	6903      	ldr	r3, [r0, #16]
 8006530:	690c      	ldr	r4, [r1, #16]
 8006532:	42a3      	cmp	r3, r4
 8006534:	4607      	mov	r7, r0
 8006536:	db7e      	blt.n	8006636 <quorem+0x10c>
 8006538:	3c01      	subs	r4, #1
 800653a:	f101 0814 	add.w	r8, r1, #20
 800653e:	f100 0514 	add.w	r5, r0, #20
 8006542:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800654c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006550:	3301      	adds	r3, #1
 8006552:	429a      	cmp	r2, r3
 8006554:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006558:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800655c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006560:	d331      	bcc.n	80065c6 <quorem+0x9c>
 8006562:	f04f 0e00 	mov.w	lr, #0
 8006566:	4640      	mov	r0, r8
 8006568:	46ac      	mov	ip, r5
 800656a:	46f2      	mov	sl, lr
 800656c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006570:	b293      	uxth	r3, r2
 8006572:	fb06 e303 	mla	r3, r6, r3, lr
 8006576:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800657a:	0c1a      	lsrs	r2, r3, #16
 800657c:	b29b      	uxth	r3, r3
 800657e:	ebaa 0303 	sub.w	r3, sl, r3
 8006582:	f8dc a000 	ldr.w	sl, [ip]
 8006586:	fa13 f38a 	uxtah	r3, r3, sl
 800658a:	fb06 220e 	mla	r2, r6, lr, r2
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	9b00      	ldr	r3, [sp, #0]
 8006592:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006596:	b292      	uxth	r2, r2
 8006598:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800659c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80065a4:	4581      	cmp	r9, r0
 80065a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065aa:	f84c 3b04 	str.w	r3, [ip], #4
 80065ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065b2:	d2db      	bcs.n	800656c <quorem+0x42>
 80065b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80065b8:	b92b      	cbnz	r3, 80065c6 <quorem+0x9c>
 80065ba:	9b01      	ldr	r3, [sp, #4]
 80065bc:	3b04      	subs	r3, #4
 80065be:	429d      	cmp	r5, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	d32c      	bcc.n	800661e <quorem+0xf4>
 80065c4:	613c      	str	r4, [r7, #16]
 80065c6:	4638      	mov	r0, r7
 80065c8:	f001 f9a8 	bl	800791c <__mcmp>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	db22      	blt.n	8006616 <quorem+0xec>
 80065d0:	3601      	adds	r6, #1
 80065d2:	4629      	mov	r1, r5
 80065d4:	2000      	movs	r0, #0
 80065d6:	f858 2b04 	ldr.w	r2, [r8], #4
 80065da:	f8d1 c000 	ldr.w	ip, [r1]
 80065de:	b293      	uxth	r3, r2
 80065e0:	1ac3      	subs	r3, r0, r3
 80065e2:	0c12      	lsrs	r2, r2, #16
 80065e4:	fa13 f38c 	uxtah	r3, r3, ip
 80065e8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80065ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065f6:	45c1      	cmp	r9, r8
 80065f8:	f841 3b04 	str.w	r3, [r1], #4
 80065fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006600:	d2e9      	bcs.n	80065d6 <quorem+0xac>
 8006602:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006606:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800660a:	b922      	cbnz	r2, 8006616 <quorem+0xec>
 800660c:	3b04      	subs	r3, #4
 800660e:	429d      	cmp	r5, r3
 8006610:	461a      	mov	r2, r3
 8006612:	d30a      	bcc.n	800662a <quorem+0x100>
 8006614:	613c      	str	r4, [r7, #16]
 8006616:	4630      	mov	r0, r6
 8006618:	b003      	add	sp, #12
 800661a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661e:	6812      	ldr	r2, [r2, #0]
 8006620:	3b04      	subs	r3, #4
 8006622:	2a00      	cmp	r2, #0
 8006624:	d1ce      	bne.n	80065c4 <quorem+0x9a>
 8006626:	3c01      	subs	r4, #1
 8006628:	e7c9      	b.n	80065be <quorem+0x94>
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	3b04      	subs	r3, #4
 800662e:	2a00      	cmp	r2, #0
 8006630:	d1f0      	bne.n	8006614 <quorem+0xea>
 8006632:	3c01      	subs	r4, #1
 8006634:	e7eb      	b.n	800660e <quorem+0xe4>
 8006636:	2000      	movs	r0, #0
 8006638:	e7ee      	b.n	8006618 <quorem+0xee>
 800663a:	0000      	movs	r0, r0
 800663c:	0000      	movs	r0, r0
	...

08006640 <_dtoa_r>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	ed2d 8b04 	vpush	{d8-d9}
 8006648:	69c5      	ldr	r5, [r0, #28]
 800664a:	b093      	sub	sp, #76	; 0x4c
 800664c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006650:	ec57 6b10 	vmov	r6, r7, d0
 8006654:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006658:	9107      	str	r1, [sp, #28]
 800665a:	4604      	mov	r4, r0
 800665c:	920a      	str	r2, [sp, #40]	; 0x28
 800665e:	930d      	str	r3, [sp, #52]	; 0x34
 8006660:	b975      	cbnz	r5, 8006680 <_dtoa_r+0x40>
 8006662:	2010      	movs	r0, #16
 8006664:	f000 fe2a 	bl	80072bc <malloc>
 8006668:	4602      	mov	r2, r0
 800666a:	61e0      	str	r0, [r4, #28]
 800666c:	b920      	cbnz	r0, 8006678 <_dtoa_r+0x38>
 800666e:	4bae      	ldr	r3, [pc, #696]	; (8006928 <_dtoa_r+0x2e8>)
 8006670:	21ef      	movs	r1, #239	; 0xef
 8006672:	48ae      	ldr	r0, [pc, #696]	; (800692c <_dtoa_r+0x2ec>)
 8006674:	f001 fc90 	bl	8007f98 <__assert_func>
 8006678:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800667c:	6005      	str	r5, [r0, #0]
 800667e:	60c5      	str	r5, [r0, #12]
 8006680:	69e3      	ldr	r3, [r4, #28]
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	b151      	cbz	r1, 800669c <_dtoa_r+0x5c>
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	604a      	str	r2, [r1, #4]
 800668a:	2301      	movs	r3, #1
 800668c:	4093      	lsls	r3, r2
 800668e:	608b      	str	r3, [r1, #8]
 8006690:	4620      	mov	r0, r4
 8006692:	f000 ff07 	bl	80074a4 <_Bfree>
 8006696:	69e3      	ldr	r3, [r4, #28]
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	1e3b      	subs	r3, r7, #0
 800669e:	bfbb      	ittet	lt
 80066a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80066a4:	9303      	strlt	r3, [sp, #12]
 80066a6:	2300      	movge	r3, #0
 80066a8:	2201      	movlt	r2, #1
 80066aa:	bfac      	ite	ge
 80066ac:	f8c8 3000 	strge.w	r3, [r8]
 80066b0:	f8c8 2000 	strlt.w	r2, [r8]
 80066b4:	4b9e      	ldr	r3, [pc, #632]	; (8006930 <_dtoa_r+0x2f0>)
 80066b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80066ba:	ea33 0308 	bics.w	r3, r3, r8
 80066be:	d11b      	bne.n	80066f8 <_dtoa_r+0xb8>
 80066c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80066cc:	4333      	orrs	r3, r6
 80066ce:	f000 8593 	beq.w	80071f8 <_dtoa_r+0xbb8>
 80066d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066d4:	b963      	cbnz	r3, 80066f0 <_dtoa_r+0xb0>
 80066d6:	4b97      	ldr	r3, [pc, #604]	; (8006934 <_dtoa_r+0x2f4>)
 80066d8:	e027      	b.n	800672a <_dtoa_r+0xea>
 80066da:	4b97      	ldr	r3, [pc, #604]	; (8006938 <_dtoa_r+0x2f8>)
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	3308      	adds	r3, #8
 80066e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	9800      	ldr	r0, [sp, #0]
 80066e6:	b013      	add	sp, #76	; 0x4c
 80066e8:	ecbd 8b04 	vpop	{d8-d9}
 80066ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f0:	4b90      	ldr	r3, [pc, #576]	; (8006934 <_dtoa_r+0x2f4>)
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	3303      	adds	r3, #3
 80066f6:	e7f3      	b.n	80066e0 <_dtoa_r+0xa0>
 80066f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066fc:	2200      	movs	r2, #0
 80066fe:	ec51 0b17 	vmov	r0, r1, d7
 8006702:	eeb0 8a47 	vmov.f32	s16, s14
 8006706:	eef0 8a67 	vmov.f32	s17, s15
 800670a:	2300      	movs	r3, #0
 800670c:	f7fa f9e4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006710:	4681      	mov	r9, r0
 8006712:	b160      	cbz	r0, 800672e <_dtoa_r+0xee>
 8006714:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006716:	2301      	movs	r3, #1
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8568 	beq.w	80071f2 <_dtoa_r+0xbb2>
 8006722:	4b86      	ldr	r3, [pc, #536]	; (800693c <_dtoa_r+0x2fc>)
 8006724:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	3b01      	subs	r3, #1
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	e7da      	b.n	80066e4 <_dtoa_r+0xa4>
 800672e:	aa10      	add	r2, sp, #64	; 0x40
 8006730:	a911      	add	r1, sp, #68	; 0x44
 8006732:	4620      	mov	r0, r4
 8006734:	eeb0 0a48 	vmov.f32	s0, s16
 8006738:	eef0 0a68 	vmov.f32	s1, s17
 800673c:	f001 f994 	bl	8007a68 <__d2b>
 8006740:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006744:	4682      	mov	sl, r0
 8006746:	2d00      	cmp	r5, #0
 8006748:	d07f      	beq.n	800684a <_dtoa_r+0x20a>
 800674a:	ee18 3a90 	vmov	r3, s17
 800674e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006752:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006756:	ec51 0b18 	vmov	r0, r1, d8
 800675a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800675e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006762:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006766:	4619      	mov	r1, r3
 8006768:	2200      	movs	r2, #0
 800676a:	4b75      	ldr	r3, [pc, #468]	; (8006940 <_dtoa_r+0x300>)
 800676c:	f7f9 fd94 	bl	8000298 <__aeabi_dsub>
 8006770:	a367      	add	r3, pc, #412	; (adr r3, 8006910 <_dtoa_r+0x2d0>)
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	f7f9 ff47 	bl	8000608 <__aeabi_dmul>
 800677a:	a367      	add	r3, pc, #412	; (adr r3, 8006918 <_dtoa_r+0x2d8>)
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	f7f9 fd8c 	bl	800029c <__adddf3>
 8006784:	4606      	mov	r6, r0
 8006786:	4628      	mov	r0, r5
 8006788:	460f      	mov	r7, r1
 800678a:	f7f9 fed3 	bl	8000534 <__aeabi_i2d>
 800678e:	a364      	add	r3, pc, #400	; (adr r3, 8006920 <_dtoa_r+0x2e0>)
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	f7f9 ff38 	bl	8000608 <__aeabi_dmul>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4630      	mov	r0, r6
 800679e:	4639      	mov	r1, r7
 80067a0:	f7f9 fd7c 	bl	800029c <__adddf3>
 80067a4:	4606      	mov	r6, r0
 80067a6:	460f      	mov	r7, r1
 80067a8:	f7fa f9de 	bl	8000b68 <__aeabi_d2iz>
 80067ac:	2200      	movs	r2, #0
 80067ae:	4683      	mov	fp, r0
 80067b0:	2300      	movs	r3, #0
 80067b2:	4630      	mov	r0, r6
 80067b4:	4639      	mov	r1, r7
 80067b6:	f7fa f999 	bl	8000aec <__aeabi_dcmplt>
 80067ba:	b148      	cbz	r0, 80067d0 <_dtoa_r+0x190>
 80067bc:	4658      	mov	r0, fp
 80067be:	f7f9 feb9 	bl	8000534 <__aeabi_i2d>
 80067c2:	4632      	mov	r2, r6
 80067c4:	463b      	mov	r3, r7
 80067c6:	f7fa f987 	bl	8000ad8 <__aeabi_dcmpeq>
 80067ca:	b908      	cbnz	r0, 80067d0 <_dtoa_r+0x190>
 80067cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067d0:	f1bb 0f16 	cmp.w	fp, #22
 80067d4:	d857      	bhi.n	8006886 <_dtoa_r+0x246>
 80067d6:	4b5b      	ldr	r3, [pc, #364]	; (8006944 <_dtoa_r+0x304>)
 80067d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	ec51 0b18 	vmov	r0, r1, d8
 80067e4:	f7fa f982 	bl	8000aec <__aeabi_dcmplt>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d04e      	beq.n	800688a <_dtoa_r+0x24a>
 80067ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067f0:	2300      	movs	r3, #0
 80067f2:	930c      	str	r3, [sp, #48]	; 0x30
 80067f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067f6:	1b5b      	subs	r3, r3, r5
 80067f8:	1e5a      	subs	r2, r3, #1
 80067fa:	bf45      	ittet	mi
 80067fc:	f1c3 0301 	rsbmi	r3, r3, #1
 8006800:	9305      	strmi	r3, [sp, #20]
 8006802:	2300      	movpl	r3, #0
 8006804:	2300      	movmi	r3, #0
 8006806:	9206      	str	r2, [sp, #24]
 8006808:	bf54      	ite	pl
 800680a:	9305      	strpl	r3, [sp, #20]
 800680c:	9306      	strmi	r3, [sp, #24]
 800680e:	f1bb 0f00 	cmp.w	fp, #0
 8006812:	db3c      	blt.n	800688e <_dtoa_r+0x24e>
 8006814:	9b06      	ldr	r3, [sp, #24]
 8006816:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800681a:	445b      	add	r3, fp
 800681c:	9306      	str	r3, [sp, #24]
 800681e:	2300      	movs	r3, #0
 8006820:	9308      	str	r3, [sp, #32]
 8006822:	9b07      	ldr	r3, [sp, #28]
 8006824:	2b09      	cmp	r3, #9
 8006826:	d868      	bhi.n	80068fa <_dtoa_r+0x2ba>
 8006828:	2b05      	cmp	r3, #5
 800682a:	bfc4      	itt	gt
 800682c:	3b04      	subgt	r3, #4
 800682e:	9307      	strgt	r3, [sp, #28]
 8006830:	9b07      	ldr	r3, [sp, #28]
 8006832:	f1a3 0302 	sub.w	r3, r3, #2
 8006836:	bfcc      	ite	gt
 8006838:	2500      	movgt	r5, #0
 800683a:	2501      	movle	r5, #1
 800683c:	2b03      	cmp	r3, #3
 800683e:	f200 8085 	bhi.w	800694c <_dtoa_r+0x30c>
 8006842:	e8df f003 	tbb	[pc, r3]
 8006846:	3b2e      	.short	0x3b2e
 8006848:	5839      	.short	0x5839
 800684a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800684e:	441d      	add	r5, r3
 8006850:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006854:	2b20      	cmp	r3, #32
 8006856:	bfc1      	itttt	gt
 8006858:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800685c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006860:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006864:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006868:	bfd6      	itet	le
 800686a:	f1c3 0320 	rsble	r3, r3, #32
 800686e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006872:	fa06 f003 	lslle.w	r0, r6, r3
 8006876:	f7f9 fe4d 	bl	8000514 <__aeabi_ui2d>
 800687a:	2201      	movs	r2, #1
 800687c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006880:	3d01      	subs	r5, #1
 8006882:	920e      	str	r2, [sp, #56]	; 0x38
 8006884:	e76f      	b.n	8006766 <_dtoa_r+0x126>
 8006886:	2301      	movs	r3, #1
 8006888:	e7b3      	b.n	80067f2 <_dtoa_r+0x1b2>
 800688a:	900c      	str	r0, [sp, #48]	; 0x30
 800688c:	e7b2      	b.n	80067f4 <_dtoa_r+0x1b4>
 800688e:	9b05      	ldr	r3, [sp, #20]
 8006890:	eba3 030b 	sub.w	r3, r3, fp
 8006894:	9305      	str	r3, [sp, #20]
 8006896:	f1cb 0300 	rsb	r3, fp, #0
 800689a:	9308      	str	r3, [sp, #32]
 800689c:	2300      	movs	r3, #0
 800689e:	930b      	str	r3, [sp, #44]	; 0x2c
 80068a0:	e7bf      	b.n	8006822 <_dtoa_r+0x1e2>
 80068a2:	2300      	movs	r3, #0
 80068a4:	9309      	str	r3, [sp, #36]	; 0x24
 80068a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	dc52      	bgt.n	8006952 <_dtoa_r+0x312>
 80068ac:	2301      	movs	r3, #1
 80068ae:	9301      	str	r3, [sp, #4]
 80068b0:	9304      	str	r3, [sp, #16]
 80068b2:	461a      	mov	r2, r3
 80068b4:	920a      	str	r2, [sp, #40]	; 0x28
 80068b6:	e00b      	b.n	80068d0 <_dtoa_r+0x290>
 80068b8:	2301      	movs	r3, #1
 80068ba:	e7f3      	b.n	80068a4 <_dtoa_r+0x264>
 80068bc:	2300      	movs	r3, #0
 80068be:	9309      	str	r3, [sp, #36]	; 0x24
 80068c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c2:	445b      	add	r3, fp
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	3301      	adds	r3, #1
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	9304      	str	r3, [sp, #16]
 80068cc:	bfb8      	it	lt
 80068ce:	2301      	movlt	r3, #1
 80068d0:	69e0      	ldr	r0, [r4, #28]
 80068d2:	2100      	movs	r1, #0
 80068d4:	2204      	movs	r2, #4
 80068d6:	f102 0614 	add.w	r6, r2, #20
 80068da:	429e      	cmp	r6, r3
 80068dc:	d93d      	bls.n	800695a <_dtoa_r+0x31a>
 80068de:	6041      	str	r1, [r0, #4]
 80068e0:	4620      	mov	r0, r4
 80068e2:	f000 fd9f 	bl	8007424 <_Balloc>
 80068e6:	9000      	str	r0, [sp, #0]
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d139      	bne.n	8006960 <_dtoa_r+0x320>
 80068ec:	4b16      	ldr	r3, [pc, #88]	; (8006948 <_dtoa_r+0x308>)
 80068ee:	4602      	mov	r2, r0
 80068f0:	f240 11af 	movw	r1, #431	; 0x1af
 80068f4:	e6bd      	b.n	8006672 <_dtoa_r+0x32>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e7e1      	b.n	80068be <_dtoa_r+0x27e>
 80068fa:	2501      	movs	r5, #1
 80068fc:	2300      	movs	r3, #0
 80068fe:	9307      	str	r3, [sp, #28]
 8006900:	9509      	str	r5, [sp, #36]	; 0x24
 8006902:	f04f 33ff 	mov.w	r3, #4294967295
 8006906:	9301      	str	r3, [sp, #4]
 8006908:	9304      	str	r3, [sp, #16]
 800690a:	2200      	movs	r2, #0
 800690c:	2312      	movs	r3, #18
 800690e:	e7d1      	b.n	80068b4 <_dtoa_r+0x274>
 8006910:	636f4361 	.word	0x636f4361
 8006914:	3fd287a7 	.word	0x3fd287a7
 8006918:	8b60c8b3 	.word	0x8b60c8b3
 800691c:	3fc68a28 	.word	0x3fc68a28
 8006920:	509f79fb 	.word	0x509f79fb
 8006924:	3fd34413 	.word	0x3fd34413
 8006928:	08008755 	.word	0x08008755
 800692c:	0800876c 	.word	0x0800876c
 8006930:	7ff00000 	.word	0x7ff00000
 8006934:	08008751 	.word	0x08008751
 8006938:	08008748 	.word	0x08008748
 800693c:	08008725 	.word	0x08008725
 8006940:	3ff80000 	.word	0x3ff80000
 8006944:	08008858 	.word	0x08008858
 8006948:	080087c4 	.word	0x080087c4
 800694c:	2301      	movs	r3, #1
 800694e:	9309      	str	r3, [sp, #36]	; 0x24
 8006950:	e7d7      	b.n	8006902 <_dtoa_r+0x2c2>
 8006952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006954:	9301      	str	r3, [sp, #4]
 8006956:	9304      	str	r3, [sp, #16]
 8006958:	e7ba      	b.n	80068d0 <_dtoa_r+0x290>
 800695a:	3101      	adds	r1, #1
 800695c:	0052      	lsls	r2, r2, #1
 800695e:	e7ba      	b.n	80068d6 <_dtoa_r+0x296>
 8006960:	69e3      	ldr	r3, [r4, #28]
 8006962:	9a00      	ldr	r2, [sp, #0]
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	9b04      	ldr	r3, [sp, #16]
 8006968:	2b0e      	cmp	r3, #14
 800696a:	f200 80a8 	bhi.w	8006abe <_dtoa_r+0x47e>
 800696e:	2d00      	cmp	r5, #0
 8006970:	f000 80a5 	beq.w	8006abe <_dtoa_r+0x47e>
 8006974:	f1bb 0f00 	cmp.w	fp, #0
 8006978:	dd38      	ble.n	80069ec <_dtoa_r+0x3ac>
 800697a:	4bc0      	ldr	r3, [pc, #768]	; (8006c7c <_dtoa_r+0x63c>)
 800697c:	f00b 020f 	and.w	r2, fp, #15
 8006980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006984:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006988:	e9d3 6700 	ldrd	r6, r7, [r3]
 800698c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006990:	d019      	beq.n	80069c6 <_dtoa_r+0x386>
 8006992:	4bbb      	ldr	r3, [pc, #748]	; (8006c80 <_dtoa_r+0x640>)
 8006994:	ec51 0b18 	vmov	r0, r1, d8
 8006998:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800699c:	f7f9 ff5e 	bl	800085c <__aeabi_ddiv>
 80069a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069a4:	f008 080f 	and.w	r8, r8, #15
 80069a8:	2503      	movs	r5, #3
 80069aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006c80 <_dtoa_r+0x640>
 80069ae:	f1b8 0f00 	cmp.w	r8, #0
 80069b2:	d10a      	bne.n	80069ca <_dtoa_r+0x38a>
 80069b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069b8:	4632      	mov	r2, r6
 80069ba:	463b      	mov	r3, r7
 80069bc:	f7f9 ff4e 	bl	800085c <__aeabi_ddiv>
 80069c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069c4:	e02b      	b.n	8006a1e <_dtoa_r+0x3de>
 80069c6:	2502      	movs	r5, #2
 80069c8:	e7ef      	b.n	80069aa <_dtoa_r+0x36a>
 80069ca:	f018 0f01 	tst.w	r8, #1
 80069ce:	d008      	beq.n	80069e2 <_dtoa_r+0x3a2>
 80069d0:	4630      	mov	r0, r6
 80069d2:	4639      	mov	r1, r7
 80069d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80069d8:	f7f9 fe16 	bl	8000608 <__aeabi_dmul>
 80069dc:	3501      	adds	r5, #1
 80069de:	4606      	mov	r6, r0
 80069e0:	460f      	mov	r7, r1
 80069e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069e6:	f109 0908 	add.w	r9, r9, #8
 80069ea:	e7e0      	b.n	80069ae <_dtoa_r+0x36e>
 80069ec:	f000 809f 	beq.w	8006b2e <_dtoa_r+0x4ee>
 80069f0:	f1cb 0600 	rsb	r6, fp, #0
 80069f4:	4ba1      	ldr	r3, [pc, #644]	; (8006c7c <_dtoa_r+0x63c>)
 80069f6:	4fa2      	ldr	r7, [pc, #648]	; (8006c80 <_dtoa_r+0x640>)
 80069f8:	f006 020f 	and.w	r2, r6, #15
 80069fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	ec51 0b18 	vmov	r0, r1, d8
 8006a08:	f7f9 fdfe 	bl	8000608 <__aeabi_dmul>
 8006a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a10:	1136      	asrs	r6, r6, #4
 8006a12:	2300      	movs	r3, #0
 8006a14:	2502      	movs	r5, #2
 8006a16:	2e00      	cmp	r6, #0
 8006a18:	d17e      	bne.n	8006b18 <_dtoa_r+0x4d8>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1d0      	bne.n	80069c0 <_dtoa_r+0x380>
 8006a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 8084 	beq.w	8006b32 <_dtoa_r+0x4f2>
 8006a2a:	4b96      	ldr	r3, [pc, #600]	; (8006c84 <_dtoa_r+0x644>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	4640      	mov	r0, r8
 8006a30:	4649      	mov	r1, r9
 8006a32:	f7fa f85b 	bl	8000aec <__aeabi_dcmplt>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d07b      	beq.n	8006b32 <_dtoa_r+0x4f2>
 8006a3a:	9b04      	ldr	r3, [sp, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d078      	beq.n	8006b32 <_dtoa_r+0x4f2>
 8006a40:	9b01      	ldr	r3, [sp, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	dd39      	ble.n	8006aba <_dtoa_r+0x47a>
 8006a46:	4b90      	ldr	r3, [pc, #576]	; (8006c88 <_dtoa_r+0x648>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	f7f9 fddb 	bl	8000608 <__aeabi_dmul>
 8006a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a56:	9e01      	ldr	r6, [sp, #4]
 8006a58:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006a5c:	3501      	adds	r5, #1
 8006a5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a62:	4628      	mov	r0, r5
 8006a64:	f7f9 fd66 	bl	8000534 <__aeabi_i2d>
 8006a68:	4642      	mov	r2, r8
 8006a6a:	464b      	mov	r3, r9
 8006a6c:	f7f9 fdcc 	bl	8000608 <__aeabi_dmul>
 8006a70:	4b86      	ldr	r3, [pc, #536]	; (8006c8c <_dtoa_r+0x64c>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	f7f9 fc12 	bl	800029c <__adddf3>
 8006a78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a80:	9303      	str	r3, [sp, #12]
 8006a82:	2e00      	cmp	r6, #0
 8006a84:	d158      	bne.n	8006b38 <_dtoa_r+0x4f8>
 8006a86:	4b82      	ldr	r3, [pc, #520]	; (8006c90 <_dtoa_r+0x650>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	f7f9 fc03 	bl	8000298 <__aeabi_dsub>
 8006a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a96:	4680      	mov	r8, r0
 8006a98:	4689      	mov	r9, r1
 8006a9a:	f7fa f845 	bl	8000b28 <__aeabi_dcmpgt>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	f040 8296 	bne.w	8006fd0 <_dtoa_r+0x990>
 8006aa4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006aa8:	4640      	mov	r0, r8
 8006aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006aae:	4649      	mov	r1, r9
 8006ab0:	f7fa f81c 	bl	8000aec <__aeabi_dcmplt>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	f040 8289 	bne.w	8006fcc <_dtoa_r+0x98c>
 8006aba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f2c0 814e 	blt.w	8006d62 <_dtoa_r+0x722>
 8006ac6:	f1bb 0f0e 	cmp.w	fp, #14
 8006aca:	f300 814a 	bgt.w	8006d62 <_dtoa_r+0x722>
 8006ace:	4b6b      	ldr	r3, [pc, #428]	; (8006c7c <_dtoa_r+0x63c>)
 8006ad0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ad4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f280 80dc 	bge.w	8006c98 <_dtoa_r+0x658>
 8006ae0:	9b04      	ldr	r3, [sp, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f300 80d8 	bgt.w	8006c98 <_dtoa_r+0x658>
 8006ae8:	f040 826f 	bne.w	8006fca <_dtoa_r+0x98a>
 8006aec:	4b68      	ldr	r3, [pc, #416]	; (8006c90 <_dtoa_r+0x650>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	4640      	mov	r0, r8
 8006af2:	4649      	mov	r1, r9
 8006af4:	f7f9 fd88 	bl	8000608 <__aeabi_dmul>
 8006af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006afc:	f7fa f80a 	bl	8000b14 <__aeabi_dcmpge>
 8006b00:	9e04      	ldr	r6, [sp, #16]
 8006b02:	4637      	mov	r7, r6
 8006b04:	2800      	cmp	r0, #0
 8006b06:	f040 8245 	bne.w	8006f94 <_dtoa_r+0x954>
 8006b0a:	9d00      	ldr	r5, [sp, #0]
 8006b0c:	2331      	movs	r3, #49	; 0x31
 8006b0e:	f805 3b01 	strb.w	r3, [r5], #1
 8006b12:	f10b 0b01 	add.w	fp, fp, #1
 8006b16:	e241      	b.n	8006f9c <_dtoa_r+0x95c>
 8006b18:	07f2      	lsls	r2, r6, #31
 8006b1a:	d505      	bpl.n	8006b28 <_dtoa_r+0x4e8>
 8006b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b20:	f7f9 fd72 	bl	8000608 <__aeabi_dmul>
 8006b24:	3501      	adds	r5, #1
 8006b26:	2301      	movs	r3, #1
 8006b28:	1076      	asrs	r6, r6, #1
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	e773      	b.n	8006a16 <_dtoa_r+0x3d6>
 8006b2e:	2502      	movs	r5, #2
 8006b30:	e775      	b.n	8006a1e <_dtoa_r+0x3de>
 8006b32:	9e04      	ldr	r6, [sp, #16]
 8006b34:	465f      	mov	r7, fp
 8006b36:	e792      	b.n	8006a5e <_dtoa_r+0x41e>
 8006b38:	9900      	ldr	r1, [sp, #0]
 8006b3a:	4b50      	ldr	r3, [pc, #320]	; (8006c7c <_dtoa_r+0x63c>)
 8006b3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b40:	4431      	add	r1, r6
 8006b42:	9102      	str	r1, [sp, #8]
 8006b44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b46:	eeb0 9a47 	vmov.f32	s18, s14
 8006b4a:	eef0 9a67 	vmov.f32	s19, s15
 8006b4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b56:	2900      	cmp	r1, #0
 8006b58:	d044      	beq.n	8006be4 <_dtoa_r+0x5a4>
 8006b5a:	494e      	ldr	r1, [pc, #312]	; (8006c94 <_dtoa_r+0x654>)
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	f7f9 fe7d 	bl	800085c <__aeabi_ddiv>
 8006b62:	ec53 2b19 	vmov	r2, r3, d9
 8006b66:	f7f9 fb97 	bl	8000298 <__aeabi_dsub>
 8006b6a:	9d00      	ldr	r5, [sp, #0]
 8006b6c:	ec41 0b19 	vmov	d9, r0, r1
 8006b70:	4649      	mov	r1, r9
 8006b72:	4640      	mov	r0, r8
 8006b74:	f7f9 fff8 	bl	8000b68 <__aeabi_d2iz>
 8006b78:	4606      	mov	r6, r0
 8006b7a:	f7f9 fcdb 	bl	8000534 <__aeabi_i2d>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	4640      	mov	r0, r8
 8006b84:	4649      	mov	r1, r9
 8006b86:	f7f9 fb87 	bl	8000298 <__aeabi_dsub>
 8006b8a:	3630      	adds	r6, #48	; 0x30
 8006b8c:	f805 6b01 	strb.w	r6, [r5], #1
 8006b90:	ec53 2b19 	vmov	r2, r3, d9
 8006b94:	4680      	mov	r8, r0
 8006b96:	4689      	mov	r9, r1
 8006b98:	f7f9 ffa8 	bl	8000aec <__aeabi_dcmplt>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d164      	bne.n	8006c6a <_dtoa_r+0x62a>
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	4937      	ldr	r1, [pc, #220]	; (8006c84 <_dtoa_r+0x644>)
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	f7f9 fb76 	bl	8000298 <__aeabi_dsub>
 8006bac:	ec53 2b19 	vmov	r2, r3, d9
 8006bb0:	f7f9 ff9c 	bl	8000aec <__aeabi_dcmplt>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	f040 80b6 	bne.w	8006d26 <_dtoa_r+0x6e6>
 8006bba:	9b02      	ldr	r3, [sp, #8]
 8006bbc:	429d      	cmp	r5, r3
 8006bbe:	f43f af7c 	beq.w	8006aba <_dtoa_r+0x47a>
 8006bc2:	4b31      	ldr	r3, [pc, #196]	; (8006c88 <_dtoa_r+0x648>)
 8006bc4:	ec51 0b19 	vmov	r0, r1, d9
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f7f9 fd1d 	bl	8000608 <__aeabi_dmul>
 8006bce:	4b2e      	ldr	r3, [pc, #184]	; (8006c88 <_dtoa_r+0x648>)
 8006bd0:	ec41 0b19 	vmov	d9, r0, r1
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	4649      	mov	r1, r9
 8006bda:	f7f9 fd15 	bl	8000608 <__aeabi_dmul>
 8006bde:	4680      	mov	r8, r0
 8006be0:	4689      	mov	r9, r1
 8006be2:	e7c5      	b.n	8006b70 <_dtoa_r+0x530>
 8006be4:	ec51 0b17 	vmov	r0, r1, d7
 8006be8:	f7f9 fd0e 	bl	8000608 <__aeabi_dmul>
 8006bec:	9b02      	ldr	r3, [sp, #8]
 8006bee:	9d00      	ldr	r5, [sp, #0]
 8006bf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bf2:	ec41 0b19 	vmov	d9, r0, r1
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	4640      	mov	r0, r8
 8006bfa:	f7f9 ffb5 	bl	8000b68 <__aeabi_d2iz>
 8006bfe:	4606      	mov	r6, r0
 8006c00:	f7f9 fc98 	bl	8000534 <__aeabi_i2d>
 8006c04:	3630      	adds	r6, #48	; 0x30
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	f7f9 fb43 	bl	8000298 <__aeabi_dsub>
 8006c12:	f805 6b01 	strb.w	r6, [r5], #1
 8006c16:	9b02      	ldr	r3, [sp, #8]
 8006c18:	429d      	cmp	r5, r3
 8006c1a:	4680      	mov	r8, r0
 8006c1c:	4689      	mov	r9, r1
 8006c1e:	f04f 0200 	mov.w	r2, #0
 8006c22:	d124      	bne.n	8006c6e <_dtoa_r+0x62e>
 8006c24:	4b1b      	ldr	r3, [pc, #108]	; (8006c94 <_dtoa_r+0x654>)
 8006c26:	ec51 0b19 	vmov	r0, r1, d9
 8006c2a:	f7f9 fb37 	bl	800029c <__adddf3>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	4640      	mov	r0, r8
 8006c34:	4649      	mov	r1, r9
 8006c36:	f7f9 ff77 	bl	8000b28 <__aeabi_dcmpgt>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d173      	bne.n	8006d26 <_dtoa_r+0x6e6>
 8006c3e:	ec53 2b19 	vmov	r2, r3, d9
 8006c42:	4914      	ldr	r1, [pc, #80]	; (8006c94 <_dtoa_r+0x654>)
 8006c44:	2000      	movs	r0, #0
 8006c46:	f7f9 fb27 	bl	8000298 <__aeabi_dsub>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4640      	mov	r0, r8
 8006c50:	4649      	mov	r1, r9
 8006c52:	f7f9 ff4b 	bl	8000aec <__aeabi_dcmplt>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	f43f af2f 	beq.w	8006aba <_dtoa_r+0x47a>
 8006c5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c5e:	1e6b      	subs	r3, r5, #1
 8006c60:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c66:	2b30      	cmp	r3, #48	; 0x30
 8006c68:	d0f8      	beq.n	8006c5c <_dtoa_r+0x61c>
 8006c6a:	46bb      	mov	fp, r7
 8006c6c:	e04a      	b.n	8006d04 <_dtoa_r+0x6c4>
 8006c6e:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <_dtoa_r+0x648>)
 8006c70:	f7f9 fcca 	bl	8000608 <__aeabi_dmul>
 8006c74:	4680      	mov	r8, r0
 8006c76:	4689      	mov	r9, r1
 8006c78:	e7bd      	b.n	8006bf6 <_dtoa_r+0x5b6>
 8006c7a:	bf00      	nop
 8006c7c:	08008858 	.word	0x08008858
 8006c80:	08008830 	.word	0x08008830
 8006c84:	3ff00000 	.word	0x3ff00000
 8006c88:	40240000 	.word	0x40240000
 8006c8c:	401c0000 	.word	0x401c0000
 8006c90:	40140000 	.word	0x40140000
 8006c94:	3fe00000 	.word	0x3fe00000
 8006c98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c9c:	9d00      	ldr	r5, [sp, #0]
 8006c9e:	4642      	mov	r2, r8
 8006ca0:	464b      	mov	r3, r9
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	f7f9 fdd9 	bl	800085c <__aeabi_ddiv>
 8006caa:	f7f9 ff5d 	bl	8000b68 <__aeabi_d2iz>
 8006cae:	9001      	str	r0, [sp, #4]
 8006cb0:	f7f9 fc40 	bl	8000534 <__aeabi_i2d>
 8006cb4:	4642      	mov	r2, r8
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	f7f9 fca6 	bl	8000608 <__aeabi_dmul>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	f7f9 fae8 	bl	8000298 <__aeabi_dsub>
 8006cc8:	9e01      	ldr	r6, [sp, #4]
 8006cca:	9f04      	ldr	r7, [sp, #16]
 8006ccc:	3630      	adds	r6, #48	; 0x30
 8006cce:	f805 6b01 	strb.w	r6, [r5], #1
 8006cd2:	9e00      	ldr	r6, [sp, #0]
 8006cd4:	1bae      	subs	r6, r5, r6
 8006cd6:	42b7      	cmp	r7, r6
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	d134      	bne.n	8006d48 <_dtoa_r+0x708>
 8006cde:	f7f9 fadd 	bl	800029c <__adddf3>
 8006ce2:	4642      	mov	r2, r8
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460f      	mov	r7, r1
 8006cea:	f7f9 ff1d 	bl	8000b28 <__aeabi_dcmpgt>
 8006cee:	b9c8      	cbnz	r0, 8006d24 <_dtoa_r+0x6e4>
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	f7f9 feee 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cfc:	b110      	cbz	r0, 8006d04 <_dtoa_r+0x6c4>
 8006cfe:	9b01      	ldr	r3, [sp, #4]
 8006d00:	07db      	lsls	r3, r3, #31
 8006d02:	d40f      	bmi.n	8006d24 <_dtoa_r+0x6e4>
 8006d04:	4651      	mov	r1, sl
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 fbcc 	bl	80074a4 <_Bfree>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d10:	702b      	strb	r3, [r5, #0]
 8006d12:	f10b 0301 	add.w	r3, fp, #1
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f43f ace2 	beq.w	80066e4 <_dtoa_r+0xa4>
 8006d20:	601d      	str	r5, [r3, #0]
 8006d22:	e4df      	b.n	80066e4 <_dtoa_r+0xa4>
 8006d24:	465f      	mov	r7, fp
 8006d26:	462b      	mov	r3, r5
 8006d28:	461d      	mov	r5, r3
 8006d2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d2e:	2a39      	cmp	r2, #57	; 0x39
 8006d30:	d106      	bne.n	8006d40 <_dtoa_r+0x700>
 8006d32:	9a00      	ldr	r2, [sp, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d1f7      	bne.n	8006d28 <_dtoa_r+0x6e8>
 8006d38:	9900      	ldr	r1, [sp, #0]
 8006d3a:	2230      	movs	r2, #48	; 0x30
 8006d3c:	3701      	adds	r7, #1
 8006d3e:	700a      	strb	r2, [r1, #0]
 8006d40:	781a      	ldrb	r2, [r3, #0]
 8006d42:	3201      	adds	r2, #1
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	e790      	b.n	8006c6a <_dtoa_r+0x62a>
 8006d48:	4ba3      	ldr	r3, [pc, #652]	; (8006fd8 <_dtoa_r+0x998>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f7f9 fc5c 	bl	8000608 <__aeabi_dmul>
 8006d50:	2200      	movs	r2, #0
 8006d52:	2300      	movs	r3, #0
 8006d54:	4606      	mov	r6, r0
 8006d56:	460f      	mov	r7, r1
 8006d58:	f7f9 febe 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d09e      	beq.n	8006c9e <_dtoa_r+0x65e>
 8006d60:	e7d0      	b.n	8006d04 <_dtoa_r+0x6c4>
 8006d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d64:	2a00      	cmp	r2, #0
 8006d66:	f000 80ca 	beq.w	8006efe <_dtoa_r+0x8be>
 8006d6a:	9a07      	ldr	r2, [sp, #28]
 8006d6c:	2a01      	cmp	r2, #1
 8006d6e:	f300 80ad 	bgt.w	8006ecc <_dtoa_r+0x88c>
 8006d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d74:	2a00      	cmp	r2, #0
 8006d76:	f000 80a5 	beq.w	8006ec4 <_dtoa_r+0x884>
 8006d7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d7e:	9e08      	ldr	r6, [sp, #32]
 8006d80:	9d05      	ldr	r5, [sp, #20]
 8006d82:	9a05      	ldr	r2, [sp, #20]
 8006d84:	441a      	add	r2, r3
 8006d86:	9205      	str	r2, [sp, #20]
 8006d88:	9a06      	ldr	r2, [sp, #24]
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	441a      	add	r2, r3
 8006d8e:	4620      	mov	r0, r4
 8006d90:	9206      	str	r2, [sp, #24]
 8006d92:	f000 fc3d 	bl	8007610 <__i2b>
 8006d96:	4607      	mov	r7, r0
 8006d98:	b165      	cbz	r5, 8006db4 <_dtoa_r+0x774>
 8006d9a:	9b06      	ldr	r3, [sp, #24]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	dd09      	ble.n	8006db4 <_dtoa_r+0x774>
 8006da0:	42ab      	cmp	r3, r5
 8006da2:	9a05      	ldr	r2, [sp, #20]
 8006da4:	bfa8      	it	ge
 8006da6:	462b      	movge	r3, r5
 8006da8:	1ad2      	subs	r2, r2, r3
 8006daa:	9205      	str	r2, [sp, #20]
 8006dac:	9a06      	ldr	r2, [sp, #24]
 8006dae:	1aed      	subs	r5, r5, r3
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	9306      	str	r3, [sp, #24]
 8006db4:	9b08      	ldr	r3, [sp, #32]
 8006db6:	b1f3      	cbz	r3, 8006df6 <_dtoa_r+0x7b6>
 8006db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 80a3 	beq.w	8006f06 <_dtoa_r+0x8c6>
 8006dc0:	2e00      	cmp	r6, #0
 8006dc2:	dd10      	ble.n	8006de6 <_dtoa_r+0x7a6>
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	4632      	mov	r2, r6
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 fce1 	bl	8007790 <__pow5mult>
 8006dce:	4652      	mov	r2, sl
 8006dd0:	4601      	mov	r1, r0
 8006dd2:	4607      	mov	r7, r0
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 fc31 	bl	800763c <__multiply>
 8006dda:	4651      	mov	r1, sl
 8006ddc:	4680      	mov	r8, r0
 8006dde:	4620      	mov	r0, r4
 8006de0:	f000 fb60 	bl	80074a4 <_Bfree>
 8006de4:	46c2      	mov	sl, r8
 8006de6:	9b08      	ldr	r3, [sp, #32]
 8006de8:	1b9a      	subs	r2, r3, r6
 8006dea:	d004      	beq.n	8006df6 <_dtoa_r+0x7b6>
 8006dec:	4651      	mov	r1, sl
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 fcce 	bl	8007790 <__pow5mult>
 8006df4:	4682      	mov	sl, r0
 8006df6:	2101      	movs	r1, #1
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f000 fc09 	bl	8007610 <__i2b>
 8006dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	4606      	mov	r6, r0
 8006e04:	f340 8081 	ble.w	8006f0a <_dtoa_r+0x8ca>
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4601      	mov	r1, r0
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 fcbf 	bl	8007790 <__pow5mult>
 8006e12:	9b07      	ldr	r3, [sp, #28]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	4606      	mov	r6, r0
 8006e18:	dd7a      	ble.n	8006f10 <_dtoa_r+0x8d0>
 8006e1a:	f04f 0800 	mov.w	r8, #0
 8006e1e:	6933      	ldr	r3, [r6, #16]
 8006e20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e24:	6918      	ldr	r0, [r3, #16]
 8006e26:	f000 fba5 	bl	8007574 <__hi0bits>
 8006e2a:	f1c0 0020 	rsb	r0, r0, #32
 8006e2e:	9b06      	ldr	r3, [sp, #24]
 8006e30:	4418      	add	r0, r3
 8006e32:	f010 001f 	ands.w	r0, r0, #31
 8006e36:	f000 8094 	beq.w	8006f62 <_dtoa_r+0x922>
 8006e3a:	f1c0 0320 	rsb	r3, r0, #32
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	f340 8085 	ble.w	8006f4e <_dtoa_r+0x90e>
 8006e44:	9b05      	ldr	r3, [sp, #20]
 8006e46:	f1c0 001c 	rsb	r0, r0, #28
 8006e4a:	4403      	add	r3, r0
 8006e4c:	9305      	str	r3, [sp, #20]
 8006e4e:	9b06      	ldr	r3, [sp, #24]
 8006e50:	4403      	add	r3, r0
 8006e52:	4405      	add	r5, r0
 8006e54:	9306      	str	r3, [sp, #24]
 8006e56:	9b05      	ldr	r3, [sp, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	dd05      	ble.n	8006e68 <_dtoa_r+0x828>
 8006e5c:	4651      	mov	r1, sl
 8006e5e:	461a      	mov	r2, r3
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 fcef 	bl	8007844 <__lshift>
 8006e66:	4682      	mov	sl, r0
 8006e68:	9b06      	ldr	r3, [sp, #24]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	dd05      	ble.n	8006e7a <_dtoa_r+0x83a>
 8006e6e:	4631      	mov	r1, r6
 8006e70:	461a      	mov	r2, r3
 8006e72:	4620      	mov	r0, r4
 8006e74:	f000 fce6 	bl	8007844 <__lshift>
 8006e78:	4606      	mov	r6, r0
 8006e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d072      	beq.n	8006f66 <_dtoa_r+0x926>
 8006e80:	4631      	mov	r1, r6
 8006e82:	4650      	mov	r0, sl
 8006e84:	f000 fd4a 	bl	800791c <__mcmp>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	da6c      	bge.n	8006f66 <_dtoa_r+0x926>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4651      	mov	r1, sl
 8006e90:	220a      	movs	r2, #10
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 fb28 	bl	80074e8 <__multadd>
 8006e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e9e:	4682      	mov	sl, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 81b0 	beq.w	8007206 <_dtoa_r+0xbc6>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	4639      	mov	r1, r7
 8006eaa:	220a      	movs	r2, #10
 8006eac:	4620      	mov	r0, r4
 8006eae:	f000 fb1b 	bl	80074e8 <__multadd>
 8006eb2:	9b01      	ldr	r3, [sp, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	f300 8096 	bgt.w	8006fe8 <_dtoa_r+0x9a8>
 8006ebc:	9b07      	ldr	r3, [sp, #28]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	dc59      	bgt.n	8006f76 <_dtoa_r+0x936>
 8006ec2:	e091      	b.n	8006fe8 <_dtoa_r+0x9a8>
 8006ec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ec6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006eca:	e758      	b.n	8006d7e <_dtoa_r+0x73e>
 8006ecc:	9b04      	ldr	r3, [sp, #16]
 8006ece:	1e5e      	subs	r6, r3, #1
 8006ed0:	9b08      	ldr	r3, [sp, #32]
 8006ed2:	42b3      	cmp	r3, r6
 8006ed4:	bfbf      	itttt	lt
 8006ed6:	9b08      	ldrlt	r3, [sp, #32]
 8006ed8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006eda:	9608      	strlt	r6, [sp, #32]
 8006edc:	1af3      	sublt	r3, r6, r3
 8006ede:	bfb4      	ite	lt
 8006ee0:	18d2      	addlt	r2, r2, r3
 8006ee2:	1b9e      	subge	r6, r3, r6
 8006ee4:	9b04      	ldr	r3, [sp, #16]
 8006ee6:	bfbc      	itt	lt
 8006ee8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006eea:	2600      	movlt	r6, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bfb7      	itett	lt
 8006ef0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006ef4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006ef8:	1a9d      	sublt	r5, r3, r2
 8006efa:	2300      	movlt	r3, #0
 8006efc:	e741      	b.n	8006d82 <_dtoa_r+0x742>
 8006efe:	9e08      	ldr	r6, [sp, #32]
 8006f00:	9d05      	ldr	r5, [sp, #20]
 8006f02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006f04:	e748      	b.n	8006d98 <_dtoa_r+0x758>
 8006f06:	9a08      	ldr	r2, [sp, #32]
 8006f08:	e770      	b.n	8006dec <_dtoa_r+0x7ac>
 8006f0a:	9b07      	ldr	r3, [sp, #28]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	dc19      	bgt.n	8006f44 <_dtoa_r+0x904>
 8006f10:	9b02      	ldr	r3, [sp, #8]
 8006f12:	b9bb      	cbnz	r3, 8006f44 <_dtoa_r+0x904>
 8006f14:	9b03      	ldr	r3, [sp, #12]
 8006f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f1a:	b99b      	cbnz	r3, 8006f44 <_dtoa_r+0x904>
 8006f1c:	9b03      	ldr	r3, [sp, #12]
 8006f1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f22:	0d1b      	lsrs	r3, r3, #20
 8006f24:	051b      	lsls	r3, r3, #20
 8006f26:	b183      	cbz	r3, 8006f4a <_dtoa_r+0x90a>
 8006f28:	9b05      	ldr	r3, [sp, #20]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	9305      	str	r3, [sp, #20]
 8006f2e:	9b06      	ldr	r3, [sp, #24]
 8006f30:	3301      	adds	r3, #1
 8006f32:	9306      	str	r3, [sp, #24]
 8006f34:	f04f 0801 	mov.w	r8, #1
 8006f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f47f af6f 	bne.w	8006e1e <_dtoa_r+0x7de>
 8006f40:	2001      	movs	r0, #1
 8006f42:	e774      	b.n	8006e2e <_dtoa_r+0x7ee>
 8006f44:	f04f 0800 	mov.w	r8, #0
 8006f48:	e7f6      	b.n	8006f38 <_dtoa_r+0x8f8>
 8006f4a:	4698      	mov	r8, r3
 8006f4c:	e7f4      	b.n	8006f38 <_dtoa_r+0x8f8>
 8006f4e:	d082      	beq.n	8006e56 <_dtoa_r+0x816>
 8006f50:	9a05      	ldr	r2, [sp, #20]
 8006f52:	331c      	adds	r3, #28
 8006f54:	441a      	add	r2, r3
 8006f56:	9205      	str	r2, [sp, #20]
 8006f58:	9a06      	ldr	r2, [sp, #24]
 8006f5a:	441a      	add	r2, r3
 8006f5c:	441d      	add	r5, r3
 8006f5e:	9206      	str	r2, [sp, #24]
 8006f60:	e779      	b.n	8006e56 <_dtoa_r+0x816>
 8006f62:	4603      	mov	r3, r0
 8006f64:	e7f4      	b.n	8006f50 <_dtoa_r+0x910>
 8006f66:	9b04      	ldr	r3, [sp, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	dc37      	bgt.n	8006fdc <_dtoa_r+0x99c>
 8006f6c:	9b07      	ldr	r3, [sp, #28]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	dd34      	ble.n	8006fdc <_dtoa_r+0x99c>
 8006f72:	9b04      	ldr	r3, [sp, #16]
 8006f74:	9301      	str	r3, [sp, #4]
 8006f76:	9b01      	ldr	r3, [sp, #4]
 8006f78:	b963      	cbnz	r3, 8006f94 <_dtoa_r+0x954>
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	2205      	movs	r2, #5
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 fab2 	bl	80074e8 <__multadd>
 8006f84:	4601      	mov	r1, r0
 8006f86:	4606      	mov	r6, r0
 8006f88:	4650      	mov	r0, sl
 8006f8a:	f000 fcc7 	bl	800791c <__mcmp>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	f73f adbb 	bgt.w	8006b0a <_dtoa_r+0x4ca>
 8006f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f96:	9d00      	ldr	r5, [sp, #0]
 8006f98:	ea6f 0b03 	mvn.w	fp, r3
 8006f9c:	f04f 0800 	mov.w	r8, #0
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 fa7e 	bl	80074a4 <_Bfree>
 8006fa8:	2f00      	cmp	r7, #0
 8006faa:	f43f aeab 	beq.w	8006d04 <_dtoa_r+0x6c4>
 8006fae:	f1b8 0f00 	cmp.w	r8, #0
 8006fb2:	d005      	beq.n	8006fc0 <_dtoa_r+0x980>
 8006fb4:	45b8      	cmp	r8, r7
 8006fb6:	d003      	beq.n	8006fc0 <_dtoa_r+0x980>
 8006fb8:	4641      	mov	r1, r8
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f000 fa72 	bl	80074a4 <_Bfree>
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 fa6e 	bl	80074a4 <_Bfree>
 8006fc8:	e69c      	b.n	8006d04 <_dtoa_r+0x6c4>
 8006fca:	2600      	movs	r6, #0
 8006fcc:	4637      	mov	r7, r6
 8006fce:	e7e1      	b.n	8006f94 <_dtoa_r+0x954>
 8006fd0:	46bb      	mov	fp, r7
 8006fd2:	4637      	mov	r7, r6
 8006fd4:	e599      	b.n	8006b0a <_dtoa_r+0x4ca>
 8006fd6:	bf00      	nop
 8006fd8:	40240000 	.word	0x40240000
 8006fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f000 80c8 	beq.w	8007174 <_dtoa_r+0xb34>
 8006fe4:	9b04      	ldr	r3, [sp, #16]
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	2d00      	cmp	r5, #0
 8006fea:	dd05      	ble.n	8006ff8 <_dtoa_r+0x9b8>
 8006fec:	4639      	mov	r1, r7
 8006fee:	462a      	mov	r2, r5
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f000 fc27 	bl	8007844 <__lshift>
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	f1b8 0f00 	cmp.w	r8, #0
 8006ffc:	d05b      	beq.n	80070b6 <_dtoa_r+0xa76>
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	4620      	mov	r0, r4
 8007002:	f000 fa0f 	bl	8007424 <_Balloc>
 8007006:	4605      	mov	r5, r0
 8007008:	b928      	cbnz	r0, 8007016 <_dtoa_r+0x9d6>
 800700a:	4b83      	ldr	r3, [pc, #524]	; (8007218 <_dtoa_r+0xbd8>)
 800700c:	4602      	mov	r2, r0
 800700e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007012:	f7ff bb2e 	b.w	8006672 <_dtoa_r+0x32>
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	3202      	adds	r2, #2
 800701a:	0092      	lsls	r2, r2, #2
 800701c:	f107 010c 	add.w	r1, r7, #12
 8007020:	300c      	adds	r0, #12
 8007022:	f000 ffab 	bl	8007f7c <memcpy>
 8007026:	2201      	movs	r2, #1
 8007028:	4629      	mov	r1, r5
 800702a:	4620      	mov	r0, r4
 800702c:	f000 fc0a 	bl	8007844 <__lshift>
 8007030:	9b00      	ldr	r3, [sp, #0]
 8007032:	3301      	adds	r3, #1
 8007034:	9304      	str	r3, [sp, #16]
 8007036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800703a:	4413      	add	r3, r2
 800703c:	9308      	str	r3, [sp, #32]
 800703e:	9b02      	ldr	r3, [sp, #8]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	46b8      	mov	r8, r7
 8007046:	9306      	str	r3, [sp, #24]
 8007048:	4607      	mov	r7, r0
 800704a:	9b04      	ldr	r3, [sp, #16]
 800704c:	4631      	mov	r1, r6
 800704e:	3b01      	subs	r3, #1
 8007050:	4650      	mov	r0, sl
 8007052:	9301      	str	r3, [sp, #4]
 8007054:	f7ff fa69 	bl	800652a <quorem>
 8007058:	4641      	mov	r1, r8
 800705a:	9002      	str	r0, [sp, #8]
 800705c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007060:	4650      	mov	r0, sl
 8007062:	f000 fc5b 	bl	800791c <__mcmp>
 8007066:	463a      	mov	r2, r7
 8007068:	9005      	str	r0, [sp, #20]
 800706a:	4631      	mov	r1, r6
 800706c:	4620      	mov	r0, r4
 800706e:	f000 fc71 	bl	8007954 <__mdiff>
 8007072:	68c2      	ldr	r2, [r0, #12]
 8007074:	4605      	mov	r5, r0
 8007076:	bb02      	cbnz	r2, 80070ba <_dtoa_r+0xa7a>
 8007078:	4601      	mov	r1, r0
 800707a:	4650      	mov	r0, sl
 800707c:	f000 fc4e 	bl	800791c <__mcmp>
 8007080:	4602      	mov	r2, r0
 8007082:	4629      	mov	r1, r5
 8007084:	4620      	mov	r0, r4
 8007086:	9209      	str	r2, [sp, #36]	; 0x24
 8007088:	f000 fa0c 	bl	80074a4 <_Bfree>
 800708c:	9b07      	ldr	r3, [sp, #28]
 800708e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007090:	9d04      	ldr	r5, [sp, #16]
 8007092:	ea43 0102 	orr.w	r1, r3, r2
 8007096:	9b06      	ldr	r3, [sp, #24]
 8007098:	4319      	orrs	r1, r3
 800709a:	d110      	bne.n	80070be <_dtoa_r+0xa7e>
 800709c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070a0:	d029      	beq.n	80070f6 <_dtoa_r+0xab6>
 80070a2:	9b05      	ldr	r3, [sp, #20]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	dd02      	ble.n	80070ae <_dtoa_r+0xa6e>
 80070a8:	9b02      	ldr	r3, [sp, #8]
 80070aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80070ae:	9b01      	ldr	r3, [sp, #4]
 80070b0:	f883 9000 	strb.w	r9, [r3]
 80070b4:	e774      	b.n	8006fa0 <_dtoa_r+0x960>
 80070b6:	4638      	mov	r0, r7
 80070b8:	e7ba      	b.n	8007030 <_dtoa_r+0x9f0>
 80070ba:	2201      	movs	r2, #1
 80070bc:	e7e1      	b.n	8007082 <_dtoa_r+0xa42>
 80070be:	9b05      	ldr	r3, [sp, #20]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	db04      	blt.n	80070ce <_dtoa_r+0xa8e>
 80070c4:	9907      	ldr	r1, [sp, #28]
 80070c6:	430b      	orrs	r3, r1
 80070c8:	9906      	ldr	r1, [sp, #24]
 80070ca:	430b      	orrs	r3, r1
 80070cc:	d120      	bne.n	8007110 <_dtoa_r+0xad0>
 80070ce:	2a00      	cmp	r2, #0
 80070d0:	dded      	ble.n	80070ae <_dtoa_r+0xa6e>
 80070d2:	4651      	mov	r1, sl
 80070d4:	2201      	movs	r2, #1
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 fbb4 	bl	8007844 <__lshift>
 80070dc:	4631      	mov	r1, r6
 80070de:	4682      	mov	sl, r0
 80070e0:	f000 fc1c 	bl	800791c <__mcmp>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	dc03      	bgt.n	80070f0 <_dtoa_r+0xab0>
 80070e8:	d1e1      	bne.n	80070ae <_dtoa_r+0xa6e>
 80070ea:	f019 0f01 	tst.w	r9, #1
 80070ee:	d0de      	beq.n	80070ae <_dtoa_r+0xa6e>
 80070f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070f4:	d1d8      	bne.n	80070a8 <_dtoa_r+0xa68>
 80070f6:	9a01      	ldr	r2, [sp, #4]
 80070f8:	2339      	movs	r3, #57	; 0x39
 80070fa:	7013      	strb	r3, [r2, #0]
 80070fc:	462b      	mov	r3, r5
 80070fe:	461d      	mov	r5, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007106:	2a39      	cmp	r2, #57	; 0x39
 8007108:	d06c      	beq.n	80071e4 <_dtoa_r+0xba4>
 800710a:	3201      	adds	r2, #1
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	e747      	b.n	8006fa0 <_dtoa_r+0x960>
 8007110:	2a00      	cmp	r2, #0
 8007112:	dd07      	ble.n	8007124 <_dtoa_r+0xae4>
 8007114:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007118:	d0ed      	beq.n	80070f6 <_dtoa_r+0xab6>
 800711a:	9a01      	ldr	r2, [sp, #4]
 800711c:	f109 0301 	add.w	r3, r9, #1
 8007120:	7013      	strb	r3, [r2, #0]
 8007122:	e73d      	b.n	8006fa0 <_dtoa_r+0x960>
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	9a08      	ldr	r2, [sp, #32]
 8007128:	f803 9c01 	strb.w	r9, [r3, #-1]
 800712c:	4293      	cmp	r3, r2
 800712e:	d043      	beq.n	80071b8 <_dtoa_r+0xb78>
 8007130:	4651      	mov	r1, sl
 8007132:	2300      	movs	r3, #0
 8007134:	220a      	movs	r2, #10
 8007136:	4620      	mov	r0, r4
 8007138:	f000 f9d6 	bl	80074e8 <__multadd>
 800713c:	45b8      	cmp	r8, r7
 800713e:	4682      	mov	sl, r0
 8007140:	f04f 0300 	mov.w	r3, #0
 8007144:	f04f 020a 	mov.w	r2, #10
 8007148:	4641      	mov	r1, r8
 800714a:	4620      	mov	r0, r4
 800714c:	d107      	bne.n	800715e <_dtoa_r+0xb1e>
 800714e:	f000 f9cb 	bl	80074e8 <__multadd>
 8007152:	4680      	mov	r8, r0
 8007154:	4607      	mov	r7, r0
 8007156:	9b04      	ldr	r3, [sp, #16]
 8007158:	3301      	adds	r3, #1
 800715a:	9304      	str	r3, [sp, #16]
 800715c:	e775      	b.n	800704a <_dtoa_r+0xa0a>
 800715e:	f000 f9c3 	bl	80074e8 <__multadd>
 8007162:	4639      	mov	r1, r7
 8007164:	4680      	mov	r8, r0
 8007166:	2300      	movs	r3, #0
 8007168:	220a      	movs	r2, #10
 800716a:	4620      	mov	r0, r4
 800716c:	f000 f9bc 	bl	80074e8 <__multadd>
 8007170:	4607      	mov	r7, r0
 8007172:	e7f0      	b.n	8007156 <_dtoa_r+0xb16>
 8007174:	9b04      	ldr	r3, [sp, #16]
 8007176:	9301      	str	r3, [sp, #4]
 8007178:	9d00      	ldr	r5, [sp, #0]
 800717a:	4631      	mov	r1, r6
 800717c:	4650      	mov	r0, sl
 800717e:	f7ff f9d4 	bl	800652a <quorem>
 8007182:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007186:	9b00      	ldr	r3, [sp, #0]
 8007188:	f805 9b01 	strb.w	r9, [r5], #1
 800718c:	1aea      	subs	r2, r5, r3
 800718e:	9b01      	ldr	r3, [sp, #4]
 8007190:	4293      	cmp	r3, r2
 8007192:	dd07      	ble.n	80071a4 <_dtoa_r+0xb64>
 8007194:	4651      	mov	r1, sl
 8007196:	2300      	movs	r3, #0
 8007198:	220a      	movs	r2, #10
 800719a:	4620      	mov	r0, r4
 800719c:	f000 f9a4 	bl	80074e8 <__multadd>
 80071a0:	4682      	mov	sl, r0
 80071a2:	e7ea      	b.n	800717a <_dtoa_r+0xb3a>
 80071a4:	9b01      	ldr	r3, [sp, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	bfc8      	it	gt
 80071aa:	461d      	movgt	r5, r3
 80071ac:	9b00      	ldr	r3, [sp, #0]
 80071ae:	bfd8      	it	le
 80071b0:	2501      	movle	r5, #1
 80071b2:	441d      	add	r5, r3
 80071b4:	f04f 0800 	mov.w	r8, #0
 80071b8:	4651      	mov	r1, sl
 80071ba:	2201      	movs	r2, #1
 80071bc:	4620      	mov	r0, r4
 80071be:	f000 fb41 	bl	8007844 <__lshift>
 80071c2:	4631      	mov	r1, r6
 80071c4:	4682      	mov	sl, r0
 80071c6:	f000 fba9 	bl	800791c <__mcmp>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	dc96      	bgt.n	80070fc <_dtoa_r+0xabc>
 80071ce:	d102      	bne.n	80071d6 <_dtoa_r+0xb96>
 80071d0:	f019 0f01 	tst.w	r9, #1
 80071d4:	d192      	bne.n	80070fc <_dtoa_r+0xabc>
 80071d6:	462b      	mov	r3, r5
 80071d8:	461d      	mov	r5, r3
 80071da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071de:	2a30      	cmp	r2, #48	; 0x30
 80071e0:	d0fa      	beq.n	80071d8 <_dtoa_r+0xb98>
 80071e2:	e6dd      	b.n	8006fa0 <_dtoa_r+0x960>
 80071e4:	9a00      	ldr	r2, [sp, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d189      	bne.n	80070fe <_dtoa_r+0xabe>
 80071ea:	f10b 0b01 	add.w	fp, fp, #1
 80071ee:	2331      	movs	r3, #49	; 0x31
 80071f0:	e796      	b.n	8007120 <_dtoa_r+0xae0>
 80071f2:	4b0a      	ldr	r3, [pc, #40]	; (800721c <_dtoa_r+0xbdc>)
 80071f4:	f7ff ba99 	b.w	800672a <_dtoa_r+0xea>
 80071f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f47f aa6d 	bne.w	80066da <_dtoa_r+0x9a>
 8007200:	4b07      	ldr	r3, [pc, #28]	; (8007220 <_dtoa_r+0xbe0>)
 8007202:	f7ff ba92 	b.w	800672a <_dtoa_r+0xea>
 8007206:	9b01      	ldr	r3, [sp, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	dcb5      	bgt.n	8007178 <_dtoa_r+0xb38>
 800720c:	9b07      	ldr	r3, [sp, #28]
 800720e:	2b02      	cmp	r3, #2
 8007210:	f73f aeb1 	bgt.w	8006f76 <_dtoa_r+0x936>
 8007214:	e7b0      	b.n	8007178 <_dtoa_r+0xb38>
 8007216:	bf00      	nop
 8007218:	080087c4 	.word	0x080087c4
 800721c:	08008724 	.word	0x08008724
 8007220:	08008748 	.word	0x08008748

08007224 <_free_r>:
 8007224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007226:	2900      	cmp	r1, #0
 8007228:	d044      	beq.n	80072b4 <_free_r+0x90>
 800722a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800722e:	9001      	str	r0, [sp, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	f1a1 0404 	sub.w	r4, r1, #4
 8007236:	bfb8      	it	lt
 8007238:	18e4      	addlt	r4, r4, r3
 800723a:	f000 f8e7 	bl	800740c <__malloc_lock>
 800723e:	4a1e      	ldr	r2, [pc, #120]	; (80072b8 <_free_r+0x94>)
 8007240:	9801      	ldr	r0, [sp, #4]
 8007242:	6813      	ldr	r3, [r2, #0]
 8007244:	b933      	cbnz	r3, 8007254 <_free_r+0x30>
 8007246:	6063      	str	r3, [r4, #4]
 8007248:	6014      	str	r4, [r2, #0]
 800724a:	b003      	add	sp, #12
 800724c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007250:	f000 b8e2 	b.w	8007418 <__malloc_unlock>
 8007254:	42a3      	cmp	r3, r4
 8007256:	d908      	bls.n	800726a <_free_r+0x46>
 8007258:	6825      	ldr	r5, [r4, #0]
 800725a:	1961      	adds	r1, r4, r5
 800725c:	428b      	cmp	r3, r1
 800725e:	bf01      	itttt	eq
 8007260:	6819      	ldreq	r1, [r3, #0]
 8007262:	685b      	ldreq	r3, [r3, #4]
 8007264:	1949      	addeq	r1, r1, r5
 8007266:	6021      	streq	r1, [r4, #0]
 8007268:	e7ed      	b.n	8007246 <_free_r+0x22>
 800726a:	461a      	mov	r2, r3
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	b10b      	cbz	r3, 8007274 <_free_r+0x50>
 8007270:	42a3      	cmp	r3, r4
 8007272:	d9fa      	bls.n	800726a <_free_r+0x46>
 8007274:	6811      	ldr	r1, [r2, #0]
 8007276:	1855      	adds	r5, r2, r1
 8007278:	42a5      	cmp	r5, r4
 800727a:	d10b      	bne.n	8007294 <_free_r+0x70>
 800727c:	6824      	ldr	r4, [r4, #0]
 800727e:	4421      	add	r1, r4
 8007280:	1854      	adds	r4, r2, r1
 8007282:	42a3      	cmp	r3, r4
 8007284:	6011      	str	r1, [r2, #0]
 8007286:	d1e0      	bne.n	800724a <_free_r+0x26>
 8007288:	681c      	ldr	r4, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	6053      	str	r3, [r2, #4]
 800728e:	440c      	add	r4, r1
 8007290:	6014      	str	r4, [r2, #0]
 8007292:	e7da      	b.n	800724a <_free_r+0x26>
 8007294:	d902      	bls.n	800729c <_free_r+0x78>
 8007296:	230c      	movs	r3, #12
 8007298:	6003      	str	r3, [r0, #0]
 800729a:	e7d6      	b.n	800724a <_free_r+0x26>
 800729c:	6825      	ldr	r5, [r4, #0]
 800729e:	1961      	adds	r1, r4, r5
 80072a0:	428b      	cmp	r3, r1
 80072a2:	bf04      	itt	eq
 80072a4:	6819      	ldreq	r1, [r3, #0]
 80072a6:	685b      	ldreq	r3, [r3, #4]
 80072a8:	6063      	str	r3, [r4, #4]
 80072aa:	bf04      	itt	eq
 80072ac:	1949      	addeq	r1, r1, r5
 80072ae:	6021      	streq	r1, [r4, #0]
 80072b0:	6054      	str	r4, [r2, #4]
 80072b2:	e7ca      	b.n	800724a <_free_r+0x26>
 80072b4:	b003      	add	sp, #12
 80072b6:	bd30      	pop	{r4, r5, pc}
 80072b8:	20000894 	.word	0x20000894

080072bc <malloc>:
 80072bc:	4b02      	ldr	r3, [pc, #8]	; (80072c8 <malloc+0xc>)
 80072be:	4601      	mov	r1, r0
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	f000 b823 	b.w	800730c <_malloc_r>
 80072c6:	bf00      	nop
 80072c8:	2000008c 	.word	0x2000008c

080072cc <sbrk_aligned>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	4e0e      	ldr	r6, [pc, #56]	; (8007308 <sbrk_aligned+0x3c>)
 80072d0:	460c      	mov	r4, r1
 80072d2:	6831      	ldr	r1, [r6, #0]
 80072d4:	4605      	mov	r5, r0
 80072d6:	b911      	cbnz	r1, 80072de <sbrk_aligned+0x12>
 80072d8:	f000 fe40 	bl	8007f5c <_sbrk_r>
 80072dc:	6030      	str	r0, [r6, #0]
 80072de:	4621      	mov	r1, r4
 80072e0:	4628      	mov	r0, r5
 80072e2:	f000 fe3b 	bl	8007f5c <_sbrk_r>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d00a      	beq.n	8007300 <sbrk_aligned+0x34>
 80072ea:	1cc4      	adds	r4, r0, #3
 80072ec:	f024 0403 	bic.w	r4, r4, #3
 80072f0:	42a0      	cmp	r0, r4
 80072f2:	d007      	beq.n	8007304 <sbrk_aligned+0x38>
 80072f4:	1a21      	subs	r1, r4, r0
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 fe30 	bl	8007f5c <_sbrk_r>
 80072fc:	3001      	adds	r0, #1
 80072fe:	d101      	bne.n	8007304 <sbrk_aligned+0x38>
 8007300:	f04f 34ff 	mov.w	r4, #4294967295
 8007304:	4620      	mov	r0, r4
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	20000898 	.word	0x20000898

0800730c <_malloc_r>:
 800730c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007310:	1ccd      	adds	r5, r1, #3
 8007312:	f025 0503 	bic.w	r5, r5, #3
 8007316:	3508      	adds	r5, #8
 8007318:	2d0c      	cmp	r5, #12
 800731a:	bf38      	it	cc
 800731c:	250c      	movcc	r5, #12
 800731e:	2d00      	cmp	r5, #0
 8007320:	4607      	mov	r7, r0
 8007322:	db01      	blt.n	8007328 <_malloc_r+0x1c>
 8007324:	42a9      	cmp	r1, r5
 8007326:	d905      	bls.n	8007334 <_malloc_r+0x28>
 8007328:	230c      	movs	r3, #12
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	2600      	movs	r6, #0
 800732e:	4630      	mov	r0, r6
 8007330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007334:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007408 <_malloc_r+0xfc>
 8007338:	f000 f868 	bl	800740c <__malloc_lock>
 800733c:	f8d8 3000 	ldr.w	r3, [r8]
 8007340:	461c      	mov	r4, r3
 8007342:	bb5c      	cbnz	r4, 800739c <_malloc_r+0x90>
 8007344:	4629      	mov	r1, r5
 8007346:	4638      	mov	r0, r7
 8007348:	f7ff ffc0 	bl	80072cc <sbrk_aligned>
 800734c:	1c43      	adds	r3, r0, #1
 800734e:	4604      	mov	r4, r0
 8007350:	d155      	bne.n	80073fe <_malloc_r+0xf2>
 8007352:	f8d8 4000 	ldr.w	r4, [r8]
 8007356:	4626      	mov	r6, r4
 8007358:	2e00      	cmp	r6, #0
 800735a:	d145      	bne.n	80073e8 <_malloc_r+0xdc>
 800735c:	2c00      	cmp	r4, #0
 800735e:	d048      	beq.n	80073f2 <_malloc_r+0xe6>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	4631      	mov	r1, r6
 8007364:	4638      	mov	r0, r7
 8007366:	eb04 0903 	add.w	r9, r4, r3
 800736a:	f000 fdf7 	bl	8007f5c <_sbrk_r>
 800736e:	4581      	cmp	r9, r0
 8007370:	d13f      	bne.n	80073f2 <_malloc_r+0xe6>
 8007372:	6821      	ldr	r1, [r4, #0]
 8007374:	1a6d      	subs	r5, r5, r1
 8007376:	4629      	mov	r1, r5
 8007378:	4638      	mov	r0, r7
 800737a:	f7ff ffa7 	bl	80072cc <sbrk_aligned>
 800737e:	3001      	adds	r0, #1
 8007380:	d037      	beq.n	80073f2 <_malloc_r+0xe6>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	442b      	add	r3, r5
 8007386:	6023      	str	r3, [r4, #0]
 8007388:	f8d8 3000 	ldr.w	r3, [r8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d038      	beq.n	8007402 <_malloc_r+0xf6>
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	42a2      	cmp	r2, r4
 8007394:	d12b      	bne.n	80073ee <_malloc_r+0xe2>
 8007396:	2200      	movs	r2, #0
 8007398:	605a      	str	r2, [r3, #4]
 800739a:	e00f      	b.n	80073bc <_malloc_r+0xb0>
 800739c:	6822      	ldr	r2, [r4, #0]
 800739e:	1b52      	subs	r2, r2, r5
 80073a0:	d41f      	bmi.n	80073e2 <_malloc_r+0xd6>
 80073a2:	2a0b      	cmp	r2, #11
 80073a4:	d917      	bls.n	80073d6 <_malloc_r+0xca>
 80073a6:	1961      	adds	r1, r4, r5
 80073a8:	42a3      	cmp	r3, r4
 80073aa:	6025      	str	r5, [r4, #0]
 80073ac:	bf18      	it	ne
 80073ae:	6059      	strne	r1, [r3, #4]
 80073b0:	6863      	ldr	r3, [r4, #4]
 80073b2:	bf08      	it	eq
 80073b4:	f8c8 1000 	streq.w	r1, [r8]
 80073b8:	5162      	str	r2, [r4, r5]
 80073ba:	604b      	str	r3, [r1, #4]
 80073bc:	4638      	mov	r0, r7
 80073be:	f104 060b 	add.w	r6, r4, #11
 80073c2:	f000 f829 	bl	8007418 <__malloc_unlock>
 80073c6:	f026 0607 	bic.w	r6, r6, #7
 80073ca:	1d23      	adds	r3, r4, #4
 80073cc:	1af2      	subs	r2, r6, r3
 80073ce:	d0ae      	beq.n	800732e <_malloc_r+0x22>
 80073d0:	1b9b      	subs	r3, r3, r6
 80073d2:	50a3      	str	r3, [r4, r2]
 80073d4:	e7ab      	b.n	800732e <_malloc_r+0x22>
 80073d6:	42a3      	cmp	r3, r4
 80073d8:	6862      	ldr	r2, [r4, #4]
 80073da:	d1dd      	bne.n	8007398 <_malloc_r+0x8c>
 80073dc:	f8c8 2000 	str.w	r2, [r8]
 80073e0:	e7ec      	b.n	80073bc <_malloc_r+0xb0>
 80073e2:	4623      	mov	r3, r4
 80073e4:	6864      	ldr	r4, [r4, #4]
 80073e6:	e7ac      	b.n	8007342 <_malloc_r+0x36>
 80073e8:	4634      	mov	r4, r6
 80073ea:	6876      	ldr	r6, [r6, #4]
 80073ec:	e7b4      	b.n	8007358 <_malloc_r+0x4c>
 80073ee:	4613      	mov	r3, r2
 80073f0:	e7cc      	b.n	800738c <_malloc_r+0x80>
 80073f2:	230c      	movs	r3, #12
 80073f4:	603b      	str	r3, [r7, #0]
 80073f6:	4638      	mov	r0, r7
 80073f8:	f000 f80e 	bl	8007418 <__malloc_unlock>
 80073fc:	e797      	b.n	800732e <_malloc_r+0x22>
 80073fe:	6025      	str	r5, [r4, #0]
 8007400:	e7dc      	b.n	80073bc <_malloc_r+0xb0>
 8007402:	605b      	str	r3, [r3, #4]
 8007404:	deff      	udf	#255	; 0xff
 8007406:	bf00      	nop
 8007408:	20000894 	.word	0x20000894

0800740c <__malloc_lock>:
 800740c:	4801      	ldr	r0, [pc, #4]	; (8007414 <__malloc_lock+0x8>)
 800740e:	f7ff b88a 	b.w	8006526 <__retarget_lock_acquire_recursive>
 8007412:	bf00      	nop
 8007414:	20000890 	.word	0x20000890

08007418 <__malloc_unlock>:
 8007418:	4801      	ldr	r0, [pc, #4]	; (8007420 <__malloc_unlock+0x8>)
 800741a:	f7ff b885 	b.w	8006528 <__retarget_lock_release_recursive>
 800741e:	bf00      	nop
 8007420:	20000890 	.word	0x20000890

08007424 <_Balloc>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	69c6      	ldr	r6, [r0, #28]
 8007428:	4604      	mov	r4, r0
 800742a:	460d      	mov	r5, r1
 800742c:	b976      	cbnz	r6, 800744c <_Balloc+0x28>
 800742e:	2010      	movs	r0, #16
 8007430:	f7ff ff44 	bl	80072bc <malloc>
 8007434:	4602      	mov	r2, r0
 8007436:	61e0      	str	r0, [r4, #28]
 8007438:	b920      	cbnz	r0, 8007444 <_Balloc+0x20>
 800743a:	4b18      	ldr	r3, [pc, #96]	; (800749c <_Balloc+0x78>)
 800743c:	4818      	ldr	r0, [pc, #96]	; (80074a0 <_Balloc+0x7c>)
 800743e:	216b      	movs	r1, #107	; 0x6b
 8007440:	f000 fdaa 	bl	8007f98 <__assert_func>
 8007444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007448:	6006      	str	r6, [r0, #0]
 800744a:	60c6      	str	r6, [r0, #12]
 800744c:	69e6      	ldr	r6, [r4, #28]
 800744e:	68f3      	ldr	r3, [r6, #12]
 8007450:	b183      	cbz	r3, 8007474 <_Balloc+0x50>
 8007452:	69e3      	ldr	r3, [r4, #28]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800745a:	b9b8      	cbnz	r0, 800748c <_Balloc+0x68>
 800745c:	2101      	movs	r1, #1
 800745e:	fa01 f605 	lsl.w	r6, r1, r5
 8007462:	1d72      	adds	r2, r6, #5
 8007464:	0092      	lsls	r2, r2, #2
 8007466:	4620      	mov	r0, r4
 8007468:	f000 fdb4 	bl	8007fd4 <_calloc_r>
 800746c:	b160      	cbz	r0, 8007488 <_Balloc+0x64>
 800746e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007472:	e00e      	b.n	8007492 <_Balloc+0x6e>
 8007474:	2221      	movs	r2, #33	; 0x21
 8007476:	2104      	movs	r1, #4
 8007478:	4620      	mov	r0, r4
 800747a:	f000 fdab 	bl	8007fd4 <_calloc_r>
 800747e:	69e3      	ldr	r3, [r4, #28]
 8007480:	60f0      	str	r0, [r6, #12]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e4      	bne.n	8007452 <_Balloc+0x2e>
 8007488:	2000      	movs	r0, #0
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	6802      	ldr	r2, [r0, #0]
 800748e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007492:	2300      	movs	r3, #0
 8007494:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007498:	e7f7      	b.n	800748a <_Balloc+0x66>
 800749a:	bf00      	nop
 800749c:	08008755 	.word	0x08008755
 80074a0:	080087d5 	.word	0x080087d5

080074a4 <_Bfree>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	69c6      	ldr	r6, [r0, #28]
 80074a8:	4605      	mov	r5, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	b976      	cbnz	r6, 80074cc <_Bfree+0x28>
 80074ae:	2010      	movs	r0, #16
 80074b0:	f7ff ff04 	bl	80072bc <malloc>
 80074b4:	4602      	mov	r2, r0
 80074b6:	61e8      	str	r0, [r5, #28]
 80074b8:	b920      	cbnz	r0, 80074c4 <_Bfree+0x20>
 80074ba:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <_Bfree+0x3c>)
 80074bc:	4809      	ldr	r0, [pc, #36]	; (80074e4 <_Bfree+0x40>)
 80074be:	218f      	movs	r1, #143	; 0x8f
 80074c0:	f000 fd6a 	bl	8007f98 <__assert_func>
 80074c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074c8:	6006      	str	r6, [r0, #0]
 80074ca:	60c6      	str	r6, [r0, #12]
 80074cc:	b13c      	cbz	r4, 80074de <_Bfree+0x3a>
 80074ce:	69eb      	ldr	r3, [r5, #28]
 80074d0:	6862      	ldr	r2, [r4, #4]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074d8:	6021      	str	r1, [r4, #0]
 80074da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	08008755 	.word	0x08008755
 80074e4:	080087d5 	.word	0x080087d5

080074e8 <__multadd>:
 80074e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ec:	690d      	ldr	r5, [r1, #16]
 80074ee:	4607      	mov	r7, r0
 80074f0:	460c      	mov	r4, r1
 80074f2:	461e      	mov	r6, r3
 80074f4:	f101 0c14 	add.w	ip, r1, #20
 80074f8:	2000      	movs	r0, #0
 80074fa:	f8dc 3000 	ldr.w	r3, [ip]
 80074fe:	b299      	uxth	r1, r3
 8007500:	fb02 6101 	mla	r1, r2, r1, r6
 8007504:	0c1e      	lsrs	r6, r3, #16
 8007506:	0c0b      	lsrs	r3, r1, #16
 8007508:	fb02 3306 	mla	r3, r2, r6, r3
 800750c:	b289      	uxth	r1, r1
 800750e:	3001      	adds	r0, #1
 8007510:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007514:	4285      	cmp	r5, r0
 8007516:	f84c 1b04 	str.w	r1, [ip], #4
 800751a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800751e:	dcec      	bgt.n	80074fa <__multadd+0x12>
 8007520:	b30e      	cbz	r6, 8007566 <__multadd+0x7e>
 8007522:	68a3      	ldr	r3, [r4, #8]
 8007524:	42ab      	cmp	r3, r5
 8007526:	dc19      	bgt.n	800755c <__multadd+0x74>
 8007528:	6861      	ldr	r1, [r4, #4]
 800752a:	4638      	mov	r0, r7
 800752c:	3101      	adds	r1, #1
 800752e:	f7ff ff79 	bl	8007424 <_Balloc>
 8007532:	4680      	mov	r8, r0
 8007534:	b928      	cbnz	r0, 8007542 <__multadd+0x5a>
 8007536:	4602      	mov	r2, r0
 8007538:	4b0c      	ldr	r3, [pc, #48]	; (800756c <__multadd+0x84>)
 800753a:	480d      	ldr	r0, [pc, #52]	; (8007570 <__multadd+0x88>)
 800753c:	21ba      	movs	r1, #186	; 0xba
 800753e:	f000 fd2b 	bl	8007f98 <__assert_func>
 8007542:	6922      	ldr	r2, [r4, #16]
 8007544:	3202      	adds	r2, #2
 8007546:	f104 010c 	add.w	r1, r4, #12
 800754a:	0092      	lsls	r2, r2, #2
 800754c:	300c      	adds	r0, #12
 800754e:	f000 fd15 	bl	8007f7c <memcpy>
 8007552:	4621      	mov	r1, r4
 8007554:	4638      	mov	r0, r7
 8007556:	f7ff ffa5 	bl	80074a4 <_Bfree>
 800755a:	4644      	mov	r4, r8
 800755c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007560:	3501      	adds	r5, #1
 8007562:	615e      	str	r6, [r3, #20]
 8007564:	6125      	str	r5, [r4, #16]
 8007566:	4620      	mov	r0, r4
 8007568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800756c:	080087c4 	.word	0x080087c4
 8007570:	080087d5 	.word	0x080087d5

08007574 <__hi0bits>:
 8007574:	0c03      	lsrs	r3, r0, #16
 8007576:	041b      	lsls	r3, r3, #16
 8007578:	b9d3      	cbnz	r3, 80075b0 <__hi0bits+0x3c>
 800757a:	0400      	lsls	r0, r0, #16
 800757c:	2310      	movs	r3, #16
 800757e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007582:	bf04      	itt	eq
 8007584:	0200      	lsleq	r0, r0, #8
 8007586:	3308      	addeq	r3, #8
 8007588:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800758c:	bf04      	itt	eq
 800758e:	0100      	lsleq	r0, r0, #4
 8007590:	3304      	addeq	r3, #4
 8007592:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007596:	bf04      	itt	eq
 8007598:	0080      	lsleq	r0, r0, #2
 800759a:	3302      	addeq	r3, #2
 800759c:	2800      	cmp	r0, #0
 800759e:	db05      	blt.n	80075ac <__hi0bits+0x38>
 80075a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80075a4:	f103 0301 	add.w	r3, r3, #1
 80075a8:	bf08      	it	eq
 80075aa:	2320      	moveq	r3, #32
 80075ac:	4618      	mov	r0, r3
 80075ae:	4770      	bx	lr
 80075b0:	2300      	movs	r3, #0
 80075b2:	e7e4      	b.n	800757e <__hi0bits+0xa>

080075b4 <__lo0bits>:
 80075b4:	6803      	ldr	r3, [r0, #0]
 80075b6:	f013 0207 	ands.w	r2, r3, #7
 80075ba:	d00c      	beq.n	80075d6 <__lo0bits+0x22>
 80075bc:	07d9      	lsls	r1, r3, #31
 80075be:	d422      	bmi.n	8007606 <__lo0bits+0x52>
 80075c0:	079a      	lsls	r2, r3, #30
 80075c2:	bf49      	itett	mi
 80075c4:	085b      	lsrmi	r3, r3, #1
 80075c6:	089b      	lsrpl	r3, r3, #2
 80075c8:	6003      	strmi	r3, [r0, #0]
 80075ca:	2201      	movmi	r2, #1
 80075cc:	bf5c      	itt	pl
 80075ce:	6003      	strpl	r3, [r0, #0]
 80075d0:	2202      	movpl	r2, #2
 80075d2:	4610      	mov	r0, r2
 80075d4:	4770      	bx	lr
 80075d6:	b299      	uxth	r1, r3
 80075d8:	b909      	cbnz	r1, 80075de <__lo0bits+0x2a>
 80075da:	0c1b      	lsrs	r3, r3, #16
 80075dc:	2210      	movs	r2, #16
 80075de:	b2d9      	uxtb	r1, r3
 80075e0:	b909      	cbnz	r1, 80075e6 <__lo0bits+0x32>
 80075e2:	3208      	adds	r2, #8
 80075e4:	0a1b      	lsrs	r3, r3, #8
 80075e6:	0719      	lsls	r1, r3, #28
 80075e8:	bf04      	itt	eq
 80075ea:	091b      	lsreq	r3, r3, #4
 80075ec:	3204      	addeq	r2, #4
 80075ee:	0799      	lsls	r1, r3, #30
 80075f0:	bf04      	itt	eq
 80075f2:	089b      	lsreq	r3, r3, #2
 80075f4:	3202      	addeq	r2, #2
 80075f6:	07d9      	lsls	r1, r3, #31
 80075f8:	d403      	bmi.n	8007602 <__lo0bits+0x4e>
 80075fa:	085b      	lsrs	r3, r3, #1
 80075fc:	f102 0201 	add.w	r2, r2, #1
 8007600:	d003      	beq.n	800760a <__lo0bits+0x56>
 8007602:	6003      	str	r3, [r0, #0]
 8007604:	e7e5      	b.n	80075d2 <__lo0bits+0x1e>
 8007606:	2200      	movs	r2, #0
 8007608:	e7e3      	b.n	80075d2 <__lo0bits+0x1e>
 800760a:	2220      	movs	r2, #32
 800760c:	e7e1      	b.n	80075d2 <__lo0bits+0x1e>
	...

08007610 <__i2b>:
 8007610:	b510      	push	{r4, lr}
 8007612:	460c      	mov	r4, r1
 8007614:	2101      	movs	r1, #1
 8007616:	f7ff ff05 	bl	8007424 <_Balloc>
 800761a:	4602      	mov	r2, r0
 800761c:	b928      	cbnz	r0, 800762a <__i2b+0x1a>
 800761e:	4b05      	ldr	r3, [pc, #20]	; (8007634 <__i2b+0x24>)
 8007620:	4805      	ldr	r0, [pc, #20]	; (8007638 <__i2b+0x28>)
 8007622:	f240 1145 	movw	r1, #325	; 0x145
 8007626:	f000 fcb7 	bl	8007f98 <__assert_func>
 800762a:	2301      	movs	r3, #1
 800762c:	6144      	str	r4, [r0, #20]
 800762e:	6103      	str	r3, [r0, #16]
 8007630:	bd10      	pop	{r4, pc}
 8007632:	bf00      	nop
 8007634:	080087c4 	.word	0x080087c4
 8007638:	080087d5 	.word	0x080087d5

0800763c <__multiply>:
 800763c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007640:	4691      	mov	r9, r2
 8007642:	690a      	ldr	r2, [r1, #16]
 8007644:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007648:	429a      	cmp	r2, r3
 800764a:	bfb8      	it	lt
 800764c:	460b      	movlt	r3, r1
 800764e:	460c      	mov	r4, r1
 8007650:	bfbc      	itt	lt
 8007652:	464c      	movlt	r4, r9
 8007654:	4699      	movlt	r9, r3
 8007656:	6927      	ldr	r7, [r4, #16]
 8007658:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800765c:	68a3      	ldr	r3, [r4, #8]
 800765e:	6861      	ldr	r1, [r4, #4]
 8007660:	eb07 060a 	add.w	r6, r7, sl
 8007664:	42b3      	cmp	r3, r6
 8007666:	b085      	sub	sp, #20
 8007668:	bfb8      	it	lt
 800766a:	3101      	addlt	r1, #1
 800766c:	f7ff feda 	bl	8007424 <_Balloc>
 8007670:	b930      	cbnz	r0, 8007680 <__multiply+0x44>
 8007672:	4602      	mov	r2, r0
 8007674:	4b44      	ldr	r3, [pc, #272]	; (8007788 <__multiply+0x14c>)
 8007676:	4845      	ldr	r0, [pc, #276]	; (800778c <__multiply+0x150>)
 8007678:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800767c:	f000 fc8c 	bl	8007f98 <__assert_func>
 8007680:	f100 0514 	add.w	r5, r0, #20
 8007684:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007688:	462b      	mov	r3, r5
 800768a:	2200      	movs	r2, #0
 800768c:	4543      	cmp	r3, r8
 800768e:	d321      	bcc.n	80076d4 <__multiply+0x98>
 8007690:	f104 0314 	add.w	r3, r4, #20
 8007694:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007698:	f109 0314 	add.w	r3, r9, #20
 800769c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80076a0:	9202      	str	r2, [sp, #8]
 80076a2:	1b3a      	subs	r2, r7, r4
 80076a4:	3a15      	subs	r2, #21
 80076a6:	f022 0203 	bic.w	r2, r2, #3
 80076aa:	3204      	adds	r2, #4
 80076ac:	f104 0115 	add.w	r1, r4, #21
 80076b0:	428f      	cmp	r7, r1
 80076b2:	bf38      	it	cc
 80076b4:	2204      	movcc	r2, #4
 80076b6:	9201      	str	r2, [sp, #4]
 80076b8:	9a02      	ldr	r2, [sp, #8]
 80076ba:	9303      	str	r3, [sp, #12]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d80c      	bhi.n	80076da <__multiply+0x9e>
 80076c0:	2e00      	cmp	r6, #0
 80076c2:	dd03      	ble.n	80076cc <__multiply+0x90>
 80076c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d05b      	beq.n	8007784 <__multiply+0x148>
 80076cc:	6106      	str	r6, [r0, #16]
 80076ce:	b005      	add	sp, #20
 80076d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d4:	f843 2b04 	str.w	r2, [r3], #4
 80076d8:	e7d8      	b.n	800768c <__multiply+0x50>
 80076da:	f8b3 a000 	ldrh.w	sl, [r3]
 80076de:	f1ba 0f00 	cmp.w	sl, #0
 80076e2:	d024      	beq.n	800772e <__multiply+0xf2>
 80076e4:	f104 0e14 	add.w	lr, r4, #20
 80076e8:	46a9      	mov	r9, r5
 80076ea:	f04f 0c00 	mov.w	ip, #0
 80076ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80076f2:	f8d9 1000 	ldr.w	r1, [r9]
 80076f6:	fa1f fb82 	uxth.w	fp, r2
 80076fa:	b289      	uxth	r1, r1
 80076fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007700:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007704:	f8d9 2000 	ldr.w	r2, [r9]
 8007708:	4461      	add	r1, ip
 800770a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800770e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007712:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007716:	b289      	uxth	r1, r1
 8007718:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800771c:	4577      	cmp	r7, lr
 800771e:	f849 1b04 	str.w	r1, [r9], #4
 8007722:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007726:	d8e2      	bhi.n	80076ee <__multiply+0xb2>
 8007728:	9a01      	ldr	r2, [sp, #4]
 800772a:	f845 c002 	str.w	ip, [r5, r2]
 800772e:	9a03      	ldr	r2, [sp, #12]
 8007730:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007734:	3304      	adds	r3, #4
 8007736:	f1b9 0f00 	cmp.w	r9, #0
 800773a:	d021      	beq.n	8007780 <__multiply+0x144>
 800773c:	6829      	ldr	r1, [r5, #0]
 800773e:	f104 0c14 	add.w	ip, r4, #20
 8007742:	46ae      	mov	lr, r5
 8007744:	f04f 0a00 	mov.w	sl, #0
 8007748:	f8bc b000 	ldrh.w	fp, [ip]
 800774c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007750:	fb09 220b 	mla	r2, r9, fp, r2
 8007754:	4452      	add	r2, sl
 8007756:	b289      	uxth	r1, r1
 8007758:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800775c:	f84e 1b04 	str.w	r1, [lr], #4
 8007760:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007764:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007768:	f8be 1000 	ldrh.w	r1, [lr]
 800776c:	fb09 110a 	mla	r1, r9, sl, r1
 8007770:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007774:	4567      	cmp	r7, ip
 8007776:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800777a:	d8e5      	bhi.n	8007748 <__multiply+0x10c>
 800777c:	9a01      	ldr	r2, [sp, #4]
 800777e:	50a9      	str	r1, [r5, r2]
 8007780:	3504      	adds	r5, #4
 8007782:	e799      	b.n	80076b8 <__multiply+0x7c>
 8007784:	3e01      	subs	r6, #1
 8007786:	e79b      	b.n	80076c0 <__multiply+0x84>
 8007788:	080087c4 	.word	0x080087c4
 800778c:	080087d5 	.word	0x080087d5

08007790 <__pow5mult>:
 8007790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007794:	4615      	mov	r5, r2
 8007796:	f012 0203 	ands.w	r2, r2, #3
 800779a:	4606      	mov	r6, r0
 800779c:	460f      	mov	r7, r1
 800779e:	d007      	beq.n	80077b0 <__pow5mult+0x20>
 80077a0:	4c25      	ldr	r4, [pc, #148]	; (8007838 <__pow5mult+0xa8>)
 80077a2:	3a01      	subs	r2, #1
 80077a4:	2300      	movs	r3, #0
 80077a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077aa:	f7ff fe9d 	bl	80074e8 <__multadd>
 80077ae:	4607      	mov	r7, r0
 80077b0:	10ad      	asrs	r5, r5, #2
 80077b2:	d03d      	beq.n	8007830 <__pow5mult+0xa0>
 80077b4:	69f4      	ldr	r4, [r6, #28]
 80077b6:	b97c      	cbnz	r4, 80077d8 <__pow5mult+0x48>
 80077b8:	2010      	movs	r0, #16
 80077ba:	f7ff fd7f 	bl	80072bc <malloc>
 80077be:	4602      	mov	r2, r0
 80077c0:	61f0      	str	r0, [r6, #28]
 80077c2:	b928      	cbnz	r0, 80077d0 <__pow5mult+0x40>
 80077c4:	4b1d      	ldr	r3, [pc, #116]	; (800783c <__pow5mult+0xac>)
 80077c6:	481e      	ldr	r0, [pc, #120]	; (8007840 <__pow5mult+0xb0>)
 80077c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80077cc:	f000 fbe4 	bl	8007f98 <__assert_func>
 80077d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077d4:	6004      	str	r4, [r0, #0]
 80077d6:	60c4      	str	r4, [r0, #12]
 80077d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80077dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077e0:	b94c      	cbnz	r4, 80077f6 <__pow5mult+0x66>
 80077e2:	f240 2171 	movw	r1, #625	; 0x271
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7ff ff12 	bl	8007610 <__i2b>
 80077ec:	2300      	movs	r3, #0
 80077ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80077f2:	4604      	mov	r4, r0
 80077f4:	6003      	str	r3, [r0, #0]
 80077f6:	f04f 0900 	mov.w	r9, #0
 80077fa:	07eb      	lsls	r3, r5, #31
 80077fc:	d50a      	bpl.n	8007814 <__pow5mult+0x84>
 80077fe:	4639      	mov	r1, r7
 8007800:	4622      	mov	r2, r4
 8007802:	4630      	mov	r0, r6
 8007804:	f7ff ff1a 	bl	800763c <__multiply>
 8007808:	4639      	mov	r1, r7
 800780a:	4680      	mov	r8, r0
 800780c:	4630      	mov	r0, r6
 800780e:	f7ff fe49 	bl	80074a4 <_Bfree>
 8007812:	4647      	mov	r7, r8
 8007814:	106d      	asrs	r5, r5, #1
 8007816:	d00b      	beq.n	8007830 <__pow5mult+0xa0>
 8007818:	6820      	ldr	r0, [r4, #0]
 800781a:	b938      	cbnz	r0, 800782c <__pow5mult+0x9c>
 800781c:	4622      	mov	r2, r4
 800781e:	4621      	mov	r1, r4
 8007820:	4630      	mov	r0, r6
 8007822:	f7ff ff0b 	bl	800763c <__multiply>
 8007826:	6020      	str	r0, [r4, #0]
 8007828:	f8c0 9000 	str.w	r9, [r0]
 800782c:	4604      	mov	r4, r0
 800782e:	e7e4      	b.n	80077fa <__pow5mult+0x6a>
 8007830:	4638      	mov	r0, r7
 8007832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007836:	bf00      	nop
 8007838:	08008920 	.word	0x08008920
 800783c:	08008755 	.word	0x08008755
 8007840:	080087d5 	.word	0x080087d5

08007844 <__lshift>:
 8007844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007848:	460c      	mov	r4, r1
 800784a:	6849      	ldr	r1, [r1, #4]
 800784c:	6923      	ldr	r3, [r4, #16]
 800784e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007852:	68a3      	ldr	r3, [r4, #8]
 8007854:	4607      	mov	r7, r0
 8007856:	4691      	mov	r9, r2
 8007858:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800785c:	f108 0601 	add.w	r6, r8, #1
 8007860:	42b3      	cmp	r3, r6
 8007862:	db0b      	blt.n	800787c <__lshift+0x38>
 8007864:	4638      	mov	r0, r7
 8007866:	f7ff fddd 	bl	8007424 <_Balloc>
 800786a:	4605      	mov	r5, r0
 800786c:	b948      	cbnz	r0, 8007882 <__lshift+0x3e>
 800786e:	4602      	mov	r2, r0
 8007870:	4b28      	ldr	r3, [pc, #160]	; (8007914 <__lshift+0xd0>)
 8007872:	4829      	ldr	r0, [pc, #164]	; (8007918 <__lshift+0xd4>)
 8007874:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007878:	f000 fb8e 	bl	8007f98 <__assert_func>
 800787c:	3101      	adds	r1, #1
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	e7ee      	b.n	8007860 <__lshift+0x1c>
 8007882:	2300      	movs	r3, #0
 8007884:	f100 0114 	add.w	r1, r0, #20
 8007888:	f100 0210 	add.w	r2, r0, #16
 800788c:	4618      	mov	r0, r3
 800788e:	4553      	cmp	r3, sl
 8007890:	db33      	blt.n	80078fa <__lshift+0xb6>
 8007892:	6920      	ldr	r0, [r4, #16]
 8007894:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007898:	f104 0314 	add.w	r3, r4, #20
 800789c:	f019 091f 	ands.w	r9, r9, #31
 80078a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078a8:	d02b      	beq.n	8007902 <__lshift+0xbe>
 80078aa:	f1c9 0e20 	rsb	lr, r9, #32
 80078ae:	468a      	mov	sl, r1
 80078b0:	2200      	movs	r2, #0
 80078b2:	6818      	ldr	r0, [r3, #0]
 80078b4:	fa00 f009 	lsl.w	r0, r0, r9
 80078b8:	4310      	orrs	r0, r2
 80078ba:	f84a 0b04 	str.w	r0, [sl], #4
 80078be:	f853 2b04 	ldr.w	r2, [r3], #4
 80078c2:	459c      	cmp	ip, r3
 80078c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80078c8:	d8f3      	bhi.n	80078b2 <__lshift+0x6e>
 80078ca:	ebac 0304 	sub.w	r3, ip, r4
 80078ce:	3b15      	subs	r3, #21
 80078d0:	f023 0303 	bic.w	r3, r3, #3
 80078d4:	3304      	adds	r3, #4
 80078d6:	f104 0015 	add.w	r0, r4, #21
 80078da:	4584      	cmp	ip, r0
 80078dc:	bf38      	it	cc
 80078de:	2304      	movcc	r3, #4
 80078e0:	50ca      	str	r2, [r1, r3]
 80078e2:	b10a      	cbz	r2, 80078e8 <__lshift+0xa4>
 80078e4:	f108 0602 	add.w	r6, r8, #2
 80078e8:	3e01      	subs	r6, #1
 80078ea:	4638      	mov	r0, r7
 80078ec:	612e      	str	r6, [r5, #16]
 80078ee:	4621      	mov	r1, r4
 80078f0:	f7ff fdd8 	bl	80074a4 <_Bfree>
 80078f4:	4628      	mov	r0, r5
 80078f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80078fe:	3301      	adds	r3, #1
 8007900:	e7c5      	b.n	800788e <__lshift+0x4a>
 8007902:	3904      	subs	r1, #4
 8007904:	f853 2b04 	ldr.w	r2, [r3], #4
 8007908:	f841 2f04 	str.w	r2, [r1, #4]!
 800790c:	459c      	cmp	ip, r3
 800790e:	d8f9      	bhi.n	8007904 <__lshift+0xc0>
 8007910:	e7ea      	b.n	80078e8 <__lshift+0xa4>
 8007912:	bf00      	nop
 8007914:	080087c4 	.word	0x080087c4
 8007918:	080087d5 	.word	0x080087d5

0800791c <__mcmp>:
 800791c:	b530      	push	{r4, r5, lr}
 800791e:	6902      	ldr	r2, [r0, #16]
 8007920:	690c      	ldr	r4, [r1, #16]
 8007922:	1b12      	subs	r2, r2, r4
 8007924:	d10e      	bne.n	8007944 <__mcmp+0x28>
 8007926:	f100 0314 	add.w	r3, r0, #20
 800792a:	3114      	adds	r1, #20
 800792c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007930:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007934:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007938:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800793c:	42a5      	cmp	r5, r4
 800793e:	d003      	beq.n	8007948 <__mcmp+0x2c>
 8007940:	d305      	bcc.n	800794e <__mcmp+0x32>
 8007942:	2201      	movs	r2, #1
 8007944:	4610      	mov	r0, r2
 8007946:	bd30      	pop	{r4, r5, pc}
 8007948:	4283      	cmp	r3, r0
 800794a:	d3f3      	bcc.n	8007934 <__mcmp+0x18>
 800794c:	e7fa      	b.n	8007944 <__mcmp+0x28>
 800794e:	f04f 32ff 	mov.w	r2, #4294967295
 8007952:	e7f7      	b.n	8007944 <__mcmp+0x28>

08007954 <__mdiff>:
 8007954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	460c      	mov	r4, r1
 800795a:	4606      	mov	r6, r0
 800795c:	4611      	mov	r1, r2
 800795e:	4620      	mov	r0, r4
 8007960:	4690      	mov	r8, r2
 8007962:	f7ff ffdb 	bl	800791c <__mcmp>
 8007966:	1e05      	subs	r5, r0, #0
 8007968:	d110      	bne.n	800798c <__mdiff+0x38>
 800796a:	4629      	mov	r1, r5
 800796c:	4630      	mov	r0, r6
 800796e:	f7ff fd59 	bl	8007424 <_Balloc>
 8007972:	b930      	cbnz	r0, 8007982 <__mdiff+0x2e>
 8007974:	4b3a      	ldr	r3, [pc, #232]	; (8007a60 <__mdiff+0x10c>)
 8007976:	4602      	mov	r2, r0
 8007978:	f240 2137 	movw	r1, #567	; 0x237
 800797c:	4839      	ldr	r0, [pc, #228]	; (8007a64 <__mdiff+0x110>)
 800797e:	f000 fb0b 	bl	8007f98 <__assert_func>
 8007982:	2301      	movs	r3, #1
 8007984:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798c:	bfa4      	itt	ge
 800798e:	4643      	movge	r3, r8
 8007990:	46a0      	movge	r8, r4
 8007992:	4630      	mov	r0, r6
 8007994:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007998:	bfa6      	itte	ge
 800799a:	461c      	movge	r4, r3
 800799c:	2500      	movge	r5, #0
 800799e:	2501      	movlt	r5, #1
 80079a0:	f7ff fd40 	bl	8007424 <_Balloc>
 80079a4:	b920      	cbnz	r0, 80079b0 <__mdiff+0x5c>
 80079a6:	4b2e      	ldr	r3, [pc, #184]	; (8007a60 <__mdiff+0x10c>)
 80079a8:	4602      	mov	r2, r0
 80079aa:	f240 2145 	movw	r1, #581	; 0x245
 80079ae:	e7e5      	b.n	800797c <__mdiff+0x28>
 80079b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80079b4:	6926      	ldr	r6, [r4, #16]
 80079b6:	60c5      	str	r5, [r0, #12]
 80079b8:	f104 0914 	add.w	r9, r4, #20
 80079bc:	f108 0514 	add.w	r5, r8, #20
 80079c0:	f100 0e14 	add.w	lr, r0, #20
 80079c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80079c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80079cc:	f108 0210 	add.w	r2, r8, #16
 80079d0:	46f2      	mov	sl, lr
 80079d2:	2100      	movs	r1, #0
 80079d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80079d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80079dc:	fa11 f88b 	uxtah	r8, r1, fp
 80079e0:	b299      	uxth	r1, r3
 80079e2:	0c1b      	lsrs	r3, r3, #16
 80079e4:	eba8 0801 	sub.w	r8, r8, r1
 80079e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80079f0:	fa1f f888 	uxth.w	r8, r8
 80079f4:	1419      	asrs	r1, r3, #16
 80079f6:	454e      	cmp	r6, r9
 80079f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80079fc:	f84a 3b04 	str.w	r3, [sl], #4
 8007a00:	d8e8      	bhi.n	80079d4 <__mdiff+0x80>
 8007a02:	1b33      	subs	r3, r6, r4
 8007a04:	3b15      	subs	r3, #21
 8007a06:	f023 0303 	bic.w	r3, r3, #3
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	3415      	adds	r4, #21
 8007a0e:	42a6      	cmp	r6, r4
 8007a10:	bf38      	it	cc
 8007a12:	2304      	movcc	r3, #4
 8007a14:	441d      	add	r5, r3
 8007a16:	4473      	add	r3, lr
 8007a18:	469e      	mov	lr, r3
 8007a1a:	462e      	mov	r6, r5
 8007a1c:	4566      	cmp	r6, ip
 8007a1e:	d30e      	bcc.n	8007a3e <__mdiff+0xea>
 8007a20:	f10c 0203 	add.w	r2, ip, #3
 8007a24:	1b52      	subs	r2, r2, r5
 8007a26:	f022 0203 	bic.w	r2, r2, #3
 8007a2a:	3d03      	subs	r5, #3
 8007a2c:	45ac      	cmp	ip, r5
 8007a2e:	bf38      	it	cc
 8007a30:	2200      	movcc	r2, #0
 8007a32:	4413      	add	r3, r2
 8007a34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007a38:	b17a      	cbz	r2, 8007a5a <__mdiff+0x106>
 8007a3a:	6107      	str	r7, [r0, #16]
 8007a3c:	e7a4      	b.n	8007988 <__mdiff+0x34>
 8007a3e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007a42:	fa11 f288 	uxtah	r2, r1, r8
 8007a46:	1414      	asrs	r4, r2, #16
 8007a48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a4c:	b292      	uxth	r2, r2
 8007a4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007a52:	f84e 2b04 	str.w	r2, [lr], #4
 8007a56:	1421      	asrs	r1, r4, #16
 8007a58:	e7e0      	b.n	8007a1c <__mdiff+0xc8>
 8007a5a:	3f01      	subs	r7, #1
 8007a5c:	e7ea      	b.n	8007a34 <__mdiff+0xe0>
 8007a5e:	bf00      	nop
 8007a60:	080087c4 	.word	0x080087c4
 8007a64:	080087d5 	.word	0x080087d5

08007a68 <__d2b>:
 8007a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a6c:	460f      	mov	r7, r1
 8007a6e:	2101      	movs	r1, #1
 8007a70:	ec59 8b10 	vmov	r8, r9, d0
 8007a74:	4616      	mov	r6, r2
 8007a76:	f7ff fcd5 	bl	8007424 <_Balloc>
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	b930      	cbnz	r0, 8007a8c <__d2b+0x24>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	4b24      	ldr	r3, [pc, #144]	; (8007b14 <__d2b+0xac>)
 8007a82:	4825      	ldr	r0, [pc, #148]	; (8007b18 <__d2b+0xb0>)
 8007a84:	f240 310f 	movw	r1, #783	; 0x30f
 8007a88:	f000 fa86 	bl	8007f98 <__assert_func>
 8007a8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a94:	bb2d      	cbnz	r5, 8007ae2 <__d2b+0x7a>
 8007a96:	9301      	str	r3, [sp, #4]
 8007a98:	f1b8 0300 	subs.w	r3, r8, #0
 8007a9c:	d026      	beq.n	8007aec <__d2b+0x84>
 8007a9e:	4668      	mov	r0, sp
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	f7ff fd87 	bl	80075b4 <__lo0bits>
 8007aa6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007aaa:	b1e8      	cbz	r0, 8007ae8 <__d2b+0x80>
 8007aac:	f1c0 0320 	rsb	r3, r0, #32
 8007ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	40c2      	lsrs	r2, r0
 8007ab8:	6163      	str	r3, [r4, #20]
 8007aba:	9201      	str	r2, [sp, #4]
 8007abc:	9b01      	ldr	r3, [sp, #4]
 8007abe:	61a3      	str	r3, [r4, #24]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	bf14      	ite	ne
 8007ac4:	2202      	movne	r2, #2
 8007ac6:	2201      	moveq	r2, #1
 8007ac8:	6122      	str	r2, [r4, #16]
 8007aca:	b1bd      	cbz	r5, 8007afc <__d2b+0x94>
 8007acc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ad0:	4405      	add	r5, r0
 8007ad2:	603d      	str	r5, [r7, #0]
 8007ad4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ad8:	6030      	str	r0, [r6, #0]
 8007ada:	4620      	mov	r0, r4
 8007adc:	b003      	add	sp, #12
 8007ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ae6:	e7d6      	b.n	8007a96 <__d2b+0x2e>
 8007ae8:	6161      	str	r1, [r4, #20]
 8007aea:	e7e7      	b.n	8007abc <__d2b+0x54>
 8007aec:	a801      	add	r0, sp, #4
 8007aee:	f7ff fd61 	bl	80075b4 <__lo0bits>
 8007af2:	9b01      	ldr	r3, [sp, #4]
 8007af4:	6163      	str	r3, [r4, #20]
 8007af6:	3020      	adds	r0, #32
 8007af8:	2201      	movs	r2, #1
 8007afa:	e7e5      	b.n	8007ac8 <__d2b+0x60>
 8007afc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b04:	6038      	str	r0, [r7, #0]
 8007b06:	6918      	ldr	r0, [r3, #16]
 8007b08:	f7ff fd34 	bl	8007574 <__hi0bits>
 8007b0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b10:	e7e2      	b.n	8007ad8 <__d2b+0x70>
 8007b12:	bf00      	nop
 8007b14:	080087c4 	.word	0x080087c4
 8007b18:	080087d5 	.word	0x080087d5

08007b1c <__ssputs_r>:
 8007b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b20:	688e      	ldr	r6, [r1, #8]
 8007b22:	461f      	mov	r7, r3
 8007b24:	42be      	cmp	r6, r7
 8007b26:	680b      	ldr	r3, [r1, #0]
 8007b28:	4682      	mov	sl, r0
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	4690      	mov	r8, r2
 8007b2e:	d82c      	bhi.n	8007b8a <__ssputs_r+0x6e>
 8007b30:	898a      	ldrh	r2, [r1, #12]
 8007b32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b36:	d026      	beq.n	8007b86 <__ssputs_r+0x6a>
 8007b38:	6965      	ldr	r5, [r4, #20]
 8007b3a:	6909      	ldr	r1, [r1, #16]
 8007b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b40:	eba3 0901 	sub.w	r9, r3, r1
 8007b44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b48:	1c7b      	adds	r3, r7, #1
 8007b4a:	444b      	add	r3, r9
 8007b4c:	106d      	asrs	r5, r5, #1
 8007b4e:	429d      	cmp	r5, r3
 8007b50:	bf38      	it	cc
 8007b52:	461d      	movcc	r5, r3
 8007b54:	0553      	lsls	r3, r2, #21
 8007b56:	d527      	bpl.n	8007ba8 <__ssputs_r+0x8c>
 8007b58:	4629      	mov	r1, r5
 8007b5a:	f7ff fbd7 	bl	800730c <_malloc_r>
 8007b5e:	4606      	mov	r6, r0
 8007b60:	b360      	cbz	r0, 8007bbc <__ssputs_r+0xa0>
 8007b62:	6921      	ldr	r1, [r4, #16]
 8007b64:	464a      	mov	r2, r9
 8007b66:	f000 fa09 	bl	8007f7c <memcpy>
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b74:	81a3      	strh	r3, [r4, #12]
 8007b76:	6126      	str	r6, [r4, #16]
 8007b78:	6165      	str	r5, [r4, #20]
 8007b7a:	444e      	add	r6, r9
 8007b7c:	eba5 0509 	sub.w	r5, r5, r9
 8007b80:	6026      	str	r6, [r4, #0]
 8007b82:	60a5      	str	r5, [r4, #8]
 8007b84:	463e      	mov	r6, r7
 8007b86:	42be      	cmp	r6, r7
 8007b88:	d900      	bls.n	8007b8c <__ssputs_r+0x70>
 8007b8a:	463e      	mov	r6, r7
 8007b8c:	6820      	ldr	r0, [r4, #0]
 8007b8e:	4632      	mov	r2, r6
 8007b90:	4641      	mov	r1, r8
 8007b92:	f000 f9c9 	bl	8007f28 <memmove>
 8007b96:	68a3      	ldr	r3, [r4, #8]
 8007b98:	1b9b      	subs	r3, r3, r6
 8007b9a:	60a3      	str	r3, [r4, #8]
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	4433      	add	r3, r6
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba8:	462a      	mov	r2, r5
 8007baa:	f000 fa3b 	bl	8008024 <_realloc_r>
 8007bae:	4606      	mov	r6, r0
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d1e0      	bne.n	8007b76 <__ssputs_r+0x5a>
 8007bb4:	6921      	ldr	r1, [r4, #16]
 8007bb6:	4650      	mov	r0, sl
 8007bb8:	f7ff fb34 	bl	8007224 <_free_r>
 8007bbc:	230c      	movs	r3, #12
 8007bbe:	f8ca 3000 	str.w	r3, [sl]
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bc8:	81a3      	strh	r3, [r4, #12]
 8007bca:	f04f 30ff 	mov.w	r0, #4294967295
 8007bce:	e7e9      	b.n	8007ba4 <__ssputs_r+0x88>

08007bd0 <_svfiprintf_r>:
 8007bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd4:	4698      	mov	r8, r3
 8007bd6:	898b      	ldrh	r3, [r1, #12]
 8007bd8:	061b      	lsls	r3, r3, #24
 8007bda:	b09d      	sub	sp, #116	; 0x74
 8007bdc:	4607      	mov	r7, r0
 8007bde:	460d      	mov	r5, r1
 8007be0:	4614      	mov	r4, r2
 8007be2:	d50e      	bpl.n	8007c02 <_svfiprintf_r+0x32>
 8007be4:	690b      	ldr	r3, [r1, #16]
 8007be6:	b963      	cbnz	r3, 8007c02 <_svfiprintf_r+0x32>
 8007be8:	2140      	movs	r1, #64	; 0x40
 8007bea:	f7ff fb8f 	bl	800730c <_malloc_r>
 8007bee:	6028      	str	r0, [r5, #0]
 8007bf0:	6128      	str	r0, [r5, #16]
 8007bf2:	b920      	cbnz	r0, 8007bfe <_svfiprintf_r+0x2e>
 8007bf4:	230c      	movs	r3, #12
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfc:	e0d0      	b.n	8007da0 <_svfiprintf_r+0x1d0>
 8007bfe:	2340      	movs	r3, #64	; 0x40
 8007c00:	616b      	str	r3, [r5, #20]
 8007c02:	2300      	movs	r3, #0
 8007c04:	9309      	str	r3, [sp, #36]	; 0x24
 8007c06:	2320      	movs	r3, #32
 8007c08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c10:	2330      	movs	r3, #48	; 0x30
 8007c12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007db8 <_svfiprintf_r+0x1e8>
 8007c16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c1a:	f04f 0901 	mov.w	r9, #1
 8007c1e:	4623      	mov	r3, r4
 8007c20:	469a      	mov	sl, r3
 8007c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c26:	b10a      	cbz	r2, 8007c2c <_svfiprintf_r+0x5c>
 8007c28:	2a25      	cmp	r2, #37	; 0x25
 8007c2a:	d1f9      	bne.n	8007c20 <_svfiprintf_r+0x50>
 8007c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c30:	d00b      	beq.n	8007c4a <_svfiprintf_r+0x7a>
 8007c32:	465b      	mov	r3, fp
 8007c34:	4622      	mov	r2, r4
 8007c36:	4629      	mov	r1, r5
 8007c38:	4638      	mov	r0, r7
 8007c3a:	f7ff ff6f 	bl	8007b1c <__ssputs_r>
 8007c3e:	3001      	adds	r0, #1
 8007c40:	f000 80a9 	beq.w	8007d96 <_svfiprintf_r+0x1c6>
 8007c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c46:	445a      	add	r2, fp
 8007c48:	9209      	str	r2, [sp, #36]	; 0x24
 8007c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 80a1 	beq.w	8007d96 <_svfiprintf_r+0x1c6>
 8007c54:	2300      	movs	r3, #0
 8007c56:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c5e:	f10a 0a01 	add.w	sl, sl, #1
 8007c62:	9304      	str	r3, [sp, #16]
 8007c64:	9307      	str	r3, [sp, #28]
 8007c66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c6a:	931a      	str	r3, [sp, #104]	; 0x68
 8007c6c:	4654      	mov	r4, sl
 8007c6e:	2205      	movs	r2, #5
 8007c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c74:	4850      	ldr	r0, [pc, #320]	; (8007db8 <_svfiprintf_r+0x1e8>)
 8007c76:	f7f8 fab3 	bl	80001e0 <memchr>
 8007c7a:	9a04      	ldr	r2, [sp, #16]
 8007c7c:	b9d8      	cbnz	r0, 8007cb6 <_svfiprintf_r+0xe6>
 8007c7e:	06d0      	lsls	r0, r2, #27
 8007c80:	bf44      	itt	mi
 8007c82:	2320      	movmi	r3, #32
 8007c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c88:	0711      	lsls	r1, r2, #28
 8007c8a:	bf44      	itt	mi
 8007c8c:	232b      	movmi	r3, #43	; 0x2b
 8007c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c92:	f89a 3000 	ldrb.w	r3, [sl]
 8007c96:	2b2a      	cmp	r3, #42	; 0x2a
 8007c98:	d015      	beq.n	8007cc6 <_svfiprintf_r+0xf6>
 8007c9a:	9a07      	ldr	r2, [sp, #28]
 8007c9c:	4654      	mov	r4, sl
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	f04f 0c0a 	mov.w	ip, #10
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007caa:	3b30      	subs	r3, #48	; 0x30
 8007cac:	2b09      	cmp	r3, #9
 8007cae:	d94d      	bls.n	8007d4c <_svfiprintf_r+0x17c>
 8007cb0:	b1b0      	cbz	r0, 8007ce0 <_svfiprintf_r+0x110>
 8007cb2:	9207      	str	r2, [sp, #28]
 8007cb4:	e014      	b.n	8007ce0 <_svfiprintf_r+0x110>
 8007cb6:	eba0 0308 	sub.w	r3, r0, r8
 8007cba:	fa09 f303 	lsl.w	r3, r9, r3
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	9304      	str	r3, [sp, #16]
 8007cc2:	46a2      	mov	sl, r4
 8007cc4:	e7d2      	b.n	8007c6c <_svfiprintf_r+0x9c>
 8007cc6:	9b03      	ldr	r3, [sp, #12]
 8007cc8:	1d19      	adds	r1, r3, #4
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	9103      	str	r1, [sp, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	bfbb      	ittet	lt
 8007cd2:	425b      	neglt	r3, r3
 8007cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8007cd8:	9307      	strge	r3, [sp, #28]
 8007cda:	9307      	strlt	r3, [sp, #28]
 8007cdc:	bfb8      	it	lt
 8007cde:	9204      	strlt	r2, [sp, #16]
 8007ce0:	7823      	ldrb	r3, [r4, #0]
 8007ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ce4:	d10c      	bne.n	8007d00 <_svfiprintf_r+0x130>
 8007ce6:	7863      	ldrb	r3, [r4, #1]
 8007ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cea:	d134      	bne.n	8007d56 <_svfiprintf_r+0x186>
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	1d1a      	adds	r2, r3, #4
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	9203      	str	r2, [sp, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	bfb8      	it	lt
 8007cf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cfc:	3402      	adds	r4, #2
 8007cfe:	9305      	str	r3, [sp, #20]
 8007d00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007dc8 <_svfiprintf_r+0x1f8>
 8007d04:	7821      	ldrb	r1, [r4, #0]
 8007d06:	2203      	movs	r2, #3
 8007d08:	4650      	mov	r0, sl
 8007d0a:	f7f8 fa69 	bl	80001e0 <memchr>
 8007d0e:	b138      	cbz	r0, 8007d20 <_svfiprintf_r+0x150>
 8007d10:	9b04      	ldr	r3, [sp, #16]
 8007d12:	eba0 000a 	sub.w	r0, r0, sl
 8007d16:	2240      	movs	r2, #64	; 0x40
 8007d18:	4082      	lsls	r2, r0
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	3401      	adds	r4, #1
 8007d1e:	9304      	str	r3, [sp, #16]
 8007d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d24:	4825      	ldr	r0, [pc, #148]	; (8007dbc <_svfiprintf_r+0x1ec>)
 8007d26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d2a:	2206      	movs	r2, #6
 8007d2c:	f7f8 fa58 	bl	80001e0 <memchr>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d038      	beq.n	8007da6 <_svfiprintf_r+0x1d6>
 8007d34:	4b22      	ldr	r3, [pc, #136]	; (8007dc0 <_svfiprintf_r+0x1f0>)
 8007d36:	bb1b      	cbnz	r3, 8007d80 <_svfiprintf_r+0x1b0>
 8007d38:	9b03      	ldr	r3, [sp, #12]
 8007d3a:	3307      	adds	r3, #7
 8007d3c:	f023 0307 	bic.w	r3, r3, #7
 8007d40:	3308      	adds	r3, #8
 8007d42:	9303      	str	r3, [sp, #12]
 8007d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d46:	4433      	add	r3, r6
 8007d48:	9309      	str	r3, [sp, #36]	; 0x24
 8007d4a:	e768      	b.n	8007c1e <_svfiprintf_r+0x4e>
 8007d4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d50:	460c      	mov	r4, r1
 8007d52:	2001      	movs	r0, #1
 8007d54:	e7a6      	b.n	8007ca4 <_svfiprintf_r+0xd4>
 8007d56:	2300      	movs	r3, #0
 8007d58:	3401      	adds	r4, #1
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	f04f 0c0a 	mov.w	ip, #10
 8007d62:	4620      	mov	r0, r4
 8007d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d68:	3a30      	subs	r2, #48	; 0x30
 8007d6a:	2a09      	cmp	r2, #9
 8007d6c:	d903      	bls.n	8007d76 <_svfiprintf_r+0x1a6>
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0c6      	beq.n	8007d00 <_svfiprintf_r+0x130>
 8007d72:	9105      	str	r1, [sp, #20]
 8007d74:	e7c4      	b.n	8007d00 <_svfiprintf_r+0x130>
 8007d76:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e7f0      	b.n	8007d62 <_svfiprintf_r+0x192>
 8007d80:	ab03      	add	r3, sp, #12
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	462a      	mov	r2, r5
 8007d86:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <_svfiprintf_r+0x1f4>)
 8007d88:	a904      	add	r1, sp, #16
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	f7fd fe4e 	bl	8005a2c <_printf_float>
 8007d90:	1c42      	adds	r2, r0, #1
 8007d92:	4606      	mov	r6, r0
 8007d94:	d1d6      	bne.n	8007d44 <_svfiprintf_r+0x174>
 8007d96:	89ab      	ldrh	r3, [r5, #12]
 8007d98:	065b      	lsls	r3, r3, #25
 8007d9a:	f53f af2d 	bmi.w	8007bf8 <_svfiprintf_r+0x28>
 8007d9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007da0:	b01d      	add	sp, #116	; 0x74
 8007da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da6:	ab03      	add	r3, sp, #12
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	462a      	mov	r2, r5
 8007dac:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <_svfiprintf_r+0x1f4>)
 8007dae:	a904      	add	r1, sp, #16
 8007db0:	4638      	mov	r0, r7
 8007db2:	f7fe f8df 	bl	8005f74 <_printf_i>
 8007db6:	e7eb      	b.n	8007d90 <_svfiprintf_r+0x1c0>
 8007db8:	0800892c 	.word	0x0800892c
 8007dbc:	08008936 	.word	0x08008936
 8007dc0:	08005a2d 	.word	0x08005a2d
 8007dc4:	08007b1d 	.word	0x08007b1d
 8007dc8:	08008932 	.word	0x08008932

08007dcc <__sflush_r>:
 8007dcc:	898a      	ldrh	r2, [r1, #12]
 8007dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	0710      	lsls	r0, r2, #28
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	d458      	bmi.n	8007e8c <__sflush_r+0xc0>
 8007dda:	684b      	ldr	r3, [r1, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	dc05      	bgt.n	8007dec <__sflush_r+0x20>
 8007de0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	dc02      	bgt.n	8007dec <__sflush_r+0x20>
 8007de6:	2000      	movs	r0, #0
 8007de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dee:	2e00      	cmp	r6, #0
 8007df0:	d0f9      	beq.n	8007de6 <__sflush_r+0x1a>
 8007df2:	2300      	movs	r3, #0
 8007df4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007df8:	682f      	ldr	r7, [r5, #0]
 8007dfa:	6a21      	ldr	r1, [r4, #32]
 8007dfc:	602b      	str	r3, [r5, #0]
 8007dfe:	d032      	beq.n	8007e66 <__sflush_r+0x9a>
 8007e00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	075a      	lsls	r2, r3, #29
 8007e06:	d505      	bpl.n	8007e14 <__sflush_r+0x48>
 8007e08:	6863      	ldr	r3, [r4, #4]
 8007e0a:	1ac0      	subs	r0, r0, r3
 8007e0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e0e:	b10b      	cbz	r3, 8007e14 <__sflush_r+0x48>
 8007e10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e12:	1ac0      	subs	r0, r0, r3
 8007e14:	2300      	movs	r3, #0
 8007e16:	4602      	mov	r2, r0
 8007e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e1a:	6a21      	ldr	r1, [r4, #32]
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b0      	blx	r6
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	d106      	bne.n	8007e34 <__sflush_r+0x68>
 8007e26:	6829      	ldr	r1, [r5, #0]
 8007e28:	291d      	cmp	r1, #29
 8007e2a:	d82b      	bhi.n	8007e84 <__sflush_r+0xb8>
 8007e2c:	4a29      	ldr	r2, [pc, #164]	; (8007ed4 <__sflush_r+0x108>)
 8007e2e:	410a      	asrs	r2, r1
 8007e30:	07d6      	lsls	r6, r2, #31
 8007e32:	d427      	bmi.n	8007e84 <__sflush_r+0xb8>
 8007e34:	2200      	movs	r2, #0
 8007e36:	6062      	str	r2, [r4, #4]
 8007e38:	04d9      	lsls	r1, r3, #19
 8007e3a:	6922      	ldr	r2, [r4, #16]
 8007e3c:	6022      	str	r2, [r4, #0]
 8007e3e:	d504      	bpl.n	8007e4a <__sflush_r+0x7e>
 8007e40:	1c42      	adds	r2, r0, #1
 8007e42:	d101      	bne.n	8007e48 <__sflush_r+0x7c>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b903      	cbnz	r3, 8007e4a <__sflush_r+0x7e>
 8007e48:	6560      	str	r0, [r4, #84]	; 0x54
 8007e4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e4c:	602f      	str	r7, [r5, #0]
 8007e4e:	2900      	cmp	r1, #0
 8007e50:	d0c9      	beq.n	8007de6 <__sflush_r+0x1a>
 8007e52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e56:	4299      	cmp	r1, r3
 8007e58:	d002      	beq.n	8007e60 <__sflush_r+0x94>
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	f7ff f9e2 	bl	8007224 <_free_r>
 8007e60:	2000      	movs	r0, #0
 8007e62:	6360      	str	r0, [r4, #52]	; 0x34
 8007e64:	e7c0      	b.n	8007de8 <__sflush_r+0x1c>
 8007e66:	2301      	movs	r3, #1
 8007e68:	4628      	mov	r0, r5
 8007e6a:	47b0      	blx	r6
 8007e6c:	1c41      	adds	r1, r0, #1
 8007e6e:	d1c8      	bne.n	8007e02 <__sflush_r+0x36>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0c5      	beq.n	8007e02 <__sflush_r+0x36>
 8007e76:	2b1d      	cmp	r3, #29
 8007e78:	d001      	beq.n	8007e7e <__sflush_r+0xb2>
 8007e7a:	2b16      	cmp	r3, #22
 8007e7c:	d101      	bne.n	8007e82 <__sflush_r+0xb6>
 8007e7e:	602f      	str	r7, [r5, #0]
 8007e80:	e7b1      	b.n	8007de6 <__sflush_r+0x1a>
 8007e82:	89a3      	ldrh	r3, [r4, #12]
 8007e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e88:	81a3      	strh	r3, [r4, #12]
 8007e8a:	e7ad      	b.n	8007de8 <__sflush_r+0x1c>
 8007e8c:	690f      	ldr	r7, [r1, #16]
 8007e8e:	2f00      	cmp	r7, #0
 8007e90:	d0a9      	beq.n	8007de6 <__sflush_r+0x1a>
 8007e92:	0793      	lsls	r3, r2, #30
 8007e94:	680e      	ldr	r6, [r1, #0]
 8007e96:	bf08      	it	eq
 8007e98:	694b      	ldreq	r3, [r1, #20]
 8007e9a:	600f      	str	r7, [r1, #0]
 8007e9c:	bf18      	it	ne
 8007e9e:	2300      	movne	r3, #0
 8007ea0:	eba6 0807 	sub.w	r8, r6, r7
 8007ea4:	608b      	str	r3, [r1, #8]
 8007ea6:	f1b8 0f00 	cmp.w	r8, #0
 8007eaa:	dd9c      	ble.n	8007de6 <__sflush_r+0x1a>
 8007eac:	6a21      	ldr	r1, [r4, #32]
 8007eae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007eb0:	4643      	mov	r3, r8
 8007eb2:	463a      	mov	r2, r7
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	47b0      	blx	r6
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	dc06      	bgt.n	8007eca <__sflush_r+0xfe>
 8007ebc:	89a3      	ldrh	r3, [r4, #12]
 8007ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ec2:	81a3      	strh	r3, [r4, #12]
 8007ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec8:	e78e      	b.n	8007de8 <__sflush_r+0x1c>
 8007eca:	4407      	add	r7, r0
 8007ecc:	eba8 0800 	sub.w	r8, r8, r0
 8007ed0:	e7e9      	b.n	8007ea6 <__sflush_r+0xda>
 8007ed2:	bf00      	nop
 8007ed4:	dfbffffe 	.word	0xdfbffffe

08007ed8 <_fflush_r>:
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	690b      	ldr	r3, [r1, #16]
 8007edc:	4605      	mov	r5, r0
 8007ede:	460c      	mov	r4, r1
 8007ee0:	b913      	cbnz	r3, 8007ee8 <_fflush_r+0x10>
 8007ee2:	2500      	movs	r5, #0
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	bd38      	pop	{r3, r4, r5, pc}
 8007ee8:	b118      	cbz	r0, 8007ef2 <_fflush_r+0x1a>
 8007eea:	6a03      	ldr	r3, [r0, #32]
 8007eec:	b90b      	cbnz	r3, 8007ef2 <_fflush_r+0x1a>
 8007eee:	f7fe f9ef 	bl	80062d0 <__sinit>
 8007ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d0f3      	beq.n	8007ee2 <_fflush_r+0xa>
 8007efa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007efc:	07d0      	lsls	r0, r2, #31
 8007efe:	d404      	bmi.n	8007f0a <_fflush_r+0x32>
 8007f00:	0599      	lsls	r1, r3, #22
 8007f02:	d402      	bmi.n	8007f0a <_fflush_r+0x32>
 8007f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f06:	f7fe fb0e 	bl	8006526 <__retarget_lock_acquire_recursive>
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	f7ff ff5d 	bl	8007dcc <__sflush_r>
 8007f12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f14:	07da      	lsls	r2, r3, #31
 8007f16:	4605      	mov	r5, r0
 8007f18:	d4e4      	bmi.n	8007ee4 <_fflush_r+0xc>
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	059b      	lsls	r3, r3, #22
 8007f1e:	d4e1      	bmi.n	8007ee4 <_fflush_r+0xc>
 8007f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f22:	f7fe fb01 	bl	8006528 <__retarget_lock_release_recursive>
 8007f26:	e7dd      	b.n	8007ee4 <_fflush_r+0xc>

08007f28 <memmove>:
 8007f28:	4288      	cmp	r0, r1
 8007f2a:	b510      	push	{r4, lr}
 8007f2c:	eb01 0402 	add.w	r4, r1, r2
 8007f30:	d902      	bls.n	8007f38 <memmove+0x10>
 8007f32:	4284      	cmp	r4, r0
 8007f34:	4623      	mov	r3, r4
 8007f36:	d807      	bhi.n	8007f48 <memmove+0x20>
 8007f38:	1e43      	subs	r3, r0, #1
 8007f3a:	42a1      	cmp	r1, r4
 8007f3c:	d008      	beq.n	8007f50 <memmove+0x28>
 8007f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f46:	e7f8      	b.n	8007f3a <memmove+0x12>
 8007f48:	4402      	add	r2, r0
 8007f4a:	4601      	mov	r1, r0
 8007f4c:	428a      	cmp	r2, r1
 8007f4e:	d100      	bne.n	8007f52 <memmove+0x2a>
 8007f50:	bd10      	pop	{r4, pc}
 8007f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f5a:	e7f7      	b.n	8007f4c <memmove+0x24>

08007f5c <_sbrk_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4d06      	ldr	r5, [pc, #24]	; (8007f78 <_sbrk_r+0x1c>)
 8007f60:	2300      	movs	r3, #0
 8007f62:	4604      	mov	r4, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	602b      	str	r3, [r5, #0]
 8007f68:	f7fa f81c 	bl	8001fa4 <_sbrk>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d102      	bne.n	8007f76 <_sbrk_r+0x1a>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	b103      	cbz	r3, 8007f76 <_sbrk_r+0x1a>
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	2000088c 	.word	0x2000088c

08007f7c <memcpy>:
 8007f7c:	440a      	add	r2, r1
 8007f7e:	4291      	cmp	r1, r2
 8007f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f84:	d100      	bne.n	8007f88 <memcpy+0xc>
 8007f86:	4770      	bx	lr
 8007f88:	b510      	push	{r4, lr}
 8007f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f92:	4291      	cmp	r1, r2
 8007f94:	d1f9      	bne.n	8007f8a <memcpy+0xe>
 8007f96:	bd10      	pop	{r4, pc}

08007f98 <__assert_func>:
 8007f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f9a:	4614      	mov	r4, r2
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	4b09      	ldr	r3, [pc, #36]	; (8007fc4 <__assert_func+0x2c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	68d8      	ldr	r0, [r3, #12]
 8007fa6:	b14c      	cbz	r4, 8007fbc <__assert_func+0x24>
 8007fa8:	4b07      	ldr	r3, [pc, #28]	; (8007fc8 <__assert_func+0x30>)
 8007faa:	9100      	str	r1, [sp, #0]
 8007fac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007fb0:	4906      	ldr	r1, [pc, #24]	; (8007fcc <__assert_func+0x34>)
 8007fb2:	462b      	mov	r3, r5
 8007fb4:	f000 f872 	bl	800809c <fiprintf>
 8007fb8:	f000 f882 	bl	80080c0 <abort>
 8007fbc:	4b04      	ldr	r3, [pc, #16]	; (8007fd0 <__assert_func+0x38>)
 8007fbe:	461c      	mov	r4, r3
 8007fc0:	e7f3      	b.n	8007faa <__assert_func+0x12>
 8007fc2:	bf00      	nop
 8007fc4:	2000008c 	.word	0x2000008c
 8007fc8:	08008947 	.word	0x08008947
 8007fcc:	08008954 	.word	0x08008954
 8007fd0:	08008982 	.word	0x08008982

08007fd4 <_calloc_r>:
 8007fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fd6:	fba1 2402 	umull	r2, r4, r1, r2
 8007fda:	b94c      	cbnz	r4, 8007ff0 <_calloc_r+0x1c>
 8007fdc:	4611      	mov	r1, r2
 8007fde:	9201      	str	r2, [sp, #4]
 8007fe0:	f7ff f994 	bl	800730c <_malloc_r>
 8007fe4:	9a01      	ldr	r2, [sp, #4]
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	b930      	cbnz	r0, 8007ff8 <_calloc_r+0x24>
 8007fea:	4628      	mov	r0, r5
 8007fec:	b003      	add	sp, #12
 8007fee:	bd30      	pop	{r4, r5, pc}
 8007ff0:	220c      	movs	r2, #12
 8007ff2:	6002      	str	r2, [r0, #0]
 8007ff4:	2500      	movs	r5, #0
 8007ff6:	e7f8      	b.n	8007fea <_calloc_r+0x16>
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	f7fe fa16 	bl	800642a <memset>
 8007ffe:	e7f4      	b.n	8007fea <_calloc_r+0x16>

08008000 <__ascii_mbtowc>:
 8008000:	b082      	sub	sp, #8
 8008002:	b901      	cbnz	r1, 8008006 <__ascii_mbtowc+0x6>
 8008004:	a901      	add	r1, sp, #4
 8008006:	b142      	cbz	r2, 800801a <__ascii_mbtowc+0x1a>
 8008008:	b14b      	cbz	r3, 800801e <__ascii_mbtowc+0x1e>
 800800a:	7813      	ldrb	r3, [r2, #0]
 800800c:	600b      	str	r3, [r1, #0]
 800800e:	7812      	ldrb	r2, [r2, #0]
 8008010:	1e10      	subs	r0, r2, #0
 8008012:	bf18      	it	ne
 8008014:	2001      	movne	r0, #1
 8008016:	b002      	add	sp, #8
 8008018:	4770      	bx	lr
 800801a:	4610      	mov	r0, r2
 800801c:	e7fb      	b.n	8008016 <__ascii_mbtowc+0x16>
 800801e:	f06f 0001 	mvn.w	r0, #1
 8008022:	e7f8      	b.n	8008016 <__ascii_mbtowc+0x16>

08008024 <_realloc_r>:
 8008024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008028:	4680      	mov	r8, r0
 800802a:	4614      	mov	r4, r2
 800802c:	460e      	mov	r6, r1
 800802e:	b921      	cbnz	r1, 800803a <_realloc_r+0x16>
 8008030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008034:	4611      	mov	r1, r2
 8008036:	f7ff b969 	b.w	800730c <_malloc_r>
 800803a:	b92a      	cbnz	r2, 8008048 <_realloc_r+0x24>
 800803c:	f7ff f8f2 	bl	8007224 <_free_r>
 8008040:	4625      	mov	r5, r4
 8008042:	4628      	mov	r0, r5
 8008044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008048:	f000 f841 	bl	80080ce <_malloc_usable_size_r>
 800804c:	4284      	cmp	r4, r0
 800804e:	4607      	mov	r7, r0
 8008050:	d802      	bhi.n	8008058 <_realloc_r+0x34>
 8008052:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008056:	d812      	bhi.n	800807e <_realloc_r+0x5a>
 8008058:	4621      	mov	r1, r4
 800805a:	4640      	mov	r0, r8
 800805c:	f7ff f956 	bl	800730c <_malloc_r>
 8008060:	4605      	mov	r5, r0
 8008062:	2800      	cmp	r0, #0
 8008064:	d0ed      	beq.n	8008042 <_realloc_r+0x1e>
 8008066:	42bc      	cmp	r4, r7
 8008068:	4622      	mov	r2, r4
 800806a:	4631      	mov	r1, r6
 800806c:	bf28      	it	cs
 800806e:	463a      	movcs	r2, r7
 8008070:	f7ff ff84 	bl	8007f7c <memcpy>
 8008074:	4631      	mov	r1, r6
 8008076:	4640      	mov	r0, r8
 8008078:	f7ff f8d4 	bl	8007224 <_free_r>
 800807c:	e7e1      	b.n	8008042 <_realloc_r+0x1e>
 800807e:	4635      	mov	r5, r6
 8008080:	e7df      	b.n	8008042 <_realloc_r+0x1e>

08008082 <__ascii_wctomb>:
 8008082:	b149      	cbz	r1, 8008098 <__ascii_wctomb+0x16>
 8008084:	2aff      	cmp	r2, #255	; 0xff
 8008086:	bf85      	ittet	hi
 8008088:	238a      	movhi	r3, #138	; 0x8a
 800808a:	6003      	strhi	r3, [r0, #0]
 800808c:	700a      	strbls	r2, [r1, #0]
 800808e:	f04f 30ff 	movhi.w	r0, #4294967295
 8008092:	bf98      	it	ls
 8008094:	2001      	movls	r0, #1
 8008096:	4770      	bx	lr
 8008098:	4608      	mov	r0, r1
 800809a:	4770      	bx	lr

0800809c <fiprintf>:
 800809c:	b40e      	push	{r1, r2, r3}
 800809e:	b503      	push	{r0, r1, lr}
 80080a0:	4601      	mov	r1, r0
 80080a2:	ab03      	add	r3, sp, #12
 80080a4:	4805      	ldr	r0, [pc, #20]	; (80080bc <fiprintf+0x20>)
 80080a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080aa:	6800      	ldr	r0, [r0, #0]
 80080ac:	9301      	str	r3, [sp, #4]
 80080ae:	f000 f83f 	bl	8008130 <_vfiprintf_r>
 80080b2:	b002      	add	sp, #8
 80080b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80080b8:	b003      	add	sp, #12
 80080ba:	4770      	bx	lr
 80080bc:	2000008c 	.word	0x2000008c

080080c0 <abort>:
 80080c0:	b508      	push	{r3, lr}
 80080c2:	2006      	movs	r0, #6
 80080c4:	f000 fa0c 	bl	80084e0 <raise>
 80080c8:	2001      	movs	r0, #1
 80080ca:	f7f9 fef3 	bl	8001eb4 <_exit>

080080ce <_malloc_usable_size_r>:
 80080ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d2:	1f18      	subs	r0, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	bfbc      	itt	lt
 80080d8:	580b      	ldrlt	r3, [r1, r0]
 80080da:	18c0      	addlt	r0, r0, r3
 80080dc:	4770      	bx	lr

080080de <__sfputc_r>:
 80080de:	6893      	ldr	r3, [r2, #8]
 80080e0:	3b01      	subs	r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	b410      	push	{r4}
 80080e6:	6093      	str	r3, [r2, #8]
 80080e8:	da08      	bge.n	80080fc <__sfputc_r+0x1e>
 80080ea:	6994      	ldr	r4, [r2, #24]
 80080ec:	42a3      	cmp	r3, r4
 80080ee:	db01      	blt.n	80080f4 <__sfputc_r+0x16>
 80080f0:	290a      	cmp	r1, #10
 80080f2:	d103      	bne.n	80080fc <__sfputc_r+0x1e>
 80080f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080f8:	f000 b934 	b.w	8008364 <__swbuf_r>
 80080fc:	6813      	ldr	r3, [r2, #0]
 80080fe:	1c58      	adds	r0, r3, #1
 8008100:	6010      	str	r0, [r2, #0]
 8008102:	7019      	strb	r1, [r3, #0]
 8008104:	4608      	mov	r0, r1
 8008106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800810a:	4770      	bx	lr

0800810c <__sfputs_r>:
 800810c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810e:	4606      	mov	r6, r0
 8008110:	460f      	mov	r7, r1
 8008112:	4614      	mov	r4, r2
 8008114:	18d5      	adds	r5, r2, r3
 8008116:	42ac      	cmp	r4, r5
 8008118:	d101      	bne.n	800811e <__sfputs_r+0x12>
 800811a:	2000      	movs	r0, #0
 800811c:	e007      	b.n	800812e <__sfputs_r+0x22>
 800811e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008122:	463a      	mov	r2, r7
 8008124:	4630      	mov	r0, r6
 8008126:	f7ff ffda 	bl	80080de <__sfputc_r>
 800812a:	1c43      	adds	r3, r0, #1
 800812c:	d1f3      	bne.n	8008116 <__sfputs_r+0xa>
 800812e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008130 <_vfiprintf_r>:
 8008130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008134:	460d      	mov	r5, r1
 8008136:	b09d      	sub	sp, #116	; 0x74
 8008138:	4614      	mov	r4, r2
 800813a:	4698      	mov	r8, r3
 800813c:	4606      	mov	r6, r0
 800813e:	b118      	cbz	r0, 8008148 <_vfiprintf_r+0x18>
 8008140:	6a03      	ldr	r3, [r0, #32]
 8008142:	b90b      	cbnz	r3, 8008148 <_vfiprintf_r+0x18>
 8008144:	f7fe f8c4 	bl	80062d0 <__sinit>
 8008148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800814a:	07d9      	lsls	r1, r3, #31
 800814c:	d405      	bmi.n	800815a <_vfiprintf_r+0x2a>
 800814e:	89ab      	ldrh	r3, [r5, #12]
 8008150:	059a      	lsls	r2, r3, #22
 8008152:	d402      	bmi.n	800815a <_vfiprintf_r+0x2a>
 8008154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008156:	f7fe f9e6 	bl	8006526 <__retarget_lock_acquire_recursive>
 800815a:	89ab      	ldrh	r3, [r5, #12]
 800815c:	071b      	lsls	r3, r3, #28
 800815e:	d501      	bpl.n	8008164 <_vfiprintf_r+0x34>
 8008160:	692b      	ldr	r3, [r5, #16]
 8008162:	b99b      	cbnz	r3, 800818c <_vfiprintf_r+0x5c>
 8008164:	4629      	mov	r1, r5
 8008166:	4630      	mov	r0, r6
 8008168:	f000 f93a 	bl	80083e0 <__swsetup_r>
 800816c:	b170      	cbz	r0, 800818c <_vfiprintf_r+0x5c>
 800816e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008170:	07dc      	lsls	r4, r3, #31
 8008172:	d504      	bpl.n	800817e <_vfiprintf_r+0x4e>
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
 8008178:	b01d      	add	sp, #116	; 0x74
 800817a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817e:	89ab      	ldrh	r3, [r5, #12]
 8008180:	0598      	lsls	r0, r3, #22
 8008182:	d4f7      	bmi.n	8008174 <_vfiprintf_r+0x44>
 8008184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008186:	f7fe f9cf 	bl	8006528 <__retarget_lock_release_recursive>
 800818a:	e7f3      	b.n	8008174 <_vfiprintf_r+0x44>
 800818c:	2300      	movs	r3, #0
 800818e:	9309      	str	r3, [sp, #36]	; 0x24
 8008190:	2320      	movs	r3, #32
 8008192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008196:	f8cd 800c 	str.w	r8, [sp, #12]
 800819a:	2330      	movs	r3, #48	; 0x30
 800819c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008350 <_vfiprintf_r+0x220>
 80081a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081a4:	f04f 0901 	mov.w	r9, #1
 80081a8:	4623      	mov	r3, r4
 80081aa:	469a      	mov	sl, r3
 80081ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081b0:	b10a      	cbz	r2, 80081b6 <_vfiprintf_r+0x86>
 80081b2:	2a25      	cmp	r2, #37	; 0x25
 80081b4:	d1f9      	bne.n	80081aa <_vfiprintf_r+0x7a>
 80081b6:	ebba 0b04 	subs.w	fp, sl, r4
 80081ba:	d00b      	beq.n	80081d4 <_vfiprintf_r+0xa4>
 80081bc:	465b      	mov	r3, fp
 80081be:	4622      	mov	r2, r4
 80081c0:	4629      	mov	r1, r5
 80081c2:	4630      	mov	r0, r6
 80081c4:	f7ff ffa2 	bl	800810c <__sfputs_r>
 80081c8:	3001      	adds	r0, #1
 80081ca:	f000 80a9 	beq.w	8008320 <_vfiprintf_r+0x1f0>
 80081ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d0:	445a      	add	r2, fp
 80081d2:	9209      	str	r2, [sp, #36]	; 0x24
 80081d4:	f89a 3000 	ldrb.w	r3, [sl]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 80a1 	beq.w	8008320 <_vfiprintf_r+0x1f0>
 80081de:	2300      	movs	r3, #0
 80081e0:	f04f 32ff 	mov.w	r2, #4294967295
 80081e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081e8:	f10a 0a01 	add.w	sl, sl, #1
 80081ec:	9304      	str	r3, [sp, #16]
 80081ee:	9307      	str	r3, [sp, #28]
 80081f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081f4:	931a      	str	r3, [sp, #104]	; 0x68
 80081f6:	4654      	mov	r4, sl
 80081f8:	2205      	movs	r2, #5
 80081fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fe:	4854      	ldr	r0, [pc, #336]	; (8008350 <_vfiprintf_r+0x220>)
 8008200:	f7f7 ffee 	bl	80001e0 <memchr>
 8008204:	9a04      	ldr	r2, [sp, #16]
 8008206:	b9d8      	cbnz	r0, 8008240 <_vfiprintf_r+0x110>
 8008208:	06d1      	lsls	r1, r2, #27
 800820a:	bf44      	itt	mi
 800820c:	2320      	movmi	r3, #32
 800820e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008212:	0713      	lsls	r3, r2, #28
 8008214:	bf44      	itt	mi
 8008216:	232b      	movmi	r3, #43	; 0x2b
 8008218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800821c:	f89a 3000 	ldrb.w	r3, [sl]
 8008220:	2b2a      	cmp	r3, #42	; 0x2a
 8008222:	d015      	beq.n	8008250 <_vfiprintf_r+0x120>
 8008224:	9a07      	ldr	r2, [sp, #28]
 8008226:	4654      	mov	r4, sl
 8008228:	2000      	movs	r0, #0
 800822a:	f04f 0c0a 	mov.w	ip, #10
 800822e:	4621      	mov	r1, r4
 8008230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008234:	3b30      	subs	r3, #48	; 0x30
 8008236:	2b09      	cmp	r3, #9
 8008238:	d94d      	bls.n	80082d6 <_vfiprintf_r+0x1a6>
 800823a:	b1b0      	cbz	r0, 800826a <_vfiprintf_r+0x13a>
 800823c:	9207      	str	r2, [sp, #28]
 800823e:	e014      	b.n	800826a <_vfiprintf_r+0x13a>
 8008240:	eba0 0308 	sub.w	r3, r0, r8
 8008244:	fa09 f303 	lsl.w	r3, r9, r3
 8008248:	4313      	orrs	r3, r2
 800824a:	9304      	str	r3, [sp, #16]
 800824c:	46a2      	mov	sl, r4
 800824e:	e7d2      	b.n	80081f6 <_vfiprintf_r+0xc6>
 8008250:	9b03      	ldr	r3, [sp, #12]
 8008252:	1d19      	adds	r1, r3, #4
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	9103      	str	r1, [sp, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	bfbb      	ittet	lt
 800825c:	425b      	neglt	r3, r3
 800825e:	f042 0202 	orrlt.w	r2, r2, #2
 8008262:	9307      	strge	r3, [sp, #28]
 8008264:	9307      	strlt	r3, [sp, #28]
 8008266:	bfb8      	it	lt
 8008268:	9204      	strlt	r2, [sp, #16]
 800826a:	7823      	ldrb	r3, [r4, #0]
 800826c:	2b2e      	cmp	r3, #46	; 0x2e
 800826e:	d10c      	bne.n	800828a <_vfiprintf_r+0x15a>
 8008270:	7863      	ldrb	r3, [r4, #1]
 8008272:	2b2a      	cmp	r3, #42	; 0x2a
 8008274:	d134      	bne.n	80082e0 <_vfiprintf_r+0x1b0>
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	1d1a      	adds	r2, r3, #4
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	9203      	str	r2, [sp, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	bfb8      	it	lt
 8008282:	f04f 33ff 	movlt.w	r3, #4294967295
 8008286:	3402      	adds	r4, #2
 8008288:	9305      	str	r3, [sp, #20]
 800828a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008360 <_vfiprintf_r+0x230>
 800828e:	7821      	ldrb	r1, [r4, #0]
 8008290:	2203      	movs	r2, #3
 8008292:	4650      	mov	r0, sl
 8008294:	f7f7 ffa4 	bl	80001e0 <memchr>
 8008298:	b138      	cbz	r0, 80082aa <_vfiprintf_r+0x17a>
 800829a:	9b04      	ldr	r3, [sp, #16]
 800829c:	eba0 000a 	sub.w	r0, r0, sl
 80082a0:	2240      	movs	r2, #64	; 0x40
 80082a2:	4082      	lsls	r2, r0
 80082a4:	4313      	orrs	r3, r2
 80082a6:	3401      	adds	r4, #1
 80082a8:	9304      	str	r3, [sp, #16]
 80082aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ae:	4829      	ldr	r0, [pc, #164]	; (8008354 <_vfiprintf_r+0x224>)
 80082b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082b4:	2206      	movs	r2, #6
 80082b6:	f7f7 ff93 	bl	80001e0 <memchr>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d03f      	beq.n	800833e <_vfiprintf_r+0x20e>
 80082be:	4b26      	ldr	r3, [pc, #152]	; (8008358 <_vfiprintf_r+0x228>)
 80082c0:	bb1b      	cbnz	r3, 800830a <_vfiprintf_r+0x1da>
 80082c2:	9b03      	ldr	r3, [sp, #12]
 80082c4:	3307      	adds	r3, #7
 80082c6:	f023 0307 	bic.w	r3, r3, #7
 80082ca:	3308      	adds	r3, #8
 80082cc:	9303      	str	r3, [sp, #12]
 80082ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d0:	443b      	add	r3, r7
 80082d2:	9309      	str	r3, [sp, #36]	; 0x24
 80082d4:	e768      	b.n	80081a8 <_vfiprintf_r+0x78>
 80082d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80082da:	460c      	mov	r4, r1
 80082dc:	2001      	movs	r0, #1
 80082de:	e7a6      	b.n	800822e <_vfiprintf_r+0xfe>
 80082e0:	2300      	movs	r3, #0
 80082e2:	3401      	adds	r4, #1
 80082e4:	9305      	str	r3, [sp, #20]
 80082e6:	4619      	mov	r1, r3
 80082e8:	f04f 0c0a 	mov.w	ip, #10
 80082ec:	4620      	mov	r0, r4
 80082ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082f2:	3a30      	subs	r2, #48	; 0x30
 80082f4:	2a09      	cmp	r2, #9
 80082f6:	d903      	bls.n	8008300 <_vfiprintf_r+0x1d0>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d0c6      	beq.n	800828a <_vfiprintf_r+0x15a>
 80082fc:	9105      	str	r1, [sp, #20]
 80082fe:	e7c4      	b.n	800828a <_vfiprintf_r+0x15a>
 8008300:	fb0c 2101 	mla	r1, ip, r1, r2
 8008304:	4604      	mov	r4, r0
 8008306:	2301      	movs	r3, #1
 8008308:	e7f0      	b.n	80082ec <_vfiprintf_r+0x1bc>
 800830a:	ab03      	add	r3, sp, #12
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	462a      	mov	r2, r5
 8008310:	4b12      	ldr	r3, [pc, #72]	; (800835c <_vfiprintf_r+0x22c>)
 8008312:	a904      	add	r1, sp, #16
 8008314:	4630      	mov	r0, r6
 8008316:	f7fd fb89 	bl	8005a2c <_printf_float>
 800831a:	4607      	mov	r7, r0
 800831c:	1c78      	adds	r0, r7, #1
 800831e:	d1d6      	bne.n	80082ce <_vfiprintf_r+0x19e>
 8008320:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008322:	07d9      	lsls	r1, r3, #31
 8008324:	d405      	bmi.n	8008332 <_vfiprintf_r+0x202>
 8008326:	89ab      	ldrh	r3, [r5, #12]
 8008328:	059a      	lsls	r2, r3, #22
 800832a:	d402      	bmi.n	8008332 <_vfiprintf_r+0x202>
 800832c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800832e:	f7fe f8fb 	bl	8006528 <__retarget_lock_release_recursive>
 8008332:	89ab      	ldrh	r3, [r5, #12]
 8008334:	065b      	lsls	r3, r3, #25
 8008336:	f53f af1d 	bmi.w	8008174 <_vfiprintf_r+0x44>
 800833a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800833c:	e71c      	b.n	8008178 <_vfiprintf_r+0x48>
 800833e:	ab03      	add	r3, sp, #12
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	462a      	mov	r2, r5
 8008344:	4b05      	ldr	r3, [pc, #20]	; (800835c <_vfiprintf_r+0x22c>)
 8008346:	a904      	add	r1, sp, #16
 8008348:	4630      	mov	r0, r6
 800834a:	f7fd fe13 	bl	8005f74 <_printf_i>
 800834e:	e7e4      	b.n	800831a <_vfiprintf_r+0x1ea>
 8008350:	0800892c 	.word	0x0800892c
 8008354:	08008936 	.word	0x08008936
 8008358:	08005a2d 	.word	0x08005a2d
 800835c:	0800810d 	.word	0x0800810d
 8008360:	08008932 	.word	0x08008932

08008364 <__swbuf_r>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	460e      	mov	r6, r1
 8008368:	4614      	mov	r4, r2
 800836a:	4605      	mov	r5, r0
 800836c:	b118      	cbz	r0, 8008376 <__swbuf_r+0x12>
 800836e:	6a03      	ldr	r3, [r0, #32]
 8008370:	b90b      	cbnz	r3, 8008376 <__swbuf_r+0x12>
 8008372:	f7fd ffad 	bl	80062d0 <__sinit>
 8008376:	69a3      	ldr	r3, [r4, #24]
 8008378:	60a3      	str	r3, [r4, #8]
 800837a:	89a3      	ldrh	r3, [r4, #12]
 800837c:	071a      	lsls	r2, r3, #28
 800837e:	d525      	bpl.n	80083cc <__swbuf_r+0x68>
 8008380:	6923      	ldr	r3, [r4, #16]
 8008382:	b31b      	cbz	r3, 80083cc <__swbuf_r+0x68>
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	6922      	ldr	r2, [r4, #16]
 8008388:	1a98      	subs	r0, r3, r2
 800838a:	6963      	ldr	r3, [r4, #20]
 800838c:	b2f6      	uxtb	r6, r6
 800838e:	4283      	cmp	r3, r0
 8008390:	4637      	mov	r7, r6
 8008392:	dc04      	bgt.n	800839e <__swbuf_r+0x3a>
 8008394:	4621      	mov	r1, r4
 8008396:	4628      	mov	r0, r5
 8008398:	f7ff fd9e 	bl	8007ed8 <_fflush_r>
 800839c:	b9e0      	cbnz	r0, 80083d8 <__swbuf_r+0x74>
 800839e:	68a3      	ldr	r3, [r4, #8]
 80083a0:	3b01      	subs	r3, #1
 80083a2:	60a3      	str	r3, [r4, #8]
 80083a4:	6823      	ldr	r3, [r4, #0]
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	6022      	str	r2, [r4, #0]
 80083aa:	701e      	strb	r6, [r3, #0]
 80083ac:	6962      	ldr	r2, [r4, #20]
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d004      	beq.n	80083be <__swbuf_r+0x5a>
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	07db      	lsls	r3, r3, #31
 80083b8:	d506      	bpl.n	80083c8 <__swbuf_r+0x64>
 80083ba:	2e0a      	cmp	r6, #10
 80083bc:	d104      	bne.n	80083c8 <__swbuf_r+0x64>
 80083be:	4621      	mov	r1, r4
 80083c0:	4628      	mov	r0, r5
 80083c2:	f7ff fd89 	bl	8007ed8 <_fflush_r>
 80083c6:	b938      	cbnz	r0, 80083d8 <__swbuf_r+0x74>
 80083c8:	4638      	mov	r0, r7
 80083ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083cc:	4621      	mov	r1, r4
 80083ce:	4628      	mov	r0, r5
 80083d0:	f000 f806 	bl	80083e0 <__swsetup_r>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d0d5      	beq.n	8008384 <__swbuf_r+0x20>
 80083d8:	f04f 37ff 	mov.w	r7, #4294967295
 80083dc:	e7f4      	b.n	80083c8 <__swbuf_r+0x64>
	...

080083e0 <__swsetup_r>:
 80083e0:	b538      	push	{r3, r4, r5, lr}
 80083e2:	4b2a      	ldr	r3, [pc, #168]	; (800848c <__swsetup_r+0xac>)
 80083e4:	4605      	mov	r5, r0
 80083e6:	6818      	ldr	r0, [r3, #0]
 80083e8:	460c      	mov	r4, r1
 80083ea:	b118      	cbz	r0, 80083f4 <__swsetup_r+0x14>
 80083ec:	6a03      	ldr	r3, [r0, #32]
 80083ee:	b90b      	cbnz	r3, 80083f4 <__swsetup_r+0x14>
 80083f0:	f7fd ff6e 	bl	80062d0 <__sinit>
 80083f4:	89a3      	ldrh	r3, [r4, #12]
 80083f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083fa:	0718      	lsls	r0, r3, #28
 80083fc:	d422      	bmi.n	8008444 <__swsetup_r+0x64>
 80083fe:	06d9      	lsls	r1, r3, #27
 8008400:	d407      	bmi.n	8008412 <__swsetup_r+0x32>
 8008402:	2309      	movs	r3, #9
 8008404:	602b      	str	r3, [r5, #0]
 8008406:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800840a:	81a3      	strh	r3, [r4, #12]
 800840c:	f04f 30ff 	mov.w	r0, #4294967295
 8008410:	e034      	b.n	800847c <__swsetup_r+0x9c>
 8008412:	0758      	lsls	r0, r3, #29
 8008414:	d512      	bpl.n	800843c <__swsetup_r+0x5c>
 8008416:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008418:	b141      	cbz	r1, 800842c <__swsetup_r+0x4c>
 800841a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800841e:	4299      	cmp	r1, r3
 8008420:	d002      	beq.n	8008428 <__swsetup_r+0x48>
 8008422:	4628      	mov	r0, r5
 8008424:	f7fe fefe 	bl	8007224 <_free_r>
 8008428:	2300      	movs	r3, #0
 800842a:	6363      	str	r3, [r4, #52]	; 0x34
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	2300      	movs	r3, #0
 8008436:	6063      	str	r3, [r4, #4]
 8008438:	6923      	ldr	r3, [r4, #16]
 800843a:	6023      	str	r3, [r4, #0]
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	f043 0308 	orr.w	r3, r3, #8
 8008442:	81a3      	strh	r3, [r4, #12]
 8008444:	6923      	ldr	r3, [r4, #16]
 8008446:	b94b      	cbnz	r3, 800845c <__swsetup_r+0x7c>
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800844e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008452:	d003      	beq.n	800845c <__swsetup_r+0x7c>
 8008454:	4621      	mov	r1, r4
 8008456:	4628      	mov	r0, r5
 8008458:	f000 f884 	bl	8008564 <__smakebuf_r>
 800845c:	89a0      	ldrh	r0, [r4, #12]
 800845e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008462:	f010 0301 	ands.w	r3, r0, #1
 8008466:	d00a      	beq.n	800847e <__swsetup_r+0x9e>
 8008468:	2300      	movs	r3, #0
 800846a:	60a3      	str	r3, [r4, #8]
 800846c:	6963      	ldr	r3, [r4, #20]
 800846e:	425b      	negs	r3, r3
 8008470:	61a3      	str	r3, [r4, #24]
 8008472:	6923      	ldr	r3, [r4, #16]
 8008474:	b943      	cbnz	r3, 8008488 <__swsetup_r+0xa8>
 8008476:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800847a:	d1c4      	bne.n	8008406 <__swsetup_r+0x26>
 800847c:	bd38      	pop	{r3, r4, r5, pc}
 800847e:	0781      	lsls	r1, r0, #30
 8008480:	bf58      	it	pl
 8008482:	6963      	ldrpl	r3, [r4, #20]
 8008484:	60a3      	str	r3, [r4, #8]
 8008486:	e7f4      	b.n	8008472 <__swsetup_r+0x92>
 8008488:	2000      	movs	r0, #0
 800848a:	e7f7      	b.n	800847c <__swsetup_r+0x9c>
 800848c:	2000008c 	.word	0x2000008c

08008490 <_raise_r>:
 8008490:	291f      	cmp	r1, #31
 8008492:	b538      	push	{r3, r4, r5, lr}
 8008494:	4604      	mov	r4, r0
 8008496:	460d      	mov	r5, r1
 8008498:	d904      	bls.n	80084a4 <_raise_r+0x14>
 800849a:	2316      	movs	r3, #22
 800849c:	6003      	str	r3, [r0, #0]
 800849e:	f04f 30ff 	mov.w	r0, #4294967295
 80084a2:	bd38      	pop	{r3, r4, r5, pc}
 80084a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80084a6:	b112      	cbz	r2, 80084ae <_raise_r+0x1e>
 80084a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084ac:	b94b      	cbnz	r3, 80084c2 <_raise_r+0x32>
 80084ae:	4620      	mov	r0, r4
 80084b0:	f000 f830 	bl	8008514 <_getpid_r>
 80084b4:	462a      	mov	r2, r5
 80084b6:	4601      	mov	r1, r0
 80084b8:	4620      	mov	r0, r4
 80084ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084be:	f000 b817 	b.w	80084f0 <_kill_r>
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d00a      	beq.n	80084dc <_raise_r+0x4c>
 80084c6:	1c59      	adds	r1, r3, #1
 80084c8:	d103      	bne.n	80084d2 <_raise_r+0x42>
 80084ca:	2316      	movs	r3, #22
 80084cc:	6003      	str	r3, [r0, #0]
 80084ce:	2001      	movs	r0, #1
 80084d0:	e7e7      	b.n	80084a2 <_raise_r+0x12>
 80084d2:	2400      	movs	r4, #0
 80084d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084d8:	4628      	mov	r0, r5
 80084da:	4798      	blx	r3
 80084dc:	2000      	movs	r0, #0
 80084de:	e7e0      	b.n	80084a2 <_raise_r+0x12>

080084e0 <raise>:
 80084e0:	4b02      	ldr	r3, [pc, #8]	; (80084ec <raise+0xc>)
 80084e2:	4601      	mov	r1, r0
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	f7ff bfd3 	b.w	8008490 <_raise_r>
 80084ea:	bf00      	nop
 80084ec:	2000008c 	.word	0x2000008c

080084f0 <_kill_r>:
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	4d07      	ldr	r5, [pc, #28]	; (8008510 <_kill_r+0x20>)
 80084f4:	2300      	movs	r3, #0
 80084f6:	4604      	mov	r4, r0
 80084f8:	4608      	mov	r0, r1
 80084fa:	4611      	mov	r1, r2
 80084fc:	602b      	str	r3, [r5, #0]
 80084fe:	f7f9 fcc9 	bl	8001e94 <_kill>
 8008502:	1c43      	adds	r3, r0, #1
 8008504:	d102      	bne.n	800850c <_kill_r+0x1c>
 8008506:	682b      	ldr	r3, [r5, #0]
 8008508:	b103      	cbz	r3, 800850c <_kill_r+0x1c>
 800850a:	6023      	str	r3, [r4, #0]
 800850c:	bd38      	pop	{r3, r4, r5, pc}
 800850e:	bf00      	nop
 8008510:	2000088c 	.word	0x2000088c

08008514 <_getpid_r>:
 8008514:	f7f9 bcb6 	b.w	8001e84 <_getpid>

08008518 <__swhatbuf_r>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	460c      	mov	r4, r1
 800851c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008520:	2900      	cmp	r1, #0
 8008522:	b096      	sub	sp, #88	; 0x58
 8008524:	4615      	mov	r5, r2
 8008526:	461e      	mov	r6, r3
 8008528:	da0d      	bge.n	8008546 <__swhatbuf_r+0x2e>
 800852a:	89a3      	ldrh	r3, [r4, #12]
 800852c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008530:	f04f 0100 	mov.w	r1, #0
 8008534:	bf0c      	ite	eq
 8008536:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800853a:	2340      	movne	r3, #64	; 0x40
 800853c:	2000      	movs	r0, #0
 800853e:	6031      	str	r1, [r6, #0]
 8008540:	602b      	str	r3, [r5, #0]
 8008542:	b016      	add	sp, #88	; 0x58
 8008544:	bd70      	pop	{r4, r5, r6, pc}
 8008546:	466a      	mov	r2, sp
 8008548:	f000 f848 	bl	80085dc <_fstat_r>
 800854c:	2800      	cmp	r0, #0
 800854e:	dbec      	blt.n	800852a <__swhatbuf_r+0x12>
 8008550:	9901      	ldr	r1, [sp, #4]
 8008552:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008556:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800855a:	4259      	negs	r1, r3
 800855c:	4159      	adcs	r1, r3
 800855e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008562:	e7eb      	b.n	800853c <__swhatbuf_r+0x24>

08008564 <__smakebuf_r>:
 8008564:	898b      	ldrh	r3, [r1, #12]
 8008566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008568:	079d      	lsls	r5, r3, #30
 800856a:	4606      	mov	r6, r0
 800856c:	460c      	mov	r4, r1
 800856e:	d507      	bpl.n	8008580 <__smakebuf_r+0x1c>
 8008570:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	6123      	str	r3, [r4, #16]
 8008578:	2301      	movs	r3, #1
 800857a:	6163      	str	r3, [r4, #20]
 800857c:	b002      	add	sp, #8
 800857e:	bd70      	pop	{r4, r5, r6, pc}
 8008580:	ab01      	add	r3, sp, #4
 8008582:	466a      	mov	r2, sp
 8008584:	f7ff ffc8 	bl	8008518 <__swhatbuf_r>
 8008588:	9900      	ldr	r1, [sp, #0]
 800858a:	4605      	mov	r5, r0
 800858c:	4630      	mov	r0, r6
 800858e:	f7fe febd 	bl	800730c <_malloc_r>
 8008592:	b948      	cbnz	r0, 80085a8 <__smakebuf_r+0x44>
 8008594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008598:	059a      	lsls	r2, r3, #22
 800859a:	d4ef      	bmi.n	800857c <__smakebuf_r+0x18>
 800859c:	f023 0303 	bic.w	r3, r3, #3
 80085a0:	f043 0302 	orr.w	r3, r3, #2
 80085a4:	81a3      	strh	r3, [r4, #12]
 80085a6:	e7e3      	b.n	8008570 <__smakebuf_r+0xc>
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	6020      	str	r0, [r4, #0]
 80085ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b0:	81a3      	strh	r3, [r4, #12]
 80085b2:	9b00      	ldr	r3, [sp, #0]
 80085b4:	6163      	str	r3, [r4, #20]
 80085b6:	9b01      	ldr	r3, [sp, #4]
 80085b8:	6120      	str	r0, [r4, #16]
 80085ba:	b15b      	cbz	r3, 80085d4 <__smakebuf_r+0x70>
 80085bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085c0:	4630      	mov	r0, r6
 80085c2:	f000 f81d 	bl	8008600 <_isatty_r>
 80085c6:	b128      	cbz	r0, 80085d4 <__smakebuf_r+0x70>
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	f023 0303 	bic.w	r3, r3, #3
 80085ce:	f043 0301 	orr.w	r3, r3, #1
 80085d2:	81a3      	strh	r3, [r4, #12]
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	431d      	orrs	r5, r3
 80085d8:	81a5      	strh	r5, [r4, #12]
 80085da:	e7cf      	b.n	800857c <__smakebuf_r+0x18>

080085dc <_fstat_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	4d07      	ldr	r5, [pc, #28]	; (80085fc <_fstat_r+0x20>)
 80085e0:	2300      	movs	r3, #0
 80085e2:	4604      	mov	r4, r0
 80085e4:	4608      	mov	r0, r1
 80085e6:	4611      	mov	r1, r2
 80085e8:	602b      	str	r3, [r5, #0]
 80085ea:	f7f9 fcb2 	bl	8001f52 <_fstat>
 80085ee:	1c43      	adds	r3, r0, #1
 80085f0:	d102      	bne.n	80085f8 <_fstat_r+0x1c>
 80085f2:	682b      	ldr	r3, [r5, #0]
 80085f4:	b103      	cbz	r3, 80085f8 <_fstat_r+0x1c>
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	bd38      	pop	{r3, r4, r5, pc}
 80085fa:	bf00      	nop
 80085fc:	2000088c 	.word	0x2000088c

08008600 <_isatty_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4d06      	ldr	r5, [pc, #24]	; (800861c <_isatty_r+0x1c>)
 8008604:	2300      	movs	r3, #0
 8008606:	4604      	mov	r4, r0
 8008608:	4608      	mov	r0, r1
 800860a:	602b      	str	r3, [r5, #0]
 800860c:	f7f9 fcb1 	bl	8001f72 <_isatty>
 8008610:	1c43      	adds	r3, r0, #1
 8008612:	d102      	bne.n	800861a <_isatty_r+0x1a>
 8008614:	682b      	ldr	r3, [r5, #0]
 8008616:	b103      	cbz	r3, 800861a <_isatty_r+0x1a>
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	bd38      	pop	{r3, r4, r5, pc}
 800861c:	2000088c 	.word	0x2000088c

08008620 <round>:
 8008620:	ec53 2b10 	vmov	r2, r3, d0
 8008624:	b570      	push	{r4, r5, r6, lr}
 8008626:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800862a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800862e:	2813      	cmp	r0, #19
 8008630:	ee10 5a10 	vmov	r5, s0
 8008634:	4619      	mov	r1, r3
 8008636:	dc18      	bgt.n	800866a <round+0x4a>
 8008638:	2800      	cmp	r0, #0
 800863a:	da09      	bge.n	8008650 <round+0x30>
 800863c:	3001      	adds	r0, #1
 800863e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8008642:	d103      	bne.n	800864c <round+0x2c>
 8008644:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008648:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800864c:	2300      	movs	r3, #0
 800864e:	e02a      	b.n	80086a6 <round+0x86>
 8008650:	4c16      	ldr	r4, [pc, #88]	; (80086ac <round+0x8c>)
 8008652:	4104      	asrs	r4, r0
 8008654:	ea03 0604 	and.w	r6, r3, r4
 8008658:	4316      	orrs	r6, r2
 800865a:	d011      	beq.n	8008680 <round+0x60>
 800865c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008660:	4103      	asrs	r3, r0
 8008662:	440b      	add	r3, r1
 8008664:	ea23 0104 	bic.w	r1, r3, r4
 8008668:	e7f0      	b.n	800864c <round+0x2c>
 800866a:	2833      	cmp	r0, #51	; 0x33
 800866c:	dd0b      	ble.n	8008686 <round+0x66>
 800866e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008672:	d105      	bne.n	8008680 <round+0x60>
 8008674:	ee10 0a10 	vmov	r0, s0
 8008678:	f7f7 fe10 	bl	800029c <__adddf3>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	ec43 2b10 	vmov	d0, r2, r3
 8008684:	bd70      	pop	{r4, r5, r6, pc}
 8008686:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800868a:	f04f 34ff 	mov.w	r4, #4294967295
 800868e:	40f4      	lsrs	r4, r6
 8008690:	4214      	tst	r4, r2
 8008692:	d0f5      	beq.n	8008680 <round+0x60>
 8008694:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8008698:	2301      	movs	r3, #1
 800869a:	4083      	lsls	r3, r0
 800869c:	195b      	adds	r3, r3, r5
 800869e:	bf28      	it	cs
 80086a0:	3101      	addcs	r1, #1
 80086a2:	ea23 0304 	bic.w	r3, r3, r4
 80086a6:	461a      	mov	r2, r3
 80086a8:	460b      	mov	r3, r1
 80086aa:	e7e9      	b.n	8008680 <round+0x60>
 80086ac:	000fffff 	.word	0x000fffff

080086b0 <_init>:
 80086b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b2:	bf00      	nop
 80086b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b6:	bc08      	pop	{r3}
 80086b8:	469e      	mov	lr, r3
 80086ba:	4770      	bx	lr

080086bc <_fini>:
 80086bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086be:	bf00      	nop
 80086c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c2:	bc08      	pop	{r3}
 80086c4:	469e      	mov	lr, r3
 80086c6:	4770      	bx	lr
