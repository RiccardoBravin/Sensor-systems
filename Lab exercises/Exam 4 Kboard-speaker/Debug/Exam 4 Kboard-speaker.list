
Exam 4 Kboard-speaker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005760  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005900  08005900  00015900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a0  080059a0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080059a0  080059a0  000159a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059a8  080059a8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a8  080059a8  000159a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059ac  080059ac  000159ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080059b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000080  08005a30  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08005a30  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c3cd  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a72  00000000  00000000  0002c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002df38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000922  00000000  00000000  0002ead8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001638a  00000000  00000000  0002f3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d3e7  00000000  00000000  00045784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d7ad  00000000  00000000  00052b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ae8  00000000  00000000  000e0318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000e3e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058e8 	.word	0x080058e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080058e8 	.word	0x080058e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <set_pwm>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_pwm(float freq){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	ed87 0a01 	vstr	s0, [r7, #4]
	htim1.Init.Period = 1000000/freq-1;
 8000efe:	eddf 6a28 	vldr	s13, [pc, #160]	; 8000fa0 <set_pwm+0xac>
 8000f02:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f16:	ee17 2a90 	vmov	r2, s15
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <set_pwm+0xb0>)
 8000f1c:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)	Error_Handler();
 8000f1e:	4821      	ldr	r0, [pc, #132]	; (8000fa4 <set_pwm+0xb0>)
 8000f20:	f001 fd7a 	bl	8002a18 <HAL_TIM_PWM_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <set_pwm+0x3a>
 8000f2a:	f000 fb5d 	bl	80015e8 <Error_Handler>

	TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]
 8000f3e:	615a      	str	r2, [r3, #20]
 8000f40:	619a      	str	r2, [r3, #24]

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f42:	2360      	movs	r3, #96	; 0x60
 8000f44:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = 1000000/freq/2-1;
 8000f46:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000fa0 <set_pwm+0xac>
 8000f4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f52:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000f56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f66:	ee17 3a90 	vmov	r3, s15
 8000f6a:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)	Error_Handler();
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2204      	movs	r2, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <set_pwm+0xb0>)
 8000f8a:	f001 ffbb 	bl	8002f04 <HAL_TIM_PWM_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <set_pwm+0xa4>
 8000f94:	f000 fb28 	bl	80015e8 <Error_Handler>
}
 8000f98:	bf00      	nop
 8000f9a:	3728      	adds	r7, #40	; 0x28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	49742400 	.word	0x49742400
 8000fa4:	2000009c 	.word	0x2000009c

08000fa8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b096      	sub	sp, #88	; 0x58
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a75      	ldr	r2, [pc, #468]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	f040 80d8 	bne.w	800116a <HAL_TIM_PeriodElapsedCallback+0x1c2>
		static const char lett[16] = "CDEF89AB45670123"; //initialized letters array
		static char state[16] = { 0 }; //initialized states of buttons
		static int col = 0; //index for column
		char string[64];
		HAL_GPIO_WritePin(GPIOC, k_output[col], 1);
 8000fba:	4b74      	ldr	r3, [pc, #464]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a74      	ldr	r2, [pc, #464]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4872      	ldr	r0, [pc, #456]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000fca:	f000 ffc1 	bl	8001f50 <HAL_GPIO_WritePin>

		for (int i = 0; i < N_ROWS; i++) {
 8000fce:	2300      	movs	r3, #0
 8000fd0:	657b      	str	r3, [r7, #84]	; 0x54
 8000fd2:	e0a6      	b.n	8001122 <HAL_TIM_PeriodElapsedCallback+0x17a>
			int on = !HAL_GPIO_ReadPin(GPIOC, k_input[i]);
 8000fd4:	4a70      	ldr	r2, [pc, #448]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	486d      	ldr	r0, [pc, #436]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000fe0:	f000 ff9e 	bl	8001f20 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	bf0c      	ite	eq
 8000fea:	2301      	moveq	r3, #1
 8000fec:	2300      	movne	r3, #0
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	653b      	str	r3, [r7, #80]	; 0x50

			if (on && state[col + i * N_ROWS] == 0) {
 8000ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d065      	beq.n	80010c4 <HAL_TIM_PeriodElapsedCallback+0x11c>
 8000ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ffa:	009a      	lsls	r2, r3, #2
 8000ffc:	4b63      	ldr	r3, [pc, #396]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4413      	add	r3, r2
 8001002:	4a66      	ldr	r2, [pc, #408]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001004:	5cd3      	ldrb	r3, [r2, r3]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d15c      	bne.n	80010c4 <HAL_TIM_PeriodElapsedCallback+0x11c>

				int size = sprintf(string, "Pressed char: %c\r\n", lett[col + i * N_ROWS]);
 800100a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800100c:	009a      	lsls	r2, r3, #2
 800100e:	4b5f      	ldr	r3, [pc, #380]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a62      	ldr	r2, [pc, #392]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001016:	5cd3      	ldrb	r3, [r2, r3]
 8001018:	461a      	mov	r2, r3
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4961      	ldr	r1, [pc, #388]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001020:	4618      	mov	r0, r3
 8001022:	f003 f883 	bl	800412c <siprintf>
 8001026:	64f8      	str	r0, [r7, #76]	; 0x4c
				HAL_UART_Transmit(&huart2, string, size, 50);
 8001028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800102a:	b29a      	uxth	r2, r3
 800102c:	f107 010c 	add.w	r1, r7, #12
 8001030:	2332      	movs	r3, #50	; 0x32
 8001032:	485d      	ldr	r0, [pc, #372]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001034:	f002 fd05 	bl	8003a42 <HAL_UART_Transmit>

				//manage sound and led
				if((col == 0 || col== 3) && (i == 0 || i == 3)){
 8001038:	4b54      	ldr	r3, [pc, #336]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8001040:	4b52      	ldr	r3, [pc, #328]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b03      	cmp	r3, #3
 8001046:	d12f      	bne.n	80010a8 <HAL_TIM_PeriodElapsedCallback+0x100>
 8001048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <HAL_TIM_PeriodElapsedCallback+0xac>
 800104e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001050:	2b03      	cmp	r3, #3
 8001052:	d129      	bne.n	80010a8 <HAL_TIM_PeriodElapsedCallback+0x100>
					set_pwm(58.27*pow(2, col+i/2));
 8001054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001056:	0fda      	lsrs	r2, r3, #31
 8001058:	4413      	add	r3, r2
 800105a:	105b      	asrs	r3, r3, #1
 800105c:	461a      	mov	r2, r3
 800105e:	4b4b      	ldr	r3, [pc, #300]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fa5d 	bl	8000524 <__aeabi_i2d>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	ec43 2b11 	vmov	d1, r2, r3
 8001072:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8001178 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8001076:	f003 fcfd 	bl	8004a74 <pow>
 800107a:	ec51 0b10 	vmov	r0, r1, d0
 800107e:	a340      	add	r3, pc, #256	; (adr r3, 8001180 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fab8 	bl	80005f8 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fd62 	bl	8000b58 <__aeabi_d2f>
 8001094:	4603      	mov	r3, r0
 8001096:	ee00 3a10 	vmov	s0, r3
 800109a:	f7ff ff2b 	bl	8000ef4 <set_pwm>
					HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800109e:	2104      	movs	r1, #4
 80010a0:	4842      	ldr	r0, [pc, #264]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x204>)
 80010a2:	f001 fd13 	bl	8002acc <HAL_TIM_PWM_Start>
 80010a6:	e004      	b.n	80010b2 <HAL_TIM_PeriodElapsedCallback+0x10a>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2120      	movs	r1, #32
 80010ac:	4840      	ldr	r0, [pc, #256]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80010ae:	f000 ff4f 	bl	8001f50 <HAL_GPIO_WritePin>
				}

				state[col + i * N_ROWS] = 1;
 80010b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010b4:	009a      	lsls	r2, r3, #2
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a37      	ldr	r2, [pc, #220]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80010be:	2101      	movs	r1, #1
 80010c0:	54d1      	strb	r1, [r2, r3]
			if (on && state[col + i * N_ROWS] == 0) {
 80010c2:	e02b      	b.n	800111c <HAL_TIM_PeriodElapsedCallback+0x174>

			} else if (!on && state[col + i * N_ROWS] == 1) {
 80010c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d128      	bne.n	800111c <HAL_TIM_PeriodElapsedCallback+0x174>
 80010ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010cc:	009a      	lsls	r2, r3, #2
 80010ce:	4b2f      	ldr	r3, [pc, #188]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a31      	ldr	r2, [pc, #196]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80010d6:	5cd3      	ldrb	r3, [r2, r3]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d11f      	bne.n	800111c <HAL_TIM_PeriodElapsedCallback+0x174>
				state[col + i * N_ROWS] = 0;
 80010dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010de:	009a      	lsls	r2, r3, #2
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a2d      	ldr	r2, [pc, #180]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80010e8:	2100      	movs	r1, #0
 80010ea:	54d1      	strb	r1, [r2, r3]
				if((col == 0 || col== 3) && (i == 0 || i == 3)){
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_TIM_PeriodElapsedCallback+0x154>
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d10a      	bne.n	8001112 <HAL_TIM_PeriodElapsedCallback+0x16a>
 80010fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <HAL_TIM_PeriodElapsedCallback+0x160>
 8001102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001104:	2b03      	cmp	r3, #3
 8001106:	d104      	bne.n	8001112 <HAL_TIM_PeriodElapsedCallback+0x16a>
					HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001108:	2104      	movs	r1, #4
 800110a:	4828      	ldr	r0, [pc, #160]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x204>)
 800110c:	f001 fd8e 	bl	8002c2c <HAL_TIM_PWM_Stop>
 8001110:	e004      	b.n	800111c <HAL_TIM_PeriodElapsedCallback+0x174>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2120      	movs	r1, #32
 8001116:	4826      	ldr	r0, [pc, #152]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001118:	f000 ff1a 	bl	8001f50 <HAL_GPIO_WritePin>
		for (int i = 0; i < N_ROWS; i++) {
 800111c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800111e:	3301      	adds	r3, #1
 8001120:	657b      	str	r3, [r7, #84]	; 0x54
 8001122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001124:	2b03      	cmp	r3, #3
 8001126:	f77f af55 	ble.w	8000fd4 <HAL_TIM_PeriodElapsedCallback+0x2c>
				}
			}
		}

		HAL_GPIO_WritePin(GPIOC, k_output[col], 0);
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a18      	ldr	r2, [pc, #96]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001134:	2200      	movs	r2, #0
 8001136:	4619      	mov	r1, r3
 8001138:	4816      	ldr	r0, [pc, #88]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800113a:	f000 ff09 	bl	8001f50 <HAL_GPIO_WritePin>
		col = (col+1) % N_COLS;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	425a      	negs	r2, r3
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	f002 0203 	and.w	r2, r2, #3
 800114e:	bf58      	it	pl
 8001150:	4253      	negpl	r3, r2
 8001152:	4a0e      	ldr	r2, [pc, #56]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001154:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOC, k_output[col], 1);
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800115c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001160:	2201      	movs	r2, #1
 8001162:	4619      	mov	r1, r3
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001166:	f000 fef3 	bl	8001f50 <HAL_GPIO_WritePin>

	}
}
 800116a:	bf00      	nop
 800116c:	3758      	adds	r7, #88	; 0x58
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	f3af 8000 	nop.w
 8001178:	00000000 	.word	0x00000000
 800117c:	40000000 	.word	0x40000000
 8001180:	5c28f5c3 	.word	0x5c28f5c3
 8001184:	404d228f 	.word	0x404d228f
 8001188:	200000e4 	.word	0x200000e4
 800118c:	20000170 	.word	0x20000170
 8001190:	20000008 	.word	0x20000008
 8001194:	40020800 	.word	0x40020800
 8001198:	20000000 	.word	0x20000000
 800119c:	20000174 	.word	0x20000174
 80011a0:	08005914 	.word	0x08005914
 80011a4:	08005900 	.word	0x08005900
 80011a8:	2000012c 	.word	0x2000012c
 80011ac:	2000009c 	.word	0x2000009c
 80011b0:	40020000 	.word	0x40020000

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b8:	f000 fbaa 	bl	8001910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011bc:	f000 f80e 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c0:	f000 f990 	bl	80014e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011c4:	f000 f964 	bl	8001490 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80011c8:	f000 f914 	bl	80013f4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80011cc:	f000 f872 	bl	80012b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80011d0:	4801      	ldr	r0, [pc, #4]	; (80011d8 <main+0x24>)
 80011d2:	f001 fbbf 	bl	8002954 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80011d6:	e7fe      	b.n	80011d6 <main+0x22>
 80011d8:	200000e4 	.word	0x200000e4

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	; 0x50
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0320 	add.w	r3, r7, #32
 80011e6:	2230      	movs	r2, #48	; 0x30
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 ffbe 	bl	800416c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	4b29      	ldr	r3, [pc, #164]	; (80012ac <SystemClock_Config+0xd0>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	4a28      	ldr	r2, [pc, #160]	; (80012ac <SystemClock_Config+0xd0>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <SystemClock_Config+0xd0>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <SystemClock_Config+0xd4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001228:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <SystemClock_Config+0xd4>)
 800122a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <SystemClock_Config+0xd4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800123c:	2302      	movs	r3, #2
 800123e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001244:	2310      	movs	r3, #16
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001248:	2302      	movs	r3, #2
 800124a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800124c:	2300      	movs	r3, #0
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001250:	2310      	movs	r3, #16
 8001252:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001254:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001258:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800125a:	2304      	movs	r3, #4
 800125c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800125e:	2307      	movs	r3, #7
 8001260:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	f107 0320 	add.w	r3, r7, #32
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fe8c 	bl	8001f84 <HAL_RCC_OscConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001272:	f000 f9b9 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001276:	230f      	movs	r3, #15
 8001278:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127a:	2302      	movs	r3, #2
 800127c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001286:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2102      	movs	r1, #2
 8001292:	4618      	mov	r0, r3
 8001294:	f001 f8ee 	bl	8002474 <HAL_RCC_ClockConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800129e:	f000 f9a3 	bl	80015e8 <Error_Handler>
  }
}
 80012a2:	bf00      	nop
 80012a4:	3750      	adds	r7, #80	; 0x50
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40007000 	.word	0x40007000

080012b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b096      	sub	sp, #88	; 0x58
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]
 80012e2:	615a      	str	r2, [r3, #20]
 80012e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2220      	movs	r2, #32
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 ff3d 	bl	800416c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f2:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <MX_TIM1_Init+0x138>)
 80012f4:	4a3e      	ldr	r2, [pc, #248]	; (80013f0 <MX_TIM1_Init+0x13c>)
 80012f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80012f8:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <MX_TIM1_Init+0x138>)
 80012fa:	2253      	movs	r2, #83	; 0x53
 80012fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <MX_TIM1_Init+0x138>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001304:	4b39      	ldr	r3, [pc, #228]	; (80013ec <MX_TIM1_Init+0x138>)
 8001306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800130a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <MX_TIM1_Init+0x138>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <MX_TIM1_Init+0x138>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b34      	ldr	r3, [pc, #208]	; (80013ec <MX_TIM1_Init+0x138>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800131e:	4833      	ldr	r0, [pc, #204]	; (80013ec <MX_TIM1_Init+0x138>)
 8001320:	f001 fac8 	bl	80028b4 <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800132a:	f000 f95d 	bl	80015e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001338:	4619      	mov	r1, r3
 800133a:	482c      	ldr	r0, [pc, #176]	; (80013ec <MX_TIM1_Init+0x138>)
 800133c:	f001 fea4 	bl	8003088 <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001346:	f000 f94f 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800134a:	4828      	ldr	r0, [pc, #160]	; (80013ec <MX_TIM1_Init+0x138>)
 800134c:	f001 fb64 	bl	8002a18 <HAL_TIM_PWM_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001356:	f000 f947 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001362:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001366:	4619      	mov	r1, r3
 8001368:	4820      	ldr	r0, [pc, #128]	; (80013ec <MX_TIM1_Init+0x138>)
 800136a:	f002 fa49 	bl	8003800 <HAL_TIMEx_MasterConfigSynchronization>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001374:	f000 f938 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001378:	2360      	movs	r3, #96	; 0x60
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001384:	2300      	movs	r3, #0
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	2204      	movs	r2, #4
 800139a:	4619      	mov	r1, r3
 800139c:	4813      	ldr	r0, [pc, #76]	; (80013ec <MX_TIM1_Init+0x138>)
 800139e:	f001 fdb1 	bl	8002f04 <HAL_TIM_PWM_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80013a8:	f000 f91e 	bl	80015e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4807      	ldr	r0, [pc, #28]	; (80013ec <MX_TIM1_Init+0x138>)
 80013d0:	f002 fa84 	bl	80038dc <HAL_TIMEx_ConfigBreakDeadTime>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80013da:	f000 f905 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013de:	4803      	ldr	r0, [pc, #12]	; (80013ec <MX_TIM1_Init+0x138>)
 80013e0:	f000 f96e 	bl	80016c0 <HAL_TIM_MspPostInit>

}
 80013e4:	bf00      	nop
 80013e6:	3758      	adds	r7, #88	; 0x58
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000009c 	.word	0x2000009c
 80013f0:	40010000 	.word	0x40010000

080013f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_TIM3_Init+0x94>)
 8001412:	4a1e      	ldr	r2, [pc, #120]	; (800148c <MX_TIM3_Init+0x98>)
 8001414:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_TIM3_Init+0x94>)
 8001418:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800141c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_TIM3_Init+0x94>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_TIM3_Init+0x94>)
 8001426:	2263      	movs	r2, #99	; 0x63
 8001428:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_TIM3_Init+0x94>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <MX_TIM3_Init+0x94>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001436:	4814      	ldr	r0, [pc, #80]	; (8001488 <MX_TIM3_Init+0x94>)
 8001438:	f001 fa3c 	bl	80028b4 <HAL_TIM_Base_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001442:	f000 f8d1 	bl	80015e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	4619      	mov	r1, r3
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_TIM3_Init+0x94>)
 8001454:	f001 fe18 	bl	8003088 <HAL_TIM_ConfigClockSource>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800145e:	f000 f8c3 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800146a:	463b      	mov	r3, r7
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_TIM3_Init+0x94>)
 8001470:	f002 f9c6 	bl	8003800 <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800147a:	f000 f8b5 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200000e4 	.word	0x200000e4
 800148c:	40000400 	.word	0x40000400

08001490 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_USART2_UART_Init+0x4c>)
 8001496:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <MX_USART2_UART_Init+0x50>)
 8001498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <MX_USART2_UART_Init+0x4c>)
 800149c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_USART2_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_USART2_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <MX_USART2_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_USART2_UART_Init+0x4c>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <MX_USART2_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_USART2_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_USART2_UART_Init+0x4c>)
 80014c8:	f002 fa6e 	bl	80039a8 <HAL_UART_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014d2:	f000 f889 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000012c 	.word	0x2000012c
 80014e0:	40004400 	.word	0x40004400

080014e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b37      	ldr	r3, [pc, #220]	; (80015dc <MX_GPIO_Init+0xf8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a36      	ldr	r2, [pc, #216]	; (80015dc <MX_GPIO_Init+0xf8>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b34      	ldr	r3, [pc, #208]	; (80015dc <MX_GPIO_Init+0xf8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b30      	ldr	r3, [pc, #192]	; (80015dc <MX_GPIO_Init+0xf8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a2f      	ldr	r2, [pc, #188]	; (80015dc <MX_GPIO_Init+0xf8>)
 8001520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <MX_GPIO_Init+0xf8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b29      	ldr	r3, [pc, #164]	; (80015dc <MX_GPIO_Init+0xf8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a28      	ldr	r2, [pc, #160]	; (80015dc <MX_GPIO_Init+0xf8>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <MX_GPIO_Init+0xf8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <MX_GPIO_Init+0xf8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a21      	ldr	r2, [pc, #132]	; (80015dc <MX_GPIO_Init+0xf8>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <MX_GPIO_Init+0xf8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2120      	movs	r1, #32
 800156e:	481c      	ldr	r0, [pc, #112]	; (80015e0 <MX_GPIO_Init+0xfc>)
 8001570:	f000 fcee 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800157a:	481a      	ldr	r0, [pc, #104]	; (80015e4 <MX_GPIO_Init+0x100>)
 800157c:	f000 fce8 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12;
 8001580:	f243 030c 	movw	r3, #12300	; 0x300c
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4813      	ldr	r0, [pc, #76]	; (80015e4 <MX_GPIO_Init+0x100>)
 8001596:	f000 fb3f 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800159a:	2320      	movs	r3, #32
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <MX_GPIO_Init+0xfc>)
 80015b2:	f000 fb31 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80015b6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_GPIO_Init+0x100>)
 80015d0:	f000 fb22 	bl	8001c18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	; 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020800 	.word	0x40020800

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x8>
	...

080015f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <HAL_MspInit+0x4c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <HAL_MspInit+0x4c>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_MspInit+0x4c>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_MspInit+0x4c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <HAL_MspInit+0x4c>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_MspInit+0x4c>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001632:	2007      	movs	r0, #7
 8001634:	f000 faae 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800

08001644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <HAL_TIM_Base_MspInit+0x70>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10e      	bne.n	8001674 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_TIM_Base_MspInit+0x74>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a16      	ldr	r2, [pc, #88]	; (80016b8 <HAL_TIM_Base_MspInit+0x74>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <HAL_TIM_Base_MspInit+0x74>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001672:	e01a      	b.n	80016aa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_TIM_Base_MspInit+0x78>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d115      	bne.n	80016aa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_TIM_Base_MspInit+0x74>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <HAL_TIM_Base_MspInit+0x74>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_TIM_Base_MspInit+0x74>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	201d      	movs	r0, #29
 80016a0:	f000 fa83 	bl	8001baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016a4:	201d      	movs	r0, #29
 80016a6:	f000 fa9c 	bl	8001be2 <HAL_NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40010000 	.word	0x40010000
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40000400 	.word	0x40000400

080016c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a12      	ldr	r2, [pc, #72]	; (8001728 <HAL_TIM_MspPostInit+0x68>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d11e      	bne.n	8001720 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_TIM_MspPostInit+0x6c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a10      	ldr	r2, [pc, #64]	; (800172c <HAL_TIM_MspPostInit+0x6c>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_TIM_MspPostInit+0x6c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001702:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001710:	2301      	movs	r3, #1
 8001712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	4619      	mov	r1, r3
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <HAL_TIM_MspPostInit+0x70>)
 800171c:	f000 fa7c 	bl	8001c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40010000 	.word	0x40010000
 800172c:	40023800 	.word	0x40023800
 8001730:	40020000 	.word	0x40020000

08001734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <HAL_UART_MspInit+0x84>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d12b      	bne.n	80017ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_UART_MspInit+0x88>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a17      	ldr	r2, [pc, #92]	; (80017bc <HAL_UART_MspInit+0x88>)
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_UART_MspInit+0x88>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_UART_MspInit+0x88>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a10      	ldr	r2, [pc, #64]	; (80017bc <HAL_UART_MspInit+0x88>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_UART_MspInit+0x88>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800178e:	230c      	movs	r3, #12
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800179e:	2307      	movs	r3, #7
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <HAL_UART_MspInit+0x8c>)
 80017aa:	f000 fa35 	bl	8001c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	; 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40004400 	.word	0x40004400
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020000 	.word	0x40020000

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <NMI_Handler+0x4>

080017ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler+0x4>

080017d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001810:	f000 f8d0 	bl	80019b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <TIM3_IRQHandler+0x10>)
 800181e:	f001 fa69 	bl	8002cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200000e4 	.word	0x200000e4

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f002 fc8e 	bl	800417c <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20018000 	.word	0x20018000
 800188c:	00000400 	.word	0x00000400
 8001890:	20000184 	.word	0x20000184
 8001894:	200002d8 	.word	0x200002d8

08001898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <SystemInit+0x20>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <SystemInit+0x20>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018c0:	480d      	ldr	r0, [pc, #52]	; (80018f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018c2:	490e      	ldr	r1, [pc, #56]	; (80018fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018c4:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c8:	e002      	b.n	80018d0 <LoopCopyDataInit>

080018ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ce:	3304      	adds	r3, #4

080018d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d4:	d3f9      	bcc.n	80018ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018d8:	4c0b      	ldr	r4, [pc, #44]	; (8001908 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018dc:	e001      	b.n	80018e2 <LoopFillZerobss>

080018de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e0:	3204      	adds	r2, #4

080018e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e4:	d3fb      	bcc.n	80018de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018e6:	f7ff ffd7 	bl	8001898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ea:	f002 fc4d 	bl	8004188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ee:	f7ff fc61 	bl	80011b4 <main>
  bx  lr    
 80018f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001900:	080059b0 	.word	0x080059b0
  ldr r2, =_sbss
 8001904:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001908:	200002d4 	.word	0x200002d4

0800190c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC_IRQHandler>
	...

08001910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <HAL_Init+0x40>)
 800191a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800191e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <HAL_Init+0x40>)
 8001926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800192a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <HAL_Init+0x40>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f000 f92b 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193e:	2000      	movs	r0, #0
 8001940:	f000 f808 	bl	8001954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001944:	f7ff fe56 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_InitTick+0x54>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_InitTick+0x58>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196a:	fbb3 f3f1 	udiv	r3, r3, r1
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f943 	bl	8001bfe <HAL_SYSTICK_Config>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e00e      	b.n	80019a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d80a      	bhi.n	800199e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f000 f90b 	bl	8001baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001994:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <HAL_InitTick+0x5c>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000010 	.word	0x20000010
 80019ac:	20000018 	.word	0x20000018
 80019b0:	20000014 	.word	0x20000014

080019b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_IncTick+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x24>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_IncTick+0x24>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000018 	.word	0x20000018
 80019d8:	20000188 	.word	0x20000188

080019dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_GetTick+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000188 	.word	0x20000188

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <__NVIC_EnableIRQ+0x38>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	; (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	; (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	; 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
         );
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b60:	d301      	bcc.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <SysTick_Config+0x40>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	210f      	movs	r1, #15
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f7ff ff8e 	bl	8001a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <SysTick_Config+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <SysTick_Config+0x40>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010

08001b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff29 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff3e 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff8e 	bl	8001ae8 <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5d 	bl	8001a94 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff31 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffa2 	bl	8001b50 <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e159      	b.n	8001ee8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c34:	2201      	movs	r2, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	f040 8148 	bne.w	8001ee2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d005      	beq.n	8001c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d130      	bne.n	8001ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 0201 	and.w	r2, r3, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d017      	beq.n	8001d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d123      	bne.n	8001d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	08da      	lsrs	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3208      	adds	r2, #8
 8001d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	08da      	lsrs	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3208      	adds	r2, #8
 8001d56:	69b9      	ldr	r1, [r7, #24]
 8001d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0203 	and.w	r2, r3, #3
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80a2 	beq.w	8001ee2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b57      	ldr	r3, [pc, #348]	; (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a56      	ldr	r2, [pc, #344]	; (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b54      	ldr	r3, [pc, #336]	; (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dba:	4a52      	ldr	r2, [pc, #328]	; (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a49      	ldr	r2, [pc, #292]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d019      	beq.n	8001e1a <HAL_GPIO_Init+0x202>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a48      	ldr	r2, [pc, #288]	; (8001f0c <HAL_GPIO_Init+0x2f4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0x1fe>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a47      	ldr	r2, [pc, #284]	; (8001f10 <HAL_GPIO_Init+0x2f8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00d      	beq.n	8001e12 <HAL_GPIO_Init+0x1fa>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a46      	ldr	r2, [pc, #280]	; (8001f14 <HAL_GPIO_Init+0x2fc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <HAL_GPIO_Init+0x1f6>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a45      	ldr	r2, [pc, #276]	; (8001f18 <HAL_GPIO_Init+0x300>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d101      	bne.n	8001e0a <HAL_GPIO_Init+0x1f2>
 8001e06:	2304      	movs	r3, #4
 8001e08:	e008      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e004      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	f002 0203 	and.w	r2, r2, #3
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	4093      	lsls	r3, r2
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e2c:	4935      	ldr	r1, [pc, #212]	; (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3a:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e5e:	4a2f      	ldr	r2, [pc, #188]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e64:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e88:	4a24      	ldr	r2, [pc, #144]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e8e:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb2:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001edc:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b0f      	cmp	r3, #15
 8001eec:	f67f aea2 	bls.w	8001c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40013c00 	.word	0x40013c00

08001f20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
 8001f3c:	e001      	b.n	8001f42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f60:	787b      	ldrb	r3, [r7, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f6c:	e003      	b.n	8001f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	041a      	lsls	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e267      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d075      	beq.n	800208e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fa2:	4b88      	ldr	r3, [pc, #544]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d00c      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fae:	4b85      	ldr	r3, [pc, #532]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d112      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fba:	4b82      	ldr	r3, [pc, #520]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	4b7e      	ldr	r3, [pc, #504]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d05b      	beq.n	800208c <HAL_RCC_OscConfig+0x108>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d157      	bne.n	800208c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e242      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe8:	d106      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x74>
 8001fea:	4b76      	ldr	r3, [pc, #472]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a75      	ldr	r2, [pc, #468]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e01d      	b.n	8002034 <HAL_RCC_OscConfig+0xb0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x98>
 8002002:	4b70      	ldr	r3, [pc, #448]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a6f      	ldr	r2, [pc, #444]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b6d      	ldr	r3, [pc, #436]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a6c      	ldr	r2, [pc, #432]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e00b      	b.n	8002034 <HAL_RCC_OscConfig+0xb0>
 800201c:	4b69      	ldr	r3, [pc, #420]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a68      	ldr	r2, [pc, #416]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b66      	ldr	r3, [pc, #408]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a65      	ldr	r2, [pc, #404]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 800202e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d013      	beq.n	8002064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff fcce 	bl	80019dc <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002044:	f7ff fcca 	bl	80019dc <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e207      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	4b5b      	ldr	r3, [pc, #364]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0xc0>
 8002062:	e014      	b.n	800208e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff fcba 	bl	80019dc <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800206c:	f7ff fcb6 	bl	80019dc <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e1f3      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	4b51      	ldr	r3, [pc, #324]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0xe8>
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d063      	beq.n	8002162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800209a:	4b4a      	ldr	r3, [pc, #296]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00b      	beq.n	80020be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a6:	4b47      	ldr	r3, [pc, #284]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d11c      	bne.n	80020ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b2:	4b44      	ldr	r3, [pc, #272]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d116      	bne.n	80020ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020be:	4b41      	ldr	r3, [pc, #260]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_RCC_OscConfig+0x152>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e1c7      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d6:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4937      	ldr	r1, [pc, #220]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ea:	e03a      	b.n	8002162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d020      	beq.n	8002136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f4:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <HAL_RCC_OscConfig+0x244>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7ff fc6f 	bl	80019dc <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002102:	f7ff fc6b 	bl	80019dc <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e1a8      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002114:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002120:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4925      	ldr	r1, [pc, #148]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]
 8002134:	e015      	b.n	8002162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCC_OscConfig+0x244>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff fc4e 	bl	80019dc <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002144:	f7ff fc4a 	bl	80019dc <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e187      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002156:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d036      	beq.n	80021dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d016      	beq.n	80021a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <HAL_RCC_OscConfig+0x248>)
 8002178:	2201      	movs	r2, #1
 800217a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217c:	f7ff fc2e 	bl	80019dc <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002184:	f7ff fc2a 	bl	80019dc <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e167      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_OscConfig+0x240>)
 8002198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x200>
 80021a2:	e01b      	b.n	80021dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_RCC_OscConfig+0x248>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7ff fc17 	bl	80019dc <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b0:	e00e      	b.n	80021d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b2:	f7ff fc13 	bl	80019dc <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d907      	bls.n	80021d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e150      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
 80021c4:	40023800 	.word	0x40023800
 80021c8:	42470000 	.word	0x42470000
 80021cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d0:	4b88      	ldr	r3, [pc, #544]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 80021d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ea      	bne.n	80021b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8097 	beq.w	8002318 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ee:	4b81      	ldr	r3, [pc, #516]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10f      	bne.n	800221a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	4b7d      	ldr	r3, [pc, #500]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a7c      	ldr	r2, [pc, #496]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b7a      	ldr	r3, [pc, #488]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002216:	2301      	movs	r3, #1
 8002218:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	4b77      	ldr	r3, [pc, #476]	; (80023f8 <HAL_RCC_OscConfig+0x474>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d118      	bne.n	8002258 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002226:	4b74      	ldr	r3, [pc, #464]	; (80023f8 <HAL_RCC_OscConfig+0x474>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a73      	ldr	r2, [pc, #460]	; (80023f8 <HAL_RCC_OscConfig+0x474>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002232:	f7ff fbd3 	bl	80019dc <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223a:	f7ff fbcf 	bl	80019dc <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e10c      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	4b6a      	ldr	r3, [pc, #424]	; (80023f8 <HAL_RCC_OscConfig+0x474>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x2ea>
 8002260:	4b64      	ldr	r3, [pc, #400]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	4a63      	ldr	r2, [pc, #396]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6713      	str	r3, [r2, #112]	; 0x70
 800226c:	e01c      	b.n	80022a8 <HAL_RCC_OscConfig+0x324>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b05      	cmp	r3, #5
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x30c>
 8002276:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	4a5e      	ldr	r2, [pc, #376]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	6713      	str	r3, [r2, #112]	; 0x70
 8002282:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	4a5b      	ldr	r2, [pc, #364]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6713      	str	r3, [r2, #112]	; 0x70
 800228e:	e00b      	b.n	80022a8 <HAL_RCC_OscConfig+0x324>
 8002290:	4b58      	ldr	r3, [pc, #352]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	4a57      	ldr	r2, [pc, #348]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	6713      	str	r3, [r2, #112]	; 0x70
 800229c:	4b55      	ldr	r3, [pc, #340]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4a54      	ldr	r2, [pc, #336]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 80022a2:	f023 0304 	bic.w	r3, r3, #4
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d015      	beq.n	80022dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7ff fb94 	bl	80019dc <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b8:	f7ff fb90 	bl	80019dc <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e0cb      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ce:	4b49      	ldr	r3, [pc, #292]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0ee      	beq.n	80022b8 <HAL_RCC_OscConfig+0x334>
 80022da:	e014      	b.n	8002306 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7ff fb7e 	bl	80019dc <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7ff fb7a 	bl	80019dc <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e0b5      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fa:	4b3e      	ldr	r3, [pc, #248]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ee      	bne.n	80022e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002306:	7dfb      	ldrb	r3, [r7, #23]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d105      	bne.n	8002318 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230c:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	4a38      	ldr	r2, [pc, #224]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002316:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a1 	beq.w	8002464 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002322:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b08      	cmp	r3, #8
 800232c:	d05c      	beq.n	80023e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d141      	bne.n	80023ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b31      	ldr	r3, [pc, #196]	; (80023fc <HAL_RCC_OscConfig+0x478>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7ff fb4e 	bl	80019dc <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002344:	f7ff fb4a 	bl	80019dc <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e087      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002356:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69da      	ldr	r2, [r3, #28]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	019b      	lsls	r3, r3, #6
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	085b      	lsrs	r3, r3, #1
 800237a:	3b01      	subs	r3, #1
 800237c:	041b      	lsls	r3, r3, #16
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	061b      	lsls	r3, r3, #24
 8002386:	491b      	ldr	r1, [pc, #108]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x478>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7ff fb23 	bl	80019dc <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239a:	f7ff fb1f 	bl	80019dc <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e05c      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x416>
 80023b8:	e054      	b.n	8002464 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_RCC_OscConfig+0x478>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7ff fb0c 	bl	80019dc <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c8:	f7ff fb08 	bl	80019dc <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e045      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_RCC_OscConfig+0x470>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x444>
 80023e6:	e03d      	b.n	8002464 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e038      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40007000 	.word	0x40007000
 80023fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <HAL_RCC_OscConfig+0x4ec>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d028      	beq.n	8002460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d121      	bne.n	8002460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d11a      	bne.n	8002460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002430:	4013      	ands	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002438:	4293      	cmp	r3, r2
 800243a:	d111      	bne.n	8002460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	3b01      	subs	r3, #1
 800244a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d107      	bne.n	8002460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800

08002474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0cc      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b68      	ldr	r3, [pc, #416]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d90c      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b65      	ldr	r3, [pc, #404]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b59      	ldr	r3, [pc, #356]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a58      	ldr	r2, [pc, #352]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	494d      	ldr	r1, [pc, #308]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d044      	beq.n	8002594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d119      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d003      	beq.n	8002532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800252e:	2b03      	cmp	r3, #3
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002532:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e06f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e067      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002552:	4b37      	ldr	r3, [pc, #220]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f023 0203 	bic.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4934      	ldr	r1, [pc, #208]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002564:	f7ff fa3a 	bl	80019dc <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7ff fa36 	bl	80019dc <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e04f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 020c 	and.w	r2, r3, #12
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	429a      	cmp	r2, r3
 8002592:	d1eb      	bne.n	800256c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d20c      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e032      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4916      	ldr	r1, [pc, #88]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	490e      	ldr	r1, [pc, #56]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025fa:	f000 f821 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	490a      	ldr	r1, [pc, #40]	; (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	5ccb      	ldrb	r3, [r1, r3]
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	4a09      	ldr	r2, [pc, #36]	; (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f99a 	bl	8001954 <HAL_InitTick>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023c00 	.word	0x40023c00
 8002630:	40023800 	.word	0x40023800
 8002634:	08005924 	.word	0x08005924
 8002638:	20000010 	.word	0x20000010
 800263c:	20000014 	.word	0x20000014

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002644:	b094      	sub	sp, #80	; 0x50
 8002646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	647b      	str	r3, [r7, #68]	; 0x44
 800264c:	2300      	movs	r3, #0
 800264e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002650:	2300      	movs	r3, #0
 8002652:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002658:	4b79      	ldr	r3, [pc, #484]	; (8002840 <HAL_RCC_GetSysClockFreq+0x200>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b08      	cmp	r3, #8
 8002662:	d00d      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x40>
 8002664:	2b08      	cmp	r3, #8
 8002666:	f200 80e1 	bhi.w	800282c <HAL_RCC_GetSysClockFreq+0x1ec>
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x34>
 800266e:	2b04      	cmp	r3, #4
 8002670:	d003      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x3a>
 8002672:	e0db      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4b73      	ldr	r3, [pc, #460]	; (8002844 <HAL_RCC_GetSysClockFreq+0x204>)
 8002676:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002678:	e0db      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800267a:	4b73      	ldr	r3, [pc, #460]	; (8002848 <HAL_RCC_GetSysClockFreq+0x208>)
 800267c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800267e:	e0d8      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002680:	4b6f      	ldr	r3, [pc, #444]	; (8002840 <HAL_RCC_GetSysClockFreq+0x200>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002688:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800268a:	4b6d      	ldr	r3, [pc, #436]	; (8002840 <HAL_RCC_GetSysClockFreq+0x200>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d063      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002696:	4b6a      	ldr	r3, [pc, #424]	; (8002840 <HAL_RCC_GetSysClockFreq+0x200>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	099b      	lsrs	r3, r3, #6
 800269c:	2200      	movs	r2, #0
 800269e:	63bb      	str	r3, [r7, #56]	; 0x38
 80026a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30
 80026aa:	2300      	movs	r3, #0
 80026ac:	637b      	str	r3, [r7, #52]	; 0x34
 80026ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026b2:	4622      	mov	r2, r4
 80026b4:	462b      	mov	r3, r5
 80026b6:	f04f 0000 	mov.w	r0, #0
 80026ba:	f04f 0100 	mov.w	r1, #0
 80026be:	0159      	lsls	r1, r3, #5
 80026c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c4:	0150      	lsls	r0, r2, #5
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4621      	mov	r1, r4
 80026cc:	1a51      	subs	r1, r2, r1
 80026ce:	6139      	str	r1, [r7, #16]
 80026d0:	4629      	mov	r1, r5
 80026d2:	eb63 0301 	sbc.w	r3, r3, r1
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026e4:	4659      	mov	r1, fp
 80026e6:	018b      	lsls	r3, r1, #6
 80026e8:	4651      	mov	r1, sl
 80026ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ee:	4651      	mov	r1, sl
 80026f0:	018a      	lsls	r2, r1, #6
 80026f2:	4651      	mov	r1, sl
 80026f4:	ebb2 0801 	subs.w	r8, r2, r1
 80026f8:	4659      	mov	r1, fp
 80026fa:	eb63 0901 	sbc.w	r9, r3, r1
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800270a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800270e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002712:	4690      	mov	r8, r2
 8002714:	4699      	mov	r9, r3
 8002716:	4623      	mov	r3, r4
 8002718:	eb18 0303 	adds.w	r3, r8, r3
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	462b      	mov	r3, r5
 8002720:	eb49 0303 	adc.w	r3, r9, r3
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002732:	4629      	mov	r1, r5
 8002734:	024b      	lsls	r3, r1, #9
 8002736:	4621      	mov	r1, r4
 8002738:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800273c:	4621      	mov	r1, r4
 800273e:	024a      	lsls	r2, r1, #9
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002746:	2200      	movs	r2, #0
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
 800274a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800274c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002750:	f7fe fa52 	bl	8000bf8 <__aeabi_uldivmod>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4613      	mov	r3, r2
 800275a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800275c:	e058      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800275e:	4b38      	ldr	r3, [pc, #224]	; (8002840 <HAL_RCC_GetSysClockFreq+0x200>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	099b      	lsrs	r3, r3, #6
 8002764:	2200      	movs	r2, #0
 8002766:	4618      	mov	r0, r3
 8002768:	4611      	mov	r1, r2
 800276a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800276e:	623b      	str	r3, [r7, #32]
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
 8002774:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002778:	4642      	mov	r2, r8
 800277a:	464b      	mov	r3, r9
 800277c:	f04f 0000 	mov.w	r0, #0
 8002780:	f04f 0100 	mov.w	r1, #0
 8002784:	0159      	lsls	r1, r3, #5
 8002786:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800278a:	0150      	lsls	r0, r2, #5
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4641      	mov	r1, r8
 8002792:	ebb2 0a01 	subs.w	sl, r2, r1
 8002796:	4649      	mov	r1, r9
 8002798:	eb63 0b01 	sbc.w	fp, r3, r1
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027b0:	ebb2 040a 	subs.w	r4, r2, sl
 80027b4:	eb63 050b 	sbc.w	r5, r3, fp
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	00eb      	lsls	r3, r5, #3
 80027c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027c6:	00e2      	lsls	r2, r4, #3
 80027c8:	4614      	mov	r4, r2
 80027ca:	461d      	mov	r5, r3
 80027cc:	4643      	mov	r3, r8
 80027ce:	18e3      	adds	r3, r4, r3
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	464b      	mov	r3, r9
 80027d4:	eb45 0303 	adc.w	r3, r5, r3
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027e6:	4629      	mov	r1, r5
 80027e8:	028b      	lsls	r3, r1, #10
 80027ea:	4621      	mov	r1, r4
 80027ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027f0:	4621      	mov	r1, r4
 80027f2:	028a      	lsls	r2, r1, #10
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027fa:	2200      	movs	r2, #0
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	61fa      	str	r2, [r7, #28]
 8002800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002804:	f7fe f9f8 	bl	8000bf8 <__aeabi_uldivmod>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4613      	mov	r3, r2
 800280e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCC_GetSysClockFreq+0x200>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	3301      	adds	r3, #1
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002820:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800282a:	e002      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_GetSysClockFreq+0x204>)
 800282e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002834:	4618      	mov	r0, r3
 8002836:	3750      	adds	r7, #80	; 0x50
 8002838:	46bd      	mov	sp, r7
 800283a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	00f42400 	.word	0x00f42400
 8002848:	007a1200 	.word	0x007a1200

0800284c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <HAL_RCC_GetHCLKFreq+0x14>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20000010 	.word	0x20000010

08002864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002868:	f7ff fff0 	bl	800284c <HAL_RCC_GetHCLKFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	0a9b      	lsrs	r3, r3, #10
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	4903      	ldr	r1, [pc, #12]	; (8002888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40023800 	.word	0x40023800
 8002888:	08005934 	.word	0x08005934

0800288c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002890:	f7ff ffdc 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	0b5b      	lsrs	r3, r3, #13
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4903      	ldr	r1, [pc, #12]	; (80028b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40023800 	.word	0x40023800
 80028b0:	08005934 	.word	0x08005934

080028b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e041      	b.n	800294a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe feb2 	bl	8001644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f000 fcb8 	bl	8003268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d001      	beq.n	800296c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e044      	b.n	80029f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1e      	ldr	r2, [pc, #120]	; (8002a04 <HAL_TIM_Base_Start_IT+0xb0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d018      	beq.n	80029c0 <HAL_TIM_Base_Start_IT+0x6c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002996:	d013      	beq.n	80029c0 <HAL_TIM_Base_Start_IT+0x6c>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1a      	ldr	r2, [pc, #104]	; (8002a08 <HAL_TIM_Base_Start_IT+0xb4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00e      	beq.n	80029c0 <HAL_TIM_Base_Start_IT+0x6c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <HAL_TIM_Base_Start_IT+0xb8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d009      	beq.n	80029c0 <HAL_TIM_Base_Start_IT+0x6c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a17      	ldr	r2, [pc, #92]	; (8002a10 <HAL_TIM_Base_Start_IT+0xbc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d004      	beq.n	80029c0 <HAL_TIM_Base_Start_IT+0x6c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <HAL_TIM_Base_Start_IT+0xc0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d111      	bne.n	80029e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b06      	cmp	r3, #6
 80029d0:	d010      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e2:	e007      	b.n	80029f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40010000 	.word	0x40010000
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40000800 	.word	0x40000800
 8002a10:	40000c00 	.word	0x40000c00
 8002a14:	40014000 	.word	0x40014000

08002a18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e041      	b.n	8002aae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f839 	bl	8002ab6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	4610      	mov	r0, r2
 8002a58:	f000 fc06 	bl	8003268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <HAL_TIM_PWM_Start+0x24>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	bf14      	ite	ne
 8002ae8:	2301      	movne	r3, #1
 8002aea:	2300      	moveq	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e022      	b.n	8002b36 <HAL_TIM_PWM_Start+0x6a>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d109      	bne.n	8002b0a <HAL_TIM_PWM_Start+0x3e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	bf14      	ite	ne
 8002b02:	2301      	movne	r3, #1
 8002b04:	2300      	moveq	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	e015      	b.n	8002b36 <HAL_TIM_PWM_Start+0x6a>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d109      	bne.n	8002b24 <HAL_TIM_PWM_Start+0x58>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	e008      	b.n	8002b36 <HAL_TIM_PWM_Start+0x6a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	bf14      	ite	ne
 8002b30:	2301      	movne	r3, #1
 8002b32:	2300      	moveq	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e068      	b.n	8002c10 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d104      	bne.n	8002b4e <HAL_TIM_PWM_Start+0x82>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b4c:	e013      	b.n	8002b76 <HAL_TIM_PWM_Start+0xaa>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d104      	bne.n	8002b5e <HAL_TIM_PWM_Start+0x92>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b5c:	e00b      	b.n	8002b76 <HAL_TIM_PWM_Start+0xaa>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d104      	bne.n	8002b6e <HAL_TIM_PWM_Start+0xa2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b6c:	e003      	b.n	8002b76 <HAL_TIM_PWM_Start+0xaa>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	6839      	ldr	r1, [r7, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fe18 	bl	80037b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a23      	ldr	r2, [pc, #140]	; (8002c18 <HAL_TIM_PWM_Start+0x14c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d107      	bne.n	8002b9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <HAL_TIM_PWM_Start+0x14c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d018      	beq.n	8002bda <HAL_TIM_PWM_Start+0x10e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb0:	d013      	beq.n	8002bda <HAL_TIM_PWM_Start+0x10e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <HAL_TIM_PWM_Start+0x150>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00e      	beq.n	8002bda <HAL_TIM_PWM_Start+0x10e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a17      	ldr	r2, [pc, #92]	; (8002c20 <HAL_TIM_PWM_Start+0x154>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d009      	beq.n	8002bda <HAL_TIM_PWM_Start+0x10e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a16      	ldr	r2, [pc, #88]	; (8002c24 <HAL_TIM_PWM_Start+0x158>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <HAL_TIM_PWM_Start+0x10e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <HAL_TIM_PWM_Start+0x15c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d111      	bne.n	8002bfe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b06      	cmp	r3, #6
 8002bea:	d010      	beq.n	8002c0e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfc:	e007      	b.n	8002c0e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 0201 	orr.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	40000400 	.word	0x40000400
 8002c20:	40000800 	.word	0x40000800
 8002c24:	40000c00 	.word	0x40000c00
 8002c28:	40014000 	.word	0x40014000

08002c2c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	6839      	ldr	r1, [r7, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fdb8 	bl	80037b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a29      	ldr	r2, [pc, #164]	; (8002cf0 <HAL_TIM_PWM_Stop+0xc4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d117      	bne.n	8002c7e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6a1a      	ldr	r2, [r3, #32]
 8002c54:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10f      	bne.n	8002c7e <HAL_TIM_PWM_Stop+0x52>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6a1a      	ldr	r2, [r3, #32]
 8002c64:	f240 4344 	movw	r3, #1092	; 0x444
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d107      	bne.n	8002c7e <HAL_TIM_PWM_Stop+0x52>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6a1a      	ldr	r2, [r3, #32]
 8002c84:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10f      	bne.n	8002cae <HAL_TIM_PWM_Stop+0x82>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6a1a      	ldr	r2, [r3, #32]
 8002c94:	f240 4344 	movw	r3, #1092	; 0x444
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d107      	bne.n	8002cae <HAL_TIM_PWM_Stop+0x82>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d104      	bne.n	8002cbe <HAL_TIM_PWM_Stop+0x92>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cbc:	e013      	b.n	8002ce6 <HAL_TIM_PWM_Stop+0xba>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d104      	bne.n	8002cce <HAL_TIM_PWM_Stop+0xa2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ccc:	e00b      	b.n	8002ce6 <HAL_TIM_PWM_Stop+0xba>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d104      	bne.n	8002cde <HAL_TIM_PWM_Stop+0xb2>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cdc:	e003      	b.n	8002ce6 <HAL_TIM_PWM_Stop+0xba>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40010000 	.word	0x40010000

08002cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d122      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d11b      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0202 	mvn.w	r2, #2
 8002d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fa77 	bl	800322a <HAL_TIM_IC_CaptureCallback>
 8002d3c:	e005      	b.n	8002d4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fa69 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fa7a 	bl	800323e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d122      	bne.n	8002da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d11b      	bne.n	8002da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0204 	mvn.w	r2, #4
 8002d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fa4d 	bl	800322a <HAL_TIM_IC_CaptureCallback>
 8002d90:	e005      	b.n	8002d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fa3f 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fa50 	bl	800323e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d122      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d11b      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0208 	mvn.w	r2, #8
 8002dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2204      	movs	r2, #4
 8002dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fa23 	bl	800322a <HAL_TIM_IC_CaptureCallback>
 8002de4:	e005      	b.n	8002df2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa15 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fa26 	bl	800323e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b10      	cmp	r3, #16
 8002e04:	d122      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b10      	cmp	r3, #16
 8002e12:	d11b      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0210 	mvn.w	r2, #16
 8002e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2208      	movs	r2, #8
 8002e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f9f9 	bl	800322a <HAL_TIM_IC_CaptureCallback>
 8002e38:	e005      	b.n	8002e46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f9eb 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f9fc 	bl	800323e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d10e      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d107      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0201 	mvn.w	r2, #1
 8002e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fe f898 	bl	8000fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	2b80      	cmp	r3, #128	; 0x80
 8002e84:	d10e      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b80      	cmp	r3, #128	; 0x80
 8002e92:	d107      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fd78 	bl	8003994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	2b40      	cmp	r3, #64	; 0x40
 8002eb0:	d10e      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebc:	2b40      	cmp	r3, #64	; 0x40
 8002ebe:	d107      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f9c1 	bl	8003252 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d10e      	bne.n	8002efc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d107      	bne.n	8002efc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0220 	mvn.w	r2, #32
 8002ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fd42 	bl	8003980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e0ae      	b.n	8003080 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	f200 809f 	bhi.w	8003070 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f32:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002f6d 	.word	0x08002f6d
 8002f3c:	08003071 	.word	0x08003071
 8002f40:	08003071 	.word	0x08003071
 8002f44:	08003071 	.word	0x08003071
 8002f48:	08002fad 	.word	0x08002fad
 8002f4c:	08003071 	.word	0x08003071
 8002f50:	08003071 	.word	0x08003071
 8002f54:	08003071 	.word	0x08003071
 8002f58:	08002fef 	.word	0x08002fef
 8002f5c:	08003071 	.word	0x08003071
 8002f60:	08003071 	.word	0x08003071
 8002f64:	08003071 	.word	0x08003071
 8002f68:	0800302f 	.word	0x0800302f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f9f8 	bl	8003368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0208 	orr.w	r2, r2, #8
 8002f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0204 	bic.w	r2, r2, #4
 8002f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6999      	ldr	r1, [r3, #24]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	619a      	str	r2, [r3, #24]
      break;
 8002faa:	e064      	b.n	8003076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fa3e 	bl	8003434 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6999      	ldr	r1, [r3, #24]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	021a      	lsls	r2, r3, #8
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	619a      	str	r2, [r3, #24]
      break;
 8002fec:	e043      	b.n	8003076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fa89 	bl	800350c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0208 	orr.w	r2, r2, #8
 8003008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0204 	bic.w	r2, r2, #4
 8003018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69d9      	ldr	r1, [r3, #28]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	61da      	str	r2, [r3, #28]
      break;
 800302c:	e023      	b.n	8003076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fad3 	bl	80035e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69d9      	ldr	r1, [r3, #28]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	021a      	lsls	r2, r3, #8
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	61da      	str	r2, [r3, #28]
      break;
 800306e:	e002      	b.n	8003076 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	75fb      	strb	r3, [r7, #23]
      break;
 8003074:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800307e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_TIM_ConfigClockSource+0x1c>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e0b4      	b.n	800320e <HAL_TIM_ConfigClockSource+0x186>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030dc:	d03e      	beq.n	800315c <HAL_TIM_ConfigClockSource+0xd4>
 80030de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e2:	f200 8087 	bhi.w	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 80030e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ea:	f000 8086 	beq.w	80031fa <HAL_TIM_ConfigClockSource+0x172>
 80030ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f2:	d87f      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b70      	cmp	r3, #112	; 0x70
 80030f6:	d01a      	beq.n	800312e <HAL_TIM_ConfigClockSource+0xa6>
 80030f8:	2b70      	cmp	r3, #112	; 0x70
 80030fa:	d87b      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 80030fc:	2b60      	cmp	r3, #96	; 0x60
 80030fe:	d050      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003100:	2b60      	cmp	r3, #96	; 0x60
 8003102:	d877      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003104:	2b50      	cmp	r3, #80	; 0x50
 8003106:	d03c      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0xfa>
 8003108:	2b50      	cmp	r3, #80	; 0x50
 800310a:	d873      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d058      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003110:	2b40      	cmp	r3, #64	; 0x40
 8003112:	d86f      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003114:	2b30      	cmp	r3, #48	; 0x30
 8003116:	d064      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003118:	2b30      	cmp	r3, #48	; 0x30
 800311a:	d86b      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 800311c:	2b20      	cmp	r3, #32
 800311e:	d060      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003120:	2b20      	cmp	r3, #32
 8003122:	d867      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d05c      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003128:	2b10      	cmp	r3, #16
 800312a:	d05a      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x15a>
 800312c:	e062      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6899      	ldr	r1, [r3, #8]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f000 fb19 	bl	8003774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	609a      	str	r2, [r3, #8]
      break;
 800315a:	e04f      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	6899      	ldr	r1, [r3, #8]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f000 fb02 	bl	8003774 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800317e:	609a      	str	r2, [r3, #8]
      break;
 8003180:	e03c      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6859      	ldr	r1, [r3, #4]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	461a      	mov	r2, r3
 8003190:	f000 fa76 	bl	8003680 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2150      	movs	r1, #80	; 0x50
 800319a:	4618      	mov	r0, r3
 800319c:	f000 facf 	bl	800373e <TIM_ITRx_SetConfig>
      break;
 80031a0:	e02c      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6859      	ldr	r1, [r3, #4]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	461a      	mov	r2, r3
 80031b0:	f000 fa95 	bl	80036de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2160      	movs	r1, #96	; 0x60
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fabf 	bl	800373e <TIM_ITRx_SetConfig>
      break;
 80031c0:	e01c      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6859      	ldr	r1, [r3, #4]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	461a      	mov	r2, r3
 80031d0:	f000 fa56 	bl	8003680 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2140      	movs	r1, #64	; 0x40
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 faaf 	bl	800373e <TIM_ITRx_SetConfig>
      break;
 80031e0:	e00c      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f000 faa6 	bl	800373e <TIM_ITRx_SetConfig>
      break;
 80031f2:	e003      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      break;
 80031f8:	e000      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800320c:	7bfb      	ldrb	r3, [r7, #15]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a34      	ldr	r2, [pc, #208]	; (800334c <TIM_Base_SetConfig+0xe4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00f      	beq.n	80032a0 <TIM_Base_SetConfig+0x38>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003286:	d00b      	beq.n	80032a0 <TIM_Base_SetConfig+0x38>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a31      	ldr	r2, [pc, #196]	; (8003350 <TIM_Base_SetConfig+0xe8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d007      	beq.n	80032a0 <TIM_Base_SetConfig+0x38>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a30      	ldr	r2, [pc, #192]	; (8003354 <TIM_Base_SetConfig+0xec>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d003      	beq.n	80032a0 <TIM_Base_SetConfig+0x38>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a2f      	ldr	r2, [pc, #188]	; (8003358 <TIM_Base_SetConfig+0xf0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d108      	bne.n	80032b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a25      	ldr	r2, [pc, #148]	; (800334c <TIM_Base_SetConfig+0xe4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01b      	beq.n	80032f2 <TIM_Base_SetConfig+0x8a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c0:	d017      	beq.n	80032f2 <TIM_Base_SetConfig+0x8a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a22      	ldr	r2, [pc, #136]	; (8003350 <TIM_Base_SetConfig+0xe8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <TIM_Base_SetConfig+0x8a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a21      	ldr	r2, [pc, #132]	; (8003354 <TIM_Base_SetConfig+0xec>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00f      	beq.n	80032f2 <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a20      	ldr	r2, [pc, #128]	; (8003358 <TIM_Base_SetConfig+0xf0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00b      	beq.n	80032f2 <TIM_Base_SetConfig+0x8a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1f      	ldr	r2, [pc, #124]	; (800335c <TIM_Base_SetConfig+0xf4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <TIM_Base_SetConfig+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a1e      	ldr	r2, [pc, #120]	; (8003360 <TIM_Base_SetConfig+0xf8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_Base_SetConfig+0x8a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <TIM_Base_SetConfig+0xfc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d108      	bne.n	8003304 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a08      	ldr	r2, [pc, #32]	; (800334c <TIM_Base_SetConfig+0xe4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d103      	bne.n	8003338 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	615a      	str	r2, [r3, #20]
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010000 	.word	0x40010000
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800
 8003358:	40000c00 	.word	0x40000c00
 800335c:	40014000 	.word	0x40014000
 8003360:	40014400 	.word	0x40014400
 8003364:	40014800 	.word	0x40014800

08003368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f023 0201 	bic.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0303 	bic.w	r3, r3, #3
 800339e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f023 0302 	bic.w	r3, r3, #2
 80033b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <TIM_OC1_SetConfig+0xc8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10c      	bne.n	80033de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f023 0308 	bic.w	r3, r3, #8
 80033ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f023 0304 	bic.w	r3, r3, #4
 80033dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a13      	ldr	r2, [pc, #76]	; (8003430 <TIM_OC1_SetConfig+0xc8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d111      	bne.n	800340a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	621a      	str	r2, [r3, #32]
}
 8003424:	bf00      	nop
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	40010000 	.word	0x40010000

08003434 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	f023 0210 	bic.w	r2, r3, #16
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f023 0320 	bic.w	r3, r3, #32
 800347e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a1e      	ldr	r2, [pc, #120]	; (8003508 <TIM_OC2_SetConfig+0xd4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10d      	bne.n	80034b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800349a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a15      	ldr	r2, [pc, #84]	; (8003508 <TIM_OC2_SetConfig+0xd4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d113      	bne.n	80034e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40010000 	.word	0x40010000

0800350c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0303 	bic.w	r3, r3, #3
 8003542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <TIM_OC3_SetConfig+0xd0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10d      	bne.n	8003586 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <TIM_OC3_SetConfig+0xd0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d113      	bne.n	80035b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800359c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	621a      	str	r2, [r3, #32]
}
 80035d0:	bf00      	nop
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40010000 	.word	0x40010000

080035e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800362a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	031b      	lsls	r3, r3, #12
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a10      	ldr	r2, [pc, #64]	; (800367c <TIM_OC4_SetConfig+0x9c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d109      	bne.n	8003654 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	019b      	lsls	r3, r3, #6
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40010000 	.word	0x40010000

08003680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f023 0201 	bic.w	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f023 030a 	bic.w	r3, r3, #10
 80036bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	621a      	str	r2, [r3, #32]
}
 80036d2:	bf00      	nop
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036de:	b480      	push	{r7}
 80036e0:	b087      	sub	sp, #28
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	f023 0210 	bic.w	r2, r3, #16
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003708:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	031b      	lsls	r3, r3, #12
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800371a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	621a      	str	r2, [r3, #32]
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	f043 0307 	orr.w	r3, r3, #7
 8003760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	609a      	str	r2, [r3, #8]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800378e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	021a      	lsls	r2, r3, #8
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	431a      	orrs	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4313      	orrs	r3, r2
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	609a      	str	r2, [r3, #8]
}
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2201      	movs	r2, #1
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a1a      	ldr	r2, [r3, #32]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	43db      	mvns	r3, r3
 80037d6:	401a      	ands	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a1a      	ldr	r2, [r3, #32]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ec:	431a      	orrs	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	621a      	str	r2, [r3, #32]
}
 80037f2:	bf00      	nop
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003814:	2302      	movs	r3, #2
 8003816:	e050      	b.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1c      	ldr	r2, [pc, #112]	; (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d018      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003864:	d013      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a18      	ldr	r2, [pc, #96]	; (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00e      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a16      	ldr	r2, [pc, #88]	; (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d009      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d10c      	bne.n	80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	4313      	orrs	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40000800 	.word	0x40000800
 80038d4:	40000c00 	.word	0x40000c00
 80038d8:	40014000 	.word	0x40014000

080038dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e03d      	b.n	8003974 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4313      	orrs	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e03f      	b.n	8003a3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fd feb0 	bl	8001734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2224      	movs	r2, #36	; 0x24
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f929 	bl	8003c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b08a      	sub	sp, #40	; 0x28
 8003a46:	af02      	add	r7, sp, #8
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d17c      	bne.n	8003b5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_UART_Transmit+0x2c>
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e075      	b.n	8003b5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_UART_Transmit+0x3e>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e06e      	b.n	8003b5e <HAL_UART_Transmit+0x11c>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2221      	movs	r2, #33	; 0x21
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a96:	f7fd ffa1 	bl	80019dc <HAL_GetTick>
 8003a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	88fa      	ldrh	r2, [r7, #6]
 8003aa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	88fa      	ldrh	r2, [r7, #6]
 8003aa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab0:	d108      	bne.n	8003ac4 <HAL_UART_Transmit+0x82>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	e003      	b.n	8003acc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ad4:	e02a      	b.n	8003b2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2180      	movs	r1, #128	; 0x80
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f840 	bl	8003b66 <UART_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e036      	b.n	8003b5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	3302      	adds	r3, #2
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	e007      	b.n	8003b1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1cf      	bne.n	8003ad6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2140      	movs	r1, #64	; 0x40
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f810 	bl	8003b66 <UART_WaitOnFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e006      	b.n	8003b5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	e000      	b.n	8003b5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b5c:	2302      	movs	r3, #2
  }
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b090      	sub	sp, #64	; 0x40
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	4613      	mov	r3, r2
 8003b74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b76:	e050      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7e:	d04c      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d007      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b86:	f7fd ff29 	bl	80019dc <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d241      	bcs.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	330c      	adds	r3, #12
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	e853 3f00 	ldrex	r3, [r3]
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	330c      	adds	r3, #12
 8003bb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bb6:	637a      	str	r2, [r7, #52]	; 0x34
 8003bb8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e5      	bne.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3314      	adds	r3, #20
 8003bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3314      	adds	r3, #20
 8003be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bea:	623a      	str	r2, [r7, #32]
 8003bec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	69f9      	ldr	r1, [r7, #28]
 8003bf0:	6a3a      	ldr	r2, [r7, #32]
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e5      	bne.n	8003bca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e00f      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4013      	ands	r3, r2
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d09f      	beq.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3740      	adds	r7, #64	; 0x40
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c48:	b0c0      	sub	sp, #256	; 0x100
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c60:	68d9      	ldr	r1, [r3, #12]
 8003c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	ea40 0301 	orr.w	r3, r0, r1
 8003c6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c9c:	f021 010c 	bic.w	r1, r1, #12
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003caa:	430b      	orrs	r3, r1
 8003cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbe:	6999      	ldr	r1, [r3, #24]
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	ea40 0301 	orr.w	r3, r0, r1
 8003cca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	4b8f      	ldr	r3, [pc, #572]	; (8003f10 <UART_SetConfig+0x2cc>)
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d005      	beq.n	8003ce4 <UART_SetConfig+0xa0>
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4b8d      	ldr	r3, [pc, #564]	; (8003f14 <UART_SetConfig+0x2d0>)
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d104      	bne.n	8003cee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ce4:	f7fe fdd2 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 8003ce8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cec:	e003      	b.n	8003cf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cee:	f7fe fdb9 	bl	8002864 <HAL_RCC_GetPCLK1Freq>
 8003cf2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d00:	f040 810c 	bne.w	8003f1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d16:	4622      	mov	r2, r4
 8003d18:	462b      	mov	r3, r5
 8003d1a:	1891      	adds	r1, r2, r2
 8003d1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d1e:	415b      	adcs	r3, r3
 8003d20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d26:	4621      	mov	r1, r4
 8003d28:	eb12 0801 	adds.w	r8, r2, r1
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	eb43 0901 	adc.w	r9, r3, r1
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d46:	4690      	mov	r8, r2
 8003d48:	4699      	mov	r9, r3
 8003d4a:	4623      	mov	r3, r4
 8003d4c:	eb18 0303 	adds.w	r3, r8, r3
 8003d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d54:	462b      	mov	r3, r5
 8003d56:	eb49 0303 	adc.w	r3, r9, r3
 8003d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d72:	460b      	mov	r3, r1
 8003d74:	18db      	adds	r3, r3, r3
 8003d76:	653b      	str	r3, [r7, #80]	; 0x50
 8003d78:	4613      	mov	r3, r2
 8003d7a:	eb42 0303 	adc.w	r3, r2, r3
 8003d7e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d88:	f7fc ff36 	bl	8000bf8 <__aeabi_uldivmod>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4b61      	ldr	r3, [pc, #388]	; (8003f18 <UART_SetConfig+0x2d4>)
 8003d92:	fba3 2302 	umull	r2, r3, r3, r2
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	011c      	lsls	r4, r3, #4
 8003d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003da4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003da8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003dac:	4642      	mov	r2, r8
 8003dae:	464b      	mov	r3, r9
 8003db0:	1891      	adds	r1, r2, r2
 8003db2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003db4:	415b      	adcs	r3, r3
 8003db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	eb12 0a01 	adds.w	sl, r2, r1
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	eb43 0b01 	adc.w	fp, r3, r1
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ddc:	4692      	mov	sl, r2
 8003dde:	469b      	mov	fp, r3
 8003de0:	4643      	mov	r3, r8
 8003de2:	eb1a 0303 	adds.w	r3, sl, r3
 8003de6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dea:	464b      	mov	r3, r9
 8003dec:	eb4b 0303 	adc.w	r3, fp, r3
 8003df0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	18db      	adds	r3, r3, r3
 8003e0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e0e:	4613      	mov	r3, r2
 8003e10:	eb42 0303 	adc.w	r3, r2, r3
 8003e14:	647b      	str	r3, [r7, #68]	; 0x44
 8003e16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e1e:	f7fc feeb 	bl	8000bf8 <__aeabi_uldivmod>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4611      	mov	r1, r2
 8003e28:	4b3b      	ldr	r3, [pc, #236]	; (8003f18 <UART_SetConfig+0x2d4>)
 8003e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	2264      	movs	r2, #100	; 0x64
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	1acb      	subs	r3, r1, r3
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e3e:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <UART_SetConfig+0x2d4>)
 8003e40:	fba3 2302 	umull	r2, r3, r3, r2
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e4c:	441c      	add	r4, r3
 8003e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e52:	2200      	movs	r2, #0
 8003e54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e60:	4642      	mov	r2, r8
 8003e62:	464b      	mov	r3, r9
 8003e64:	1891      	adds	r1, r2, r2
 8003e66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e68:	415b      	adcs	r3, r3
 8003e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e70:	4641      	mov	r1, r8
 8003e72:	1851      	adds	r1, r2, r1
 8003e74:	6339      	str	r1, [r7, #48]	; 0x30
 8003e76:	4649      	mov	r1, r9
 8003e78:	414b      	adcs	r3, r1
 8003e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e88:	4659      	mov	r1, fp
 8003e8a:	00cb      	lsls	r3, r1, #3
 8003e8c:	4651      	mov	r1, sl
 8003e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e92:	4651      	mov	r1, sl
 8003e94:	00ca      	lsls	r2, r1, #3
 8003e96:	4610      	mov	r0, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	4642      	mov	r2, r8
 8003e9e:	189b      	adds	r3, r3, r2
 8003ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ea4:	464b      	mov	r3, r9
 8003ea6:	460a      	mov	r2, r1
 8003ea8:	eb42 0303 	adc.w	r3, r2, r3
 8003eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ebc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	18db      	adds	r3, r3, r3
 8003ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eca:	4613      	mov	r3, r2
 8003ecc:	eb42 0303 	adc.w	r3, r2, r3
 8003ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ed6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003eda:	f7fc fe8d 	bl	8000bf8 <__aeabi_uldivmod>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <UART_SetConfig+0x2d4>)
 8003ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	2164      	movs	r1, #100	; 0x64
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	3332      	adds	r3, #50	; 0x32
 8003ef6:	4a08      	ldr	r2, [pc, #32]	; (8003f18 <UART_SetConfig+0x2d4>)
 8003ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	f003 0207 	and.w	r2, r3, #7
 8003f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4422      	add	r2, r4
 8003f0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f0c:	e106      	b.n	800411c <UART_SetConfig+0x4d8>
 8003f0e:	bf00      	nop
 8003f10:	40011000 	.word	0x40011000
 8003f14:	40011400 	.word	0x40011400
 8003f18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f20:	2200      	movs	r2, #0
 8003f22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f2e:	4642      	mov	r2, r8
 8003f30:	464b      	mov	r3, r9
 8003f32:	1891      	adds	r1, r2, r2
 8003f34:	6239      	str	r1, [r7, #32]
 8003f36:	415b      	adcs	r3, r3
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f3e:	4641      	mov	r1, r8
 8003f40:	1854      	adds	r4, r2, r1
 8003f42:	4649      	mov	r1, r9
 8003f44:	eb43 0501 	adc.w	r5, r3, r1
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	00eb      	lsls	r3, r5, #3
 8003f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f56:	00e2      	lsls	r2, r4, #3
 8003f58:	4614      	mov	r4, r2
 8003f5a:	461d      	mov	r5, r3
 8003f5c:	4643      	mov	r3, r8
 8003f5e:	18e3      	adds	r3, r4, r3
 8003f60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f64:	464b      	mov	r3, r9
 8003f66:	eb45 0303 	adc.w	r3, r5, r3
 8003f6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	008b      	lsls	r3, r1, #2
 8003f8e:	4621      	mov	r1, r4
 8003f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f94:	4621      	mov	r1, r4
 8003f96:	008a      	lsls	r2, r1, #2
 8003f98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f9c:	f7fc fe2c 	bl	8000bf8 <__aeabi_uldivmod>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4b60      	ldr	r3, [pc, #384]	; (8004128 <UART_SetConfig+0x4e4>)
 8003fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	011c      	lsls	r4, r3, #4
 8003fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fc0:	4642      	mov	r2, r8
 8003fc2:	464b      	mov	r3, r9
 8003fc4:	1891      	adds	r1, r2, r2
 8003fc6:	61b9      	str	r1, [r7, #24]
 8003fc8:	415b      	adcs	r3, r3
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fd0:	4641      	mov	r1, r8
 8003fd2:	1851      	adds	r1, r2, r1
 8003fd4:	6139      	str	r1, [r7, #16]
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	414b      	adcs	r3, r1
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fe8:	4659      	mov	r1, fp
 8003fea:	00cb      	lsls	r3, r1, #3
 8003fec:	4651      	mov	r1, sl
 8003fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ff2:	4651      	mov	r1, sl
 8003ff4:	00ca      	lsls	r2, r1, #3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	189b      	adds	r3, r3, r2
 8004000:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004004:	464b      	mov	r3, r9
 8004006:	460a      	mov	r2, r1
 8004008:	eb42 0303 	adc.w	r3, r2, r3
 800400c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	67bb      	str	r3, [r7, #120]	; 0x78
 800401a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004028:	4649      	mov	r1, r9
 800402a:	008b      	lsls	r3, r1, #2
 800402c:	4641      	mov	r1, r8
 800402e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004032:	4641      	mov	r1, r8
 8004034:	008a      	lsls	r2, r1, #2
 8004036:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800403a:	f7fc fddd 	bl	8000bf8 <__aeabi_uldivmod>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4611      	mov	r1, r2
 8004044:	4b38      	ldr	r3, [pc, #224]	; (8004128 <UART_SetConfig+0x4e4>)
 8004046:	fba3 2301 	umull	r2, r3, r3, r1
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	2264      	movs	r2, #100	; 0x64
 800404e:	fb02 f303 	mul.w	r3, r2, r3
 8004052:	1acb      	subs	r3, r1, r3
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	3332      	adds	r3, #50	; 0x32
 8004058:	4a33      	ldr	r2, [pc, #204]	; (8004128 <UART_SetConfig+0x4e4>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004064:	441c      	add	r4, r3
 8004066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800406a:	2200      	movs	r2, #0
 800406c:	673b      	str	r3, [r7, #112]	; 0x70
 800406e:	677a      	str	r2, [r7, #116]	; 0x74
 8004070:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004074:	4642      	mov	r2, r8
 8004076:	464b      	mov	r3, r9
 8004078:	1891      	adds	r1, r2, r2
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	415b      	adcs	r3, r3
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004084:	4641      	mov	r1, r8
 8004086:	1851      	adds	r1, r2, r1
 8004088:	6039      	str	r1, [r7, #0]
 800408a:	4649      	mov	r1, r9
 800408c:	414b      	adcs	r3, r1
 800408e:	607b      	str	r3, [r7, #4]
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800409c:	4659      	mov	r1, fp
 800409e:	00cb      	lsls	r3, r1, #3
 80040a0:	4651      	mov	r1, sl
 80040a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040a6:	4651      	mov	r1, sl
 80040a8:	00ca      	lsls	r2, r1, #3
 80040aa:	4610      	mov	r0, r2
 80040ac:	4619      	mov	r1, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	4642      	mov	r2, r8
 80040b2:	189b      	adds	r3, r3, r2
 80040b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80040b6:	464b      	mov	r3, r9
 80040b8:	460a      	mov	r2, r1
 80040ba:	eb42 0303 	adc.w	r3, r2, r3
 80040be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	663b      	str	r3, [r7, #96]	; 0x60
 80040ca:	667a      	str	r2, [r7, #100]	; 0x64
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040d8:	4649      	mov	r1, r9
 80040da:	008b      	lsls	r3, r1, #2
 80040dc:	4641      	mov	r1, r8
 80040de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e2:	4641      	mov	r1, r8
 80040e4:	008a      	lsls	r2, r1, #2
 80040e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040ea:	f7fc fd85 	bl	8000bf8 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <UART_SetConfig+0x4e4>)
 80040f4:	fba3 1302 	umull	r1, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	2164      	movs	r1, #100	; 0x64
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	3332      	adds	r3, #50	; 0x32
 8004106:	4a08      	ldr	r2, [pc, #32]	; (8004128 <UART_SetConfig+0x4e4>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	f003 020f 	and.w	r2, r3, #15
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4422      	add	r2, r4
 800411a:	609a      	str	r2, [r3, #8]
}
 800411c:	bf00      	nop
 800411e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004122:	46bd      	mov	sp, r7
 8004124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004128:	51eb851f 	.word	0x51eb851f

0800412c <siprintf>:
 800412c:	b40e      	push	{r1, r2, r3}
 800412e:	b500      	push	{lr}
 8004130:	b09c      	sub	sp, #112	; 0x70
 8004132:	ab1d      	add	r3, sp, #116	; 0x74
 8004134:	9002      	str	r0, [sp, #8]
 8004136:	9006      	str	r0, [sp, #24]
 8004138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800413c:	4809      	ldr	r0, [pc, #36]	; (8004164 <siprintf+0x38>)
 800413e:	9107      	str	r1, [sp, #28]
 8004140:	9104      	str	r1, [sp, #16]
 8004142:	4909      	ldr	r1, [pc, #36]	; (8004168 <siprintf+0x3c>)
 8004144:	f853 2b04 	ldr.w	r2, [r3], #4
 8004148:	9105      	str	r1, [sp, #20]
 800414a:	6800      	ldr	r0, [r0, #0]
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	a902      	add	r1, sp, #8
 8004150:	f000 f992 	bl	8004478 <_svfiprintf_r>
 8004154:	9b02      	ldr	r3, [sp, #8]
 8004156:	2200      	movs	r2, #0
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	b01c      	add	sp, #112	; 0x70
 800415c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004160:	b003      	add	sp, #12
 8004162:	4770      	bx	lr
 8004164:	20000068 	.word	0x20000068
 8004168:	ffff0208 	.word	0xffff0208

0800416c <memset>:
 800416c:	4402      	add	r2, r0
 800416e:	4603      	mov	r3, r0
 8004170:	4293      	cmp	r3, r2
 8004172:	d100      	bne.n	8004176 <memset+0xa>
 8004174:	4770      	bx	lr
 8004176:	f803 1b01 	strb.w	r1, [r3], #1
 800417a:	e7f9      	b.n	8004170 <memset+0x4>

0800417c <__errno>:
 800417c:	4b01      	ldr	r3, [pc, #4]	; (8004184 <__errno+0x8>)
 800417e:	6818      	ldr	r0, [r3, #0]
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000068 	.word	0x20000068

08004188 <__libc_init_array>:
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	4d0d      	ldr	r5, [pc, #52]	; (80041c0 <__libc_init_array+0x38>)
 800418c:	4c0d      	ldr	r4, [pc, #52]	; (80041c4 <__libc_init_array+0x3c>)
 800418e:	1b64      	subs	r4, r4, r5
 8004190:	10a4      	asrs	r4, r4, #2
 8004192:	2600      	movs	r6, #0
 8004194:	42a6      	cmp	r6, r4
 8004196:	d109      	bne.n	80041ac <__libc_init_array+0x24>
 8004198:	4d0b      	ldr	r5, [pc, #44]	; (80041c8 <__libc_init_array+0x40>)
 800419a:	4c0c      	ldr	r4, [pc, #48]	; (80041cc <__libc_init_array+0x44>)
 800419c:	f001 fba4 	bl	80058e8 <_init>
 80041a0:	1b64      	subs	r4, r4, r5
 80041a2:	10a4      	asrs	r4, r4, #2
 80041a4:	2600      	movs	r6, #0
 80041a6:	42a6      	cmp	r6, r4
 80041a8:	d105      	bne.n	80041b6 <__libc_init_array+0x2e>
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
 80041ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b0:	4798      	blx	r3
 80041b2:	3601      	adds	r6, #1
 80041b4:	e7ee      	b.n	8004194 <__libc_init_array+0xc>
 80041b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ba:	4798      	blx	r3
 80041bc:	3601      	adds	r6, #1
 80041be:	e7f2      	b.n	80041a6 <__libc_init_array+0x1e>
 80041c0:	080059a8 	.word	0x080059a8
 80041c4:	080059a8 	.word	0x080059a8
 80041c8:	080059a8 	.word	0x080059a8
 80041cc:	080059ac 	.word	0x080059ac

080041d0 <__retarget_lock_acquire_recursive>:
 80041d0:	4770      	bx	lr

080041d2 <__retarget_lock_release_recursive>:
 80041d2:	4770      	bx	lr

080041d4 <_free_r>:
 80041d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041d6:	2900      	cmp	r1, #0
 80041d8:	d044      	beq.n	8004264 <_free_r+0x90>
 80041da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041de:	9001      	str	r0, [sp, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f1a1 0404 	sub.w	r4, r1, #4
 80041e6:	bfb8      	it	lt
 80041e8:	18e4      	addlt	r4, r4, r3
 80041ea:	f000 f8df 	bl	80043ac <__malloc_lock>
 80041ee:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <_free_r+0x94>)
 80041f0:	9801      	ldr	r0, [sp, #4]
 80041f2:	6813      	ldr	r3, [r2, #0]
 80041f4:	b933      	cbnz	r3, 8004204 <_free_r+0x30>
 80041f6:	6063      	str	r3, [r4, #4]
 80041f8:	6014      	str	r4, [r2, #0]
 80041fa:	b003      	add	sp, #12
 80041fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004200:	f000 b8da 	b.w	80043b8 <__malloc_unlock>
 8004204:	42a3      	cmp	r3, r4
 8004206:	d908      	bls.n	800421a <_free_r+0x46>
 8004208:	6825      	ldr	r5, [r4, #0]
 800420a:	1961      	adds	r1, r4, r5
 800420c:	428b      	cmp	r3, r1
 800420e:	bf01      	itttt	eq
 8004210:	6819      	ldreq	r1, [r3, #0]
 8004212:	685b      	ldreq	r3, [r3, #4]
 8004214:	1949      	addeq	r1, r1, r5
 8004216:	6021      	streq	r1, [r4, #0]
 8004218:	e7ed      	b.n	80041f6 <_free_r+0x22>
 800421a:	461a      	mov	r2, r3
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	b10b      	cbz	r3, 8004224 <_free_r+0x50>
 8004220:	42a3      	cmp	r3, r4
 8004222:	d9fa      	bls.n	800421a <_free_r+0x46>
 8004224:	6811      	ldr	r1, [r2, #0]
 8004226:	1855      	adds	r5, r2, r1
 8004228:	42a5      	cmp	r5, r4
 800422a:	d10b      	bne.n	8004244 <_free_r+0x70>
 800422c:	6824      	ldr	r4, [r4, #0]
 800422e:	4421      	add	r1, r4
 8004230:	1854      	adds	r4, r2, r1
 8004232:	42a3      	cmp	r3, r4
 8004234:	6011      	str	r1, [r2, #0]
 8004236:	d1e0      	bne.n	80041fa <_free_r+0x26>
 8004238:	681c      	ldr	r4, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	6053      	str	r3, [r2, #4]
 800423e:	440c      	add	r4, r1
 8004240:	6014      	str	r4, [r2, #0]
 8004242:	e7da      	b.n	80041fa <_free_r+0x26>
 8004244:	d902      	bls.n	800424c <_free_r+0x78>
 8004246:	230c      	movs	r3, #12
 8004248:	6003      	str	r3, [r0, #0]
 800424a:	e7d6      	b.n	80041fa <_free_r+0x26>
 800424c:	6825      	ldr	r5, [r4, #0]
 800424e:	1961      	adds	r1, r4, r5
 8004250:	428b      	cmp	r3, r1
 8004252:	bf04      	itt	eq
 8004254:	6819      	ldreq	r1, [r3, #0]
 8004256:	685b      	ldreq	r3, [r3, #4]
 8004258:	6063      	str	r3, [r4, #4]
 800425a:	bf04      	itt	eq
 800425c:	1949      	addeq	r1, r1, r5
 800425e:	6021      	streq	r1, [r4, #0]
 8004260:	6054      	str	r4, [r2, #4]
 8004262:	e7ca      	b.n	80041fa <_free_r+0x26>
 8004264:	b003      	add	sp, #12
 8004266:	bd30      	pop	{r4, r5, pc}
 8004268:	200002cc 	.word	0x200002cc

0800426c <sbrk_aligned>:
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	4e0e      	ldr	r6, [pc, #56]	; (80042a8 <sbrk_aligned+0x3c>)
 8004270:	460c      	mov	r4, r1
 8004272:	6831      	ldr	r1, [r6, #0]
 8004274:	4605      	mov	r5, r0
 8004276:	b911      	cbnz	r1, 800427e <sbrk_aligned+0x12>
 8004278:	f000 fba6 	bl	80049c8 <_sbrk_r>
 800427c:	6030      	str	r0, [r6, #0]
 800427e:	4621      	mov	r1, r4
 8004280:	4628      	mov	r0, r5
 8004282:	f000 fba1 	bl	80049c8 <_sbrk_r>
 8004286:	1c43      	adds	r3, r0, #1
 8004288:	d00a      	beq.n	80042a0 <sbrk_aligned+0x34>
 800428a:	1cc4      	adds	r4, r0, #3
 800428c:	f024 0403 	bic.w	r4, r4, #3
 8004290:	42a0      	cmp	r0, r4
 8004292:	d007      	beq.n	80042a4 <sbrk_aligned+0x38>
 8004294:	1a21      	subs	r1, r4, r0
 8004296:	4628      	mov	r0, r5
 8004298:	f000 fb96 	bl	80049c8 <_sbrk_r>
 800429c:	3001      	adds	r0, #1
 800429e:	d101      	bne.n	80042a4 <sbrk_aligned+0x38>
 80042a0:	f04f 34ff 	mov.w	r4, #4294967295
 80042a4:	4620      	mov	r0, r4
 80042a6:	bd70      	pop	{r4, r5, r6, pc}
 80042a8:	200002d0 	.word	0x200002d0

080042ac <_malloc_r>:
 80042ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b0:	1ccd      	adds	r5, r1, #3
 80042b2:	f025 0503 	bic.w	r5, r5, #3
 80042b6:	3508      	adds	r5, #8
 80042b8:	2d0c      	cmp	r5, #12
 80042ba:	bf38      	it	cc
 80042bc:	250c      	movcc	r5, #12
 80042be:	2d00      	cmp	r5, #0
 80042c0:	4607      	mov	r7, r0
 80042c2:	db01      	blt.n	80042c8 <_malloc_r+0x1c>
 80042c4:	42a9      	cmp	r1, r5
 80042c6:	d905      	bls.n	80042d4 <_malloc_r+0x28>
 80042c8:	230c      	movs	r3, #12
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	2600      	movs	r6, #0
 80042ce:	4630      	mov	r0, r6
 80042d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80043a8 <_malloc_r+0xfc>
 80042d8:	f000 f868 	bl	80043ac <__malloc_lock>
 80042dc:	f8d8 3000 	ldr.w	r3, [r8]
 80042e0:	461c      	mov	r4, r3
 80042e2:	bb5c      	cbnz	r4, 800433c <_malloc_r+0x90>
 80042e4:	4629      	mov	r1, r5
 80042e6:	4638      	mov	r0, r7
 80042e8:	f7ff ffc0 	bl	800426c <sbrk_aligned>
 80042ec:	1c43      	adds	r3, r0, #1
 80042ee:	4604      	mov	r4, r0
 80042f0:	d155      	bne.n	800439e <_malloc_r+0xf2>
 80042f2:	f8d8 4000 	ldr.w	r4, [r8]
 80042f6:	4626      	mov	r6, r4
 80042f8:	2e00      	cmp	r6, #0
 80042fa:	d145      	bne.n	8004388 <_malloc_r+0xdc>
 80042fc:	2c00      	cmp	r4, #0
 80042fe:	d048      	beq.n	8004392 <_malloc_r+0xe6>
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	4631      	mov	r1, r6
 8004304:	4638      	mov	r0, r7
 8004306:	eb04 0903 	add.w	r9, r4, r3
 800430a:	f000 fb5d 	bl	80049c8 <_sbrk_r>
 800430e:	4581      	cmp	r9, r0
 8004310:	d13f      	bne.n	8004392 <_malloc_r+0xe6>
 8004312:	6821      	ldr	r1, [r4, #0]
 8004314:	1a6d      	subs	r5, r5, r1
 8004316:	4629      	mov	r1, r5
 8004318:	4638      	mov	r0, r7
 800431a:	f7ff ffa7 	bl	800426c <sbrk_aligned>
 800431e:	3001      	adds	r0, #1
 8004320:	d037      	beq.n	8004392 <_malloc_r+0xe6>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	442b      	add	r3, r5
 8004326:	6023      	str	r3, [r4, #0]
 8004328:	f8d8 3000 	ldr.w	r3, [r8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d038      	beq.n	80043a2 <_malloc_r+0xf6>
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	42a2      	cmp	r2, r4
 8004334:	d12b      	bne.n	800438e <_malloc_r+0xe2>
 8004336:	2200      	movs	r2, #0
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	e00f      	b.n	800435c <_malloc_r+0xb0>
 800433c:	6822      	ldr	r2, [r4, #0]
 800433e:	1b52      	subs	r2, r2, r5
 8004340:	d41f      	bmi.n	8004382 <_malloc_r+0xd6>
 8004342:	2a0b      	cmp	r2, #11
 8004344:	d917      	bls.n	8004376 <_malloc_r+0xca>
 8004346:	1961      	adds	r1, r4, r5
 8004348:	42a3      	cmp	r3, r4
 800434a:	6025      	str	r5, [r4, #0]
 800434c:	bf18      	it	ne
 800434e:	6059      	strne	r1, [r3, #4]
 8004350:	6863      	ldr	r3, [r4, #4]
 8004352:	bf08      	it	eq
 8004354:	f8c8 1000 	streq.w	r1, [r8]
 8004358:	5162      	str	r2, [r4, r5]
 800435a:	604b      	str	r3, [r1, #4]
 800435c:	4638      	mov	r0, r7
 800435e:	f104 060b 	add.w	r6, r4, #11
 8004362:	f000 f829 	bl	80043b8 <__malloc_unlock>
 8004366:	f026 0607 	bic.w	r6, r6, #7
 800436a:	1d23      	adds	r3, r4, #4
 800436c:	1af2      	subs	r2, r6, r3
 800436e:	d0ae      	beq.n	80042ce <_malloc_r+0x22>
 8004370:	1b9b      	subs	r3, r3, r6
 8004372:	50a3      	str	r3, [r4, r2]
 8004374:	e7ab      	b.n	80042ce <_malloc_r+0x22>
 8004376:	42a3      	cmp	r3, r4
 8004378:	6862      	ldr	r2, [r4, #4]
 800437a:	d1dd      	bne.n	8004338 <_malloc_r+0x8c>
 800437c:	f8c8 2000 	str.w	r2, [r8]
 8004380:	e7ec      	b.n	800435c <_malloc_r+0xb0>
 8004382:	4623      	mov	r3, r4
 8004384:	6864      	ldr	r4, [r4, #4]
 8004386:	e7ac      	b.n	80042e2 <_malloc_r+0x36>
 8004388:	4634      	mov	r4, r6
 800438a:	6876      	ldr	r6, [r6, #4]
 800438c:	e7b4      	b.n	80042f8 <_malloc_r+0x4c>
 800438e:	4613      	mov	r3, r2
 8004390:	e7cc      	b.n	800432c <_malloc_r+0x80>
 8004392:	230c      	movs	r3, #12
 8004394:	603b      	str	r3, [r7, #0]
 8004396:	4638      	mov	r0, r7
 8004398:	f000 f80e 	bl	80043b8 <__malloc_unlock>
 800439c:	e797      	b.n	80042ce <_malloc_r+0x22>
 800439e:	6025      	str	r5, [r4, #0]
 80043a0:	e7dc      	b.n	800435c <_malloc_r+0xb0>
 80043a2:	605b      	str	r3, [r3, #4]
 80043a4:	deff      	udf	#255	; 0xff
 80043a6:	bf00      	nop
 80043a8:	200002cc 	.word	0x200002cc

080043ac <__malloc_lock>:
 80043ac:	4801      	ldr	r0, [pc, #4]	; (80043b4 <__malloc_lock+0x8>)
 80043ae:	f7ff bf0f 	b.w	80041d0 <__retarget_lock_acquire_recursive>
 80043b2:	bf00      	nop
 80043b4:	200002c8 	.word	0x200002c8

080043b8 <__malloc_unlock>:
 80043b8:	4801      	ldr	r0, [pc, #4]	; (80043c0 <__malloc_unlock+0x8>)
 80043ba:	f7ff bf0a 	b.w	80041d2 <__retarget_lock_release_recursive>
 80043be:	bf00      	nop
 80043c0:	200002c8 	.word	0x200002c8

080043c4 <__ssputs_r>:
 80043c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c8:	688e      	ldr	r6, [r1, #8]
 80043ca:	461f      	mov	r7, r3
 80043cc:	42be      	cmp	r6, r7
 80043ce:	680b      	ldr	r3, [r1, #0]
 80043d0:	4682      	mov	sl, r0
 80043d2:	460c      	mov	r4, r1
 80043d4:	4690      	mov	r8, r2
 80043d6:	d82c      	bhi.n	8004432 <__ssputs_r+0x6e>
 80043d8:	898a      	ldrh	r2, [r1, #12]
 80043da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043de:	d026      	beq.n	800442e <__ssputs_r+0x6a>
 80043e0:	6965      	ldr	r5, [r4, #20]
 80043e2:	6909      	ldr	r1, [r1, #16]
 80043e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043e8:	eba3 0901 	sub.w	r9, r3, r1
 80043ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043f0:	1c7b      	adds	r3, r7, #1
 80043f2:	444b      	add	r3, r9
 80043f4:	106d      	asrs	r5, r5, #1
 80043f6:	429d      	cmp	r5, r3
 80043f8:	bf38      	it	cc
 80043fa:	461d      	movcc	r5, r3
 80043fc:	0553      	lsls	r3, r2, #21
 80043fe:	d527      	bpl.n	8004450 <__ssputs_r+0x8c>
 8004400:	4629      	mov	r1, r5
 8004402:	f7ff ff53 	bl	80042ac <_malloc_r>
 8004406:	4606      	mov	r6, r0
 8004408:	b360      	cbz	r0, 8004464 <__ssputs_r+0xa0>
 800440a:	6921      	ldr	r1, [r4, #16]
 800440c:	464a      	mov	r2, r9
 800440e:	f000 faeb 	bl	80049e8 <memcpy>
 8004412:	89a3      	ldrh	r3, [r4, #12]
 8004414:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441c:	81a3      	strh	r3, [r4, #12]
 800441e:	6126      	str	r6, [r4, #16]
 8004420:	6165      	str	r5, [r4, #20]
 8004422:	444e      	add	r6, r9
 8004424:	eba5 0509 	sub.w	r5, r5, r9
 8004428:	6026      	str	r6, [r4, #0]
 800442a:	60a5      	str	r5, [r4, #8]
 800442c:	463e      	mov	r6, r7
 800442e:	42be      	cmp	r6, r7
 8004430:	d900      	bls.n	8004434 <__ssputs_r+0x70>
 8004432:	463e      	mov	r6, r7
 8004434:	6820      	ldr	r0, [r4, #0]
 8004436:	4632      	mov	r2, r6
 8004438:	4641      	mov	r1, r8
 800443a:	f000 faab 	bl	8004994 <memmove>
 800443e:	68a3      	ldr	r3, [r4, #8]
 8004440:	1b9b      	subs	r3, r3, r6
 8004442:	60a3      	str	r3, [r4, #8]
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	4433      	add	r3, r6
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	2000      	movs	r0, #0
 800444c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004450:	462a      	mov	r2, r5
 8004452:	f000 fad7 	bl	8004a04 <_realloc_r>
 8004456:	4606      	mov	r6, r0
 8004458:	2800      	cmp	r0, #0
 800445a:	d1e0      	bne.n	800441e <__ssputs_r+0x5a>
 800445c:	6921      	ldr	r1, [r4, #16]
 800445e:	4650      	mov	r0, sl
 8004460:	f7ff feb8 	bl	80041d4 <_free_r>
 8004464:	230c      	movs	r3, #12
 8004466:	f8ca 3000 	str.w	r3, [sl]
 800446a:	89a3      	ldrh	r3, [r4, #12]
 800446c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004470:	81a3      	strh	r3, [r4, #12]
 8004472:	f04f 30ff 	mov.w	r0, #4294967295
 8004476:	e7e9      	b.n	800444c <__ssputs_r+0x88>

08004478 <_svfiprintf_r>:
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447c:	4698      	mov	r8, r3
 800447e:	898b      	ldrh	r3, [r1, #12]
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	b09d      	sub	sp, #116	; 0x74
 8004484:	4607      	mov	r7, r0
 8004486:	460d      	mov	r5, r1
 8004488:	4614      	mov	r4, r2
 800448a:	d50e      	bpl.n	80044aa <_svfiprintf_r+0x32>
 800448c:	690b      	ldr	r3, [r1, #16]
 800448e:	b963      	cbnz	r3, 80044aa <_svfiprintf_r+0x32>
 8004490:	2140      	movs	r1, #64	; 0x40
 8004492:	f7ff ff0b 	bl	80042ac <_malloc_r>
 8004496:	6028      	str	r0, [r5, #0]
 8004498:	6128      	str	r0, [r5, #16]
 800449a:	b920      	cbnz	r0, 80044a6 <_svfiprintf_r+0x2e>
 800449c:	230c      	movs	r3, #12
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
 80044a4:	e0d0      	b.n	8004648 <_svfiprintf_r+0x1d0>
 80044a6:	2340      	movs	r3, #64	; 0x40
 80044a8:	616b      	str	r3, [r5, #20]
 80044aa:	2300      	movs	r3, #0
 80044ac:	9309      	str	r3, [sp, #36]	; 0x24
 80044ae:	2320      	movs	r3, #32
 80044b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80044b8:	2330      	movs	r3, #48	; 0x30
 80044ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004660 <_svfiprintf_r+0x1e8>
 80044be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044c2:	f04f 0901 	mov.w	r9, #1
 80044c6:	4623      	mov	r3, r4
 80044c8:	469a      	mov	sl, r3
 80044ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044ce:	b10a      	cbz	r2, 80044d4 <_svfiprintf_r+0x5c>
 80044d0:	2a25      	cmp	r2, #37	; 0x25
 80044d2:	d1f9      	bne.n	80044c8 <_svfiprintf_r+0x50>
 80044d4:	ebba 0b04 	subs.w	fp, sl, r4
 80044d8:	d00b      	beq.n	80044f2 <_svfiprintf_r+0x7a>
 80044da:	465b      	mov	r3, fp
 80044dc:	4622      	mov	r2, r4
 80044de:	4629      	mov	r1, r5
 80044e0:	4638      	mov	r0, r7
 80044e2:	f7ff ff6f 	bl	80043c4 <__ssputs_r>
 80044e6:	3001      	adds	r0, #1
 80044e8:	f000 80a9 	beq.w	800463e <_svfiprintf_r+0x1c6>
 80044ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044ee:	445a      	add	r2, fp
 80044f0:	9209      	str	r2, [sp, #36]	; 0x24
 80044f2:	f89a 3000 	ldrb.w	r3, [sl]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80a1 	beq.w	800463e <_svfiprintf_r+0x1c6>
 80044fc:	2300      	movs	r3, #0
 80044fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004506:	f10a 0a01 	add.w	sl, sl, #1
 800450a:	9304      	str	r3, [sp, #16]
 800450c:	9307      	str	r3, [sp, #28]
 800450e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004512:	931a      	str	r3, [sp, #104]	; 0x68
 8004514:	4654      	mov	r4, sl
 8004516:	2205      	movs	r2, #5
 8004518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800451c:	4850      	ldr	r0, [pc, #320]	; (8004660 <_svfiprintf_r+0x1e8>)
 800451e:	f7fb fe5f 	bl	80001e0 <memchr>
 8004522:	9a04      	ldr	r2, [sp, #16]
 8004524:	b9d8      	cbnz	r0, 800455e <_svfiprintf_r+0xe6>
 8004526:	06d0      	lsls	r0, r2, #27
 8004528:	bf44      	itt	mi
 800452a:	2320      	movmi	r3, #32
 800452c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004530:	0711      	lsls	r1, r2, #28
 8004532:	bf44      	itt	mi
 8004534:	232b      	movmi	r3, #43	; 0x2b
 8004536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800453a:	f89a 3000 	ldrb.w	r3, [sl]
 800453e:	2b2a      	cmp	r3, #42	; 0x2a
 8004540:	d015      	beq.n	800456e <_svfiprintf_r+0xf6>
 8004542:	9a07      	ldr	r2, [sp, #28]
 8004544:	4654      	mov	r4, sl
 8004546:	2000      	movs	r0, #0
 8004548:	f04f 0c0a 	mov.w	ip, #10
 800454c:	4621      	mov	r1, r4
 800454e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004552:	3b30      	subs	r3, #48	; 0x30
 8004554:	2b09      	cmp	r3, #9
 8004556:	d94d      	bls.n	80045f4 <_svfiprintf_r+0x17c>
 8004558:	b1b0      	cbz	r0, 8004588 <_svfiprintf_r+0x110>
 800455a:	9207      	str	r2, [sp, #28]
 800455c:	e014      	b.n	8004588 <_svfiprintf_r+0x110>
 800455e:	eba0 0308 	sub.w	r3, r0, r8
 8004562:	fa09 f303 	lsl.w	r3, r9, r3
 8004566:	4313      	orrs	r3, r2
 8004568:	9304      	str	r3, [sp, #16]
 800456a:	46a2      	mov	sl, r4
 800456c:	e7d2      	b.n	8004514 <_svfiprintf_r+0x9c>
 800456e:	9b03      	ldr	r3, [sp, #12]
 8004570:	1d19      	adds	r1, r3, #4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	9103      	str	r1, [sp, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	bfbb      	ittet	lt
 800457a:	425b      	neglt	r3, r3
 800457c:	f042 0202 	orrlt.w	r2, r2, #2
 8004580:	9307      	strge	r3, [sp, #28]
 8004582:	9307      	strlt	r3, [sp, #28]
 8004584:	bfb8      	it	lt
 8004586:	9204      	strlt	r2, [sp, #16]
 8004588:	7823      	ldrb	r3, [r4, #0]
 800458a:	2b2e      	cmp	r3, #46	; 0x2e
 800458c:	d10c      	bne.n	80045a8 <_svfiprintf_r+0x130>
 800458e:	7863      	ldrb	r3, [r4, #1]
 8004590:	2b2a      	cmp	r3, #42	; 0x2a
 8004592:	d134      	bne.n	80045fe <_svfiprintf_r+0x186>
 8004594:	9b03      	ldr	r3, [sp, #12]
 8004596:	1d1a      	adds	r2, r3, #4
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	9203      	str	r2, [sp, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	bfb8      	it	lt
 80045a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80045a4:	3402      	adds	r4, #2
 80045a6:	9305      	str	r3, [sp, #20]
 80045a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004670 <_svfiprintf_r+0x1f8>
 80045ac:	7821      	ldrb	r1, [r4, #0]
 80045ae:	2203      	movs	r2, #3
 80045b0:	4650      	mov	r0, sl
 80045b2:	f7fb fe15 	bl	80001e0 <memchr>
 80045b6:	b138      	cbz	r0, 80045c8 <_svfiprintf_r+0x150>
 80045b8:	9b04      	ldr	r3, [sp, #16]
 80045ba:	eba0 000a 	sub.w	r0, r0, sl
 80045be:	2240      	movs	r2, #64	; 0x40
 80045c0:	4082      	lsls	r2, r0
 80045c2:	4313      	orrs	r3, r2
 80045c4:	3401      	adds	r4, #1
 80045c6:	9304      	str	r3, [sp, #16]
 80045c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045cc:	4825      	ldr	r0, [pc, #148]	; (8004664 <_svfiprintf_r+0x1ec>)
 80045ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045d2:	2206      	movs	r2, #6
 80045d4:	f7fb fe04 	bl	80001e0 <memchr>
 80045d8:	2800      	cmp	r0, #0
 80045da:	d038      	beq.n	800464e <_svfiprintf_r+0x1d6>
 80045dc:	4b22      	ldr	r3, [pc, #136]	; (8004668 <_svfiprintf_r+0x1f0>)
 80045de:	bb1b      	cbnz	r3, 8004628 <_svfiprintf_r+0x1b0>
 80045e0:	9b03      	ldr	r3, [sp, #12]
 80045e2:	3307      	adds	r3, #7
 80045e4:	f023 0307 	bic.w	r3, r3, #7
 80045e8:	3308      	adds	r3, #8
 80045ea:	9303      	str	r3, [sp, #12]
 80045ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ee:	4433      	add	r3, r6
 80045f0:	9309      	str	r3, [sp, #36]	; 0x24
 80045f2:	e768      	b.n	80044c6 <_svfiprintf_r+0x4e>
 80045f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80045f8:	460c      	mov	r4, r1
 80045fa:	2001      	movs	r0, #1
 80045fc:	e7a6      	b.n	800454c <_svfiprintf_r+0xd4>
 80045fe:	2300      	movs	r3, #0
 8004600:	3401      	adds	r4, #1
 8004602:	9305      	str	r3, [sp, #20]
 8004604:	4619      	mov	r1, r3
 8004606:	f04f 0c0a 	mov.w	ip, #10
 800460a:	4620      	mov	r0, r4
 800460c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004610:	3a30      	subs	r2, #48	; 0x30
 8004612:	2a09      	cmp	r2, #9
 8004614:	d903      	bls.n	800461e <_svfiprintf_r+0x1a6>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0c6      	beq.n	80045a8 <_svfiprintf_r+0x130>
 800461a:	9105      	str	r1, [sp, #20]
 800461c:	e7c4      	b.n	80045a8 <_svfiprintf_r+0x130>
 800461e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004622:	4604      	mov	r4, r0
 8004624:	2301      	movs	r3, #1
 8004626:	e7f0      	b.n	800460a <_svfiprintf_r+0x192>
 8004628:	ab03      	add	r3, sp, #12
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	462a      	mov	r2, r5
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <_svfiprintf_r+0x1f4>)
 8004630:	a904      	add	r1, sp, #16
 8004632:	4638      	mov	r0, r7
 8004634:	f3af 8000 	nop.w
 8004638:	1c42      	adds	r2, r0, #1
 800463a:	4606      	mov	r6, r0
 800463c:	d1d6      	bne.n	80045ec <_svfiprintf_r+0x174>
 800463e:	89ab      	ldrh	r3, [r5, #12]
 8004640:	065b      	lsls	r3, r3, #25
 8004642:	f53f af2d 	bmi.w	80044a0 <_svfiprintf_r+0x28>
 8004646:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004648:	b01d      	add	sp, #116	; 0x74
 800464a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800464e:	ab03      	add	r3, sp, #12
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	462a      	mov	r2, r5
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <_svfiprintf_r+0x1f4>)
 8004656:	a904      	add	r1, sp, #16
 8004658:	4638      	mov	r0, r7
 800465a:	f000 f879 	bl	8004750 <_printf_i>
 800465e:	e7eb      	b.n	8004638 <_svfiprintf_r+0x1c0>
 8004660:	0800593c 	.word	0x0800593c
 8004664:	08005946 	.word	0x08005946
 8004668:	00000000 	.word	0x00000000
 800466c:	080043c5 	.word	0x080043c5
 8004670:	08005942 	.word	0x08005942

08004674 <_printf_common>:
 8004674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004678:	4616      	mov	r6, r2
 800467a:	4699      	mov	r9, r3
 800467c:	688a      	ldr	r2, [r1, #8]
 800467e:	690b      	ldr	r3, [r1, #16]
 8004680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004684:	4293      	cmp	r3, r2
 8004686:	bfb8      	it	lt
 8004688:	4613      	movlt	r3, r2
 800468a:	6033      	str	r3, [r6, #0]
 800468c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004690:	4607      	mov	r7, r0
 8004692:	460c      	mov	r4, r1
 8004694:	b10a      	cbz	r2, 800469a <_printf_common+0x26>
 8004696:	3301      	adds	r3, #1
 8004698:	6033      	str	r3, [r6, #0]
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	0699      	lsls	r1, r3, #26
 800469e:	bf42      	ittt	mi
 80046a0:	6833      	ldrmi	r3, [r6, #0]
 80046a2:	3302      	addmi	r3, #2
 80046a4:	6033      	strmi	r3, [r6, #0]
 80046a6:	6825      	ldr	r5, [r4, #0]
 80046a8:	f015 0506 	ands.w	r5, r5, #6
 80046ac:	d106      	bne.n	80046bc <_printf_common+0x48>
 80046ae:	f104 0a19 	add.w	sl, r4, #25
 80046b2:	68e3      	ldr	r3, [r4, #12]
 80046b4:	6832      	ldr	r2, [r6, #0]
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	42ab      	cmp	r3, r5
 80046ba:	dc26      	bgt.n	800470a <_printf_common+0x96>
 80046bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046c0:	1e13      	subs	r3, r2, #0
 80046c2:	6822      	ldr	r2, [r4, #0]
 80046c4:	bf18      	it	ne
 80046c6:	2301      	movne	r3, #1
 80046c8:	0692      	lsls	r2, r2, #26
 80046ca:	d42b      	bmi.n	8004724 <_printf_common+0xb0>
 80046cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046d0:	4649      	mov	r1, r9
 80046d2:	4638      	mov	r0, r7
 80046d4:	47c0      	blx	r8
 80046d6:	3001      	adds	r0, #1
 80046d8:	d01e      	beq.n	8004718 <_printf_common+0xa4>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	6922      	ldr	r2, [r4, #16]
 80046de:	f003 0306 	and.w	r3, r3, #6
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	bf02      	ittt	eq
 80046e6:	68e5      	ldreq	r5, [r4, #12]
 80046e8:	6833      	ldreq	r3, [r6, #0]
 80046ea:	1aed      	subeq	r5, r5, r3
 80046ec:	68a3      	ldr	r3, [r4, #8]
 80046ee:	bf0c      	ite	eq
 80046f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046f4:	2500      	movne	r5, #0
 80046f6:	4293      	cmp	r3, r2
 80046f8:	bfc4      	itt	gt
 80046fa:	1a9b      	subgt	r3, r3, r2
 80046fc:	18ed      	addgt	r5, r5, r3
 80046fe:	2600      	movs	r6, #0
 8004700:	341a      	adds	r4, #26
 8004702:	42b5      	cmp	r5, r6
 8004704:	d11a      	bne.n	800473c <_printf_common+0xc8>
 8004706:	2000      	movs	r0, #0
 8004708:	e008      	b.n	800471c <_printf_common+0xa8>
 800470a:	2301      	movs	r3, #1
 800470c:	4652      	mov	r2, sl
 800470e:	4649      	mov	r1, r9
 8004710:	4638      	mov	r0, r7
 8004712:	47c0      	blx	r8
 8004714:	3001      	adds	r0, #1
 8004716:	d103      	bne.n	8004720 <_printf_common+0xac>
 8004718:	f04f 30ff 	mov.w	r0, #4294967295
 800471c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004720:	3501      	adds	r5, #1
 8004722:	e7c6      	b.n	80046b2 <_printf_common+0x3e>
 8004724:	18e1      	adds	r1, r4, r3
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	2030      	movs	r0, #48	; 0x30
 800472a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800472e:	4422      	add	r2, r4
 8004730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004738:	3302      	adds	r3, #2
 800473a:	e7c7      	b.n	80046cc <_printf_common+0x58>
 800473c:	2301      	movs	r3, #1
 800473e:	4622      	mov	r2, r4
 8004740:	4649      	mov	r1, r9
 8004742:	4638      	mov	r0, r7
 8004744:	47c0      	blx	r8
 8004746:	3001      	adds	r0, #1
 8004748:	d0e6      	beq.n	8004718 <_printf_common+0xa4>
 800474a:	3601      	adds	r6, #1
 800474c:	e7d9      	b.n	8004702 <_printf_common+0x8e>
	...

08004750 <_printf_i>:
 8004750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004754:	7e0f      	ldrb	r7, [r1, #24]
 8004756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004758:	2f78      	cmp	r7, #120	; 0x78
 800475a:	4691      	mov	r9, r2
 800475c:	4680      	mov	r8, r0
 800475e:	460c      	mov	r4, r1
 8004760:	469a      	mov	sl, r3
 8004762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004766:	d807      	bhi.n	8004778 <_printf_i+0x28>
 8004768:	2f62      	cmp	r7, #98	; 0x62
 800476a:	d80a      	bhi.n	8004782 <_printf_i+0x32>
 800476c:	2f00      	cmp	r7, #0
 800476e:	f000 80d4 	beq.w	800491a <_printf_i+0x1ca>
 8004772:	2f58      	cmp	r7, #88	; 0x58
 8004774:	f000 80c0 	beq.w	80048f8 <_printf_i+0x1a8>
 8004778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800477c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004780:	e03a      	b.n	80047f8 <_printf_i+0xa8>
 8004782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004786:	2b15      	cmp	r3, #21
 8004788:	d8f6      	bhi.n	8004778 <_printf_i+0x28>
 800478a:	a101      	add	r1, pc, #4	; (adr r1, 8004790 <_printf_i+0x40>)
 800478c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004790:	080047e9 	.word	0x080047e9
 8004794:	080047fd 	.word	0x080047fd
 8004798:	08004779 	.word	0x08004779
 800479c:	08004779 	.word	0x08004779
 80047a0:	08004779 	.word	0x08004779
 80047a4:	08004779 	.word	0x08004779
 80047a8:	080047fd 	.word	0x080047fd
 80047ac:	08004779 	.word	0x08004779
 80047b0:	08004779 	.word	0x08004779
 80047b4:	08004779 	.word	0x08004779
 80047b8:	08004779 	.word	0x08004779
 80047bc:	08004901 	.word	0x08004901
 80047c0:	08004829 	.word	0x08004829
 80047c4:	080048bb 	.word	0x080048bb
 80047c8:	08004779 	.word	0x08004779
 80047cc:	08004779 	.word	0x08004779
 80047d0:	08004923 	.word	0x08004923
 80047d4:	08004779 	.word	0x08004779
 80047d8:	08004829 	.word	0x08004829
 80047dc:	08004779 	.word	0x08004779
 80047e0:	08004779 	.word	0x08004779
 80047e4:	080048c3 	.word	0x080048c3
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	1d1a      	adds	r2, r3, #4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	602a      	str	r2, [r5, #0]
 80047f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047f8:	2301      	movs	r3, #1
 80047fa:	e09f      	b.n	800493c <_printf_i+0x1ec>
 80047fc:	6820      	ldr	r0, [r4, #0]
 80047fe:	682b      	ldr	r3, [r5, #0]
 8004800:	0607      	lsls	r7, r0, #24
 8004802:	f103 0104 	add.w	r1, r3, #4
 8004806:	6029      	str	r1, [r5, #0]
 8004808:	d501      	bpl.n	800480e <_printf_i+0xbe>
 800480a:	681e      	ldr	r6, [r3, #0]
 800480c:	e003      	b.n	8004816 <_printf_i+0xc6>
 800480e:	0646      	lsls	r6, r0, #25
 8004810:	d5fb      	bpl.n	800480a <_printf_i+0xba>
 8004812:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004816:	2e00      	cmp	r6, #0
 8004818:	da03      	bge.n	8004822 <_printf_i+0xd2>
 800481a:	232d      	movs	r3, #45	; 0x2d
 800481c:	4276      	negs	r6, r6
 800481e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004822:	485a      	ldr	r0, [pc, #360]	; (800498c <_printf_i+0x23c>)
 8004824:	230a      	movs	r3, #10
 8004826:	e012      	b.n	800484e <_printf_i+0xfe>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	6820      	ldr	r0, [r4, #0]
 800482c:	1d19      	adds	r1, r3, #4
 800482e:	6029      	str	r1, [r5, #0]
 8004830:	0605      	lsls	r5, r0, #24
 8004832:	d501      	bpl.n	8004838 <_printf_i+0xe8>
 8004834:	681e      	ldr	r6, [r3, #0]
 8004836:	e002      	b.n	800483e <_printf_i+0xee>
 8004838:	0641      	lsls	r1, r0, #25
 800483a:	d5fb      	bpl.n	8004834 <_printf_i+0xe4>
 800483c:	881e      	ldrh	r6, [r3, #0]
 800483e:	4853      	ldr	r0, [pc, #332]	; (800498c <_printf_i+0x23c>)
 8004840:	2f6f      	cmp	r7, #111	; 0x6f
 8004842:	bf0c      	ite	eq
 8004844:	2308      	moveq	r3, #8
 8004846:	230a      	movne	r3, #10
 8004848:	2100      	movs	r1, #0
 800484a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800484e:	6865      	ldr	r5, [r4, #4]
 8004850:	60a5      	str	r5, [r4, #8]
 8004852:	2d00      	cmp	r5, #0
 8004854:	bfa2      	ittt	ge
 8004856:	6821      	ldrge	r1, [r4, #0]
 8004858:	f021 0104 	bicge.w	r1, r1, #4
 800485c:	6021      	strge	r1, [r4, #0]
 800485e:	b90e      	cbnz	r6, 8004864 <_printf_i+0x114>
 8004860:	2d00      	cmp	r5, #0
 8004862:	d04b      	beq.n	80048fc <_printf_i+0x1ac>
 8004864:	4615      	mov	r5, r2
 8004866:	fbb6 f1f3 	udiv	r1, r6, r3
 800486a:	fb03 6711 	mls	r7, r3, r1, r6
 800486e:	5dc7      	ldrb	r7, [r0, r7]
 8004870:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004874:	4637      	mov	r7, r6
 8004876:	42bb      	cmp	r3, r7
 8004878:	460e      	mov	r6, r1
 800487a:	d9f4      	bls.n	8004866 <_printf_i+0x116>
 800487c:	2b08      	cmp	r3, #8
 800487e:	d10b      	bne.n	8004898 <_printf_i+0x148>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	07de      	lsls	r6, r3, #31
 8004884:	d508      	bpl.n	8004898 <_printf_i+0x148>
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	6861      	ldr	r1, [r4, #4]
 800488a:	4299      	cmp	r1, r3
 800488c:	bfde      	ittt	le
 800488e:	2330      	movle	r3, #48	; 0x30
 8004890:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004894:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004898:	1b52      	subs	r2, r2, r5
 800489a:	6122      	str	r2, [r4, #16]
 800489c:	f8cd a000 	str.w	sl, [sp]
 80048a0:	464b      	mov	r3, r9
 80048a2:	aa03      	add	r2, sp, #12
 80048a4:	4621      	mov	r1, r4
 80048a6:	4640      	mov	r0, r8
 80048a8:	f7ff fee4 	bl	8004674 <_printf_common>
 80048ac:	3001      	adds	r0, #1
 80048ae:	d14a      	bne.n	8004946 <_printf_i+0x1f6>
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295
 80048b4:	b004      	add	sp, #16
 80048b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	f043 0320 	orr.w	r3, r3, #32
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	4833      	ldr	r0, [pc, #204]	; (8004990 <_printf_i+0x240>)
 80048c4:	2778      	movs	r7, #120	; 0x78
 80048c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	6829      	ldr	r1, [r5, #0]
 80048ce:	061f      	lsls	r7, r3, #24
 80048d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80048d4:	d402      	bmi.n	80048dc <_printf_i+0x18c>
 80048d6:	065f      	lsls	r7, r3, #25
 80048d8:	bf48      	it	mi
 80048da:	b2b6      	uxthmi	r6, r6
 80048dc:	07df      	lsls	r7, r3, #31
 80048de:	bf48      	it	mi
 80048e0:	f043 0320 	orrmi.w	r3, r3, #32
 80048e4:	6029      	str	r1, [r5, #0]
 80048e6:	bf48      	it	mi
 80048e8:	6023      	strmi	r3, [r4, #0]
 80048ea:	b91e      	cbnz	r6, 80048f4 <_printf_i+0x1a4>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	f023 0320 	bic.w	r3, r3, #32
 80048f2:	6023      	str	r3, [r4, #0]
 80048f4:	2310      	movs	r3, #16
 80048f6:	e7a7      	b.n	8004848 <_printf_i+0xf8>
 80048f8:	4824      	ldr	r0, [pc, #144]	; (800498c <_printf_i+0x23c>)
 80048fa:	e7e4      	b.n	80048c6 <_printf_i+0x176>
 80048fc:	4615      	mov	r5, r2
 80048fe:	e7bd      	b.n	800487c <_printf_i+0x12c>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	6826      	ldr	r6, [r4, #0]
 8004904:	6961      	ldr	r1, [r4, #20]
 8004906:	1d18      	adds	r0, r3, #4
 8004908:	6028      	str	r0, [r5, #0]
 800490a:	0635      	lsls	r5, r6, #24
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	d501      	bpl.n	8004914 <_printf_i+0x1c4>
 8004910:	6019      	str	r1, [r3, #0]
 8004912:	e002      	b.n	800491a <_printf_i+0x1ca>
 8004914:	0670      	lsls	r0, r6, #25
 8004916:	d5fb      	bpl.n	8004910 <_printf_i+0x1c0>
 8004918:	8019      	strh	r1, [r3, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	6123      	str	r3, [r4, #16]
 800491e:	4615      	mov	r5, r2
 8004920:	e7bc      	b.n	800489c <_printf_i+0x14c>
 8004922:	682b      	ldr	r3, [r5, #0]
 8004924:	1d1a      	adds	r2, r3, #4
 8004926:	602a      	str	r2, [r5, #0]
 8004928:	681d      	ldr	r5, [r3, #0]
 800492a:	6862      	ldr	r2, [r4, #4]
 800492c:	2100      	movs	r1, #0
 800492e:	4628      	mov	r0, r5
 8004930:	f7fb fc56 	bl	80001e0 <memchr>
 8004934:	b108      	cbz	r0, 800493a <_printf_i+0x1ea>
 8004936:	1b40      	subs	r0, r0, r5
 8004938:	6060      	str	r0, [r4, #4]
 800493a:	6863      	ldr	r3, [r4, #4]
 800493c:	6123      	str	r3, [r4, #16]
 800493e:	2300      	movs	r3, #0
 8004940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004944:	e7aa      	b.n	800489c <_printf_i+0x14c>
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	462a      	mov	r2, r5
 800494a:	4649      	mov	r1, r9
 800494c:	4640      	mov	r0, r8
 800494e:	47d0      	blx	sl
 8004950:	3001      	adds	r0, #1
 8004952:	d0ad      	beq.n	80048b0 <_printf_i+0x160>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	079b      	lsls	r3, r3, #30
 8004958:	d413      	bmi.n	8004982 <_printf_i+0x232>
 800495a:	68e0      	ldr	r0, [r4, #12]
 800495c:	9b03      	ldr	r3, [sp, #12]
 800495e:	4298      	cmp	r0, r3
 8004960:	bfb8      	it	lt
 8004962:	4618      	movlt	r0, r3
 8004964:	e7a6      	b.n	80048b4 <_printf_i+0x164>
 8004966:	2301      	movs	r3, #1
 8004968:	4632      	mov	r2, r6
 800496a:	4649      	mov	r1, r9
 800496c:	4640      	mov	r0, r8
 800496e:	47d0      	blx	sl
 8004970:	3001      	adds	r0, #1
 8004972:	d09d      	beq.n	80048b0 <_printf_i+0x160>
 8004974:	3501      	adds	r5, #1
 8004976:	68e3      	ldr	r3, [r4, #12]
 8004978:	9903      	ldr	r1, [sp, #12]
 800497a:	1a5b      	subs	r3, r3, r1
 800497c:	42ab      	cmp	r3, r5
 800497e:	dcf2      	bgt.n	8004966 <_printf_i+0x216>
 8004980:	e7eb      	b.n	800495a <_printf_i+0x20a>
 8004982:	2500      	movs	r5, #0
 8004984:	f104 0619 	add.w	r6, r4, #25
 8004988:	e7f5      	b.n	8004976 <_printf_i+0x226>
 800498a:	bf00      	nop
 800498c:	0800594d 	.word	0x0800594d
 8004990:	0800595e 	.word	0x0800595e

08004994 <memmove>:
 8004994:	4288      	cmp	r0, r1
 8004996:	b510      	push	{r4, lr}
 8004998:	eb01 0402 	add.w	r4, r1, r2
 800499c:	d902      	bls.n	80049a4 <memmove+0x10>
 800499e:	4284      	cmp	r4, r0
 80049a0:	4623      	mov	r3, r4
 80049a2:	d807      	bhi.n	80049b4 <memmove+0x20>
 80049a4:	1e43      	subs	r3, r0, #1
 80049a6:	42a1      	cmp	r1, r4
 80049a8:	d008      	beq.n	80049bc <memmove+0x28>
 80049aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049b2:	e7f8      	b.n	80049a6 <memmove+0x12>
 80049b4:	4402      	add	r2, r0
 80049b6:	4601      	mov	r1, r0
 80049b8:	428a      	cmp	r2, r1
 80049ba:	d100      	bne.n	80049be <memmove+0x2a>
 80049bc:	bd10      	pop	{r4, pc}
 80049be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049c6:	e7f7      	b.n	80049b8 <memmove+0x24>

080049c8 <_sbrk_r>:
 80049c8:	b538      	push	{r3, r4, r5, lr}
 80049ca:	4d06      	ldr	r5, [pc, #24]	; (80049e4 <_sbrk_r+0x1c>)
 80049cc:	2300      	movs	r3, #0
 80049ce:	4604      	mov	r4, r0
 80049d0:	4608      	mov	r0, r1
 80049d2:	602b      	str	r3, [r5, #0]
 80049d4:	f7fc ff2a 	bl	800182c <_sbrk>
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	d102      	bne.n	80049e2 <_sbrk_r+0x1a>
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	b103      	cbz	r3, 80049e2 <_sbrk_r+0x1a>
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	bd38      	pop	{r3, r4, r5, pc}
 80049e4:	200002c4 	.word	0x200002c4

080049e8 <memcpy>:
 80049e8:	440a      	add	r2, r1
 80049ea:	4291      	cmp	r1, r2
 80049ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80049f0:	d100      	bne.n	80049f4 <memcpy+0xc>
 80049f2:	4770      	bx	lr
 80049f4:	b510      	push	{r4, lr}
 80049f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049fe:	4291      	cmp	r1, r2
 8004a00:	d1f9      	bne.n	80049f6 <memcpy+0xe>
 8004a02:	bd10      	pop	{r4, pc}

08004a04 <_realloc_r>:
 8004a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a08:	4680      	mov	r8, r0
 8004a0a:	4614      	mov	r4, r2
 8004a0c:	460e      	mov	r6, r1
 8004a0e:	b921      	cbnz	r1, 8004a1a <_realloc_r+0x16>
 8004a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a14:	4611      	mov	r1, r2
 8004a16:	f7ff bc49 	b.w	80042ac <_malloc_r>
 8004a1a:	b92a      	cbnz	r2, 8004a28 <_realloc_r+0x24>
 8004a1c:	f7ff fbda 	bl	80041d4 <_free_r>
 8004a20:	4625      	mov	r5, r4
 8004a22:	4628      	mov	r0, r5
 8004a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a28:	f000 f81b 	bl	8004a62 <_malloc_usable_size_r>
 8004a2c:	4284      	cmp	r4, r0
 8004a2e:	4607      	mov	r7, r0
 8004a30:	d802      	bhi.n	8004a38 <_realloc_r+0x34>
 8004a32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a36:	d812      	bhi.n	8004a5e <_realloc_r+0x5a>
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	f7ff fc36 	bl	80042ac <_malloc_r>
 8004a40:	4605      	mov	r5, r0
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d0ed      	beq.n	8004a22 <_realloc_r+0x1e>
 8004a46:	42bc      	cmp	r4, r7
 8004a48:	4622      	mov	r2, r4
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	bf28      	it	cs
 8004a4e:	463a      	movcs	r2, r7
 8004a50:	f7ff ffca 	bl	80049e8 <memcpy>
 8004a54:	4631      	mov	r1, r6
 8004a56:	4640      	mov	r0, r8
 8004a58:	f7ff fbbc 	bl	80041d4 <_free_r>
 8004a5c:	e7e1      	b.n	8004a22 <_realloc_r+0x1e>
 8004a5e:	4635      	mov	r5, r6
 8004a60:	e7df      	b.n	8004a22 <_realloc_r+0x1e>

08004a62 <_malloc_usable_size_r>:
 8004a62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a66:	1f18      	subs	r0, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bfbc      	itt	lt
 8004a6c:	580b      	ldrlt	r3, [r1, r0]
 8004a6e:	18c0      	addlt	r0, r0, r3
 8004a70:	4770      	bx	lr
	...

08004a74 <pow>:
 8004a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a76:	ed2d 8b02 	vpush	{d8}
 8004a7a:	eeb0 8a40 	vmov.f32	s16, s0
 8004a7e:	eef0 8a60 	vmov.f32	s17, s1
 8004a82:	ec55 4b11 	vmov	r4, r5, d1
 8004a86:	f000 f873 	bl	8004b70 <__ieee754_pow>
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	4620      	mov	r0, r4
 8004a90:	4629      	mov	r1, r5
 8004a92:	ec57 6b10 	vmov	r6, r7, d0
 8004a96:	f7fc f849 	bl	8000b2c <__aeabi_dcmpun>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d13b      	bne.n	8004b16 <pow+0xa2>
 8004a9e:	ec51 0b18 	vmov	r0, r1, d8
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f7fc f80f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004aaa:	b1b8      	cbz	r0, 8004adc <pow+0x68>
 8004aac:	2200      	movs	r2, #0
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	f7fc f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d146      	bne.n	8004b4a <pow+0xd6>
 8004abc:	ec45 4b10 	vmov	d0, r4, r5
 8004ac0:	f000 f848 	bl	8004b54 <finite>
 8004ac4:	b338      	cbz	r0, 8004b16 <pow+0xa2>
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2300      	movs	r3, #0
 8004aca:	4620      	mov	r0, r4
 8004acc:	4629      	mov	r1, r5
 8004ace:	f7fc f805 	bl	8000adc <__aeabi_dcmplt>
 8004ad2:	b300      	cbz	r0, 8004b16 <pow+0xa2>
 8004ad4:	f7ff fb52 	bl	800417c <__errno>
 8004ad8:	2322      	movs	r3, #34	; 0x22
 8004ada:	e01b      	b.n	8004b14 <pow+0xa0>
 8004adc:	ec47 6b10 	vmov	d0, r6, r7
 8004ae0:	f000 f838 	bl	8004b54 <finite>
 8004ae4:	b9e0      	cbnz	r0, 8004b20 <pow+0xac>
 8004ae6:	eeb0 0a48 	vmov.f32	s0, s16
 8004aea:	eef0 0a68 	vmov.f32	s1, s17
 8004aee:	f000 f831 	bl	8004b54 <finite>
 8004af2:	b1a8      	cbz	r0, 8004b20 <pow+0xac>
 8004af4:	ec45 4b10 	vmov	d0, r4, r5
 8004af8:	f000 f82c 	bl	8004b54 <finite>
 8004afc:	b180      	cbz	r0, 8004b20 <pow+0xac>
 8004afe:	4632      	mov	r2, r6
 8004b00:	463b      	mov	r3, r7
 8004b02:	4630      	mov	r0, r6
 8004b04:	4639      	mov	r1, r7
 8004b06:	f7fc f811 	bl	8000b2c <__aeabi_dcmpun>
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	d0e2      	beq.n	8004ad4 <pow+0x60>
 8004b0e:	f7ff fb35 	bl	800417c <__errno>
 8004b12:	2321      	movs	r3, #33	; 0x21
 8004b14:	6003      	str	r3, [r0, #0]
 8004b16:	ecbd 8b02 	vpop	{d8}
 8004b1a:	ec47 6b10 	vmov	d0, r6, r7
 8004b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b20:	2200      	movs	r2, #0
 8004b22:	2300      	movs	r3, #0
 8004b24:	4630      	mov	r0, r6
 8004b26:	4639      	mov	r1, r7
 8004b28:	f7fb ffce 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d0f2      	beq.n	8004b16 <pow+0xa2>
 8004b30:	eeb0 0a48 	vmov.f32	s0, s16
 8004b34:	eef0 0a68 	vmov.f32	s1, s17
 8004b38:	f000 f80c 	bl	8004b54 <finite>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	d0ea      	beq.n	8004b16 <pow+0xa2>
 8004b40:	ec45 4b10 	vmov	d0, r4, r5
 8004b44:	f000 f806 	bl	8004b54 <finite>
 8004b48:	e7c3      	b.n	8004ad2 <pow+0x5e>
 8004b4a:	4f01      	ldr	r7, [pc, #4]	; (8004b50 <pow+0xdc>)
 8004b4c:	2600      	movs	r6, #0
 8004b4e:	e7e2      	b.n	8004b16 <pow+0xa2>
 8004b50:	3ff00000 	.word	0x3ff00000

08004b54 <finite>:
 8004b54:	b082      	sub	sp, #8
 8004b56:	ed8d 0b00 	vstr	d0, [sp]
 8004b5a:	9801      	ldr	r0, [sp, #4]
 8004b5c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004b60:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004b64:	0fc0      	lsrs	r0, r0, #31
 8004b66:	b002      	add	sp, #8
 8004b68:	4770      	bx	lr
 8004b6a:	0000      	movs	r0, r0
 8004b6c:	0000      	movs	r0, r0
	...

08004b70 <__ieee754_pow>:
 8004b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b74:	ed2d 8b06 	vpush	{d8-d10}
 8004b78:	b089      	sub	sp, #36	; 0x24
 8004b7a:	ed8d 1b00 	vstr	d1, [sp]
 8004b7e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004b82:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004b86:	ea58 0102 	orrs.w	r1, r8, r2
 8004b8a:	ec57 6b10 	vmov	r6, r7, d0
 8004b8e:	d115      	bne.n	8004bbc <__ieee754_pow+0x4c>
 8004b90:	19b3      	adds	r3, r6, r6
 8004b92:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004b96:	4152      	adcs	r2, r2
 8004b98:	4299      	cmp	r1, r3
 8004b9a:	4b89      	ldr	r3, [pc, #548]	; (8004dc0 <__ieee754_pow+0x250>)
 8004b9c:	4193      	sbcs	r3, r2
 8004b9e:	f080 84d1 	bcs.w	8005544 <__ieee754_pow+0x9d4>
 8004ba2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	4639      	mov	r1, r7
 8004baa:	f7fb fb6f 	bl	800028c <__adddf3>
 8004bae:	ec41 0b10 	vmov	d0, r0, r1
 8004bb2:	b009      	add	sp, #36	; 0x24
 8004bb4:	ecbd 8b06 	vpop	{d8-d10}
 8004bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bbc:	4b81      	ldr	r3, [pc, #516]	; (8004dc4 <__ieee754_pow+0x254>)
 8004bbe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004bc2:	429c      	cmp	r4, r3
 8004bc4:	ee10 aa10 	vmov	sl, s0
 8004bc8:	463d      	mov	r5, r7
 8004bca:	dc06      	bgt.n	8004bda <__ieee754_pow+0x6a>
 8004bcc:	d101      	bne.n	8004bd2 <__ieee754_pow+0x62>
 8004bce:	2e00      	cmp	r6, #0
 8004bd0:	d1e7      	bne.n	8004ba2 <__ieee754_pow+0x32>
 8004bd2:	4598      	cmp	r8, r3
 8004bd4:	dc01      	bgt.n	8004bda <__ieee754_pow+0x6a>
 8004bd6:	d10f      	bne.n	8004bf8 <__ieee754_pow+0x88>
 8004bd8:	b172      	cbz	r2, 8004bf8 <__ieee754_pow+0x88>
 8004bda:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004bde:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004be2:	ea55 050a 	orrs.w	r5, r5, sl
 8004be6:	d1dc      	bne.n	8004ba2 <__ieee754_pow+0x32>
 8004be8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004bec:	18db      	adds	r3, r3, r3
 8004bee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004bf2:	4152      	adcs	r2, r2
 8004bf4:	429d      	cmp	r5, r3
 8004bf6:	e7d0      	b.n	8004b9a <__ieee754_pow+0x2a>
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	da3b      	bge.n	8004c74 <__ieee754_pow+0x104>
 8004bfc:	4b72      	ldr	r3, [pc, #456]	; (8004dc8 <__ieee754_pow+0x258>)
 8004bfe:	4598      	cmp	r8, r3
 8004c00:	dc51      	bgt.n	8004ca6 <__ieee754_pow+0x136>
 8004c02:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004c06:	4598      	cmp	r8, r3
 8004c08:	f340 84ab 	ble.w	8005562 <__ieee754_pow+0x9f2>
 8004c0c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004c10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004c14:	2b14      	cmp	r3, #20
 8004c16:	dd0f      	ble.n	8004c38 <__ieee754_pow+0xc8>
 8004c18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004c1c:	fa22 f103 	lsr.w	r1, r2, r3
 8004c20:	fa01 f303 	lsl.w	r3, r1, r3
 8004c24:	4293      	cmp	r3, r2
 8004c26:	f040 849c 	bne.w	8005562 <__ieee754_pow+0x9f2>
 8004c2a:	f001 0101 	and.w	r1, r1, #1
 8004c2e:	f1c1 0302 	rsb	r3, r1, #2
 8004c32:	9304      	str	r3, [sp, #16]
 8004c34:	b182      	cbz	r2, 8004c58 <__ieee754_pow+0xe8>
 8004c36:	e05f      	b.n	8004cf8 <__ieee754_pow+0x188>
 8004c38:	2a00      	cmp	r2, #0
 8004c3a:	d15b      	bne.n	8004cf4 <__ieee754_pow+0x184>
 8004c3c:	f1c3 0314 	rsb	r3, r3, #20
 8004c40:	fa48 f103 	asr.w	r1, r8, r3
 8004c44:	fa01 f303 	lsl.w	r3, r1, r3
 8004c48:	4543      	cmp	r3, r8
 8004c4a:	f040 8487 	bne.w	800555c <__ieee754_pow+0x9ec>
 8004c4e:	f001 0101 	and.w	r1, r1, #1
 8004c52:	f1c1 0302 	rsb	r3, r1, #2
 8004c56:	9304      	str	r3, [sp, #16]
 8004c58:	4b5c      	ldr	r3, [pc, #368]	; (8004dcc <__ieee754_pow+0x25c>)
 8004c5a:	4598      	cmp	r8, r3
 8004c5c:	d132      	bne.n	8004cc4 <__ieee754_pow+0x154>
 8004c5e:	f1b9 0f00 	cmp.w	r9, #0
 8004c62:	f280 8477 	bge.w	8005554 <__ieee754_pow+0x9e4>
 8004c66:	4959      	ldr	r1, [pc, #356]	; (8004dcc <__ieee754_pow+0x25c>)
 8004c68:	4632      	mov	r2, r6
 8004c6a:	463b      	mov	r3, r7
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	f7fb fded 	bl	800084c <__aeabi_ddiv>
 8004c72:	e79c      	b.n	8004bae <__ieee754_pow+0x3e>
 8004c74:	2300      	movs	r3, #0
 8004c76:	9304      	str	r3, [sp, #16]
 8004c78:	2a00      	cmp	r2, #0
 8004c7a:	d13d      	bne.n	8004cf8 <__ieee754_pow+0x188>
 8004c7c:	4b51      	ldr	r3, [pc, #324]	; (8004dc4 <__ieee754_pow+0x254>)
 8004c7e:	4598      	cmp	r8, r3
 8004c80:	d1ea      	bne.n	8004c58 <__ieee754_pow+0xe8>
 8004c82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004c86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004c8a:	ea53 030a 	orrs.w	r3, r3, sl
 8004c8e:	f000 8459 	beq.w	8005544 <__ieee754_pow+0x9d4>
 8004c92:	4b4f      	ldr	r3, [pc, #316]	; (8004dd0 <__ieee754_pow+0x260>)
 8004c94:	429c      	cmp	r4, r3
 8004c96:	dd08      	ble.n	8004caa <__ieee754_pow+0x13a>
 8004c98:	f1b9 0f00 	cmp.w	r9, #0
 8004c9c:	f2c0 8456 	blt.w	800554c <__ieee754_pow+0x9dc>
 8004ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ca4:	e783      	b.n	8004bae <__ieee754_pow+0x3e>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e7e5      	b.n	8004c76 <__ieee754_pow+0x106>
 8004caa:	f1b9 0f00 	cmp.w	r9, #0
 8004cae:	f04f 0000 	mov.w	r0, #0
 8004cb2:	f04f 0100 	mov.w	r1, #0
 8004cb6:	f6bf af7a 	bge.w	8004bae <__ieee754_pow+0x3e>
 8004cba:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004cbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004cc2:	e774      	b.n	8004bae <__ieee754_pow+0x3e>
 8004cc4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004cc8:	d106      	bne.n	8004cd8 <__ieee754_pow+0x168>
 8004cca:	4632      	mov	r2, r6
 8004ccc:	463b      	mov	r3, r7
 8004cce:	4630      	mov	r0, r6
 8004cd0:	4639      	mov	r1, r7
 8004cd2:	f7fb fc91 	bl	80005f8 <__aeabi_dmul>
 8004cd6:	e76a      	b.n	8004bae <__ieee754_pow+0x3e>
 8004cd8:	4b3e      	ldr	r3, [pc, #248]	; (8004dd4 <__ieee754_pow+0x264>)
 8004cda:	4599      	cmp	r9, r3
 8004cdc:	d10c      	bne.n	8004cf8 <__ieee754_pow+0x188>
 8004cde:	2d00      	cmp	r5, #0
 8004ce0:	db0a      	blt.n	8004cf8 <__ieee754_pow+0x188>
 8004ce2:	ec47 6b10 	vmov	d0, r6, r7
 8004ce6:	b009      	add	sp, #36	; 0x24
 8004ce8:	ecbd 8b06 	vpop	{d8-d10}
 8004cec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf0:	f000 bd20 	b.w	8005734 <__ieee754_sqrt>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9304      	str	r3, [sp, #16]
 8004cf8:	ec47 6b10 	vmov	d0, r6, r7
 8004cfc:	f000 fc62 	bl	80055c4 <fabs>
 8004d00:	ec51 0b10 	vmov	r0, r1, d0
 8004d04:	f1ba 0f00 	cmp.w	sl, #0
 8004d08:	d129      	bne.n	8004d5e <__ieee754_pow+0x1ee>
 8004d0a:	b124      	cbz	r4, 8004d16 <__ieee754_pow+0x1a6>
 8004d0c:	4b2f      	ldr	r3, [pc, #188]	; (8004dcc <__ieee754_pow+0x25c>)
 8004d0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d123      	bne.n	8004d5e <__ieee754_pow+0x1ee>
 8004d16:	f1b9 0f00 	cmp.w	r9, #0
 8004d1a:	da05      	bge.n	8004d28 <__ieee754_pow+0x1b8>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	2000      	movs	r0, #0
 8004d22:	492a      	ldr	r1, [pc, #168]	; (8004dcc <__ieee754_pow+0x25c>)
 8004d24:	f7fb fd92 	bl	800084c <__aeabi_ddiv>
 8004d28:	2d00      	cmp	r5, #0
 8004d2a:	f6bf af40 	bge.w	8004bae <__ieee754_pow+0x3e>
 8004d2e:	9b04      	ldr	r3, [sp, #16]
 8004d30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004d34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004d38:	431c      	orrs	r4, r3
 8004d3a:	d108      	bne.n	8004d4e <__ieee754_pow+0x1de>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	f7fb faa0 	bl	8000288 <__aeabi_dsub>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	e78f      	b.n	8004c6e <__ieee754_pow+0xfe>
 8004d4e:	9b04      	ldr	r3, [sp, #16]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	f47f af2c 	bne.w	8004bae <__ieee754_pow+0x3e>
 8004d56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	e727      	b.n	8004bae <__ieee754_pow+0x3e>
 8004d5e:	0feb      	lsrs	r3, r5, #31
 8004d60:	3b01      	subs	r3, #1
 8004d62:	9306      	str	r3, [sp, #24]
 8004d64:	9a06      	ldr	r2, [sp, #24]
 8004d66:	9b04      	ldr	r3, [sp, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	d102      	bne.n	8004d72 <__ieee754_pow+0x202>
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	463b      	mov	r3, r7
 8004d70:	e7e6      	b.n	8004d40 <__ieee754_pow+0x1d0>
 8004d72:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <__ieee754_pow+0x268>)
 8004d74:	4598      	cmp	r8, r3
 8004d76:	f340 80fb 	ble.w	8004f70 <__ieee754_pow+0x400>
 8004d7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004d7e:	4598      	cmp	r8, r3
 8004d80:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <__ieee754_pow+0x260>)
 8004d82:	dd0c      	ble.n	8004d9e <__ieee754_pow+0x22e>
 8004d84:	429c      	cmp	r4, r3
 8004d86:	dc0f      	bgt.n	8004da8 <__ieee754_pow+0x238>
 8004d88:	f1b9 0f00 	cmp.w	r9, #0
 8004d8c:	da0f      	bge.n	8004dae <__ieee754_pow+0x23e>
 8004d8e:	2000      	movs	r0, #0
 8004d90:	b009      	add	sp, #36	; 0x24
 8004d92:	ecbd 8b06 	vpop	{d8-d10}
 8004d96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9a:	f000 bcc2 	b.w	8005722 <__math_oflow>
 8004d9e:	429c      	cmp	r4, r3
 8004da0:	dbf2      	blt.n	8004d88 <__ieee754_pow+0x218>
 8004da2:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <__ieee754_pow+0x25c>)
 8004da4:	429c      	cmp	r4, r3
 8004da6:	dd19      	ble.n	8004ddc <__ieee754_pow+0x26c>
 8004da8:	f1b9 0f00 	cmp.w	r9, #0
 8004dac:	dcef      	bgt.n	8004d8e <__ieee754_pow+0x21e>
 8004dae:	2000      	movs	r0, #0
 8004db0:	b009      	add	sp, #36	; 0x24
 8004db2:	ecbd 8b06 	vpop	{d8-d10}
 8004db6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dba:	f000 bca9 	b.w	8005710 <__math_uflow>
 8004dbe:	bf00      	nop
 8004dc0:	fff00000 	.word	0xfff00000
 8004dc4:	7ff00000 	.word	0x7ff00000
 8004dc8:	433fffff 	.word	0x433fffff
 8004dcc:	3ff00000 	.word	0x3ff00000
 8004dd0:	3fefffff 	.word	0x3fefffff
 8004dd4:	3fe00000 	.word	0x3fe00000
 8004dd8:	41e00000 	.word	0x41e00000
 8004ddc:	4b60      	ldr	r3, [pc, #384]	; (8004f60 <__ieee754_pow+0x3f0>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	f7fb fa52 	bl	8000288 <__aeabi_dsub>
 8004de4:	a354      	add	r3, pc, #336	; (adr r3, 8004f38 <__ieee754_pow+0x3c8>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	4604      	mov	r4, r0
 8004dec:	460d      	mov	r5, r1
 8004dee:	f7fb fc03 	bl	80005f8 <__aeabi_dmul>
 8004df2:	a353      	add	r3, pc, #332	; (adr r3, 8004f40 <__ieee754_pow+0x3d0>)
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	4606      	mov	r6, r0
 8004dfa:	460f      	mov	r7, r1
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	4629      	mov	r1, r5
 8004e00:	f7fb fbfa 	bl	80005f8 <__aeabi_dmul>
 8004e04:	4b57      	ldr	r3, [pc, #348]	; (8004f64 <__ieee754_pow+0x3f4>)
 8004e06:	4682      	mov	sl, r0
 8004e08:	468b      	mov	fp, r1
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	4629      	mov	r1, r5
 8004e10:	f7fb fbf2 	bl	80005f8 <__aeabi_dmul>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	a14b      	add	r1, pc, #300	; (adr r1, 8004f48 <__ieee754_pow+0x3d8>)
 8004e1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e1e:	f7fb fa33 	bl	8000288 <__aeabi_dsub>
 8004e22:	4622      	mov	r2, r4
 8004e24:	462b      	mov	r3, r5
 8004e26:	f7fb fbe7 	bl	80005f8 <__aeabi_dmul>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	2000      	movs	r0, #0
 8004e30:	494d      	ldr	r1, [pc, #308]	; (8004f68 <__ieee754_pow+0x3f8>)
 8004e32:	f7fb fa29 	bl	8000288 <__aeabi_dsub>
 8004e36:	4622      	mov	r2, r4
 8004e38:	4680      	mov	r8, r0
 8004e3a:	4689      	mov	r9, r1
 8004e3c:	462b      	mov	r3, r5
 8004e3e:	4620      	mov	r0, r4
 8004e40:	4629      	mov	r1, r5
 8004e42:	f7fb fbd9 	bl	80005f8 <__aeabi_dmul>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4640      	mov	r0, r8
 8004e4c:	4649      	mov	r1, r9
 8004e4e:	f7fb fbd3 	bl	80005f8 <__aeabi_dmul>
 8004e52:	a33f      	add	r3, pc, #252	; (adr r3, 8004f50 <__ieee754_pow+0x3e0>)
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f7fb fbce 	bl	80005f8 <__aeabi_dmul>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4650      	mov	r0, sl
 8004e62:	4659      	mov	r1, fp
 8004e64:	f7fb fa10 	bl	8000288 <__aeabi_dsub>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4680      	mov	r8, r0
 8004e6e:	4689      	mov	r9, r1
 8004e70:	4630      	mov	r0, r6
 8004e72:	4639      	mov	r1, r7
 8004e74:	f7fb fa0a 	bl	800028c <__adddf3>
 8004e78:	2000      	movs	r0, #0
 8004e7a:	4632      	mov	r2, r6
 8004e7c:	463b      	mov	r3, r7
 8004e7e:	4604      	mov	r4, r0
 8004e80:	460d      	mov	r5, r1
 8004e82:	f7fb fa01 	bl	8000288 <__aeabi_dsub>
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	f7fb f9fb 	bl	8000288 <__aeabi_dsub>
 8004e92:	9b04      	ldr	r3, [sp, #16]
 8004e94:	9a06      	ldr	r2, [sp, #24]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	4682      	mov	sl, r0
 8004e9c:	468b      	mov	fp, r1
 8004e9e:	f040 81e7 	bne.w	8005270 <__ieee754_pow+0x700>
 8004ea2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004f58 <__ieee754_pow+0x3e8>
 8004ea6:	eeb0 8a47 	vmov.f32	s16, s14
 8004eaa:	eef0 8a67 	vmov.f32	s17, s15
 8004eae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004eb2:	2600      	movs	r6, #0
 8004eb4:	4632      	mov	r2, r6
 8004eb6:	463b      	mov	r3, r7
 8004eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ebc:	f7fb f9e4 	bl	8000288 <__aeabi_dsub>
 8004ec0:	4622      	mov	r2, r4
 8004ec2:	462b      	mov	r3, r5
 8004ec4:	f7fb fb98 	bl	80005f8 <__aeabi_dmul>
 8004ec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ecc:	4680      	mov	r8, r0
 8004ece:	4689      	mov	r9, r1
 8004ed0:	4650      	mov	r0, sl
 8004ed2:	4659      	mov	r1, fp
 8004ed4:	f7fb fb90 	bl	80005f8 <__aeabi_dmul>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4640      	mov	r0, r8
 8004ede:	4649      	mov	r1, r9
 8004ee0:	f7fb f9d4 	bl	800028c <__adddf3>
 8004ee4:	4632      	mov	r2, r6
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	4680      	mov	r8, r0
 8004eea:	4689      	mov	r9, r1
 8004eec:	4620      	mov	r0, r4
 8004eee:	4629      	mov	r1, r5
 8004ef0:	f7fb fb82 	bl	80005f8 <__aeabi_dmul>
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	460d      	mov	r5, r1
 8004efa:	4602      	mov	r2, r0
 8004efc:	4649      	mov	r1, r9
 8004efe:	4640      	mov	r0, r8
 8004f00:	f7fb f9c4 	bl	800028c <__adddf3>
 8004f04:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <__ieee754_pow+0x3fc>)
 8004f06:	4299      	cmp	r1, r3
 8004f08:	ec45 4b19 	vmov	d9, r4, r5
 8004f0c:	4606      	mov	r6, r0
 8004f0e:	460f      	mov	r7, r1
 8004f10:	468b      	mov	fp, r1
 8004f12:	f340 82f0 	ble.w	80054f6 <__ieee754_pow+0x986>
 8004f16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004f1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004f1e:	4303      	orrs	r3, r0
 8004f20:	f000 81e4 	beq.w	80052ec <__ieee754_pow+0x77c>
 8004f24:	ec51 0b18 	vmov	r0, r1, d8
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f7fb fdd6 	bl	8000adc <__aeabi_dcmplt>
 8004f30:	3800      	subs	r0, #0
 8004f32:	bf18      	it	ne
 8004f34:	2001      	movne	r0, #1
 8004f36:	e72b      	b.n	8004d90 <__ieee754_pow+0x220>
 8004f38:	60000000 	.word	0x60000000
 8004f3c:	3ff71547 	.word	0x3ff71547
 8004f40:	f85ddf44 	.word	0xf85ddf44
 8004f44:	3e54ae0b 	.word	0x3e54ae0b
 8004f48:	55555555 	.word	0x55555555
 8004f4c:	3fd55555 	.word	0x3fd55555
 8004f50:	652b82fe 	.word	0x652b82fe
 8004f54:	3ff71547 	.word	0x3ff71547
 8004f58:	00000000 	.word	0x00000000
 8004f5c:	bff00000 	.word	0xbff00000
 8004f60:	3ff00000 	.word	0x3ff00000
 8004f64:	3fd00000 	.word	0x3fd00000
 8004f68:	3fe00000 	.word	0x3fe00000
 8004f6c:	408fffff 	.word	0x408fffff
 8004f70:	4bd5      	ldr	r3, [pc, #852]	; (80052c8 <__ieee754_pow+0x758>)
 8004f72:	402b      	ands	r3, r5
 8004f74:	2200      	movs	r2, #0
 8004f76:	b92b      	cbnz	r3, 8004f84 <__ieee754_pow+0x414>
 8004f78:	4bd4      	ldr	r3, [pc, #848]	; (80052cc <__ieee754_pow+0x75c>)
 8004f7a:	f7fb fb3d 	bl	80005f8 <__aeabi_dmul>
 8004f7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004f82:	460c      	mov	r4, r1
 8004f84:	1523      	asrs	r3, r4, #20
 8004f86:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004f8a:	4413      	add	r3, r2
 8004f8c:	9305      	str	r3, [sp, #20]
 8004f8e:	4bd0      	ldr	r3, [pc, #832]	; (80052d0 <__ieee754_pow+0x760>)
 8004f90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004f94:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004f98:	429c      	cmp	r4, r3
 8004f9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004f9e:	dd08      	ble.n	8004fb2 <__ieee754_pow+0x442>
 8004fa0:	4bcc      	ldr	r3, [pc, #816]	; (80052d4 <__ieee754_pow+0x764>)
 8004fa2:	429c      	cmp	r4, r3
 8004fa4:	f340 8162 	ble.w	800526c <__ieee754_pow+0x6fc>
 8004fa8:	9b05      	ldr	r3, [sp, #20]
 8004faa:	3301      	adds	r3, #1
 8004fac:	9305      	str	r3, [sp, #20]
 8004fae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004fb2:	2400      	movs	r4, #0
 8004fb4:	00e3      	lsls	r3, r4, #3
 8004fb6:	9307      	str	r3, [sp, #28]
 8004fb8:	4bc7      	ldr	r3, [pc, #796]	; (80052d8 <__ieee754_pow+0x768>)
 8004fba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004fbe:	ed93 7b00 	vldr	d7, [r3]
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	ec53 2b17 	vmov	r2, r3, d7
 8004fc8:	eeb0 9a47 	vmov.f32	s18, s14
 8004fcc:	eef0 9a67 	vmov.f32	s19, s15
 8004fd0:	4682      	mov	sl, r0
 8004fd2:	f7fb f959 	bl	8000288 <__aeabi_dsub>
 8004fd6:	4652      	mov	r2, sl
 8004fd8:	4606      	mov	r6, r0
 8004fda:	460f      	mov	r7, r1
 8004fdc:	462b      	mov	r3, r5
 8004fde:	ec51 0b19 	vmov	r0, r1, d9
 8004fe2:	f7fb f953 	bl	800028c <__adddf3>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	2000      	movs	r0, #0
 8004fec:	49bb      	ldr	r1, [pc, #748]	; (80052dc <__ieee754_pow+0x76c>)
 8004fee:	f7fb fc2d 	bl	800084c <__aeabi_ddiv>
 8004ff2:	ec41 0b1a 	vmov	d10, r0, r1
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	4639      	mov	r1, r7
 8004ffe:	f7fb fafb 	bl	80005f8 <__aeabi_dmul>
 8005002:	2300      	movs	r3, #0
 8005004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005008:	9302      	str	r3, [sp, #8]
 800500a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800500e:	46ab      	mov	fp, r5
 8005010:	106d      	asrs	r5, r5, #1
 8005012:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005016:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800501a:	ec41 0b18 	vmov	d8, r0, r1
 800501e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005022:	2200      	movs	r2, #0
 8005024:	4640      	mov	r0, r8
 8005026:	4649      	mov	r1, r9
 8005028:	4614      	mov	r4, r2
 800502a:	461d      	mov	r5, r3
 800502c:	f7fb fae4 	bl	80005f8 <__aeabi_dmul>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4630      	mov	r0, r6
 8005036:	4639      	mov	r1, r7
 8005038:	f7fb f926 	bl	8000288 <__aeabi_dsub>
 800503c:	ec53 2b19 	vmov	r2, r3, d9
 8005040:	4606      	mov	r6, r0
 8005042:	460f      	mov	r7, r1
 8005044:	4620      	mov	r0, r4
 8005046:	4629      	mov	r1, r5
 8005048:	f7fb f91e 	bl	8000288 <__aeabi_dsub>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4650      	mov	r0, sl
 8005052:	4659      	mov	r1, fp
 8005054:	f7fb f918 	bl	8000288 <__aeabi_dsub>
 8005058:	4642      	mov	r2, r8
 800505a:	464b      	mov	r3, r9
 800505c:	f7fb facc 	bl	80005f8 <__aeabi_dmul>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4630      	mov	r0, r6
 8005066:	4639      	mov	r1, r7
 8005068:	f7fb f90e 	bl	8000288 <__aeabi_dsub>
 800506c:	ec53 2b1a 	vmov	r2, r3, d10
 8005070:	f7fb fac2 	bl	80005f8 <__aeabi_dmul>
 8005074:	ec53 2b18 	vmov	r2, r3, d8
 8005078:	ec41 0b19 	vmov	d9, r0, r1
 800507c:	ec51 0b18 	vmov	r0, r1, d8
 8005080:	f7fb faba 	bl	80005f8 <__aeabi_dmul>
 8005084:	a37c      	add	r3, pc, #496	; (adr r3, 8005278 <__ieee754_pow+0x708>)
 8005086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508a:	4604      	mov	r4, r0
 800508c:	460d      	mov	r5, r1
 800508e:	f7fb fab3 	bl	80005f8 <__aeabi_dmul>
 8005092:	a37b      	add	r3, pc, #492	; (adr r3, 8005280 <__ieee754_pow+0x710>)
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f7fb f8f8 	bl	800028c <__adddf3>
 800509c:	4622      	mov	r2, r4
 800509e:	462b      	mov	r3, r5
 80050a0:	f7fb faaa 	bl	80005f8 <__aeabi_dmul>
 80050a4:	a378      	add	r3, pc, #480	; (adr r3, 8005288 <__ieee754_pow+0x718>)
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f7fb f8ef 	bl	800028c <__adddf3>
 80050ae:	4622      	mov	r2, r4
 80050b0:	462b      	mov	r3, r5
 80050b2:	f7fb faa1 	bl	80005f8 <__aeabi_dmul>
 80050b6:	a376      	add	r3, pc, #472	; (adr r3, 8005290 <__ieee754_pow+0x720>)
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f7fb f8e6 	bl	800028c <__adddf3>
 80050c0:	4622      	mov	r2, r4
 80050c2:	462b      	mov	r3, r5
 80050c4:	f7fb fa98 	bl	80005f8 <__aeabi_dmul>
 80050c8:	a373      	add	r3, pc, #460	; (adr r3, 8005298 <__ieee754_pow+0x728>)
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	f7fb f8dd 	bl	800028c <__adddf3>
 80050d2:	4622      	mov	r2, r4
 80050d4:	462b      	mov	r3, r5
 80050d6:	f7fb fa8f 	bl	80005f8 <__aeabi_dmul>
 80050da:	a371      	add	r3, pc, #452	; (adr r3, 80052a0 <__ieee754_pow+0x730>)
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	f7fb f8d4 	bl	800028c <__adddf3>
 80050e4:	4622      	mov	r2, r4
 80050e6:	4606      	mov	r6, r0
 80050e8:	460f      	mov	r7, r1
 80050ea:	462b      	mov	r3, r5
 80050ec:	4620      	mov	r0, r4
 80050ee:	4629      	mov	r1, r5
 80050f0:	f7fb fa82 	bl	80005f8 <__aeabi_dmul>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4630      	mov	r0, r6
 80050fa:	4639      	mov	r1, r7
 80050fc:	f7fb fa7c 	bl	80005f8 <__aeabi_dmul>
 8005100:	4642      	mov	r2, r8
 8005102:	4604      	mov	r4, r0
 8005104:	460d      	mov	r5, r1
 8005106:	464b      	mov	r3, r9
 8005108:	ec51 0b18 	vmov	r0, r1, d8
 800510c:	f7fb f8be 	bl	800028c <__adddf3>
 8005110:	ec53 2b19 	vmov	r2, r3, d9
 8005114:	f7fb fa70 	bl	80005f8 <__aeabi_dmul>
 8005118:	4622      	mov	r2, r4
 800511a:	462b      	mov	r3, r5
 800511c:	f7fb f8b6 	bl	800028c <__adddf3>
 8005120:	4642      	mov	r2, r8
 8005122:	4682      	mov	sl, r0
 8005124:	468b      	mov	fp, r1
 8005126:	464b      	mov	r3, r9
 8005128:	4640      	mov	r0, r8
 800512a:	4649      	mov	r1, r9
 800512c:	f7fb fa64 	bl	80005f8 <__aeabi_dmul>
 8005130:	4b6b      	ldr	r3, [pc, #428]	; (80052e0 <__ieee754_pow+0x770>)
 8005132:	2200      	movs	r2, #0
 8005134:	4606      	mov	r6, r0
 8005136:	460f      	mov	r7, r1
 8005138:	f7fb f8a8 	bl	800028c <__adddf3>
 800513c:	4652      	mov	r2, sl
 800513e:	465b      	mov	r3, fp
 8005140:	f7fb f8a4 	bl	800028c <__adddf3>
 8005144:	2000      	movs	r0, #0
 8005146:	4604      	mov	r4, r0
 8005148:	460d      	mov	r5, r1
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	4640      	mov	r0, r8
 8005150:	4649      	mov	r1, r9
 8005152:	f7fb fa51 	bl	80005f8 <__aeabi_dmul>
 8005156:	4b62      	ldr	r3, [pc, #392]	; (80052e0 <__ieee754_pow+0x770>)
 8005158:	4680      	mov	r8, r0
 800515a:	4689      	mov	r9, r1
 800515c:	2200      	movs	r2, #0
 800515e:	4620      	mov	r0, r4
 8005160:	4629      	mov	r1, r5
 8005162:	f7fb f891 	bl	8000288 <__aeabi_dsub>
 8005166:	4632      	mov	r2, r6
 8005168:	463b      	mov	r3, r7
 800516a:	f7fb f88d 	bl	8000288 <__aeabi_dsub>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4650      	mov	r0, sl
 8005174:	4659      	mov	r1, fp
 8005176:	f7fb f887 	bl	8000288 <__aeabi_dsub>
 800517a:	ec53 2b18 	vmov	r2, r3, d8
 800517e:	f7fb fa3b 	bl	80005f8 <__aeabi_dmul>
 8005182:	4622      	mov	r2, r4
 8005184:	4606      	mov	r6, r0
 8005186:	460f      	mov	r7, r1
 8005188:	462b      	mov	r3, r5
 800518a:	ec51 0b19 	vmov	r0, r1, d9
 800518e:	f7fb fa33 	bl	80005f8 <__aeabi_dmul>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4630      	mov	r0, r6
 8005198:	4639      	mov	r1, r7
 800519a:	f7fb f877 	bl	800028c <__adddf3>
 800519e:	4606      	mov	r6, r0
 80051a0:	460f      	mov	r7, r1
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4640      	mov	r0, r8
 80051a8:	4649      	mov	r1, r9
 80051aa:	f7fb f86f 	bl	800028c <__adddf3>
 80051ae:	a33e      	add	r3, pc, #248	; (adr r3, 80052a8 <__ieee754_pow+0x738>)
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	2000      	movs	r0, #0
 80051b6:	4604      	mov	r4, r0
 80051b8:	460d      	mov	r5, r1
 80051ba:	f7fb fa1d 	bl	80005f8 <__aeabi_dmul>
 80051be:	4642      	mov	r2, r8
 80051c0:	ec41 0b18 	vmov	d8, r0, r1
 80051c4:	464b      	mov	r3, r9
 80051c6:	4620      	mov	r0, r4
 80051c8:	4629      	mov	r1, r5
 80051ca:	f7fb f85d 	bl	8000288 <__aeabi_dsub>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4630      	mov	r0, r6
 80051d4:	4639      	mov	r1, r7
 80051d6:	f7fb f857 	bl	8000288 <__aeabi_dsub>
 80051da:	a335      	add	r3, pc, #212	; (adr r3, 80052b0 <__ieee754_pow+0x740>)
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	f7fb fa0a 	bl	80005f8 <__aeabi_dmul>
 80051e4:	a334      	add	r3, pc, #208	; (adr r3, 80052b8 <__ieee754_pow+0x748>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	4606      	mov	r6, r0
 80051ec:	460f      	mov	r7, r1
 80051ee:	4620      	mov	r0, r4
 80051f0:	4629      	mov	r1, r5
 80051f2:	f7fb fa01 	bl	80005f8 <__aeabi_dmul>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4630      	mov	r0, r6
 80051fc:	4639      	mov	r1, r7
 80051fe:	f7fb f845 	bl	800028c <__adddf3>
 8005202:	9a07      	ldr	r2, [sp, #28]
 8005204:	4b37      	ldr	r3, [pc, #220]	; (80052e4 <__ieee754_pow+0x774>)
 8005206:	4413      	add	r3, r2
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f7fb f83e 	bl	800028c <__adddf3>
 8005210:	4682      	mov	sl, r0
 8005212:	9805      	ldr	r0, [sp, #20]
 8005214:	468b      	mov	fp, r1
 8005216:	f7fb f985 	bl	8000524 <__aeabi_i2d>
 800521a:	9a07      	ldr	r2, [sp, #28]
 800521c:	4b32      	ldr	r3, [pc, #200]	; (80052e8 <__ieee754_pow+0x778>)
 800521e:	4413      	add	r3, r2
 8005220:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005224:	4606      	mov	r6, r0
 8005226:	460f      	mov	r7, r1
 8005228:	4652      	mov	r2, sl
 800522a:	465b      	mov	r3, fp
 800522c:	ec51 0b18 	vmov	r0, r1, d8
 8005230:	f7fb f82c 	bl	800028c <__adddf3>
 8005234:	4642      	mov	r2, r8
 8005236:	464b      	mov	r3, r9
 8005238:	f7fb f828 	bl	800028c <__adddf3>
 800523c:	4632      	mov	r2, r6
 800523e:	463b      	mov	r3, r7
 8005240:	f7fb f824 	bl	800028c <__adddf3>
 8005244:	2000      	movs	r0, #0
 8005246:	4632      	mov	r2, r6
 8005248:	463b      	mov	r3, r7
 800524a:	4604      	mov	r4, r0
 800524c:	460d      	mov	r5, r1
 800524e:	f7fb f81b 	bl	8000288 <__aeabi_dsub>
 8005252:	4642      	mov	r2, r8
 8005254:	464b      	mov	r3, r9
 8005256:	f7fb f817 	bl	8000288 <__aeabi_dsub>
 800525a:	ec53 2b18 	vmov	r2, r3, d8
 800525e:	f7fb f813 	bl	8000288 <__aeabi_dsub>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4650      	mov	r0, sl
 8005268:	4659      	mov	r1, fp
 800526a:	e610      	b.n	8004e8e <__ieee754_pow+0x31e>
 800526c:	2401      	movs	r4, #1
 800526e:	e6a1      	b.n	8004fb4 <__ieee754_pow+0x444>
 8005270:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80052c0 <__ieee754_pow+0x750>
 8005274:	e617      	b.n	8004ea6 <__ieee754_pow+0x336>
 8005276:	bf00      	nop
 8005278:	4a454eef 	.word	0x4a454eef
 800527c:	3fca7e28 	.word	0x3fca7e28
 8005280:	93c9db65 	.word	0x93c9db65
 8005284:	3fcd864a 	.word	0x3fcd864a
 8005288:	a91d4101 	.word	0xa91d4101
 800528c:	3fd17460 	.word	0x3fd17460
 8005290:	518f264d 	.word	0x518f264d
 8005294:	3fd55555 	.word	0x3fd55555
 8005298:	db6fabff 	.word	0xdb6fabff
 800529c:	3fdb6db6 	.word	0x3fdb6db6
 80052a0:	33333303 	.word	0x33333303
 80052a4:	3fe33333 	.word	0x3fe33333
 80052a8:	e0000000 	.word	0xe0000000
 80052ac:	3feec709 	.word	0x3feec709
 80052b0:	dc3a03fd 	.word	0xdc3a03fd
 80052b4:	3feec709 	.word	0x3feec709
 80052b8:	145b01f5 	.word	0x145b01f5
 80052bc:	be3e2fe0 	.word	0xbe3e2fe0
 80052c0:	00000000 	.word	0x00000000
 80052c4:	3ff00000 	.word	0x3ff00000
 80052c8:	7ff00000 	.word	0x7ff00000
 80052cc:	43400000 	.word	0x43400000
 80052d0:	0003988e 	.word	0x0003988e
 80052d4:	000bb679 	.word	0x000bb679
 80052d8:	08005970 	.word	0x08005970
 80052dc:	3ff00000 	.word	0x3ff00000
 80052e0:	40080000 	.word	0x40080000
 80052e4:	08005990 	.word	0x08005990
 80052e8:	08005980 	.word	0x08005980
 80052ec:	a3b3      	add	r3, pc, #716	; (adr r3, 80055bc <__ieee754_pow+0xa4c>)
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	4640      	mov	r0, r8
 80052f4:	4649      	mov	r1, r9
 80052f6:	f7fa ffc9 	bl	800028c <__adddf3>
 80052fa:	4622      	mov	r2, r4
 80052fc:	ec41 0b1a 	vmov	d10, r0, r1
 8005300:	462b      	mov	r3, r5
 8005302:	4630      	mov	r0, r6
 8005304:	4639      	mov	r1, r7
 8005306:	f7fa ffbf 	bl	8000288 <__aeabi_dsub>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	ec51 0b1a 	vmov	r0, r1, d10
 8005312:	f7fb fc01 	bl	8000b18 <__aeabi_dcmpgt>
 8005316:	2800      	cmp	r0, #0
 8005318:	f47f ae04 	bne.w	8004f24 <__ieee754_pow+0x3b4>
 800531c:	4aa2      	ldr	r2, [pc, #648]	; (80055a8 <__ieee754_pow+0xa38>)
 800531e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005322:	4293      	cmp	r3, r2
 8005324:	f340 8107 	ble.w	8005536 <__ieee754_pow+0x9c6>
 8005328:	151b      	asrs	r3, r3, #20
 800532a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800532e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005332:	fa4a fa03 	asr.w	sl, sl, r3
 8005336:	44da      	add	sl, fp
 8005338:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800533c:	489b      	ldr	r0, [pc, #620]	; (80055ac <__ieee754_pow+0xa3c>)
 800533e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005342:	4108      	asrs	r0, r1
 8005344:	ea00 030a 	and.w	r3, r0, sl
 8005348:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800534c:	f1c1 0114 	rsb	r1, r1, #20
 8005350:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005354:	fa4a fa01 	asr.w	sl, sl, r1
 8005358:	f1bb 0f00 	cmp.w	fp, #0
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	4620      	mov	r0, r4
 8005362:	4629      	mov	r1, r5
 8005364:	bfb8      	it	lt
 8005366:	f1ca 0a00 	rsblt	sl, sl, #0
 800536a:	f7fa ff8d 	bl	8000288 <__aeabi_dsub>
 800536e:	ec41 0b19 	vmov	d9, r0, r1
 8005372:	4642      	mov	r2, r8
 8005374:	464b      	mov	r3, r9
 8005376:	ec51 0b19 	vmov	r0, r1, d9
 800537a:	f7fa ff87 	bl	800028c <__adddf3>
 800537e:	a37a      	add	r3, pc, #488	; (adr r3, 8005568 <__ieee754_pow+0x9f8>)
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	2000      	movs	r0, #0
 8005386:	4604      	mov	r4, r0
 8005388:	460d      	mov	r5, r1
 800538a:	f7fb f935 	bl	80005f8 <__aeabi_dmul>
 800538e:	ec53 2b19 	vmov	r2, r3, d9
 8005392:	4606      	mov	r6, r0
 8005394:	460f      	mov	r7, r1
 8005396:	4620      	mov	r0, r4
 8005398:	4629      	mov	r1, r5
 800539a:	f7fa ff75 	bl	8000288 <__aeabi_dsub>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4640      	mov	r0, r8
 80053a4:	4649      	mov	r1, r9
 80053a6:	f7fa ff6f 	bl	8000288 <__aeabi_dsub>
 80053aa:	a371      	add	r3, pc, #452	; (adr r3, 8005570 <__ieee754_pow+0xa00>)
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f7fb f922 	bl	80005f8 <__aeabi_dmul>
 80053b4:	a370      	add	r3, pc, #448	; (adr r3, 8005578 <__ieee754_pow+0xa08>)
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	4680      	mov	r8, r0
 80053bc:	4689      	mov	r9, r1
 80053be:	4620      	mov	r0, r4
 80053c0:	4629      	mov	r1, r5
 80053c2:	f7fb f919 	bl	80005f8 <__aeabi_dmul>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4640      	mov	r0, r8
 80053cc:	4649      	mov	r1, r9
 80053ce:	f7fa ff5d 	bl	800028c <__adddf3>
 80053d2:	4604      	mov	r4, r0
 80053d4:	460d      	mov	r5, r1
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4630      	mov	r0, r6
 80053dc:	4639      	mov	r1, r7
 80053de:	f7fa ff55 	bl	800028c <__adddf3>
 80053e2:	4632      	mov	r2, r6
 80053e4:	463b      	mov	r3, r7
 80053e6:	4680      	mov	r8, r0
 80053e8:	4689      	mov	r9, r1
 80053ea:	f7fa ff4d 	bl	8000288 <__aeabi_dsub>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4620      	mov	r0, r4
 80053f4:	4629      	mov	r1, r5
 80053f6:	f7fa ff47 	bl	8000288 <__aeabi_dsub>
 80053fa:	4642      	mov	r2, r8
 80053fc:	4606      	mov	r6, r0
 80053fe:	460f      	mov	r7, r1
 8005400:	464b      	mov	r3, r9
 8005402:	4640      	mov	r0, r8
 8005404:	4649      	mov	r1, r9
 8005406:	f7fb f8f7 	bl	80005f8 <__aeabi_dmul>
 800540a:	a35d      	add	r3, pc, #372	; (adr r3, 8005580 <__ieee754_pow+0xa10>)
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	4604      	mov	r4, r0
 8005412:	460d      	mov	r5, r1
 8005414:	f7fb f8f0 	bl	80005f8 <__aeabi_dmul>
 8005418:	a35b      	add	r3, pc, #364	; (adr r3, 8005588 <__ieee754_pow+0xa18>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f7fa ff33 	bl	8000288 <__aeabi_dsub>
 8005422:	4622      	mov	r2, r4
 8005424:	462b      	mov	r3, r5
 8005426:	f7fb f8e7 	bl	80005f8 <__aeabi_dmul>
 800542a:	a359      	add	r3, pc, #356	; (adr r3, 8005590 <__ieee754_pow+0xa20>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f7fa ff2c 	bl	800028c <__adddf3>
 8005434:	4622      	mov	r2, r4
 8005436:	462b      	mov	r3, r5
 8005438:	f7fb f8de 	bl	80005f8 <__aeabi_dmul>
 800543c:	a356      	add	r3, pc, #344	; (adr r3, 8005598 <__ieee754_pow+0xa28>)
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	f7fa ff21 	bl	8000288 <__aeabi_dsub>
 8005446:	4622      	mov	r2, r4
 8005448:	462b      	mov	r3, r5
 800544a:	f7fb f8d5 	bl	80005f8 <__aeabi_dmul>
 800544e:	a354      	add	r3, pc, #336	; (adr r3, 80055a0 <__ieee754_pow+0xa30>)
 8005450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005454:	f7fa ff1a 	bl	800028c <__adddf3>
 8005458:	4622      	mov	r2, r4
 800545a:	462b      	mov	r3, r5
 800545c:	f7fb f8cc 	bl	80005f8 <__aeabi_dmul>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4640      	mov	r0, r8
 8005466:	4649      	mov	r1, r9
 8005468:	f7fa ff0e 	bl	8000288 <__aeabi_dsub>
 800546c:	4604      	mov	r4, r0
 800546e:	460d      	mov	r5, r1
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4640      	mov	r0, r8
 8005476:	4649      	mov	r1, r9
 8005478:	f7fb f8be 	bl	80005f8 <__aeabi_dmul>
 800547c:	2200      	movs	r2, #0
 800547e:	ec41 0b19 	vmov	d9, r0, r1
 8005482:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005486:	4620      	mov	r0, r4
 8005488:	4629      	mov	r1, r5
 800548a:	f7fa fefd 	bl	8000288 <__aeabi_dsub>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	ec51 0b19 	vmov	r0, r1, d9
 8005496:	f7fb f9d9 	bl	800084c <__aeabi_ddiv>
 800549a:	4632      	mov	r2, r6
 800549c:	4604      	mov	r4, r0
 800549e:	460d      	mov	r5, r1
 80054a0:	463b      	mov	r3, r7
 80054a2:	4640      	mov	r0, r8
 80054a4:	4649      	mov	r1, r9
 80054a6:	f7fb f8a7 	bl	80005f8 <__aeabi_dmul>
 80054aa:	4632      	mov	r2, r6
 80054ac:	463b      	mov	r3, r7
 80054ae:	f7fa feed 	bl	800028c <__adddf3>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4620      	mov	r0, r4
 80054b8:	4629      	mov	r1, r5
 80054ba:	f7fa fee5 	bl	8000288 <__aeabi_dsub>
 80054be:	4642      	mov	r2, r8
 80054c0:	464b      	mov	r3, r9
 80054c2:	f7fa fee1 	bl	8000288 <__aeabi_dsub>
 80054c6:	460b      	mov	r3, r1
 80054c8:	4602      	mov	r2, r0
 80054ca:	4939      	ldr	r1, [pc, #228]	; (80055b0 <__ieee754_pow+0xa40>)
 80054cc:	2000      	movs	r0, #0
 80054ce:	f7fa fedb 	bl	8000288 <__aeabi_dsub>
 80054d2:	ec41 0b10 	vmov	d0, r0, r1
 80054d6:	ee10 3a90 	vmov	r3, s1
 80054da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80054de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e2:	da2b      	bge.n	800553c <__ieee754_pow+0x9cc>
 80054e4:	4650      	mov	r0, sl
 80054e6:	f000 f877 	bl	80055d8 <scalbn>
 80054ea:	ec51 0b10 	vmov	r0, r1, d0
 80054ee:	ec53 2b18 	vmov	r2, r3, d8
 80054f2:	f7ff bbee 	b.w	8004cd2 <__ieee754_pow+0x162>
 80054f6:	4b2f      	ldr	r3, [pc, #188]	; (80055b4 <__ieee754_pow+0xa44>)
 80054f8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80054fc:	429e      	cmp	r6, r3
 80054fe:	f77f af0d 	ble.w	800531c <__ieee754_pow+0x7ac>
 8005502:	4b2d      	ldr	r3, [pc, #180]	; (80055b8 <__ieee754_pow+0xa48>)
 8005504:	440b      	add	r3, r1
 8005506:	4303      	orrs	r3, r0
 8005508:	d009      	beq.n	800551e <__ieee754_pow+0x9ae>
 800550a:	ec51 0b18 	vmov	r0, r1, d8
 800550e:	2200      	movs	r2, #0
 8005510:	2300      	movs	r3, #0
 8005512:	f7fb fae3 	bl	8000adc <__aeabi_dcmplt>
 8005516:	3800      	subs	r0, #0
 8005518:	bf18      	it	ne
 800551a:	2001      	movne	r0, #1
 800551c:	e448      	b.n	8004db0 <__ieee754_pow+0x240>
 800551e:	4622      	mov	r2, r4
 8005520:	462b      	mov	r3, r5
 8005522:	f7fa feb1 	bl	8000288 <__aeabi_dsub>
 8005526:	4642      	mov	r2, r8
 8005528:	464b      	mov	r3, r9
 800552a:	f7fb faeb 	bl	8000b04 <__aeabi_dcmpge>
 800552e:	2800      	cmp	r0, #0
 8005530:	f43f aef4 	beq.w	800531c <__ieee754_pow+0x7ac>
 8005534:	e7e9      	b.n	800550a <__ieee754_pow+0x99a>
 8005536:	f04f 0a00 	mov.w	sl, #0
 800553a:	e71a      	b.n	8005372 <__ieee754_pow+0x802>
 800553c:	ec51 0b10 	vmov	r0, r1, d0
 8005540:	4619      	mov	r1, r3
 8005542:	e7d4      	b.n	80054ee <__ieee754_pow+0x97e>
 8005544:	491a      	ldr	r1, [pc, #104]	; (80055b0 <__ieee754_pow+0xa40>)
 8005546:	2000      	movs	r0, #0
 8005548:	f7ff bb31 	b.w	8004bae <__ieee754_pow+0x3e>
 800554c:	2000      	movs	r0, #0
 800554e:	2100      	movs	r1, #0
 8005550:	f7ff bb2d 	b.w	8004bae <__ieee754_pow+0x3e>
 8005554:	4630      	mov	r0, r6
 8005556:	4639      	mov	r1, r7
 8005558:	f7ff bb29 	b.w	8004bae <__ieee754_pow+0x3e>
 800555c:	9204      	str	r2, [sp, #16]
 800555e:	f7ff bb7b 	b.w	8004c58 <__ieee754_pow+0xe8>
 8005562:	2300      	movs	r3, #0
 8005564:	f7ff bb65 	b.w	8004c32 <__ieee754_pow+0xc2>
 8005568:	00000000 	.word	0x00000000
 800556c:	3fe62e43 	.word	0x3fe62e43
 8005570:	fefa39ef 	.word	0xfefa39ef
 8005574:	3fe62e42 	.word	0x3fe62e42
 8005578:	0ca86c39 	.word	0x0ca86c39
 800557c:	be205c61 	.word	0xbe205c61
 8005580:	72bea4d0 	.word	0x72bea4d0
 8005584:	3e663769 	.word	0x3e663769
 8005588:	c5d26bf1 	.word	0xc5d26bf1
 800558c:	3ebbbd41 	.word	0x3ebbbd41
 8005590:	af25de2c 	.word	0xaf25de2c
 8005594:	3f11566a 	.word	0x3f11566a
 8005598:	16bebd93 	.word	0x16bebd93
 800559c:	3f66c16c 	.word	0x3f66c16c
 80055a0:	5555553e 	.word	0x5555553e
 80055a4:	3fc55555 	.word	0x3fc55555
 80055a8:	3fe00000 	.word	0x3fe00000
 80055ac:	fff00000 	.word	0xfff00000
 80055b0:	3ff00000 	.word	0x3ff00000
 80055b4:	4090cbff 	.word	0x4090cbff
 80055b8:	3f6f3400 	.word	0x3f6f3400
 80055bc:	652b82fe 	.word	0x652b82fe
 80055c0:	3c971547 	.word	0x3c971547

080055c4 <fabs>:
 80055c4:	ec51 0b10 	vmov	r0, r1, d0
 80055c8:	ee10 2a10 	vmov	r2, s0
 80055cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80055d0:	ec43 2b10 	vmov	d0, r2, r3
 80055d4:	4770      	bx	lr
	...

080055d8 <scalbn>:
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	ec55 4b10 	vmov	r4, r5, d0
 80055de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80055e2:	4606      	mov	r6, r0
 80055e4:	462b      	mov	r3, r5
 80055e6:	b999      	cbnz	r1, 8005610 <scalbn+0x38>
 80055e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80055ec:	4323      	orrs	r3, r4
 80055ee:	d03f      	beq.n	8005670 <scalbn+0x98>
 80055f0:	4b35      	ldr	r3, [pc, #212]	; (80056c8 <scalbn+0xf0>)
 80055f2:	4629      	mov	r1, r5
 80055f4:	ee10 0a10 	vmov	r0, s0
 80055f8:	2200      	movs	r2, #0
 80055fa:	f7fa fffd 	bl	80005f8 <__aeabi_dmul>
 80055fe:	4b33      	ldr	r3, [pc, #204]	; (80056cc <scalbn+0xf4>)
 8005600:	429e      	cmp	r6, r3
 8005602:	4604      	mov	r4, r0
 8005604:	460d      	mov	r5, r1
 8005606:	da10      	bge.n	800562a <scalbn+0x52>
 8005608:	a327      	add	r3, pc, #156	; (adr r3, 80056a8 <scalbn+0xd0>)
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	e01f      	b.n	8005650 <scalbn+0x78>
 8005610:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005614:	4291      	cmp	r1, r2
 8005616:	d10c      	bne.n	8005632 <scalbn+0x5a>
 8005618:	ee10 2a10 	vmov	r2, s0
 800561c:	4620      	mov	r0, r4
 800561e:	4629      	mov	r1, r5
 8005620:	f7fa fe34 	bl	800028c <__adddf3>
 8005624:	4604      	mov	r4, r0
 8005626:	460d      	mov	r5, r1
 8005628:	e022      	b.n	8005670 <scalbn+0x98>
 800562a:	460b      	mov	r3, r1
 800562c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005630:	3936      	subs	r1, #54	; 0x36
 8005632:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005636:	4296      	cmp	r6, r2
 8005638:	dd0d      	ble.n	8005656 <scalbn+0x7e>
 800563a:	2d00      	cmp	r5, #0
 800563c:	a11c      	add	r1, pc, #112	; (adr r1, 80056b0 <scalbn+0xd8>)
 800563e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005642:	da02      	bge.n	800564a <scalbn+0x72>
 8005644:	a11c      	add	r1, pc, #112	; (adr r1, 80056b8 <scalbn+0xe0>)
 8005646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800564a:	a319      	add	r3, pc, #100	; (adr r3, 80056b0 <scalbn+0xd8>)
 800564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005650:	f7fa ffd2 	bl	80005f8 <__aeabi_dmul>
 8005654:	e7e6      	b.n	8005624 <scalbn+0x4c>
 8005656:	1872      	adds	r2, r6, r1
 8005658:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800565c:	428a      	cmp	r2, r1
 800565e:	dcec      	bgt.n	800563a <scalbn+0x62>
 8005660:	2a00      	cmp	r2, #0
 8005662:	dd08      	ble.n	8005676 <scalbn+0x9e>
 8005664:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005668:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800566c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005670:	ec45 4b10 	vmov	d0, r4, r5
 8005674:	bd70      	pop	{r4, r5, r6, pc}
 8005676:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800567a:	da08      	bge.n	800568e <scalbn+0xb6>
 800567c:	2d00      	cmp	r5, #0
 800567e:	a10a      	add	r1, pc, #40	; (adr r1, 80056a8 <scalbn+0xd0>)
 8005680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005684:	dac0      	bge.n	8005608 <scalbn+0x30>
 8005686:	a10e      	add	r1, pc, #56	; (adr r1, 80056c0 <scalbn+0xe8>)
 8005688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800568c:	e7bc      	b.n	8005608 <scalbn+0x30>
 800568e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005692:	3236      	adds	r2, #54	; 0x36
 8005694:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005698:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800569c:	4620      	mov	r0, r4
 800569e:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <scalbn+0xf8>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	e7d5      	b.n	8005650 <scalbn+0x78>
 80056a4:	f3af 8000 	nop.w
 80056a8:	c2f8f359 	.word	0xc2f8f359
 80056ac:	01a56e1f 	.word	0x01a56e1f
 80056b0:	8800759c 	.word	0x8800759c
 80056b4:	7e37e43c 	.word	0x7e37e43c
 80056b8:	8800759c 	.word	0x8800759c
 80056bc:	fe37e43c 	.word	0xfe37e43c
 80056c0:	c2f8f359 	.word	0xc2f8f359
 80056c4:	81a56e1f 	.word	0x81a56e1f
 80056c8:	43500000 	.word	0x43500000
 80056cc:	ffff3cb0 	.word	0xffff3cb0
 80056d0:	3c900000 	.word	0x3c900000

080056d4 <with_errno>:
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	4604      	mov	r4, r0
 80056d8:	460d      	mov	r5, r1
 80056da:	4616      	mov	r6, r2
 80056dc:	f7fe fd4e 	bl	800417c <__errno>
 80056e0:	4629      	mov	r1, r5
 80056e2:	6006      	str	r6, [r0, #0]
 80056e4:	4620      	mov	r0, r4
 80056e6:	bd70      	pop	{r4, r5, r6, pc}

080056e8 <xflow>:
 80056e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056ea:	4614      	mov	r4, r2
 80056ec:	461d      	mov	r5, r3
 80056ee:	b108      	cbz	r0, 80056f4 <xflow+0xc>
 80056f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80056f4:	e9cd 2300 	strd	r2, r3, [sp]
 80056f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056fc:	4620      	mov	r0, r4
 80056fe:	4629      	mov	r1, r5
 8005700:	f7fa ff7a 	bl	80005f8 <__aeabi_dmul>
 8005704:	2222      	movs	r2, #34	; 0x22
 8005706:	b003      	add	sp, #12
 8005708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800570c:	f7ff bfe2 	b.w	80056d4 <with_errno>

08005710 <__math_uflow>:
 8005710:	b508      	push	{r3, lr}
 8005712:	2200      	movs	r2, #0
 8005714:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005718:	f7ff ffe6 	bl	80056e8 <xflow>
 800571c:	ec41 0b10 	vmov	d0, r0, r1
 8005720:	bd08      	pop	{r3, pc}

08005722 <__math_oflow>:
 8005722:	b508      	push	{r3, lr}
 8005724:	2200      	movs	r2, #0
 8005726:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800572a:	f7ff ffdd 	bl	80056e8 <xflow>
 800572e:	ec41 0b10 	vmov	d0, r0, r1
 8005732:	bd08      	pop	{r3, pc}

08005734 <__ieee754_sqrt>:
 8005734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005738:	ec55 4b10 	vmov	r4, r5, d0
 800573c:	4e67      	ldr	r6, [pc, #412]	; (80058dc <__ieee754_sqrt+0x1a8>)
 800573e:	43ae      	bics	r6, r5
 8005740:	ee10 0a10 	vmov	r0, s0
 8005744:	ee10 2a10 	vmov	r2, s0
 8005748:	4629      	mov	r1, r5
 800574a:	462b      	mov	r3, r5
 800574c:	d10d      	bne.n	800576a <__ieee754_sqrt+0x36>
 800574e:	f7fa ff53 	bl	80005f8 <__aeabi_dmul>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4620      	mov	r0, r4
 8005758:	4629      	mov	r1, r5
 800575a:	f7fa fd97 	bl	800028c <__adddf3>
 800575e:	4604      	mov	r4, r0
 8005760:	460d      	mov	r5, r1
 8005762:	ec45 4b10 	vmov	d0, r4, r5
 8005766:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800576a:	2d00      	cmp	r5, #0
 800576c:	dc0b      	bgt.n	8005786 <__ieee754_sqrt+0x52>
 800576e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005772:	4326      	orrs	r6, r4
 8005774:	d0f5      	beq.n	8005762 <__ieee754_sqrt+0x2e>
 8005776:	b135      	cbz	r5, 8005786 <__ieee754_sqrt+0x52>
 8005778:	f7fa fd86 	bl	8000288 <__aeabi_dsub>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	f7fb f864 	bl	800084c <__aeabi_ddiv>
 8005784:	e7eb      	b.n	800575e <__ieee754_sqrt+0x2a>
 8005786:	1509      	asrs	r1, r1, #20
 8005788:	f000 808d 	beq.w	80058a6 <__ieee754_sqrt+0x172>
 800578c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005790:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8005794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005798:	07c9      	lsls	r1, r1, #31
 800579a:	bf5c      	itt	pl
 800579c:	005b      	lslpl	r3, r3, #1
 800579e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80057a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80057a6:	bf58      	it	pl
 80057a8:	0052      	lslpl	r2, r2, #1
 80057aa:	2500      	movs	r5, #0
 80057ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80057b0:	1076      	asrs	r6, r6, #1
 80057b2:	0052      	lsls	r2, r2, #1
 80057b4:	f04f 0e16 	mov.w	lr, #22
 80057b8:	46ac      	mov	ip, r5
 80057ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057be:	eb0c 0001 	add.w	r0, ip, r1
 80057c2:	4298      	cmp	r0, r3
 80057c4:	bfde      	ittt	le
 80057c6:	1a1b      	suble	r3, r3, r0
 80057c8:	eb00 0c01 	addle.w	ip, r0, r1
 80057cc:	186d      	addle	r5, r5, r1
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	f1be 0e01 	subs.w	lr, lr, #1
 80057d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80057d8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80057dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80057e0:	d1ed      	bne.n	80057be <__ieee754_sqrt+0x8a>
 80057e2:	4674      	mov	r4, lr
 80057e4:	2720      	movs	r7, #32
 80057e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80057ea:	4563      	cmp	r3, ip
 80057ec:	eb01 000e 	add.w	r0, r1, lr
 80057f0:	dc02      	bgt.n	80057f8 <__ieee754_sqrt+0xc4>
 80057f2:	d113      	bne.n	800581c <__ieee754_sqrt+0xe8>
 80057f4:	4290      	cmp	r0, r2
 80057f6:	d811      	bhi.n	800581c <__ieee754_sqrt+0xe8>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	eb00 0e01 	add.w	lr, r0, r1
 80057fe:	da57      	bge.n	80058b0 <__ieee754_sqrt+0x17c>
 8005800:	f1be 0f00 	cmp.w	lr, #0
 8005804:	db54      	blt.n	80058b0 <__ieee754_sqrt+0x17c>
 8005806:	f10c 0801 	add.w	r8, ip, #1
 800580a:	eba3 030c 	sub.w	r3, r3, ip
 800580e:	4290      	cmp	r0, r2
 8005810:	bf88      	it	hi
 8005812:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005816:	1a12      	subs	r2, r2, r0
 8005818:	440c      	add	r4, r1
 800581a:	46c4      	mov	ip, r8
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	3f01      	subs	r7, #1
 8005820:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005824:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005828:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800582c:	d1dd      	bne.n	80057ea <__ieee754_sqrt+0xb6>
 800582e:	4313      	orrs	r3, r2
 8005830:	d01b      	beq.n	800586a <__ieee754_sqrt+0x136>
 8005832:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80058e0 <__ieee754_sqrt+0x1ac>
 8005836:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80058e4 <__ieee754_sqrt+0x1b0>
 800583a:	e9da 0100 	ldrd	r0, r1, [sl]
 800583e:	e9db 2300 	ldrd	r2, r3, [fp]
 8005842:	f7fa fd21 	bl	8000288 <__aeabi_dsub>
 8005846:	e9da 8900 	ldrd	r8, r9, [sl]
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	4640      	mov	r0, r8
 8005850:	4649      	mov	r1, r9
 8005852:	f7fb f94d 	bl	8000af0 <__aeabi_dcmple>
 8005856:	b140      	cbz	r0, 800586a <__ieee754_sqrt+0x136>
 8005858:	f1b4 3fff 	cmp.w	r4, #4294967295
 800585c:	e9da 0100 	ldrd	r0, r1, [sl]
 8005860:	e9db 2300 	ldrd	r2, r3, [fp]
 8005864:	d126      	bne.n	80058b4 <__ieee754_sqrt+0x180>
 8005866:	3501      	adds	r5, #1
 8005868:	463c      	mov	r4, r7
 800586a:	106a      	asrs	r2, r5, #1
 800586c:	0863      	lsrs	r3, r4, #1
 800586e:	07e9      	lsls	r1, r5, #31
 8005870:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005874:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005878:	bf48      	it	mi
 800587a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800587e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8005882:	461c      	mov	r4, r3
 8005884:	e76d      	b.n	8005762 <__ieee754_sqrt+0x2e>
 8005886:	0ad3      	lsrs	r3, r2, #11
 8005888:	3815      	subs	r0, #21
 800588a:	0552      	lsls	r2, r2, #21
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0fa      	beq.n	8005886 <__ieee754_sqrt+0x152>
 8005890:	02dc      	lsls	r4, r3, #11
 8005892:	d50a      	bpl.n	80058aa <__ieee754_sqrt+0x176>
 8005894:	f1c1 0420 	rsb	r4, r1, #32
 8005898:	fa22 f404 	lsr.w	r4, r2, r4
 800589c:	1e4d      	subs	r5, r1, #1
 800589e:	408a      	lsls	r2, r1
 80058a0:	4323      	orrs	r3, r4
 80058a2:	1b41      	subs	r1, r0, r5
 80058a4:	e772      	b.n	800578c <__ieee754_sqrt+0x58>
 80058a6:	4608      	mov	r0, r1
 80058a8:	e7f0      	b.n	800588c <__ieee754_sqrt+0x158>
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	3101      	adds	r1, #1
 80058ae:	e7ef      	b.n	8005890 <__ieee754_sqrt+0x15c>
 80058b0:	46e0      	mov	r8, ip
 80058b2:	e7aa      	b.n	800580a <__ieee754_sqrt+0xd6>
 80058b4:	f7fa fcea 	bl	800028c <__adddf3>
 80058b8:	e9da 8900 	ldrd	r8, r9, [sl]
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4640      	mov	r0, r8
 80058c2:	4649      	mov	r1, r9
 80058c4:	f7fb f90a 	bl	8000adc <__aeabi_dcmplt>
 80058c8:	b120      	cbz	r0, 80058d4 <__ieee754_sqrt+0x1a0>
 80058ca:	1ca0      	adds	r0, r4, #2
 80058cc:	bf08      	it	eq
 80058ce:	3501      	addeq	r5, #1
 80058d0:	3402      	adds	r4, #2
 80058d2:	e7ca      	b.n	800586a <__ieee754_sqrt+0x136>
 80058d4:	3401      	adds	r4, #1
 80058d6:	f024 0401 	bic.w	r4, r4, #1
 80058da:	e7c6      	b.n	800586a <__ieee754_sqrt+0x136>
 80058dc:	7ff00000 	.word	0x7ff00000
 80058e0:	20000070 	.word	0x20000070
 80058e4:	20000078 	.word	0x20000078

080058e8 <_init>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	bf00      	nop
 80058ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ee:	bc08      	pop	{r3}
 80058f0:	469e      	mov	lr, r3
 80058f2:	4770      	bx	lr

080058f4 <_fini>:
 80058f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f6:	bf00      	nop
 80058f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058fa:	bc08      	pop	{r3}
 80058fc:	469e      	mov	lr, r3
 80058fe:	4770      	bx	lr
