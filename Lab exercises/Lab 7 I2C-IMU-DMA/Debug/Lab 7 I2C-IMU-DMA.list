
Lab 7 I2C-IMU-DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  0800a0e8  0800a0e8  0001a0e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4a4  0800a4a4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4a4  0800a4a4  0001a4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4ac  0800a4ac  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4ac  0800a4ac  0001a4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4b0  0800a4b0  0001a4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a4b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200001d8  0800a68c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  0800a68c  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000103f3  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021b5  00000000  00000000  0003063e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  000327f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c70  00000000  00000000  000337b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000176d9  00000000  00000000  00034420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012832  00000000  00000000  0004baf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091700  00000000  00000000  0005e32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054d4  00000000  00000000  000efa2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000f4f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a0d0 	.word	0x0800a0d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800a0d0 	.word	0x0800a0d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <HAL_I2C_MasterTxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t device_addr = 0b01010000;
int8_t data[5];

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	//when we are done transmitting we start the receive
	HAL_I2C_Master_Receive_DMA(&hi2c1, device_addr + 1, data, 5);
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b299      	uxth	r1, r3
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_I2C_MasterTxCpltCallback+0x28>)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <HAL_I2C_MasterTxCpltCallback+0x2c>)
 8000ecc:	f002 f842 	bl	8002f54 <HAL_I2C_Master_Receive_DMA>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	200003f4 	.word	0x200003f4
 8000ee0:	200001f4 	.word	0x200001f4

08000ee4 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000ee4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ee8:	b0ac      	sub	sp, #176	; 0xb0
 8000eea:	af06      	add	r7, sp, #24
 8000eec:	6078      	str	r0, [r7, #4]

	//data is received: we can elaborate it
	char string[128];
	float x = (float) data[0] / 64.0;
 8000eee:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <HAL_I2C_MasterRxCpltCallback+0xb4>)
 8000ef0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ef4:	ee07 3a90 	vmov	s15, r3
 8000ef8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efc:	eddf 6a27 	vldr	s13, [pc, #156]	; 8000f9c <HAL_I2C_MasterRxCpltCallback+0xb8>
 8000f00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f04:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float y = (float) data[2] / 64.0;
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <HAL_I2C_MasterRxCpltCallback+0xb4>)
 8000f0a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f16:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000f9c <HAL_I2C_MasterRxCpltCallback+0xb8>
 8000f1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f1e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float z = (float) data[4] / 64.0;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <HAL_I2C_MasterRxCpltCallback+0xb4>)
 8000f24:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000f28:	ee07 3a90 	vmov	s15, r3
 8000f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f30:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000f9c <HAL_I2C_MasterRxCpltCallback+0xb8>
 8000f34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f38:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

	int len = snprintf(string, sizeof(string), "X: %.3fg\t\tY: %.3fg\t\tZ: %.3fg\r\n", x, y, z);
 8000f3c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8000f40:	f7ff fb0a 	bl	8000558 <__aeabi_f2d>
 8000f44:	4604      	mov	r4, r0
 8000f46:	460d      	mov	r5, r1
 8000f48:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8000f4c:	f7ff fb04 	bl	8000558 <__aeabi_f2d>
 8000f50:	4680      	mov	r8, r0
 8000f52:	4689      	mov	r9, r1
 8000f54:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000f58:	f7ff fafe 	bl	8000558 <__aeabi_f2d>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	f107 0008 	add.w	r0, r7, #8
 8000f64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000f68:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000f6c:	e9cd 4500 	strd	r4, r5, [sp]
 8000f70:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <HAL_I2C_MasterRxCpltCallback+0xbc>)
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	f006 ff3a 	bl	8007dec <sniprintf>
 8000f78:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	HAL_UART_Transmit_DMA(&huart2, string, len);
 8000f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4619      	mov	r1, r3
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <HAL_I2C_MasterRxCpltCallback+0xc0>)
 8000f8a:	f005 f97d 	bl	8006288 <HAL_UART_Transmit_DMA>

}
 8000f8e:	bf00      	nop
 8000f90:	3798      	adds	r7, #152	; 0x98
 8000f92:	46bd      	mov	sp, r7
 8000f94:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000f98:	200003f4 	.word	0x200003f4
 8000f9c:	42800000 	.word	0x42800000
 8000fa0:	0800a0e8 	.word	0x0800a0e8
 8000fa4:	20000350 	.word	0x20000350

08000fa8 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d10a      	bne.n	8000fce <HAL_TIM_PeriodElapsedCallback+0x26>
		//This code is executed when TIM2 period is elapsed
		const uint8_t X_pin = 0b10101001; //location of x data with autoincrement
 8000fb8:	23a9      	movs	r3, #169	; 0xa9
 8000fba:	73fb      	strb	r3, [r7, #15]

		//ask the DMA to start the transmission
		HAL_I2C_Master_Transmit_DMA(&hi2c1, device_addr, &X_pin, 1); //telling from which variable i want to read
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	f107 020f 	add.w	r2, r7, #15
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000fca:	f001 fe93 	bl	8002cf4 <HAL_I2C_Master_Transmit_DMA>

	}
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000308 	.word	0x20000308
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	200001f4 	.word	0x200001f4

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fea:	f000 fd03 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fee:	f000 f85d 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff2:	f000 f99d 	bl	8001330 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ff6:	f000 f96b 	bl	80012d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ffa:	f000 f93f 	bl	800127c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ffe:	f000 f8c1 	bl	8001184 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001002:	f000 f8ed 	bl	80011e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	const uint8_t CTRL_REG1_data[2] = { 0b0100000, 0b00010111 };
 8001006:	f44f 53b9 	mov.w	r3, #5920	; 0x1720
 800100a:	81bb      	strh	r3, [r7, #12]
	const uint8_t CTRL_REG2_data[2] = { 0b0100001, 0b00000000 };
 800100c:	2321      	movs	r3, #33	; 0x21
 800100e:	813b      	strh	r3, [r7, #8]
	const uint8_t CTRL_REG4_data[2] = { 0b0100011, 0b00000000 };
 8001010:	2323      	movs	r3, #35	; 0x23
 8001012:	80bb      	strh	r3, [r7, #4]

	//define which sensor is the one on the board and define correct parameters
	if (HAL_I2C_Master_Transmit(&hi2c1, device_addr, CTRL_REG1_data,sizeof(CTRL_REG1_data), 1000) != HAL_OK) {
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <main+0xb4>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b299      	uxth	r1, r3
 800101a:	f107 020c 	add.w	r2, r7, #12
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2302      	movs	r3, #2
 8001026:	481d      	ldr	r0, [pc, #116]	; (800109c <main+0xb8>)
 8001028:	f001 fd66 	bl	8002af8 <HAL_I2C_Master_Transmit>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d019      	beq.n	8001066 <main+0x82>
		device_addr = 0b00110000;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <main+0xb4>)
 8001034:	2230      	movs	r2, #48	; 0x30
 8001036:	701a      	strb	r2, [r3, #0]
		if (HAL_I2C_Master_Transmit(&hi2c1, device_addr, CTRL_REG1_data, sizeof(CTRL_REG1_data), 1000) != HAL_OK) {
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <main+0xb4>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b299      	uxth	r1, r3
 800103e:	f107 020c 	add.w	r2, r7, #12
 8001042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2302      	movs	r3, #2
 800104a:	4814      	ldr	r0, [pc, #80]	; (800109c <main+0xb8>)
 800104c:	f001 fd54 	bl	8002af8 <HAL_I2C_Master_Transmit>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <main+0x82>
			HAL_UART_Transmit(&huart2, (uint8_t*) "ERROR\n", 7, 100);
 8001056:	2364      	movs	r3, #100	; 0x64
 8001058:	2207      	movs	r2, #7
 800105a:	4911      	ldr	r1, [pc, #68]	; (80010a0 <main+0xbc>)
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <main+0xc0>)
 800105e:	f005 f880 	bl	8006162 <HAL_UART_Transmit>

			Error_Handler();
 8001062:	f000 f9d3 	bl	800140c <Error_Handler>
		}
	}

	HAL_I2C_Master_Transmit(&hi2c1, device_addr, CTRL_REG2_data, sizeof(CTRL_REG2_data), 50);
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <main+0xb4>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b299      	uxth	r1, r3
 800106c:	f107 0208 	add.w	r2, r7, #8
 8001070:	2332      	movs	r3, #50	; 0x32
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2302      	movs	r3, #2
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <main+0xb8>)
 8001078:	f001 fd3e 	bl	8002af8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, device_addr, CTRL_REG4_data, sizeof(CTRL_REG4_data), 50);
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <main+0xb4>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b299      	uxth	r1, r3
 8001082:	1d3a      	adds	r2, r7, #4
 8001084:	2332      	movs	r3, #50	; 0x32
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2302      	movs	r3, #2
 800108a:	4804      	ldr	r0, [pc, #16]	; (800109c <main+0xb8>)
 800108c:	f001 fd34 	bl	8002af8 <HAL_I2C_Master_Transmit>

	HAL_TIM_Base_Start_IT(&htim2);
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <main+0xc4>)
 8001092:	f004 fc23 	bl	80058dc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001096:	e7fe      	b.n	8001096 <main+0xb2>
 8001098:	20000000 	.word	0x20000000
 800109c:	200001f4 	.word	0x200001f4
 80010a0:	0800a108 	.word	0x0800a108
 80010a4:	20000350 	.word	0x20000350
 80010a8:	20000308 	.word	0x20000308

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b094      	sub	sp, #80	; 0x50
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	2230      	movs	r2, #48	; 0x30
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f006 ff0d 	bl	8007eda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <SystemClock_Config+0xd0>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	4a28      	ldr	r2, [pc, #160]	; (800117c <SystemClock_Config+0xd0>)
 80010da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <SystemClock_Config+0xd0>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <SystemClock_Config+0xd4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <SystemClock_Config+0xd4>)
 80010fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <SystemClock_Config+0xd4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001110:	2301      	movs	r3, #1
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001114:	2310      	movs	r3, #16
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001118:	2302      	movs	r3, #2
 800111a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800111c:	2300      	movs	r3, #0
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001120:	2310      	movs	r3, #16
 8001122:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001124:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001128:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800112a:	2304      	movs	r3, #4
 800112c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800112e:	2307      	movs	r3, #7
 8001130:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fee8 	bl	8004f0c <HAL_RCC_OscConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001142:	f000 f963 	bl	800140c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001146:	230f      	movs	r3, #15
 8001148:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114a:	2302      	movs	r3, #2
 800114c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001156:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2102      	movs	r1, #2
 8001162:	4618      	mov	r0, r3
 8001164:	f004 f94a 	bl	80053fc <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800116e:	f000 f94d 	bl	800140c <Error_Handler>
  }
}
 8001172:	bf00      	nop
 8001174:	3750      	adds	r7, #80	; 0x50
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40007000 	.word	0x40007000

08001184 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MX_I2C1_Init+0x50>)
 800118a:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <MX_I2C1_Init+0x54>)
 800118c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_I2C1_Init+0x50>)
 8001190:	4a12      	ldr	r2, [pc, #72]	; (80011dc <MX_I2C1_Init+0x58>)
 8001192:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_I2C1_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_I2C1_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_I2C1_Init+0x50>)
 80011a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <MX_I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <MX_I2C1_Init+0x50>)
 80011c2:	f001 fb55 	bl	8002870 <HAL_I2C_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011cc:	f000 f91e 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200001f4 	.word	0x200001f4
 80011d8:	40005400 	.word	0x40005400
 80011dc:	000186a0 	.word	0x000186a0

080011e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <MX_TIM2_Init+0x98>)
 80011fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001202:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_TIM2_Init+0x98>)
 8001206:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800120a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_TIM2_Init+0x98>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_TIM2_Init+0x98>)
 8001214:	f242 720f 	movw	r2, #9999	; 0x270f
 8001218:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_TIM2_Init+0x98>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_TIM2_Init+0x98>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001226:	4814      	ldr	r0, [pc, #80]	; (8001278 <MX_TIM2_Init+0x98>)
 8001228:	f004 fb08 	bl	800583c <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001232:	f000 f8eb 	bl	800140c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	4619      	mov	r1, r3
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_TIM2_Init+0x98>)
 8001244:	f004 fcb4 	bl	8005bb0 <HAL_TIM_ConfigClockSource>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800124e:	f000 f8dd 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <MX_TIM2_Init+0x98>)
 8001260:	f004 feb0 	bl	8005fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800126a:	f000 f8cf 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000308 	.word	0x20000308

0800127c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001282:	4a12      	ldr	r2, [pc, #72]	; (80012cc <MX_USART2_UART_Init+0x50>)
 8001284:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800128c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012a2:	2208      	movs	r2, #8
 80012a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_USART2_UART_Init+0x4c>)
 80012b4:	f004 ff08 	bl	80060c8 <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012be:	f000 f8a5 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000350 	.word	0x20000350
 80012cc:	40004400 	.word	0x40004400

080012d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_DMA_Init+0x5c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a13      	ldr	r2, [pc, #76]	; (800132c <MX_DMA_Init+0x5c>)
 80012e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_DMA_Init+0x5c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	200b      	movs	r0, #11
 80012f8:	f000 fcc9 	bl	8001c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012fc:	200b      	movs	r0, #11
 80012fe:	f000 fce2 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2011      	movs	r0, #17
 8001308:	f000 fcc1 	bl	8001c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800130c:	2011      	movs	r0, #17
 800130e:	f000 fcda 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	202f      	movs	r0, #47	; 0x2f
 8001318:	f000 fcb9 	bl	8001c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800131c:	202f      	movs	r0, #47	; 0x2f
 800131e:	f000 fcd2 	bl	8001cc6 <HAL_NVIC_EnableIRQ>

}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800

08001330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <MX_GPIO_Init+0xd0>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a2c      	ldr	r2, [pc, #176]	; (8001400 <MX_GPIO_Init+0xd0>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <MX_GPIO_Init+0xd0>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <MX_GPIO_Init+0xd0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a25      	ldr	r2, [pc, #148]	; (8001400 <MX_GPIO_Init+0xd0>)
 800136c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b23      	ldr	r3, [pc, #140]	; (8001400 <MX_GPIO_Init+0xd0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <MX_GPIO_Init+0xd0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <MX_GPIO_Init+0xd0>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MX_GPIO_Init+0xd0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_GPIO_Init+0xd0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <MX_GPIO_Init+0xd0>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <MX_GPIO_Init+0xd0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2120      	movs	r1, #32
 80013ba:	4812      	ldr	r0, [pc, #72]	; (8001404 <MX_GPIO_Init+0xd4>)
 80013bc:	f001 fa3e 	bl	800283c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	480c      	ldr	r0, [pc, #48]	; (8001408 <MX_GPIO_Init+0xd8>)
 80013d8:	f001 f8ac 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013dc:	2320      	movs	r3, #32
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_GPIO_Init+0xd4>)
 80013f4:	f001 f89e 	bl	8002534 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	40020000 	.word	0x40020000
 8001408:	40020800 	.word	0x40020800

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001414:	e7fe      	b.n	8001414 <Error_Handler+0x8>
	...

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_MspInit+0x4c>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_MspInit+0x4c>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_MspInit+0x4c>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_MspInit+0x4c>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <HAL_MspInit+0x4c>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_MspInit+0x4c>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001456:	2006      	movs	r0, #6
 8001458:	f000 fc0e 	bl	8001c78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800

08001468 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_I2C_MspInit+0x150>)
 8001486:	4293      	cmp	r3, r2
 8001488:	f040 8091 	bne.w	80015ae <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	4b4a      	ldr	r3, [pc, #296]	; (80015bc <HAL_I2C_MspInit+0x154>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	4a49      	ldr	r2, [pc, #292]	; (80015bc <HAL_I2C_MspInit+0x154>)
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	6313      	str	r3, [r2, #48]	; 0x30
 800149c:	4b47      	ldr	r3, [pc, #284]	; (80015bc <HAL_I2C_MspInit+0x154>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ae:	2312      	movs	r3, #18
 80014b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ba:	2304      	movs	r3, #4
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	483e      	ldr	r0, [pc, #248]	; (80015c0 <HAL_I2C_MspInit+0x158>)
 80014c6:	f001 f835 	bl	8002534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <HAL_I2C_MspInit+0x154>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a3a      	ldr	r2, [pc, #232]	; (80015bc <HAL_I2C_MspInit+0x154>)
 80014d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b38      	ldr	r3, [pc, #224]	; (80015bc <HAL_I2C_MspInit+0x154>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80014e6:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <HAL_I2C_MspInit+0x15c>)
 80014e8:	4a37      	ldr	r2, [pc, #220]	; (80015c8 <HAL_I2C_MspInit+0x160>)
 80014ea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80014ec:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <HAL_I2C_MspInit+0x15c>)
 80014ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f4:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <HAL_I2C_MspInit+0x15c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fa:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <HAL_I2C_MspInit+0x15c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001500:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <HAL_I2C_MspInit+0x15c>)
 8001502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001506:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001508:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <HAL_I2C_MspInit+0x15c>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800150e:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_I2C_MspInit+0x15c>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <HAL_I2C_MspInit+0x15c>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800151a:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <HAL_I2C_MspInit+0x15c>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001520:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <HAL_I2C_MspInit+0x15c>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001526:	4827      	ldr	r0, [pc, #156]	; (80015c4 <HAL_I2C_MspInit+0x15c>)
 8001528:	f000 fbe8 	bl	8001cfc <HAL_DMA_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001532:	f7ff ff6b 	bl	800140c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a22      	ldr	r2, [pc, #136]	; (80015c4 <HAL_I2C_MspInit+0x15c>)
 800153a:	639a      	str	r2, [r3, #56]	; 0x38
 800153c:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <HAL_I2C_MspInit+0x15c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_I2C_MspInit+0x164>)
 8001544:	4a22      	ldr	r2, [pc, #136]	; (80015d0 <HAL_I2C_MspInit+0x168>)
 8001546:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001548:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_I2C_MspInit+0x164>)
 800154a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800154e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <HAL_I2C_MspInit+0x164>)
 8001552:	2240      	movs	r2, #64	; 0x40
 8001554:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_I2C_MspInit+0x164>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <HAL_I2C_MspInit+0x164>)
 800155e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001562:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_I2C_MspInit+0x164>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <HAL_I2C_MspInit+0x164>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_I2C_MspInit+0x164>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_I2C_MspInit+0x164>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <HAL_I2C_MspInit+0x164>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001582:	4812      	ldr	r0, [pc, #72]	; (80015cc <HAL_I2C_MspInit+0x164>)
 8001584:	f000 fbba 	bl	8001cfc <HAL_DMA_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800158e:	f7ff ff3d 	bl	800140c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <HAL_I2C_MspInit+0x164>)
 8001596:	635a      	str	r2, [r3, #52]	; 0x34
 8001598:	4a0c      	ldr	r2, [pc, #48]	; (80015cc <HAL_I2C_MspInit+0x164>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	201f      	movs	r0, #31
 80015a4:	f000 fb73 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015a8:	201f      	movs	r0, #31
 80015aa:	f000 fb8c 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40005400 	.word	0x40005400
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020400 	.word	0x40020400
 80015c4:	20000248 	.word	0x20000248
 80015c8:	40026010 	.word	0x40026010
 80015cc:	200002a8 	.word	0x200002a8
 80015d0:	400260b8 	.word	0x400260b8

080015d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e4:	d115      	bne.n	8001612 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_TIM_Base_MspInit+0x48>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a0b      	ldr	r2, [pc, #44]	; (800161c <HAL_TIM_Base_MspInit+0x48>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_TIM_Base_MspInit+0x48>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	201c      	movs	r0, #28
 8001608:	f000 fb41 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800160c:	201c      	movs	r0, #28
 800160e:	f000 fb5a 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800

08001620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a34      	ldr	r2, [pc, #208]	; (8001710 <HAL_UART_MspInit+0xf0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d161      	bne.n	8001706 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b33      	ldr	r3, [pc, #204]	; (8001714 <HAL_UART_MspInit+0xf4>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a32      	ldr	r2, [pc, #200]	; (8001714 <HAL_UART_MspInit+0xf4>)
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_UART_MspInit+0xf4>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <HAL_UART_MspInit+0xf4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a2b      	ldr	r2, [pc, #172]	; (8001714 <HAL_UART_MspInit+0xf4>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b29      	ldr	r3, [pc, #164]	; (8001714 <HAL_UART_MspInit+0xf4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800167a:	230c      	movs	r3, #12
 800167c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800168a:	2307      	movs	r3, #7
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4820      	ldr	r0, [pc, #128]	; (8001718 <HAL_UART_MspInit+0xf8>)
 8001696:	f000 ff4d 	bl	8002534 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_UART_MspInit+0xfc>)
 800169c:	4a20      	ldr	r2, [pc, #128]	; (8001720 <HAL_UART_MspInit+0x100>)
 800169e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <HAL_UART_MspInit+0xfc>)
 80016a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_UART_MspInit+0xfc>)
 80016aa:	2240      	movs	r2, #64	; 0x40
 80016ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_UART_MspInit+0xfc>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_UART_MspInit+0xfc>)
 80016b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ba:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_UART_MspInit+0xfc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_UART_MspInit+0xfc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_UART_MspInit+0xfc>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_UART_MspInit+0xfc>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_UART_MspInit+0xfc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016da:	4810      	ldr	r0, [pc, #64]	; (800171c <HAL_UART_MspInit+0xfc>)
 80016dc:	f000 fb0e 	bl	8001cfc <HAL_DMA_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80016e6:	f7ff fe91 	bl	800140c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a0b      	ldr	r2, [pc, #44]	; (800171c <HAL_UART_MspInit+0xfc>)
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_UART_MspInit+0xfc>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2026      	movs	r0, #38	; 0x26
 80016fc:	f000 fac7 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001700:	2026      	movs	r0, #38	; 0x26
 8001702:	f000 fae0 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40004400 	.word	0x40004400
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000
 800171c:	20000394 	.word	0x20000394
 8001720:	400260a0 	.word	0x400260a0

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001728:	e7fe      	b.n	8001728 <NMI_Handler+0x4>

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001770:	f000 f992 	bl	8001a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <DMA1_Stream0_IRQHandler+0x10>)
 800177e:	f000 fc55 	bl	800202c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000248 	.word	0x20000248

0800178c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <DMA1_Stream6_IRQHandler+0x10>)
 8001792:	f000 fc4b 	bl	800202c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000394 	.word	0x20000394

080017a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <TIM2_IRQHandler+0x10>)
 80017a6:	f004 f8fb 	bl	80059a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000308 	.word	0x20000308

080017b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <I2C1_EV_IRQHandler+0x10>)
 80017ba:	f001 fcfb 	bl	80031b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200001f4 	.word	0x200001f4

080017c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <USART2_IRQHandler+0x10>)
 80017ce:	f004 fdd9 	bl	8006384 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000350 	.word	0x20000350

080017dc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <DMA1_Stream7_IRQHandler+0x10>)
 80017e2:	f000 fc23 	bl	800202c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200002a8 	.word	0x200002a8

080017f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_kill>:

int _kill(int pid, int sig)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800180a:	f006 fbb9 	bl	8007f80 <__errno>
 800180e:	4603      	mov	r3, r0
 8001810:	2216      	movs	r2, #22
 8001812:	601a      	str	r2, [r3, #0]
  return -1;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_exit>:

void _exit (int status)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ffe7 	bl	8001800 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001832:	e7fe      	b.n	8001832 <_exit+0x12>

08001834 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e00a      	b.n	800185c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001846:	f3af 8000 	nop.w
 800184a:	4601      	mov	r1, r0
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf0      	blt.n	8001846 <_read+0x12>
  }

  return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e009      	b.n	8001894 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf1      	blt.n	8001880 <_write+0x12>
  }
  return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_close>:

int _close(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ce:	605a      	str	r2, [r3, #4]
  return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_isatty>:

int _isatty(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f006 fb1e 	bl	8007f80 <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20018000 	.word	0x20018000
 8001970:	00000400 	.word	0x00000400
 8001974:	200003fc 	.word	0x200003fc
 8001978:	20000550 	.word	0x20000550

0800197c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019a4:	480d      	ldr	r0, [pc, #52]	; (80019dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019a6:	490e      	ldr	r1, [pc, #56]	; (80019e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019a8:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ac:	e002      	b.n	80019b4 <LoopCopyDataInit>

080019ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b2:	3304      	adds	r3, #4

080019b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b8:	d3f9      	bcc.n	80019ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ba:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019bc:	4c0b      	ldr	r4, [pc, #44]	; (80019ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c0:	e001      	b.n	80019c6 <LoopFillZerobss>

080019c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c4:	3204      	adds	r2, #4

080019c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c8:	d3fb      	bcc.n	80019c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ca:	f7ff ffd7 	bl	800197c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ce:	f006 fadd 	bl	8007f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d2:	f7ff fb07 	bl	8000fe4 <main>
  bx  lr    
 80019d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80019e4:	0800a4b4 	.word	0x0800a4b4
  ldr r2, =_sbss
 80019e8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80019ec:	20000550 	.word	0x20000550

080019f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <HAL_Init+0x40>)
 80019fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <HAL_Init+0x40>)
 8001a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_Init+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_Init+0x40>)
 8001a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	f000 f92b 	bl	8001c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f000 f808 	bl	8001a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a28:	f7ff fcf6 	bl	8001418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023c00 	.word	0x40023c00

08001a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_InitTick+0x54>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_InitTick+0x58>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f943 	bl	8001ce2 <HAL_SYSTICK_Config>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00e      	b.n	8001a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d80a      	bhi.n	8001a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f000 f90b 	bl	8001c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_InitTick+0x5c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e000      	b.n	8001a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000004 	.word	0x20000004
 8001a90:	2000000c 	.word	0x2000000c
 8001a94:	20000008 	.word	0x20000008

08001a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_IncTick+0x20>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_IncTick+0x24>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_IncTick+0x24>)
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	2000000c 	.word	0x2000000c
 8001abc:	20000400 	.word	0x20000400

08001ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_GetTick+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000400 	.word	0x20000400

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0b      	blt.n	8001b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4907      	ldr	r1, [pc, #28]	; (8001b74 <__NVIC_EnableIRQ+0x38>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000e100 	.word	0xe000e100

08001b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db0a      	blt.n	8001ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	490c      	ldr	r1, [pc, #48]	; (8001bc4 <__NVIC_SetPriority+0x4c>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba0:	e00a      	b.n	8001bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4908      	ldr	r1, [pc, #32]	; (8001bc8 <__NVIC_SetPriority+0x50>)
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	3b04      	subs	r3, #4
 8001bb0:	0112      	lsls	r2, r2, #4
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	761a      	strb	r2, [r3, #24]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f1c3 0307 	rsb	r3, r3, #7
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	bf28      	it	cs
 8001bea:	2304      	movcs	r3, #4
 8001bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d902      	bls.n	8001bfc <NVIC_EncodePriority+0x30>
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3b03      	subs	r3, #3
 8001bfa:	e000      	b.n	8001bfe <NVIC_EncodePriority+0x32>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	401a      	ands	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43d9      	mvns	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	4313      	orrs	r3, r2
         );
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c44:	d301      	bcc.n	8001c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00f      	b.n	8001c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <SysTick_Config+0x40>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c52:	210f      	movs	r1, #15
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f7ff ff8e 	bl	8001b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <SysTick_Config+0x40>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c62:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <SysTick_Config+0x40>)
 8001c64:	2207      	movs	r2, #7
 8001c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	e000e010 	.word	0xe000e010

08001c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff29 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca0:	f7ff ff3e 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	6978      	ldr	r0, [r7, #20]
 8001cac:	f7ff ff8e 	bl	8001bcc <NVIC_EncodePriority>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff5d 	bl	8001b78 <__NVIC_SetPriority>
}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff31 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffa2 	bl	8001c34 <SysTick_Config>
 8001cf0:	4603      	mov	r3, r0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d08:	f7ff feda 	bl	8001ac0 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e099      	b.n	8001e4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0201 	bic.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d38:	e00f      	b.n	8001d5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d3a:	f7ff fec1 	bl	8001ac0 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b05      	cmp	r3, #5
 8001d46:	d908      	bls.n	8001d5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2203      	movs	r2, #3
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e078      	b.n	8001e4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1e8      	bne.n	8001d3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <HAL_DMA_Init+0x158>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d107      	bne.n	8001dc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f023 0307 	bic.w	r3, r3, #7
 8001dda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d117      	bne.n	8001e1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00e      	beq.n	8001e1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 fb1b 	bl	800243c <DMA_CheckFifoParam>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2240      	movs	r2, #64	; 0x40
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e016      	b.n	8001e4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fad2 	bl	80023d0 <DMA_CalcBaseAndBitshift>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	223f      	movs	r2, #63	; 0x3f
 8001e36:	409a      	lsls	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	f010803f 	.word	0xf010803f

08001e58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_DMA_Start_IT+0x26>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e040      	b.n	8001f00 <HAL_DMA_Start_IT+0xa8>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d12f      	bne.n	8001ef2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2202      	movs	r2, #2
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 fa64 	bl	8002374 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	223f      	movs	r2, #63	; 0x3f
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0216 	orr.w	r2, r2, #22
 8001ec6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0208 	orr.w	r2, r2, #8
 8001ede:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	e005      	b.n	8001efe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001efa:	2302      	movs	r3, #2
 8001efc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f16:	f7ff fdd3 	bl	8001ac0 <HAL_GetTick>
 8001f1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d008      	beq.n	8001f3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e052      	b.n	8001fe0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0216 	bic.w	r2, r2, #22
 8001f48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d103      	bne.n	8001f6a <HAL_DMA_Abort+0x62>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0208 	bic.w	r2, r2, #8
 8001f78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0201 	bic.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f8a:	e013      	b.n	8001fb4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f8c:	f7ff fd98 	bl	8001ac0 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b05      	cmp	r3, #5
 8001f98:	d90c      	bls.n	8001fb4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e015      	b.n	8001fe0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1e4      	bne.n	8001f8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc6:	223f      	movs	r2, #63	; 0x3f
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d004      	beq.n	8002006 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00c      	b.n	8002020 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2205      	movs	r2, #5
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0201 	bic.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002038:	4b8e      	ldr	r3, [pc, #568]	; (8002274 <HAL_DMA_IRQHandler+0x248>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a8e      	ldr	r2, [pc, #568]	; (8002278 <HAL_DMA_IRQHandler+0x24c>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	0a9b      	lsrs	r3, r3, #10
 8002044:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	2208      	movs	r2, #8
 8002058:	409a      	lsls	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d01a      	beq.n	8002098 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0204 	bic.w	r2, r2, #4
 800207e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002084:	2208      	movs	r2, #8
 8002086:	409a      	lsls	r2, r3
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	2201      	movs	r2, #1
 800209e:	409a      	lsls	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d012      	beq.n	80020ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ba:	2201      	movs	r2, #1
 80020bc:	409a      	lsls	r2, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c6:	f043 0202 	orr.w	r2, r3, #2
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	2204      	movs	r2, #4
 80020d4:	409a      	lsls	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4013      	ands	r3, r2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d012      	beq.n	8002104 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00b      	beq.n	8002104 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	2204      	movs	r2, #4
 80020f2:	409a      	lsls	r2, r3
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fc:	f043 0204 	orr.w	r2, r3, #4
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	2210      	movs	r2, #16
 800210a:	409a      	lsls	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d043      	beq.n	800219c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d03c      	beq.n	800219c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	2210      	movs	r2, #16
 8002128:	409a      	lsls	r2, r3
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d018      	beq.n	800216e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d108      	bne.n	800215c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d024      	beq.n	800219c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
 800215a:	e01f      	b.n	800219c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01b      	beq.n	800219c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	4798      	blx	r3
 800216c:	e016      	b.n	800219c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d107      	bne.n	800218c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0208 	bic.w	r2, r2, #8
 800218a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	2220      	movs	r2, #32
 80021a2:	409a      	lsls	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 808f 	beq.w	80022cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 8087 	beq.w	80022cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	2220      	movs	r2, #32
 80021c4:	409a      	lsls	r2, r3
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d136      	bne.n	8002244 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0216 	bic.w	r2, r2, #22
 80021e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d103      	bne.n	8002206 <HAL_DMA_IRQHandler+0x1da>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0208 	bic.w	r2, r2, #8
 8002214:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221a:	223f      	movs	r2, #63	; 0x3f
 800221c:	409a      	lsls	r2, r3
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002236:	2b00      	cmp	r3, #0
 8002238:	d07e      	beq.n	8002338 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	4798      	blx	r3
        }
        return;
 8002242:	e079      	b.n	8002338 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d01d      	beq.n	800228e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10d      	bne.n	800227c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002264:	2b00      	cmp	r3, #0
 8002266:	d031      	beq.n	80022cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
 8002270:	e02c      	b.n	80022cc <HAL_DMA_IRQHandler+0x2a0>
 8002272:	bf00      	nop
 8002274:	20000004 	.word	0x20000004
 8002278:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d023      	beq.n	80022cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4798      	blx	r3
 800228c:	e01e      	b.n	80022cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10f      	bne.n	80022bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0210 	bic.w	r2, r2, #16
 80022aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d032      	beq.n	800233a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d022      	beq.n	8002326 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2205      	movs	r2, #5
 80022e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	3301      	adds	r3, #1
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	429a      	cmp	r2, r3
 8002302:	d307      	bcc.n	8002314 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f2      	bne.n	80022f8 <HAL_DMA_IRQHandler+0x2cc>
 8002312:	e000      	b.n	8002316 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002314:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4798      	blx	r3
 8002336:	e000      	b.n	800233a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002338:	bf00      	nop
    }
  }
}
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800234e:	b2db      	uxtb	r3, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002390:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b40      	cmp	r3, #64	; 0x40
 80023a0:	d108      	bne.n	80023b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023b2:	e007      	b.n	80023c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	3b10      	subs	r3, #16
 80023e0:	4a14      	ldr	r2, [pc, #80]	; (8002434 <DMA_CalcBaseAndBitshift+0x64>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023ea:	4a13      	ldr	r2, [pc, #76]	; (8002438 <DMA_CalcBaseAndBitshift+0x68>)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d909      	bls.n	8002412 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002406:	f023 0303 	bic.w	r3, r3, #3
 800240a:	1d1a      	adds	r2, r3, #4
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	659a      	str	r2, [r3, #88]	; 0x58
 8002410:	e007      	b.n	8002422 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800241a:	f023 0303 	bic.w	r3, r3, #3
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	aaaaaaab 	.word	0xaaaaaaab
 8002438:	0800a128 	.word	0x0800a128

0800243c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d11f      	bne.n	8002496 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d856      	bhi.n	800250a <DMA_CheckFifoParam+0xce>
 800245c:	a201      	add	r2, pc, #4	; (adr r2, 8002464 <DMA_CheckFifoParam+0x28>)
 800245e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002462:	bf00      	nop
 8002464:	08002475 	.word	0x08002475
 8002468:	08002487 	.word	0x08002487
 800246c:	08002475 	.word	0x08002475
 8002470:	0800250b 	.word	0x0800250b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d046      	beq.n	800250e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002484:	e043      	b.n	800250e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800248e:	d140      	bne.n	8002512 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002494:	e03d      	b.n	8002512 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800249e:	d121      	bne.n	80024e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d837      	bhi.n	8002516 <DMA_CheckFifoParam+0xda>
 80024a6:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <DMA_CheckFifoParam+0x70>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	080024bd 	.word	0x080024bd
 80024b0:	080024c3 	.word	0x080024c3
 80024b4:	080024bd 	.word	0x080024bd
 80024b8:	080024d5 	.word	0x080024d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      break;
 80024c0:	e030      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d025      	beq.n	800251a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d2:	e022      	b.n	800251a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024dc:	d11f      	bne.n	800251e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024e2:	e01c      	b.n	800251e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d903      	bls.n	80024f2 <DMA_CheckFifoParam+0xb6>
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d003      	beq.n	80024f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024f0:	e018      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
      break;
 80024f6:	e015      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00e      	beq.n	8002522 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
      break;
 8002508:	e00b      	b.n	8002522 <DMA_CheckFifoParam+0xe6>
      break;
 800250a:	bf00      	nop
 800250c:	e00a      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 800250e:	bf00      	nop
 8002510:	e008      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 8002512:	bf00      	nop
 8002514:	e006      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 8002516:	bf00      	nop
 8002518:	e004      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 800251a:	bf00      	nop
 800251c:	e002      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;   
 800251e:	bf00      	nop
 8002520:	e000      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 8002522:	bf00      	nop
    }
  } 
  
  return status; 
 8002524:	7bfb      	ldrb	r3, [r7, #15]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop

08002534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	e159      	b.n	8002804 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002550:	2201      	movs	r2, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	429a      	cmp	r2, r3
 800256a:	f040 8148 	bne.w	80027fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d005      	beq.n	8002586 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002582:	2b02      	cmp	r3, #2
 8002584:	d130      	bne.n	80025e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	2203      	movs	r2, #3
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025bc:	2201      	movs	r2, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 0201 	and.w	r2, r3, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d017      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d123      	bne.n	8002678 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	08da      	lsrs	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3208      	adds	r2, #8
 8002638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	220f      	movs	r2, #15
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	08da      	lsrs	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3208      	adds	r2, #8
 8002672:	69b9      	ldr	r1, [r7, #24]
 8002674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0203 	and.w	r2, r3, #3
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80a2 	beq.w	80027fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	4b57      	ldr	r3, [pc, #348]	; (800281c <HAL_GPIO_Init+0x2e8>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a56      	ldr	r2, [pc, #344]	; (800281c <HAL_GPIO_Init+0x2e8>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b54      	ldr	r3, [pc, #336]	; (800281c <HAL_GPIO_Init+0x2e8>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026d6:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_GPIO_Init+0x2ec>)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	3302      	adds	r3, #2
 80026de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	220f      	movs	r2, #15
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a49      	ldr	r2, [pc, #292]	; (8002824 <HAL_GPIO_Init+0x2f0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d019      	beq.n	8002736 <HAL_GPIO_Init+0x202>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a48      	ldr	r2, [pc, #288]	; (8002828 <HAL_GPIO_Init+0x2f4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_GPIO_Init+0x1fe>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a47      	ldr	r2, [pc, #284]	; (800282c <HAL_GPIO_Init+0x2f8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00d      	beq.n	800272e <HAL_GPIO_Init+0x1fa>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a46      	ldr	r2, [pc, #280]	; (8002830 <HAL_GPIO_Init+0x2fc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d007      	beq.n	800272a <HAL_GPIO_Init+0x1f6>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a45      	ldr	r2, [pc, #276]	; (8002834 <HAL_GPIO_Init+0x300>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_GPIO_Init+0x1f2>
 8002722:	2304      	movs	r3, #4
 8002724:	e008      	b.n	8002738 <HAL_GPIO_Init+0x204>
 8002726:	2307      	movs	r3, #7
 8002728:	e006      	b.n	8002738 <HAL_GPIO_Init+0x204>
 800272a:	2303      	movs	r3, #3
 800272c:	e004      	b.n	8002738 <HAL_GPIO_Init+0x204>
 800272e:	2302      	movs	r3, #2
 8002730:	e002      	b.n	8002738 <HAL_GPIO_Init+0x204>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_GPIO_Init+0x204>
 8002736:	2300      	movs	r3, #0
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	f002 0203 	and.w	r2, r2, #3
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	4093      	lsls	r3, r2
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002748:	4935      	ldr	r1, [pc, #212]	; (8002820 <HAL_GPIO_Init+0x2ec>)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	3302      	adds	r3, #2
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002756:	4b38      	ldr	r3, [pc, #224]	; (8002838 <HAL_GPIO_Init+0x304>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800277a:	4a2f      	ldr	r2, [pc, #188]	; (8002838 <HAL_GPIO_Init+0x304>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002780:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <HAL_GPIO_Init+0x304>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a4:	4a24      	ldr	r2, [pc, #144]	; (8002838 <HAL_GPIO_Init+0x304>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027aa:	4b23      	ldr	r3, [pc, #140]	; (8002838 <HAL_GPIO_Init+0x304>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ce:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <HAL_GPIO_Init+0x304>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d4:	4b18      	ldr	r3, [pc, #96]	; (8002838 <HAL_GPIO_Init+0x304>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f8:	4a0f      	ldr	r2, [pc, #60]	; (8002838 <HAL_GPIO_Init+0x304>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3301      	adds	r3, #1
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b0f      	cmp	r3, #15
 8002808:	f67f aea2 	bls.w	8002550 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3724      	adds	r7, #36	; 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	40013800 	.word	0x40013800
 8002824:	40020000 	.word	0x40020000
 8002828:	40020400 	.word	0x40020400
 800282c:	40020800 	.word	0x40020800
 8002830:	40020c00 	.word	0x40020c00
 8002834:	40021000 	.word	0x40021000
 8002838:	40013c00 	.word	0x40013c00

0800283c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]
 8002848:	4613      	mov	r3, r2
 800284a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800284c:	787b      	ldrb	r3, [r7, #1]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002858:	e003      	b.n	8002862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800285a:	887b      	ldrh	r3, [r7, #2]
 800285c:	041a      	lsls	r2, r3, #16
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	619a      	str	r2, [r3, #24]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e12b      	b.n	8002ada <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe fde6 	bl	8001468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2224      	movs	r2, #36	; 0x24
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028d4:	f002 ff8a 	bl	80057ec <HAL_RCC_GetPCLK1Freq>
 80028d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4a81      	ldr	r2, [pc, #516]	; (8002ae4 <HAL_I2C_Init+0x274>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d807      	bhi.n	80028f4 <HAL_I2C_Init+0x84>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4a80      	ldr	r2, [pc, #512]	; (8002ae8 <HAL_I2C_Init+0x278>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	bf94      	ite	ls
 80028ec:	2301      	movls	r3, #1
 80028ee:	2300      	movhi	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	e006      	b.n	8002902 <HAL_I2C_Init+0x92>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4a7d      	ldr	r2, [pc, #500]	; (8002aec <HAL_I2C_Init+0x27c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	bf94      	ite	ls
 80028fc:	2301      	movls	r3, #1
 80028fe:	2300      	movhi	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e0e7      	b.n	8002ada <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4a78      	ldr	r2, [pc, #480]	; (8002af0 <HAL_I2C_Init+0x280>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	0c9b      	lsrs	r3, r3, #18
 8002914:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	430a      	orrs	r2, r1
 8002928:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4a6a      	ldr	r2, [pc, #424]	; (8002ae4 <HAL_I2C_Init+0x274>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d802      	bhi.n	8002944 <HAL_I2C_Init+0xd4>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	3301      	adds	r3, #1
 8002942:	e009      	b.n	8002958 <HAL_I2C_Init+0xe8>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	4a69      	ldr	r2, [pc, #420]	; (8002af4 <HAL_I2C_Init+0x284>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	099b      	lsrs	r3, r3, #6
 8002956:	3301      	adds	r3, #1
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	430b      	orrs	r3, r1
 800295e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800296a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	495c      	ldr	r1, [pc, #368]	; (8002ae4 <HAL_I2C_Init+0x274>)
 8002974:	428b      	cmp	r3, r1
 8002976:	d819      	bhi.n	80029ac <HAL_I2C_Init+0x13c>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1e59      	subs	r1, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fbb1 f3f3 	udiv	r3, r1, r3
 8002986:	1c59      	adds	r1, r3, #1
 8002988:	f640 73fc 	movw	r3, #4092	; 0xffc
 800298c:	400b      	ands	r3, r1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_I2C_Init+0x138>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1e59      	subs	r1, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fbb1 f3f3 	udiv	r3, r1, r3
 80029a0:	3301      	adds	r3, #1
 80029a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a6:	e051      	b.n	8002a4c <HAL_I2C_Init+0x1dc>
 80029a8:	2304      	movs	r3, #4
 80029aa:	e04f      	b.n	8002a4c <HAL_I2C_Init+0x1dc>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d111      	bne.n	80029d8 <HAL_I2C_Init+0x168>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1e58      	subs	r0, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	440b      	add	r3, r1
 80029c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c6:	3301      	adds	r3, #1
 80029c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	e012      	b.n	80029fe <HAL_I2C_Init+0x18e>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e58      	subs	r0, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	0099      	lsls	r1, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Init+0x196>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e022      	b.n	8002a4c <HAL_I2C_Init+0x1dc>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10e      	bne.n	8002a2c <HAL_I2C_Init+0x1bc>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1e58      	subs	r0, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6859      	ldr	r1, [r3, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	440b      	add	r3, r1
 8002a1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a20:	3301      	adds	r3, #1
 8002a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a2a:	e00f      	b.n	8002a4c <HAL_I2C_Init+0x1dc>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e58      	subs	r0, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	0099      	lsls	r1, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	6809      	ldr	r1, [r1, #0]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6911      	ldr	r1, [r2, #16]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68d2      	ldr	r2, [r2, #12]
 8002a86:	4311      	orrs	r1, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	000186a0 	.word	0x000186a0
 8002ae8:	001e847f 	.word	0x001e847f
 8002aec:	003d08ff 	.word	0x003d08ff
 8002af0:	431bde83 	.word	0x431bde83
 8002af4:	10624dd3 	.word	0x10624dd3

08002af8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	461a      	mov	r2, r3
 8002b04:	460b      	mov	r3, r1
 8002b06:	817b      	strh	r3, [r7, #10]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b0c:	f7fe ffd8 	bl	8001ac0 <HAL_GetTick>
 8002b10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	f040 80e0 	bne.w	8002ce0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	2319      	movs	r3, #25
 8002b26:	2201      	movs	r2, #1
 8002b28:	4970      	ldr	r1, [pc, #448]	; (8002cec <HAL_I2C_Master_Transmit+0x1f4>)
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f002 f81a 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b36:	2302      	movs	r3, #2
 8002b38:	e0d3      	b.n	8002ce2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_I2C_Master_Transmit+0x50>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e0cc      	b.n	8002ce2 <HAL_I2C_Master_Transmit+0x1ea>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d007      	beq.n	8002b6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0201 	orr.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2221      	movs	r2, #33	; 0x21
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2210      	movs	r2, #16
 8002b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	893a      	ldrh	r2, [r7, #8]
 8002b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4a50      	ldr	r2, [pc, #320]	; (8002cf0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bb0:	8979      	ldrh	r1, [r7, #10]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	6a3a      	ldr	r2, [r7, #32]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f001 fd98 	bl	80046ec <I2C_MasterRequestWrite>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e08d      	b.n	8002ce2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bdc:	e066      	b.n	8002cac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	6a39      	ldr	r1, [r7, #32]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f002 f894 	bl	8004d10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00d      	beq.n	8002c0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d107      	bne.n	8002c06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e06b      	b.n	8002ce2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	781a      	ldrb	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d11b      	bne.n	8002c80 <HAL_I2C_Master_Transmit+0x188>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d017      	beq.n	8002c80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	781a      	ldrb	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	6a39      	ldr	r1, [r7, #32]
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f002 f884 	bl	8004d92 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00d      	beq.n	8002cac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d107      	bne.n	8002ca8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e01a      	b.n	8002ce2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d194      	bne.n	8002bde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e000      	b.n	8002ce2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
  }
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	00100002 	.word	0x00100002
 8002cf0:	ffff0000 	.word	0xffff0000

08002cf4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	460b      	mov	r3, r1
 8002d02:	817b      	strh	r3, [r7, #10]
 8002d04:	4613      	mov	r3, r2
 8002d06:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	f040 810d 	bne.w	8002f34 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d1a:	4b89      	ldr	r3, [pc, #548]	; (8002f40 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	08db      	lsrs	r3, r3, #3
 8002d20:	4a88      	ldr	r2, [pc, #544]	; (8002f44 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0a1a      	lsrs	r2, r3, #8
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009a      	lsls	r2, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d116      	bne.n	8002d6e <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f043 0220 	orr.w	r2, r3, #32
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0e3      	b.n	8002f36 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d0db      	beq.n	8002d34 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_I2C_Master_Transmit_DMA+0x96>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e0d5      	b.n	8002f36 <HAL_I2C_Master_Transmit_DMA+0x242>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d007      	beq.n	8002db0 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2221      	movs	r2, #33	; 0x21
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2210      	movs	r2, #16
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	893a      	ldrh	r2, [r7, #8]
 8002de0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a56      	ldr	r2, [pc, #344]	; (8002f48 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8002df0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002df2:	897a      	ldrh	r2, [r7, #10]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d07b      	beq.n	8002ef8 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d02a      	beq.n	8002e5e <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0c:	4a4f      	ldr	r2, [pc, #316]	; (8002f4c <HAL_I2C_Master_Transmit_DMA+0x258>)
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e14:	4a4e      	ldr	r2, [pc, #312]	; (8002f50 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 8002e16:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e24:	2200      	movs	r2, #0
 8002e26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e34:	2200      	movs	r2, #0
 8002e36:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	4619      	mov	r1, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3310      	adds	r3, #16
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	f7ff f803 	bl	8001e58 <HAL_DMA_Start_IT>
 8002e52:	4603      	mov	r3, r0
 8002e54:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d139      	bne.n	8002ed0 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 8002e5c:	e013      	b.n	8002e86 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e057      	b.n	8002f36 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002e9c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eac:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	e02f      	b.n	8002f30 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f043 0210 	orr.w	r2, r3, #16
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e01e      	b.n	8002f36 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f06:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f16:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002f2e:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e000      	b.n	8002f36 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
  }
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000004 	.word	0x20000004
 8002f44:	14f8b589 	.word	0x14f8b589
 8002f48:	ffff0000 	.word	0xffff0000
 8002f4c:	080047f1 	.word	0x080047f1
 8002f50:	0800499b 	.word	0x0800499b

08002f54 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	460b      	mov	r3, r1
 8002f62:	817b      	strh	r3, [r7, #10]
 8002f64:	4613      	mov	r3, r2
 8002f66:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	f040 810d 	bne.w	8003194 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f7a:	4b89      	ldr	r3, [pc, #548]	; (80031a0 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	08db      	lsrs	r3, r3, #3
 8002f80:	4a88      	ldr	r2, [pc, #544]	; (80031a4 <HAL_I2C_Master_Receive_DMA+0x250>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	0a1a      	lsrs	r2, r3, #8
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009a      	lsls	r2, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d116      	bne.n	8002fce <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f043 0220 	orr.w	r2, r3, #32
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0e3      	b.n	8003196 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d0db      	beq.n	8002f94 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_I2C_Master_Receive_DMA+0x96>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e0d5      	b.n	8003196 <HAL_I2C_Master_Receive_DMA+0x242>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d007      	beq.n	8003010 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800301e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2222      	movs	r2, #34	; 0x22
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2210      	movs	r2, #16
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	893a      	ldrh	r2, [r7, #8]
 8003040:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a56      	ldr	r2, [pc, #344]	; (80031a8 <HAL_I2C_Master_Receive_DMA+0x254>)
 8003050:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003052:	897a      	ldrh	r2, [r7, #10]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	2b00      	cmp	r3, #0
 800305e:	d07b      	beq.n	8003158 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	2b00      	cmp	r3, #0
 8003066:	d02a      	beq.n	80030be <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	4a4f      	ldr	r2, [pc, #316]	; (80031ac <HAL_I2C_Master_Receive_DMA+0x258>)
 800306e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	4a4e      	ldr	r2, [pc, #312]	; (80031b0 <HAL_I2C_Master_Receive_DMA+0x25c>)
 8003076:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	2200      	movs	r2, #0
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	2200      	movs	r2, #0
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	2200      	movs	r2, #0
 800308e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003094:	2200      	movs	r2, #0
 8003096:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3310      	adds	r3, #16
 80030a2:	4619      	mov	r1, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	461a      	mov	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ae:	f7fe fed3 	bl	8001e58 <HAL_DMA_Start_IT>
 80030b2:	4603      	mov	r3, r0
 80030b4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d139      	bne.n	8003130 <HAL_I2C_Master_Receive_DMA+0x1dc>
 80030bc:	e013      	b.n	80030e6 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e057      	b.n	8003196 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030f4:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003104:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800311c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	e02f      	b.n	8003190 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	f043 0210 	orr.w	r2, r3, #16
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e01e      	b.n	8003196 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800316e:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800317e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800318e:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8003194:	2302      	movs	r3, #2
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000004 	.word	0x20000004
 80031a4:	14f8b589 	.word	0x14f8b589
 80031a8:	ffff0000 	.word	0xffff0000
 80031ac:	080047f1 	.word	0x080047f1
 80031b0:	0800499b 	.word	0x0800499b

080031b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b10      	cmp	r3, #16
 80031e2:	d003      	beq.n	80031ec <HAL_I2C_EV_IRQHandler+0x38>
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b40      	cmp	r3, #64	; 0x40
 80031e8:	f040 80b1 	bne.w	800334e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10d      	bne.n	8003222 <HAL_I2C_EV_IRQHandler+0x6e>
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800320c:	d003      	beq.n	8003216 <HAL_I2C_EV_IRQHandler+0x62>
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003214:	d101      	bne.n	800321a <HAL_I2C_EV_IRQHandler+0x66>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_I2C_EV_IRQHandler+0x68>
 800321a:	2300      	movs	r3, #0
 800321c:	2b01      	cmp	r3, #1
 800321e:	f000 8114 	beq.w	800344a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00b      	beq.n	8003244 <HAL_I2C_EV_IRQHandler+0x90>
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003232:	2b00      	cmp	r3, #0
 8003234:	d006      	beq.n	8003244 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f001 fe4d 	bl	8004ed6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fcab 	bl	8003b98 <I2C_Master_SB>
 8003242:	e083      	b.n	800334c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_I2C_EV_IRQHandler+0xac>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fd23 	bl	8003ca4 <I2C_Master_ADD10>
 800325e:	e075      	b.n	800334c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <HAL_I2C_EV_IRQHandler+0xc8>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fd3f 	bl	8003cf8 <I2C_Master_ADDR>
 800327a:	e067      	b.n	800334c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	d036      	beq.n	80032f4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003294:	f000 80db 	beq.w	800344e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00d      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0x10a>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0x10a>
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f923 	bl	8003502 <I2C_MasterTransmit_TXE>
 80032bc:	e046      	b.n	800334c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80c2 	beq.w	800344e <HAL_I2C_EV_IRQHandler+0x29a>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80bc 	beq.w	800344e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80032d6:	7bbb      	ldrb	r3, [r7, #14]
 80032d8:	2b21      	cmp	r3, #33	; 0x21
 80032da:	d103      	bne.n	80032e4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f9ac 	bl	800363a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032e2:	e0b4      	b.n	800344e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	2b40      	cmp	r3, #64	; 0x40
 80032e8:	f040 80b1 	bne.w	800344e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fa1a 	bl	8003726 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032f2:	e0ac      	b.n	800344e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003302:	f000 80a4 	beq.w	800344e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00d      	beq.n	800332c <HAL_I2C_EV_IRQHandler+0x178>
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_I2C_EV_IRQHandler+0x178>
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d103      	bne.n	800332c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fa92 	bl	800384e <I2C_MasterReceive_RXNE>
 800332a:	e00f      	b.n	800334c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 808b 	beq.w	800344e <HAL_I2C_EV_IRQHandler+0x29a>
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8085 	beq.w	800344e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fb3d 	bl	80039c4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800334a:	e080      	b.n	800344e <HAL_I2C_EV_IRQHandler+0x29a>
 800334c:	e07f      	b.n	800344e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d004      	beq.n	8003360 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	e007      	b.n	8003370 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d011      	beq.n	800339e <HAL_I2C_EV_IRQHandler+0x1ea>
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00c      	beq.n	800339e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003394:	69b9      	ldr	r1, [r7, #24]
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fefd 	bl	8004196 <I2C_Slave_ADDR>
 800339c:	e05a      	b.n	8003454 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_I2C_EV_IRQHandler+0x206>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 ff38 	bl	8004228 <I2C_Slave_STOPF>
 80033b8:	e04c      	b.n	8003454 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033ba:	7bbb      	ldrb	r3, [r7, #14]
 80033bc:	2b21      	cmp	r3, #33	; 0x21
 80033be:	d002      	beq.n	80033c6 <HAL_I2C_EV_IRQHandler+0x212>
 80033c0:	7bbb      	ldrb	r3, [r7, #14]
 80033c2:	2b29      	cmp	r3, #41	; 0x29
 80033c4:	d120      	bne.n	8003408 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00d      	beq.n	80033ec <HAL_I2C_EV_IRQHandler+0x238>
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_I2C_EV_IRQHandler+0x238>
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fe18 	bl	800401a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033ea:	e032      	b.n	8003452 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d02d      	beq.n	8003452 <HAL_I2C_EV_IRQHandler+0x29e>
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d028      	beq.n	8003452 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fe47 	bl	8004094 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003406:	e024      	b.n	8003452 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <HAL_I2C_EV_IRQHandler+0x27a>
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_I2C_EV_IRQHandler+0x27a>
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fe55 	bl	80040d6 <I2C_SlaveReceive_RXNE>
 800342c:	e012      	b.n	8003454 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00d      	beq.n	8003454 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fe85 	bl	8004152 <I2C_SlaveReceive_BTF>
 8003448:	e004      	b.n	8003454 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800344a:	bf00      	nop
 800344c:	e002      	b.n	8003454 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800344e:	bf00      	nop
 8003450:	e000      	b.n	8003454 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003452:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	70fb      	strb	r3, [r7, #3]
 800348e:	4613      	mov	r3, r2
 8003490:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003510:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003518:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003524:	2b00      	cmp	r3, #0
 8003526:	d150      	bne.n	80035ca <I2C_MasterTransmit_TXE+0xc8>
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	2b21      	cmp	r3, #33	; 0x21
 800352c:	d14d      	bne.n	80035ca <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b08      	cmp	r3, #8
 8003532:	d01d      	beq.n	8003570 <I2C_MasterTransmit_TXE+0x6e>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b20      	cmp	r3, #32
 8003538:	d01a      	beq.n	8003570 <I2C_MasterTransmit_TXE+0x6e>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003540:	d016      	beq.n	8003570 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003550:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2211      	movs	r2, #17
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7fd fca3 	bl	8000eb4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800356e:	e060      	b.n	8003632 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800357e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b40      	cmp	r3, #64	; 0x40
 80035a8:	d107      	bne.n	80035ba <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff ff7d 	bl	80034b2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035b8:	e03b      	b.n	8003632 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fd fc76 	bl	8000eb4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035c8:	e033      	b.n	8003632 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	2b21      	cmp	r3, #33	; 0x21
 80035ce:	d005      	beq.n	80035dc <I2C_MasterTransmit_TXE+0xda>
 80035d0:	7bbb      	ldrb	r3, [r7, #14]
 80035d2:	2b40      	cmp	r3, #64	; 0x40
 80035d4:	d12d      	bne.n	8003632 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	2b22      	cmp	r3, #34	; 0x22
 80035da:	d12a      	bne.n	8003632 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d108      	bne.n	80035f8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80035f6:	e01c      	b.n	8003632 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b40      	cmp	r3, #64	; 0x40
 8003602:	d103      	bne.n	800360c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f88e 	bl	8003726 <I2C_MemoryTransmit_TXE_BTF>
}
 800360a:	e012      	b.n	8003632 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	781a      	ldrb	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003630:	e7ff      	b.n	8003632 <I2C_MasterTransmit_TXE+0x130>
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b21      	cmp	r3, #33	; 0x21
 8003652:	d164      	bne.n	800371e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d012      	beq.n	8003684 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	781a      	ldrb	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003682:	e04c      	b.n	800371e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b08      	cmp	r3, #8
 8003688:	d01d      	beq.n	80036c6 <I2C_MasterTransmit_BTF+0x8c>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b20      	cmp	r3, #32
 800368e:	d01a      	beq.n	80036c6 <I2C_MasterTransmit_BTF+0x8c>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003696:	d016      	beq.n	80036c6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036a6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2211      	movs	r2, #17
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd fbf8 	bl	8000eb4 <HAL_I2C_MasterTxCpltCallback>
}
 80036c4:	e02b      	b.n	800371e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036d4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d107      	bne.n	8003710 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff fed2 	bl	80034b2 <HAL_I2C_MemTxCpltCallback>
}
 800370e:	e006      	b.n	800371e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7fd fbcb 	bl	8000eb4 <HAL_I2C_MasterTxCpltCallback>
}
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003734:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373a:	2b00      	cmp	r3, #0
 800373c:	d11d      	bne.n	800377a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d10b      	bne.n	800375e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374a:	b2da      	uxtb	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003756:	1c9a      	adds	r2, r3, #2
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800375c:	e073      	b.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003762:	b29b      	uxth	r3, r3
 8003764:	121b      	asrs	r3, r3, #8
 8003766:	b2da      	uxtb	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003778:	e065      	b.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377e:	2b01      	cmp	r3, #1
 8003780:	d10b      	bne.n	800379a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003786:	b2da      	uxtb	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003798:	e055      	b.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d151      	bne.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	2b22      	cmp	r3, #34	; 0x22
 80037a6:	d10d      	bne.n	80037c4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037c2:	e040      	b.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d015      	beq.n	80037fa <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	2b21      	cmp	r3, #33	; 0x21
 80037d2:	d112      	bne.n	80037fa <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	781a      	ldrb	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037f8:	e025      	b.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d120      	bne.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b21      	cmp	r3, #33	; 0x21
 8003808:	d11d      	bne.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003818:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003828:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fe36 	bl	80034b2 <HAL_I2C_MemTxCpltCallback>
}
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b22      	cmp	r3, #34	; 0x22
 8003860:	f040 80ac 	bne.w	80039bc <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b03      	cmp	r3, #3
 8003870:	d921      	bls.n	80038b6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b03      	cmp	r3, #3
 80038a0:	f040 808c 	bne.w	80039bc <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80038b4:	e082      	b.n	80039bc <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d075      	beq.n	80039aa <I2C_MasterReceive_RXNE+0x15c>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d002      	beq.n	80038ca <I2C_MasterReceive_RXNE+0x7c>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d16f      	bne.n	80039aa <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f001 faa2 	bl	8004e14 <I2C_WaitOnSTOPRequestThroughIT>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d142      	bne.n	800395c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038f4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b40      	cmp	r3, #64	; 0x40
 800392e:	d10a      	bne.n	8003946 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fdc1 	bl	80034c6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003944:	e03a      	b.n	80039bc <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2212      	movs	r2, #18
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7fd fac5 	bl	8000ee4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800395a:	e02f      	b.n	80039bc <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800396a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff fd99 	bl	80034da <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039a8:	e008      	b.n	80039bc <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b8:	605a      	str	r2, [r3, #4]
}
 80039ba:	e7ff      	b.n	80039bc <I2C_MasterReceive_RXNE+0x16e>
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d11b      	bne.n	8003a14 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ea:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003a12:	e0bd      	b.n	8003b90 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d129      	bne.n	8003a72 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a2c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d00a      	beq.n	8003a4a <I2C_MasterReceive_BTF+0x86>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d007      	beq.n	8003a4a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a48:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a70:	e08e      	b.n	8003b90 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d176      	bne.n	8003b6a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d002      	beq.n	8003a88 <I2C_MasterReceive_BTF+0xc4>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d108      	bne.n	8003a9a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e019      	b.n	8003ace <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d002      	beq.n	8003aa6 <I2C_MasterReceive_BTF+0xe2>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d108      	bne.n	8003ab8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e00a      	b.n	8003ace <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b10      	cmp	r3, #16
 8003abc:	d007      	beq.n	8003ace <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003acc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b28:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b40      	cmp	r3, #64	; 0x40
 8003b3c:	d10a      	bne.n	8003b54 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff fcba 	bl	80034c6 <HAL_I2C_MemRxCpltCallback>
}
 8003b52:	e01d      	b.n	8003b90 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2212      	movs	r2, #18
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fd f9be 	bl	8000ee4 <HAL_I2C_MasterRxCpltCallback>
}
 8003b68:	e012      	b.n	8003b90 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b90:	bf00      	nop
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	d117      	bne.n	8003bdc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d109      	bne.n	8003bc8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bc4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003bc6:	e067      	b.n	8003c98 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	611a      	str	r2, [r3, #16]
}
 8003bda:	e05d      	b.n	8003c98 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be4:	d133      	bne.n	8003c4e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b21      	cmp	r3, #33	; 0x21
 8003bf0:	d109      	bne.n	8003c06 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c02:	611a      	str	r2, [r3, #16]
 8003c04:	e008      	b.n	8003c18 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d004      	beq.n	8003c2a <I2C_Master_SB+0x92>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d108      	bne.n	8003c3c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d032      	beq.n	8003c98 <I2C_Master_SB+0x100>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d02d      	beq.n	8003c98 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c4a:	605a      	str	r2, [r3, #4]
}
 8003c4c:	e024      	b.n	8003c98 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10e      	bne.n	8003c74 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	11db      	asrs	r3, r3, #7
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f003 0306 	and.w	r3, r3, #6
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	f063 030f 	orn	r3, r3, #15
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	611a      	str	r2, [r3, #16]
}
 8003c72:	e011      	b.n	8003c98 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d10d      	bne.n	8003c98 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	11db      	asrs	r3, r3, #7
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f003 0306 	and.w	r3, r3, #6
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	f063 030e 	orn	r3, r3, #14
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	611a      	str	r2, [r3, #16]
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d004      	beq.n	8003cca <I2C_Master_ADD10+0x26>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d108      	bne.n	8003cdc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00c      	beq.n	8003cec <I2C_Master_ADD10+0x48>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cea:	605a      	str	r2, [r3, #4]
  }
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b091      	sub	sp, #68	; 0x44
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b22      	cmp	r3, #34	; 0x22
 8003d20:	f040 8169 	bne.w	8003ff6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10f      	bne.n	8003d4c <I2C_Master_ADDR+0x54>
 8003d2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d30:	2b40      	cmp	r3, #64	; 0x40
 8003d32:	d10b      	bne.n	8003d4c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d34:	2300      	movs	r3, #0
 8003d36:	633b      	str	r3, [r7, #48]	; 0x30
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	633b      	str	r3, [r7, #48]	; 0x30
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	e160      	b.n	800400e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d11d      	bne.n	8003d90 <I2C_Master_ADDR+0x98>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d5c:	d118      	bne.n	8003d90 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d82:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	651a      	str	r2, [r3, #80]	; 0x50
 8003d8e:	e13e      	b.n	800400e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d113      	bne.n	8003dc2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	e115      	b.n	8003fee <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	f040 808a 	bne.w	8003ee2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dd4:	d137      	bne.n	8003e46 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df4:	d113      	bne.n	8003e1e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e04:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e06:	2300      	movs	r3, #0
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	e0e7      	b.n	8003fee <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	623b      	str	r3, [r7, #32]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	623b      	str	r3, [r7, #32]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	e0d3      	b.n	8003fee <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d02e      	beq.n	8003eaa <I2C_Master_ADDR+0x1b2>
 8003e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d02b      	beq.n	8003eaa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e54:	2b12      	cmp	r3, #18
 8003e56:	d102      	bne.n	8003e5e <I2C_Master_ADDR+0x166>
 8003e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d125      	bne.n	8003eaa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d00e      	beq.n	8003e82 <I2C_Master_ADDR+0x18a>
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d00b      	beq.n	8003e82 <I2C_Master_ADDR+0x18a>
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	2b10      	cmp	r3, #16
 8003e6e:	d008      	beq.n	8003e82 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	e007      	b.n	8003e92 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e90:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	e0a1      	b.n	8003fee <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e085      	b.n	8003fee <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d14d      	bne.n	8003f88 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d016      	beq.n	8003f20 <I2C_Master_ADDR+0x228>
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d013      	beq.n	8003f20 <I2C_Master_ADDR+0x228>
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	d010      	beq.n	8003f20 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e007      	b.n	8003f30 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f2e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f3e:	d117      	bne.n	8003f70 <I2C_Master_ADDR+0x278>
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f46:	d00b      	beq.n	8003f60 <I2C_Master_ADDR+0x268>
 8003f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d008      	beq.n	8003f60 <I2C_Master_ADDR+0x268>
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d005      	beq.n	8003f60 <I2C_Master_ADDR+0x268>
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d002      	beq.n	8003f60 <I2C_Master_ADDR+0x268>
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d107      	bne.n	8003f70 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f6e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	e032      	b.n	8003fee <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f96:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa6:	d117      	bne.n	8003fd8 <I2C_Master_ADDR+0x2e0>
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003faa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fae:	d00b      	beq.n	8003fc8 <I2C_Master_ADDR+0x2d0>
 8003fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d008      	beq.n	8003fc8 <I2C_Master_ADDR+0x2d0>
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d005      	beq.n	8003fc8 <I2C_Master_ADDR+0x2d0>
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	2b10      	cmp	r3, #16
 8003fc0:	d002      	beq.n	8003fc8 <I2C_Master_ADDR+0x2d0>
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d107      	bne.n	8003fd8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fd6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003ff4:	e00b      	b.n	800400e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]
}
 800400c:	e7ff      	b.n	800400e <I2C_Master_ADDR+0x316>
 800400e:	bf00      	nop
 8004010:	3744      	adds	r7, #68	; 0x44
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004028:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d02b      	beq.n	800408c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	781a      	ldrb	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d114      	bne.n	800408c <I2C_SlaveTransmit_TXE+0x72>
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	2b29      	cmp	r3, #41	; 0x29
 8004066:	d111      	bne.n	800408c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004076:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2221      	movs	r2, #33	; 0x21
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2228      	movs	r2, #40	; 0x28
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff f9e7 	bl	800345a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d011      	beq.n	80040ca <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	781a      	ldrb	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d02c      	beq.n	800414a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d114      	bne.n	800414a <I2C_SlaveReceive_RXNE+0x74>
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b2a      	cmp	r3, #42	; 0x2a
 8004124:	d111      	bne.n	800414a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004134:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2222      	movs	r2, #34	; 0x22
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2228      	movs	r2, #40	; 0x28
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff f992 	bl	800346e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d012      	beq.n	800418a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80041a0:	2300      	movs	r3, #0
 80041a2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041b0:	2b28      	cmp	r3, #40	; 0x28
 80041b2:	d125      	bne.n	8004200 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d103      	bne.n	80041e4 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	81bb      	strh	r3, [r7, #12]
 80041e2:	e002      	b.n	80041ea <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80041f2:	89ba      	ldrh	r2, [r7, #12]
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	4619      	mov	r1, r3
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff f942 	bl	8003482 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041fe:	e00e      	b.n	800421e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004200:	2300      	movs	r3, #0
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004236:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004246:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004248:	2300      	movs	r3, #0
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004274:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004284:	d172      	bne.n	800436c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	2b22      	cmp	r3, #34	; 0x22
 800428a:	d002      	beq.n	8004292 <I2C_Slave_STOPF+0x6a>
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	2b2a      	cmp	r3, #42	; 0x2a
 8004290:	d135      	bne.n	80042fe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	b29a      	uxth	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f043 0204 	orr.w	r2, r3, #4
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe f838 	bl	8002340 <HAL_DMA_GetState>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d049      	beq.n	800436a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	4a69      	ldr	r2, [pc, #420]	; (8004480 <I2C_Slave_STOPF+0x258>)
 80042dc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fd fe80 	bl	8001fe8 <HAL_DMA_Abort_IT>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d03d      	beq.n	800436a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042f8:	4610      	mov	r0, r2
 80042fa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042fc:	e035      	b.n	800436a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	b29a      	uxth	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f043 0204 	orr.w	r2, r3, #4
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004330:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe f802 	bl	8002340 <HAL_DMA_GetState>
 800433c:	4603      	mov	r3, r0
 800433e:	2b01      	cmp	r3, #1
 8004340:	d014      	beq.n	800436c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004346:	4a4e      	ldr	r2, [pc, #312]	; (8004480 <I2C_Slave_STOPF+0x258>)
 8004348:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434e:	4618      	mov	r0, r3
 8004350:	f7fd fe4a 	bl	8001fe8 <HAL_DMA_Abort_IT>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d008      	beq.n	800436c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004364:	4610      	mov	r0, r2
 8004366:	4798      	blx	r3
 8004368:	e000      	b.n	800436c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800436a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d03e      	beq.n	80043f4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b04      	cmp	r3, #4
 8004382:	d112      	bne.n	80043aa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b4:	2b40      	cmp	r3, #64	; 0x40
 80043b6:	d112      	bne.n	80043de <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	f043 0204 	orr.w	r2, r3, #4
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f843 	bl	8004488 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004402:	e039      	b.n	8004478 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2b2a      	cmp	r3, #42	; 0x2a
 8004408:	d109      	bne.n	800441e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2228      	movs	r2, #40	; 0x28
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff f828 	bl	800346e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b28      	cmp	r3, #40	; 0x28
 8004428:	d111      	bne.n	800444e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a15      	ldr	r2, [pc, #84]	; (8004484 <I2C_Slave_STOPF+0x25c>)
 800442e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff f829 	bl	800349e <HAL_I2C_ListenCpltCallback>
}
 800444c:	e014      	b.n	8004478 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	2b22      	cmp	r3, #34	; 0x22
 8004454:	d002      	beq.n	800445c <I2C_Slave_STOPF+0x234>
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	2b22      	cmp	r3, #34	; 0x22
 800445a:	d10d      	bne.n	8004478 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fe fffb 	bl	800346e <HAL_I2C_SlaveRxCpltCallback>
}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	08004a15 	.word	0x08004a15
 8004484:	ffff0000 	.word	0xffff0000

08004488 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004496:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800449e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044a0:	7bbb      	ldrb	r3, [r7, #14]
 80044a2:	2b10      	cmp	r3, #16
 80044a4:	d002      	beq.n	80044ac <I2C_ITError+0x24>
 80044a6:	7bbb      	ldrb	r3, [r7, #14]
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d10a      	bne.n	80044c2 <I2C_ITError+0x3a>
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b22      	cmp	r3, #34	; 0x22
 80044b0:	d107      	bne.n	80044c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044c8:	2b28      	cmp	r3, #40	; 0x28
 80044ca:	d107      	bne.n	80044dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2228      	movs	r2, #40	; 0x28
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044da:	e015      	b.n	8004508 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ea:	d00a      	beq.n	8004502 <I2C_ITError+0x7a>
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b60      	cmp	r3, #96	; 0x60
 80044f0:	d007      	beq.n	8004502 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004516:	d162      	bne.n	80045de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004526:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d020      	beq.n	8004578 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453a:	4a6a      	ldr	r2, [pc, #424]	; (80046e4 <I2C_ITError+0x25c>)
 800453c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004542:	4618      	mov	r0, r3
 8004544:	f7fd fd50 	bl	8001fe8 <HAL_DMA_Abort_IT>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 8089 	beq.w	8004662 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004572:	4610      	mov	r0, r2
 8004574:	4798      	blx	r3
 8004576:	e074      	b.n	8004662 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	4a59      	ldr	r2, [pc, #356]	; (80046e4 <I2C_ITError+0x25c>)
 800457e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	4618      	mov	r0, r3
 8004586:	f7fd fd2f 	bl	8001fe8 <HAL_DMA_Abort_IT>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d068      	beq.n	8004662 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459a:	2b40      	cmp	r3, #64	; 0x40
 800459c:	d10b      	bne.n	80045b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0201 	bic.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045d8:	4610      	mov	r0, r2
 80045da:	4798      	blx	r3
 80045dc:	e041      	b.n	8004662 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b60      	cmp	r3, #96	; 0x60
 80045e8:	d125      	bne.n	8004636 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b40      	cmp	r3, #64	; 0x40
 8004604:	d10b      	bne.n	800461e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fe ff5d 	bl	80034ee <HAL_I2C_AbortCpltCallback>
 8004634:	e015      	b.n	8004662 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d10b      	bne.n	800465c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7fe ff3c 	bl	80034da <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10e      	bne.n	8004690 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004678:	2b00      	cmp	r3, #0
 800467a:	d109      	bne.n	8004690 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004682:	2b00      	cmp	r3, #0
 8004684:	d104      	bne.n	8004690 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800468c:	2b00      	cmp	r3, #0
 800468e:	d007      	beq.n	80046a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800469e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d113      	bne.n	80046dc <I2C_ITError+0x254>
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b28      	cmp	r3, #40	; 0x28
 80046b8:	d110      	bne.n	80046dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a0a      	ldr	r2, [pc, #40]	; (80046e8 <I2C_ITError+0x260>)
 80046be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fe fee1 	bl	800349e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	08004a15 	.word	0x08004a15
 80046e8:	ffff0000 	.word	0xffff0000

080046ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	460b      	mov	r3, r1
 80046fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b08      	cmp	r3, #8
 8004706:	d006      	beq.n	8004716 <I2C_MasterRequestWrite+0x2a>
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d003      	beq.n	8004716 <I2C_MasterRequestWrite+0x2a>
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004714:	d108      	bne.n	8004728 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e00b      	b.n	8004740 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	2b12      	cmp	r3, #18
 800472e:	d107      	bne.n	8004740 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800473e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fa09 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00d      	beq.n	8004774 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004766:	d103      	bne.n	8004770 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800476e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e035      	b.n	80047e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800477c:	d108      	bne.n	8004790 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800477e:	897b      	ldrh	r3, [r7, #10]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800478c:	611a      	str	r2, [r3, #16]
 800478e:	e01b      	b.n	80047c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004790:	897b      	ldrh	r3, [r7, #10]
 8004792:	11db      	asrs	r3, r3, #7
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 0306 	and.w	r3, r3, #6
 800479a:	b2db      	uxtb	r3, r3
 800479c:	f063 030f 	orn	r3, r3, #15
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	490e      	ldr	r1, [pc, #56]	; (80047e8 <I2C_MasterRequestWrite+0xfc>)
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fa2f 	bl	8004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e010      	b.n	80047e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047be:	897b      	ldrh	r3, [r7, #10]
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	4907      	ldr	r1, [pc, #28]	; (80047ec <I2C_MasterRequestWrite+0x100>)
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 fa1f 	bl	8004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	00010008 	.word	0x00010008
 80047ec:	00010002 	.word	0x00010002

080047f0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004804:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800480c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004822:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004830:	2200      	movs	r2, #0
 8004832:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	2200      	movs	r2, #0
 8004842:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004844:	7cfb      	ldrb	r3, [r7, #19]
 8004846:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800484a:	2b21      	cmp	r3, #33	; 0x21
 800484c:	d007      	beq.n	800485e <I2C_DMAXferCplt+0x6e>
 800484e:	7cfb      	ldrb	r3, [r7, #19]
 8004850:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004854:	2b22      	cmp	r3, #34	; 0x22
 8004856:	d131      	bne.n	80048bc <I2C_DMAXferCplt+0xcc>
 8004858:	7cbb      	ldrb	r3, [r7, #18]
 800485a:	2b20      	cmp	r3, #32
 800485c:	d12e      	bne.n	80048bc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800486c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2200      	movs	r2, #0
 8004872:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004874:	7cfb      	ldrb	r3, [r7, #19]
 8004876:	2b29      	cmp	r3, #41	; 0x29
 8004878:	d10a      	bne.n	8004890 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2221      	movs	r2, #33	; 0x21
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2228      	movs	r2, #40	; 0x28
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004888:	6978      	ldr	r0, [r7, #20]
 800488a:	f7fe fde6 	bl	800345a <HAL_I2C_SlaveTxCpltCallback>
 800488e:	e00c      	b.n	80048aa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004890:	7cfb      	ldrb	r3, [r7, #19]
 8004892:	2b2a      	cmp	r3, #42	; 0x2a
 8004894:	d109      	bne.n	80048aa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2222      	movs	r2, #34	; 0x22
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2228      	movs	r2, #40	; 0x28
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048a4:	6978      	ldr	r0, [r7, #20]
 80048a6:	f7fe fde2 	bl	800346e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80048b8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80048ba:	e06a      	b.n	8004992 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d064      	beq.n	8004992 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d107      	bne.n	80048e2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80048f0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048f8:	d009      	beq.n	800490e <I2C_DMAXferCplt+0x11e>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d006      	beq.n	800490e <I2C_DMAXferCplt+0x11e>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004906:	d002      	beq.n	800490e <I2C_DMAXferCplt+0x11e>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b20      	cmp	r3, #32
 800490c:	d107      	bne.n	800491e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800491c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800492c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800493c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2200      	movs	r2, #0
 8004942:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800494c:	6978      	ldr	r0, [r7, #20]
 800494e:	f7fe fdc4 	bl	80034da <HAL_I2C_ErrorCallback>
}
 8004952:	e01e      	b.n	8004992 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d10a      	bne.n	800497e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2200      	movs	r2, #0
 8004974:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004976:	6978      	ldr	r0, [r7, #20]
 8004978:	f7fe fda5 	bl	80034c6 <HAL_I2C_MemRxCpltCallback>
}
 800497c:	e009      	b.n	8004992 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2212      	movs	r2, #18
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800498c:	6978      	ldr	r0, [r7, #20]
 800498e:	f7fc faa9 	bl	8000ee4 <HAL_I2C_MasterRxCpltCallback>
}
 8004992:	bf00      	nop
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b4:	2200      	movs	r2, #0
 80049b6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	2200      	movs	r2, #0
 80049c6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7fd fcc7 	bl	800235c <HAL_DMA_GetError>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d01b      	beq.n	8004a0c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f043 0210 	orr.w	r2, r3, #16
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7fe fd67 	bl	80034da <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a2e:	4b4b      	ldr	r3, [pc, #300]	; (8004b5c <I2C_DMAAbort+0x148>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	08db      	lsrs	r3, r3, #3
 8004a34:	4a4a      	ldr	r2, [pc, #296]	; (8004b60 <I2C_DMAAbort+0x14c>)
 8004a36:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3a:	0a1a      	lsrs	r2, r3, #8
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	00da      	lsls	r2, r3, #3
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f043 0220 	orr.w	r2, r3, #32
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004a5a:	e00a      	b.n	8004a72 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a70:	d0ea      	beq.n	8004a48 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	2200      	movs	r2, #0
 8004a80:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	2200      	movs	r2, #0
 8004a90:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b60      	cmp	r3, #96	; 0x60
 8004ae2:	d10e      	bne.n	8004b02 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2200      	movs	r2, #0
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004afa:	6978      	ldr	r0, [r7, #20]
 8004afc:	f7fe fcf7 	bl	80034ee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b00:	e027      	b.n	8004b52 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b02:	7cfb      	ldrb	r3, [r7, #19]
 8004b04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b08:	2b28      	cmp	r3, #40	; 0x28
 8004b0a:	d117      	bne.n	8004b3c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2228      	movs	r2, #40	; 0x28
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b3a:	e007      	b.n	8004b4c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004b4c:	6978      	ldr	r0, [r7, #20]
 8004b4e:	f7fe fcc4 	bl	80034da <HAL_I2C_ErrorCallback>
}
 8004b52:	bf00      	nop
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000004 	.word	0x20000004
 8004b60:	14f8b589 	.word	0x14f8b589

08004b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b74:	e025      	b.n	8004bc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d021      	beq.n	8004bc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7e:	f7fc ff9f 	bl	8001ac0 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d302      	bcc.n	8004b94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d116      	bne.n	8004bc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f043 0220 	orr.w	r2, r3, #32
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e023      	b.n	8004c0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	0c1b      	lsrs	r3, r3, #16
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d10d      	bne.n	8004be8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	43da      	mvns	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	bf0c      	ite	eq
 8004bde:	2301      	moveq	r3, #1
 8004be0:	2300      	movne	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	e00c      	b.n	8004c02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	43da      	mvns	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	bf0c      	ite	eq
 8004bfa:	2301      	moveq	r3, #1
 8004bfc:	2300      	movne	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d0b6      	beq.n	8004b76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c20:	e051      	b.n	8004cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c30:	d123      	bne.n	8004c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f043 0204 	orr.w	r2, r3, #4
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e046      	b.n	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c80:	d021      	beq.n	8004cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c82:	f7fc ff1d 	bl	8001ac0 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d302      	bcc.n	8004c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d116      	bne.n	8004cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f043 0220 	orr.w	r2, r3, #32
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e020      	b.n	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	0c1b      	lsrs	r3, r3, #16
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d10c      	bne.n	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	43da      	mvns	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bf14      	ite	ne
 8004ce2:	2301      	movne	r3, #1
 8004ce4:	2300      	moveq	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	e00b      	b.n	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	43da      	mvns	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bf14      	ite	ne
 8004cfc:	2301      	movne	r3, #1
 8004cfe:	2300      	moveq	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d18d      	bne.n	8004c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d1c:	e02d      	b.n	8004d7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f8aa 	bl	8004e78 <I2C_IsAcknowledgeFailed>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e02d      	b.n	8004d8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d34:	d021      	beq.n	8004d7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d36:	f7fc fec3 	bl	8001ac0 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d302      	bcc.n	8004d4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d116      	bne.n	8004d7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f043 0220 	orr.w	r2, r3, #32
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e007      	b.n	8004d8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d84:	2b80      	cmp	r3, #128	; 0x80
 8004d86:	d1ca      	bne.n	8004d1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d9e:	e02d      	b.n	8004dfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f869 	bl	8004e78 <I2C_IsAcknowledgeFailed>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e02d      	b.n	8004e0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db6:	d021      	beq.n	8004dfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db8:	f7fc fe82 	bl	8001ac0 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d302      	bcc.n	8004dce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d116      	bne.n	8004dfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	f043 0220 	orr.w	r2, r3, #32
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e007      	b.n	8004e0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d1ca      	bne.n	8004da0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e20:	4b13      	ldr	r3, [pc, #76]	; (8004e70 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	08db      	lsrs	r3, r3, #3
 8004e26:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e28:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2c:	0a1a      	lsrs	r2, r3, #8
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d107      	bne.n	8004e52 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f043 0220 	orr.w	r2, r3, #32
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e008      	b.n	8004e64 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e60:	d0e9      	beq.n	8004e36 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	20000004 	.word	0x20000004
 8004e74:	14f8b589 	.word	0x14f8b589

08004e78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8e:	d11b      	bne.n	8004ec8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	f043 0204 	orr.w	r2, r3, #4
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ee6:	d103      	bne.n	8004ef0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004eee:	e007      	b.n	8004f00 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ef8:	d102      	bne.n	8004f00 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2208      	movs	r2, #8
 8004efe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e267      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d075      	beq.n	8005016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f2a:	4b88      	ldr	r3, [pc, #544]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d00c      	beq.n	8004f50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f36:	4b85      	ldr	r3, [pc, #532]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d112      	bne.n	8004f68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f42:	4b82      	ldr	r3, [pc, #520]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f4e:	d10b      	bne.n	8004f68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f50:	4b7e      	ldr	r3, [pc, #504]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d05b      	beq.n	8005014 <HAL_RCC_OscConfig+0x108>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d157      	bne.n	8005014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e242      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f70:	d106      	bne.n	8004f80 <HAL_RCC_OscConfig+0x74>
 8004f72:	4b76      	ldr	r3, [pc, #472]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a75      	ldr	r2, [pc, #468]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8004f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	e01d      	b.n	8004fbc <HAL_RCC_OscConfig+0xb0>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f88:	d10c      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x98>
 8004f8a:	4b70      	ldr	r3, [pc, #448]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a6f      	ldr	r2, [pc, #444]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8004f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	4b6d      	ldr	r3, [pc, #436]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a6c      	ldr	r2, [pc, #432]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8004f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	e00b      	b.n	8004fbc <HAL_RCC_OscConfig+0xb0>
 8004fa4:	4b69      	ldr	r3, [pc, #420]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a68      	ldr	r2, [pc, #416]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8004faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	4b66      	ldr	r3, [pc, #408]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a65      	ldr	r2, [pc, #404]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8004fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d013      	beq.n	8004fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc4:	f7fc fd7c 	bl	8001ac0 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fcc:	f7fc fd78 	bl	8001ac0 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b64      	cmp	r3, #100	; 0x64
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e207      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fde:	4b5b      	ldr	r3, [pc, #364]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0xc0>
 8004fea:	e014      	b.n	8005016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fec:	f7fc fd68 	bl	8001ac0 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff4:	f7fc fd64 	bl	8001ac0 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b64      	cmp	r3, #100	; 0x64
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e1f3      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005006:	4b51      	ldr	r3, [pc, #324]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f0      	bne.n	8004ff4 <HAL_RCC_OscConfig+0xe8>
 8005012:	e000      	b.n	8005016 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d063      	beq.n	80050ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005022:	4b4a      	ldr	r3, [pc, #296]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 030c 	and.w	r3, r3, #12
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00b      	beq.n	8005046 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800502e:	4b47      	ldr	r3, [pc, #284]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005036:	2b08      	cmp	r3, #8
 8005038:	d11c      	bne.n	8005074 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800503a:	4b44      	ldr	r3, [pc, #272]	; (800514c <HAL_RCC_OscConfig+0x240>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d116      	bne.n	8005074 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005046:	4b41      	ldr	r3, [pc, #260]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <HAL_RCC_OscConfig+0x152>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d001      	beq.n	800505e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e1c7      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800505e:	4b3b      	ldr	r3, [pc, #236]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	4937      	ldr	r1, [pc, #220]	; (800514c <HAL_RCC_OscConfig+0x240>)
 800506e:	4313      	orrs	r3, r2
 8005070:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005072:	e03a      	b.n	80050ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d020      	beq.n	80050be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800507c:	4b34      	ldr	r3, [pc, #208]	; (8005150 <HAL_RCC_OscConfig+0x244>)
 800507e:	2201      	movs	r2, #1
 8005080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005082:	f7fc fd1d 	bl	8001ac0 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800508a:	f7fc fd19 	bl	8001ac0 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e1a8      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509c:	4b2b      	ldr	r3, [pc, #172]	; (800514c <HAL_RCC_OscConfig+0x240>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0f0      	beq.n	800508a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a8:	4b28      	ldr	r3, [pc, #160]	; (800514c <HAL_RCC_OscConfig+0x240>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	4925      	ldr	r1, [pc, #148]	; (800514c <HAL_RCC_OscConfig+0x240>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	600b      	str	r3, [r1, #0]
 80050bc:	e015      	b.n	80050ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <HAL_RCC_OscConfig+0x244>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c4:	f7fc fcfc 	bl	8001ac0 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050cc:	f7fc fcf8 	bl	8001ac0 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e187      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050de:	4b1b      	ldr	r3, [pc, #108]	; (800514c <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1f0      	bne.n	80050cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0308 	and.w	r3, r3, #8
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d036      	beq.n	8005164 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d016      	beq.n	800512c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050fe:	4b15      	ldr	r3, [pc, #84]	; (8005154 <HAL_RCC_OscConfig+0x248>)
 8005100:	2201      	movs	r2, #1
 8005102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005104:	f7fc fcdc 	bl	8001ac0 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800510c:	f7fc fcd8 	bl	8001ac0 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e167      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <HAL_RCC_OscConfig+0x240>)
 8005120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0x200>
 800512a:	e01b      	b.n	8005164 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800512c:	4b09      	ldr	r3, [pc, #36]	; (8005154 <HAL_RCC_OscConfig+0x248>)
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005132:	f7fc fcc5 	bl	8001ac0 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005138:	e00e      	b.n	8005158 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800513a:	f7fc fcc1 	bl	8001ac0 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d907      	bls.n	8005158 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e150      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
 800514c:	40023800 	.word	0x40023800
 8005150:	42470000 	.word	0x42470000
 8005154:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005158:	4b88      	ldr	r3, [pc, #544]	; (800537c <HAL_RCC_OscConfig+0x470>)
 800515a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1ea      	bne.n	800513a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 8097 	beq.w	80052a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005172:	2300      	movs	r3, #0
 8005174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005176:	4b81      	ldr	r3, [pc, #516]	; (800537c <HAL_RCC_OscConfig+0x470>)
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10f      	bne.n	80051a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	4b7d      	ldr	r3, [pc, #500]	; (800537c <HAL_RCC_OscConfig+0x470>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	4a7c      	ldr	r2, [pc, #496]	; (800537c <HAL_RCC_OscConfig+0x470>)
 800518c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005190:	6413      	str	r3, [r2, #64]	; 0x40
 8005192:	4b7a      	ldr	r3, [pc, #488]	; (800537c <HAL_RCC_OscConfig+0x470>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	60bb      	str	r3, [r7, #8]
 800519c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800519e:	2301      	movs	r3, #1
 80051a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a2:	4b77      	ldr	r3, [pc, #476]	; (8005380 <HAL_RCC_OscConfig+0x474>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d118      	bne.n	80051e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ae:	4b74      	ldr	r3, [pc, #464]	; (8005380 <HAL_RCC_OscConfig+0x474>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a73      	ldr	r2, [pc, #460]	; (8005380 <HAL_RCC_OscConfig+0x474>)
 80051b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ba:	f7fc fc81 	bl	8001ac0 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c2:	f7fc fc7d 	bl	8001ac0 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e10c      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d4:	4b6a      	ldr	r3, [pc, #424]	; (8005380 <HAL_RCC_OscConfig+0x474>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0f0      	beq.n	80051c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d106      	bne.n	80051f6 <HAL_RCC_OscConfig+0x2ea>
 80051e8:	4b64      	ldr	r3, [pc, #400]	; (800537c <HAL_RCC_OscConfig+0x470>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ec:	4a63      	ldr	r2, [pc, #396]	; (800537c <HAL_RCC_OscConfig+0x470>)
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	6713      	str	r3, [r2, #112]	; 0x70
 80051f4:	e01c      	b.n	8005230 <HAL_RCC_OscConfig+0x324>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b05      	cmp	r3, #5
 80051fc:	d10c      	bne.n	8005218 <HAL_RCC_OscConfig+0x30c>
 80051fe:	4b5f      	ldr	r3, [pc, #380]	; (800537c <HAL_RCC_OscConfig+0x470>)
 8005200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005202:	4a5e      	ldr	r2, [pc, #376]	; (800537c <HAL_RCC_OscConfig+0x470>)
 8005204:	f043 0304 	orr.w	r3, r3, #4
 8005208:	6713      	str	r3, [r2, #112]	; 0x70
 800520a:	4b5c      	ldr	r3, [pc, #368]	; (800537c <HAL_RCC_OscConfig+0x470>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	4a5b      	ldr	r2, [pc, #364]	; (800537c <HAL_RCC_OscConfig+0x470>)
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	6713      	str	r3, [r2, #112]	; 0x70
 8005216:	e00b      	b.n	8005230 <HAL_RCC_OscConfig+0x324>
 8005218:	4b58      	ldr	r3, [pc, #352]	; (800537c <HAL_RCC_OscConfig+0x470>)
 800521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521c:	4a57      	ldr	r2, [pc, #348]	; (800537c <HAL_RCC_OscConfig+0x470>)
 800521e:	f023 0301 	bic.w	r3, r3, #1
 8005222:	6713      	str	r3, [r2, #112]	; 0x70
 8005224:	4b55      	ldr	r3, [pc, #340]	; (800537c <HAL_RCC_OscConfig+0x470>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005228:	4a54      	ldr	r2, [pc, #336]	; (800537c <HAL_RCC_OscConfig+0x470>)
 800522a:	f023 0304 	bic.w	r3, r3, #4
 800522e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d015      	beq.n	8005264 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005238:	f7fc fc42 	bl	8001ac0 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800523e:	e00a      	b.n	8005256 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005240:	f7fc fc3e 	bl	8001ac0 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	f241 3288 	movw	r2, #5000	; 0x1388
 800524e:	4293      	cmp	r3, r2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e0cb      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005256:	4b49      	ldr	r3, [pc, #292]	; (800537c <HAL_RCC_OscConfig+0x470>)
 8005258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0ee      	beq.n	8005240 <HAL_RCC_OscConfig+0x334>
 8005262:	e014      	b.n	800528e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005264:	f7fc fc2c 	bl	8001ac0 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800526a:	e00a      	b.n	8005282 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800526c:	f7fc fc28 	bl	8001ac0 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f241 3288 	movw	r2, #5000	; 0x1388
 800527a:	4293      	cmp	r3, r2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e0b5      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005282:	4b3e      	ldr	r3, [pc, #248]	; (800537c <HAL_RCC_OscConfig+0x470>)
 8005284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1ee      	bne.n	800526c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800528e:	7dfb      	ldrb	r3, [r7, #23]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d105      	bne.n	80052a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005294:	4b39      	ldr	r3, [pc, #228]	; (800537c <HAL_RCC_OscConfig+0x470>)
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	4a38      	ldr	r2, [pc, #224]	; (800537c <HAL_RCC_OscConfig+0x470>)
 800529a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800529e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80a1 	beq.w	80053ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052aa:	4b34      	ldr	r3, [pc, #208]	; (800537c <HAL_RCC_OscConfig+0x470>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d05c      	beq.n	8005370 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d141      	bne.n	8005342 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052be:	4b31      	ldr	r3, [pc, #196]	; (8005384 <HAL_RCC_OscConfig+0x478>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c4:	f7fc fbfc 	bl	8001ac0 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052cc:	f7fc fbf8 	bl	8001ac0 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e087      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052de:	4b27      	ldr	r3, [pc, #156]	; (800537c <HAL_RCC_OscConfig+0x470>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f0      	bne.n	80052cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	019b      	lsls	r3, r3, #6
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	085b      	lsrs	r3, r3, #1
 8005302:	3b01      	subs	r3, #1
 8005304:	041b      	lsls	r3, r3, #16
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	061b      	lsls	r3, r3, #24
 800530e:	491b      	ldr	r1, [pc, #108]	; (800537c <HAL_RCC_OscConfig+0x470>)
 8005310:	4313      	orrs	r3, r2
 8005312:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005314:	4b1b      	ldr	r3, [pc, #108]	; (8005384 <HAL_RCC_OscConfig+0x478>)
 8005316:	2201      	movs	r2, #1
 8005318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531a:	f7fc fbd1 	bl	8001ac0 <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005322:	f7fc fbcd 	bl	8001ac0 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e05c      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005334:	4b11      	ldr	r3, [pc, #68]	; (800537c <HAL_RCC_OscConfig+0x470>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f0      	beq.n	8005322 <HAL_RCC_OscConfig+0x416>
 8005340:	e054      	b.n	80053ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005342:	4b10      	ldr	r3, [pc, #64]	; (8005384 <HAL_RCC_OscConfig+0x478>)
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005348:	f7fc fbba 	bl	8001ac0 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005350:	f7fc fbb6 	bl	8001ac0 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e045      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005362:	4b06      	ldr	r3, [pc, #24]	; (800537c <HAL_RCC_OscConfig+0x470>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0x444>
 800536e:	e03d      	b.n	80053ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d107      	bne.n	8005388 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e038      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
 800537c:	40023800 	.word	0x40023800
 8005380:	40007000 	.word	0x40007000
 8005384:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005388:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <HAL_RCC_OscConfig+0x4ec>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d028      	beq.n	80053e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d121      	bne.n	80053e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d11a      	bne.n	80053e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053b8:	4013      	ands	r3, r2
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d111      	bne.n	80053e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	085b      	lsrs	r3, r3, #1
 80053d0:	3b01      	subs	r3, #1
 80053d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d107      	bne.n	80053e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d001      	beq.n	80053ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e000      	b.n	80053ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	40023800 	.word	0x40023800

080053fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e0cc      	b.n	80055aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005410:	4b68      	ldr	r3, [pc, #416]	; (80055b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d90c      	bls.n	8005438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541e:	4b65      	ldr	r3, [pc, #404]	; (80055b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005426:	4b63      	ldr	r3, [pc, #396]	; (80055b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d001      	beq.n	8005438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e0b8      	b.n	80055aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d020      	beq.n	8005486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d005      	beq.n	800545c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005450:	4b59      	ldr	r3, [pc, #356]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	4a58      	ldr	r2, [pc, #352]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800545a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005468:	4b53      	ldr	r3, [pc, #332]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	4a52      	ldr	r2, [pc, #328]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005474:	4b50      	ldr	r3, [pc, #320]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	494d      	ldr	r1, [pc, #308]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	4313      	orrs	r3, r2
 8005484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d044      	beq.n	800551c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d107      	bne.n	80054aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549a:	4b47      	ldr	r3, [pc, #284]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d119      	bne.n	80054da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e07f      	b.n	80055aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d003      	beq.n	80054ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d107      	bne.n	80054ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ba:	4b3f      	ldr	r3, [pc, #252]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e06f      	b.n	80055aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ca:	4b3b      	ldr	r3, [pc, #236]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e067      	b.n	80055aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054da:	4b37      	ldr	r3, [pc, #220]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f023 0203 	bic.w	r2, r3, #3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	4934      	ldr	r1, [pc, #208]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054ec:	f7fc fae8 	bl	8001ac0 <HAL_GetTick>
 80054f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f2:	e00a      	b.n	800550a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054f4:	f7fc fae4 	bl	8001ac0 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005502:	4293      	cmp	r3, r2
 8005504:	d901      	bls.n	800550a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e04f      	b.n	80055aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550a:	4b2b      	ldr	r3, [pc, #172]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 020c 	and.w	r2, r3, #12
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	429a      	cmp	r2, r3
 800551a:	d1eb      	bne.n	80054f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800551c:	4b25      	ldr	r3, [pc, #148]	; (80055b4 <HAL_RCC_ClockConfig+0x1b8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d20c      	bcs.n	8005544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552a:	4b22      	ldr	r3, [pc, #136]	; (80055b4 <HAL_RCC_ClockConfig+0x1b8>)
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005532:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d001      	beq.n	8005544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e032      	b.n	80055aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005550:	4b19      	ldr	r3, [pc, #100]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4916      	ldr	r1, [pc, #88]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	4313      	orrs	r3, r2
 8005560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d009      	beq.n	8005582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	490e      	ldr	r1, [pc, #56]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	4313      	orrs	r3, r2
 8005580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005582:	f000 f821 	bl	80055c8 <HAL_RCC_GetSysClockFreq>
 8005586:	4602      	mov	r2, r0
 8005588:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	490a      	ldr	r1, [pc, #40]	; (80055bc <HAL_RCC_ClockConfig+0x1c0>)
 8005594:	5ccb      	ldrb	r3, [r1, r3]
 8005596:	fa22 f303 	lsr.w	r3, r2, r3
 800559a:	4a09      	ldr	r2, [pc, #36]	; (80055c0 <HAL_RCC_ClockConfig+0x1c4>)
 800559c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800559e:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <HAL_RCC_ClockConfig+0x1c8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fc fa48 	bl	8001a38 <HAL_InitTick>

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40023c00 	.word	0x40023c00
 80055b8:	40023800 	.word	0x40023800
 80055bc:	0800a110 	.word	0x0800a110
 80055c0:	20000004 	.word	0x20000004
 80055c4:	20000008 	.word	0x20000008

080055c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055cc:	b094      	sub	sp, #80	; 0x50
 80055ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	647b      	str	r3, [r7, #68]	; 0x44
 80055d4:	2300      	movs	r3, #0
 80055d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055d8:	2300      	movs	r3, #0
 80055da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055e0:	4b79      	ldr	r3, [pc, #484]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 030c 	and.w	r3, r3, #12
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d00d      	beq.n	8005608 <HAL_RCC_GetSysClockFreq+0x40>
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	f200 80e1 	bhi.w	80057b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_RCC_GetSysClockFreq+0x34>
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d003      	beq.n	8005602 <HAL_RCC_GetSysClockFreq+0x3a>
 80055fa:	e0db      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055fc:	4b73      	ldr	r3, [pc, #460]	; (80057cc <HAL_RCC_GetSysClockFreq+0x204>)
 80055fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005600:	e0db      	b.n	80057ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005602:	4b73      	ldr	r3, [pc, #460]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005604:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005606:	e0d8      	b.n	80057ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005608:	4b6f      	ldr	r3, [pc, #444]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005610:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005612:	4b6d      	ldr	r3, [pc, #436]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d063      	beq.n	80056e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800561e:	4b6a      	ldr	r3, [pc, #424]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	099b      	lsrs	r3, r3, #6
 8005624:	2200      	movs	r2, #0
 8005626:	63bb      	str	r3, [r7, #56]	; 0x38
 8005628:	63fa      	str	r2, [r7, #60]	; 0x3c
 800562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005630:	633b      	str	r3, [r7, #48]	; 0x30
 8005632:	2300      	movs	r3, #0
 8005634:	637b      	str	r3, [r7, #52]	; 0x34
 8005636:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800563a:	4622      	mov	r2, r4
 800563c:	462b      	mov	r3, r5
 800563e:	f04f 0000 	mov.w	r0, #0
 8005642:	f04f 0100 	mov.w	r1, #0
 8005646:	0159      	lsls	r1, r3, #5
 8005648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800564c:	0150      	lsls	r0, r2, #5
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4621      	mov	r1, r4
 8005654:	1a51      	subs	r1, r2, r1
 8005656:	6139      	str	r1, [r7, #16]
 8005658:	4629      	mov	r1, r5
 800565a:	eb63 0301 	sbc.w	r3, r3, r1
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800566c:	4659      	mov	r1, fp
 800566e:	018b      	lsls	r3, r1, #6
 8005670:	4651      	mov	r1, sl
 8005672:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005676:	4651      	mov	r1, sl
 8005678:	018a      	lsls	r2, r1, #6
 800567a:	4651      	mov	r1, sl
 800567c:	ebb2 0801 	subs.w	r8, r2, r1
 8005680:	4659      	mov	r1, fp
 8005682:	eb63 0901 	sbc.w	r9, r3, r1
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800569a:	4690      	mov	r8, r2
 800569c:	4699      	mov	r9, r3
 800569e:	4623      	mov	r3, r4
 80056a0:	eb18 0303 	adds.w	r3, r8, r3
 80056a4:	60bb      	str	r3, [r7, #8]
 80056a6:	462b      	mov	r3, r5
 80056a8:	eb49 0303 	adc.w	r3, r9, r3
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056ba:	4629      	mov	r1, r5
 80056bc:	024b      	lsls	r3, r1, #9
 80056be:	4621      	mov	r1, r4
 80056c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056c4:	4621      	mov	r1, r4
 80056c6:	024a      	lsls	r2, r1, #9
 80056c8:	4610      	mov	r0, r2
 80056ca:	4619      	mov	r1, r3
 80056cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ce:	2200      	movs	r2, #0
 80056d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056d8:	f7fb fa6e 	bl	8000bb8 <__aeabi_uldivmod>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4613      	mov	r3, r2
 80056e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e4:	e058      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056e6:	4b38      	ldr	r3, [pc, #224]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	099b      	lsrs	r3, r3, #6
 80056ec:	2200      	movs	r2, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	4611      	mov	r1, r2
 80056f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056f6:	623b      	str	r3, [r7, #32]
 80056f8:	2300      	movs	r3, #0
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
 80056fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005700:	4642      	mov	r2, r8
 8005702:	464b      	mov	r3, r9
 8005704:	f04f 0000 	mov.w	r0, #0
 8005708:	f04f 0100 	mov.w	r1, #0
 800570c:	0159      	lsls	r1, r3, #5
 800570e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005712:	0150      	lsls	r0, r2, #5
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4641      	mov	r1, r8
 800571a:	ebb2 0a01 	subs.w	sl, r2, r1
 800571e:	4649      	mov	r1, r9
 8005720:	eb63 0b01 	sbc.w	fp, r3, r1
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005730:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005734:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005738:	ebb2 040a 	subs.w	r4, r2, sl
 800573c:	eb63 050b 	sbc.w	r5, r3, fp
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	f04f 0300 	mov.w	r3, #0
 8005748:	00eb      	lsls	r3, r5, #3
 800574a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800574e:	00e2      	lsls	r2, r4, #3
 8005750:	4614      	mov	r4, r2
 8005752:	461d      	mov	r5, r3
 8005754:	4643      	mov	r3, r8
 8005756:	18e3      	adds	r3, r4, r3
 8005758:	603b      	str	r3, [r7, #0]
 800575a:	464b      	mov	r3, r9
 800575c:	eb45 0303 	adc.w	r3, r5, r3
 8005760:	607b      	str	r3, [r7, #4]
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f04f 0300 	mov.w	r3, #0
 800576a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800576e:	4629      	mov	r1, r5
 8005770:	028b      	lsls	r3, r1, #10
 8005772:	4621      	mov	r1, r4
 8005774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005778:	4621      	mov	r1, r4
 800577a:	028a      	lsls	r2, r1, #10
 800577c:	4610      	mov	r0, r2
 800577e:	4619      	mov	r1, r3
 8005780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005782:	2200      	movs	r2, #0
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	61fa      	str	r2, [r7, #28]
 8005788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800578c:	f7fb fa14 	bl	8000bb8 <__aeabi_uldivmod>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4613      	mov	r3, r2
 8005796:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	3301      	adds	r3, #1
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80057a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057b2:	e002      	b.n	80057ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <HAL_RCC_GetSysClockFreq+0x204>)
 80057b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3750      	adds	r7, #80	; 0x50
 80057c0:	46bd      	mov	sp, r7
 80057c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057c6:	bf00      	nop
 80057c8:	40023800 	.word	0x40023800
 80057cc:	00f42400 	.word	0x00f42400
 80057d0:	007a1200 	.word	0x007a1200

080057d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057d8:	4b03      	ldr	r3, [pc, #12]	; (80057e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057da:	681b      	ldr	r3, [r3, #0]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	20000004 	.word	0x20000004

080057ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057f0:	f7ff fff0 	bl	80057d4 <HAL_RCC_GetHCLKFreq>
 80057f4:	4602      	mov	r2, r0
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <HAL_RCC_GetPCLK1Freq+0x20>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	0a9b      	lsrs	r3, r3, #10
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	4903      	ldr	r1, [pc, #12]	; (8005810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005802:	5ccb      	ldrb	r3, [r1, r3]
 8005804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005808:	4618      	mov	r0, r3
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40023800 	.word	0x40023800
 8005810:	0800a120 	.word	0x0800a120

08005814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005818:	f7ff ffdc 	bl	80057d4 <HAL_RCC_GetHCLKFreq>
 800581c:	4602      	mov	r2, r0
 800581e:	4b05      	ldr	r3, [pc, #20]	; (8005834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	0b5b      	lsrs	r3, r3, #13
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	4903      	ldr	r1, [pc, #12]	; (8005838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800582a:	5ccb      	ldrb	r3, [r1, r3]
 800582c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005830:	4618      	mov	r0, r3
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40023800 	.word	0x40023800
 8005838:	0800a120 	.word	0x0800a120

0800583c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e041      	b.n	80058d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fb feb6 	bl	80015d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3304      	adds	r3, #4
 8005878:	4619      	mov	r1, r3
 800587a:	4610      	mov	r0, r2
 800587c:	f000 fa88 	bl	8005d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d001      	beq.n	80058f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e044      	b.n	800597e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1e      	ldr	r2, [pc, #120]	; (800598c <HAL_TIM_Base_Start_IT+0xb0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d018      	beq.n	8005948 <HAL_TIM_Base_Start_IT+0x6c>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591e:	d013      	beq.n	8005948 <HAL_TIM_Base_Start_IT+0x6c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1a      	ldr	r2, [pc, #104]	; (8005990 <HAL_TIM_Base_Start_IT+0xb4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00e      	beq.n	8005948 <HAL_TIM_Base_Start_IT+0x6c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a19      	ldr	r2, [pc, #100]	; (8005994 <HAL_TIM_Base_Start_IT+0xb8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d009      	beq.n	8005948 <HAL_TIM_Base_Start_IT+0x6c>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a17      	ldr	r2, [pc, #92]	; (8005998 <HAL_TIM_Base_Start_IT+0xbc>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d004      	beq.n	8005948 <HAL_TIM_Base_Start_IT+0x6c>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a16      	ldr	r2, [pc, #88]	; (800599c <HAL_TIM_Base_Start_IT+0xc0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d111      	bne.n	800596c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b06      	cmp	r3, #6
 8005958:	d010      	beq.n	800597c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0201 	orr.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596a:	e007      	b.n	800597c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0201 	orr.w	r2, r2, #1
 800597a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40010000 	.word	0x40010000
 8005990:	40000400 	.word	0x40000400
 8005994:	40000800 	.word	0x40000800
 8005998:	40000c00 	.word	0x40000c00
 800599c:	40014000 	.word	0x40014000

080059a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d122      	bne.n	80059fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d11b      	bne.n	80059fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0202 	mvn.w	r2, #2
 80059cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f9b5 	bl	8005d52 <HAL_TIM_IC_CaptureCallback>
 80059e8:	e005      	b.n	80059f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f9a7 	bl	8005d3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f9b8 	bl	8005d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f003 0304 	and.w	r3, r3, #4
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d122      	bne.n	8005a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d11b      	bne.n	8005a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f06f 0204 	mvn.w	r2, #4
 8005a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2202      	movs	r2, #2
 8005a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f98b 	bl	8005d52 <HAL_TIM_IC_CaptureCallback>
 8005a3c:	e005      	b.n	8005a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f97d 	bl	8005d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f98e 	bl	8005d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d122      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d11b      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0208 	mvn.w	r2, #8
 8005a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2204      	movs	r2, #4
 8005a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f961 	bl	8005d52 <HAL_TIM_IC_CaptureCallback>
 8005a90:	e005      	b.n	8005a9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f953 	bl	8005d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f964 	bl	8005d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0310 	and.w	r3, r3, #16
 8005aae:	2b10      	cmp	r3, #16
 8005ab0:	d122      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b10      	cmp	r3, #16
 8005abe:	d11b      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0210 	mvn.w	r2, #16
 8005ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2208      	movs	r2, #8
 8005ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f937 	bl	8005d52 <HAL_TIM_IC_CaptureCallback>
 8005ae4:	e005      	b.n	8005af2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f929 	bl	8005d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f93a 	bl	8005d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d10e      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d107      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0201 	mvn.w	r2, #1
 8005b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fb fa42 	bl	8000fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2e:	2b80      	cmp	r3, #128	; 0x80
 8005b30:	d10e      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3c:	2b80      	cmp	r3, #128	; 0x80
 8005b3e:	d107      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fab2 	bl	80060b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5a:	2b40      	cmp	r3, #64	; 0x40
 8005b5c:	d10e      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d107      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f8ff 	bl	8005d7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	d10e      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0320 	and.w	r3, r3, #32
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	d107      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0220 	mvn.w	r2, #32
 8005ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fa7c 	bl	80060a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ba8:	bf00      	nop
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_TIM_ConfigClockSource+0x1c>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e0b4      	b.n	8005d36 <HAL_TIM_ConfigClockSource+0x186>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c04:	d03e      	beq.n	8005c84 <HAL_TIM_ConfigClockSource+0xd4>
 8005c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c0a:	f200 8087 	bhi.w	8005d1c <HAL_TIM_ConfigClockSource+0x16c>
 8005c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c12:	f000 8086 	beq.w	8005d22 <HAL_TIM_ConfigClockSource+0x172>
 8005c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1a:	d87f      	bhi.n	8005d1c <HAL_TIM_ConfigClockSource+0x16c>
 8005c1c:	2b70      	cmp	r3, #112	; 0x70
 8005c1e:	d01a      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0xa6>
 8005c20:	2b70      	cmp	r3, #112	; 0x70
 8005c22:	d87b      	bhi.n	8005d1c <HAL_TIM_ConfigClockSource+0x16c>
 8005c24:	2b60      	cmp	r3, #96	; 0x60
 8005c26:	d050      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x11a>
 8005c28:	2b60      	cmp	r3, #96	; 0x60
 8005c2a:	d877      	bhi.n	8005d1c <HAL_TIM_ConfigClockSource+0x16c>
 8005c2c:	2b50      	cmp	r3, #80	; 0x50
 8005c2e:	d03c      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0xfa>
 8005c30:	2b50      	cmp	r3, #80	; 0x50
 8005c32:	d873      	bhi.n	8005d1c <HAL_TIM_ConfigClockSource+0x16c>
 8005c34:	2b40      	cmp	r3, #64	; 0x40
 8005c36:	d058      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x13a>
 8005c38:	2b40      	cmp	r3, #64	; 0x40
 8005c3a:	d86f      	bhi.n	8005d1c <HAL_TIM_ConfigClockSource+0x16c>
 8005c3c:	2b30      	cmp	r3, #48	; 0x30
 8005c3e:	d064      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0x15a>
 8005c40:	2b30      	cmp	r3, #48	; 0x30
 8005c42:	d86b      	bhi.n	8005d1c <HAL_TIM_ConfigClockSource+0x16c>
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d060      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0x15a>
 8005c48:	2b20      	cmp	r3, #32
 8005c4a:	d867      	bhi.n	8005d1c <HAL_TIM_ConfigClockSource+0x16c>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d05c      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0x15a>
 8005c50:	2b10      	cmp	r3, #16
 8005c52:	d05a      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0x15a>
 8005c54:	e062      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6899      	ldr	r1, [r3, #8]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f000 f98d 	bl	8005f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	609a      	str	r2, [r3, #8]
      break;
 8005c82:	e04f      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	6899      	ldr	r1, [r3, #8]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f000 f976 	bl	8005f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ca6:	609a      	str	r2, [r3, #8]
      break;
 8005ca8:	e03c      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6859      	ldr	r1, [r3, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f000 f8ea 	bl	8005e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2150      	movs	r1, #80	; 0x50
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 f943 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 8005cc8:	e02c      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6859      	ldr	r1, [r3, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f000 f909 	bl	8005eee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2160      	movs	r1, #96	; 0x60
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 f933 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 8005ce8:	e01c      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6859      	ldr	r1, [r3, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f000 f8ca 	bl	8005e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2140      	movs	r1, #64	; 0x40
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 f923 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 8005d08:	e00c      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4619      	mov	r1, r3
 8005d14:	4610      	mov	r0, r2
 8005d16:	f000 f91a 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 8005d1a:	e003      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d20:	e000      	b.n	8005d24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
	...

08005d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a34      	ldr	r2, [pc, #208]	; (8005e74 <TIM_Base_SetConfig+0xe4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00f      	beq.n	8005dc8 <TIM_Base_SetConfig+0x38>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dae:	d00b      	beq.n	8005dc8 <TIM_Base_SetConfig+0x38>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a31      	ldr	r2, [pc, #196]	; (8005e78 <TIM_Base_SetConfig+0xe8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d007      	beq.n	8005dc8 <TIM_Base_SetConfig+0x38>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a30      	ldr	r2, [pc, #192]	; (8005e7c <TIM_Base_SetConfig+0xec>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_Base_SetConfig+0x38>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a2f      	ldr	r2, [pc, #188]	; (8005e80 <TIM_Base_SetConfig+0xf0>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d108      	bne.n	8005dda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a25      	ldr	r2, [pc, #148]	; (8005e74 <TIM_Base_SetConfig+0xe4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d01b      	beq.n	8005e1a <TIM_Base_SetConfig+0x8a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de8:	d017      	beq.n	8005e1a <TIM_Base_SetConfig+0x8a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a22      	ldr	r2, [pc, #136]	; (8005e78 <TIM_Base_SetConfig+0xe8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d013      	beq.n	8005e1a <TIM_Base_SetConfig+0x8a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <TIM_Base_SetConfig+0xec>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00f      	beq.n	8005e1a <TIM_Base_SetConfig+0x8a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a20      	ldr	r2, [pc, #128]	; (8005e80 <TIM_Base_SetConfig+0xf0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00b      	beq.n	8005e1a <TIM_Base_SetConfig+0x8a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1f      	ldr	r2, [pc, #124]	; (8005e84 <TIM_Base_SetConfig+0xf4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d007      	beq.n	8005e1a <TIM_Base_SetConfig+0x8a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a1e      	ldr	r2, [pc, #120]	; (8005e88 <TIM_Base_SetConfig+0xf8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d003      	beq.n	8005e1a <TIM_Base_SetConfig+0x8a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a1d      	ldr	r2, [pc, #116]	; (8005e8c <TIM_Base_SetConfig+0xfc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d108      	bne.n	8005e2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a08      	ldr	r2, [pc, #32]	; (8005e74 <TIM_Base_SetConfig+0xe4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d103      	bne.n	8005e60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	615a      	str	r2, [r3, #20]
}
 8005e66:	bf00      	nop
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	40000800 	.word	0x40000800
 8005e80:	40000c00 	.word	0x40000c00
 8005e84:	40014000 	.word	0x40014000
 8005e88:	40014400 	.word	0x40014400
 8005e8c:	40014800 	.word	0x40014800

08005e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f023 0201 	bic.w	r2, r3, #1
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f023 030a 	bic.w	r3, r3, #10
 8005ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	621a      	str	r2, [r3, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b087      	sub	sp, #28
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f023 0210 	bic.w	r2, r3, #16
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	031b      	lsls	r3, r3, #12
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	f043 0307 	orr.w	r3, r3, #7
 8005f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	609a      	str	r2, [r3, #8]
}
 8005f78:	bf00      	nop
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	021a      	lsls	r2, r3, #8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e050      	b.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1c      	ldr	r2, [pc, #112]	; (800608c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d018      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006028:	d013      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a18      	ldr	r2, [pc, #96]	; (8006090 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00e      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a16      	ldr	r2, [pc, #88]	; (8006094 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d009      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a15      	ldr	r2, [pc, #84]	; (8006098 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d004      	beq.n	8006052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a13      	ldr	r2, [pc, #76]	; (800609c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d10c      	bne.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	4313      	orrs	r3, r2
 8006062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	40010000 	.word	0x40010000
 8006090:	40000400 	.word	0x40000400
 8006094:	40000800 	.word	0x40000800
 8006098:	40000c00 	.word	0x40000c00
 800609c:	40014000 	.word	0x40014000

080060a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e03f      	b.n	800615a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7fb fa96 	bl	8001620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2224      	movs	r2, #36	; 0x24
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800610a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fed1 	bl	8006eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691a      	ldr	r2, [r3, #16]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006120:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695a      	ldr	r2, [r3, #20]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006130:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006140:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b08a      	sub	sp, #40	; 0x28
 8006166:	af02      	add	r7, sp, #8
 8006168:	60f8      	str	r0, [r7, #12]
 800616a:	60b9      	str	r1, [r7, #8]
 800616c:	603b      	str	r3, [r7, #0]
 800616e:	4613      	mov	r3, r2
 8006170:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b20      	cmp	r3, #32
 8006180:	d17c      	bne.n	800627c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_UART_Transmit+0x2c>
 8006188:	88fb      	ldrh	r3, [r7, #6]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e075      	b.n	800627e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006198:	2b01      	cmp	r3, #1
 800619a:	d101      	bne.n	80061a0 <HAL_UART_Transmit+0x3e>
 800619c:	2302      	movs	r3, #2
 800619e:	e06e      	b.n	800627e <HAL_UART_Transmit+0x11c>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2221      	movs	r2, #33	; 0x21
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061b6:	f7fb fc83 	bl	8001ac0 <HAL_GetTick>
 80061ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	88fa      	ldrh	r2, [r7, #6]
 80061c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	88fa      	ldrh	r2, [r7, #6]
 80061c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d0:	d108      	bne.n	80061e4 <HAL_UART_Transmit+0x82>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d104      	bne.n	80061e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80061da:	2300      	movs	r3, #0
 80061dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	e003      	b.n	80061ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80061f4:	e02a      	b.n	800624c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2200      	movs	r2, #0
 80061fe:	2180      	movs	r1, #128	; 0x80
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fc26 	bl	8006a52 <UART_WaitOnFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e036      	b.n	800627e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10b      	bne.n	800622e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006224:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	3302      	adds	r3, #2
 800622a:	61bb      	str	r3, [r7, #24]
 800622c:	e007      	b.n	800623e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	781a      	ldrb	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	3301      	adds	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1cf      	bne.n	80061f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2200      	movs	r2, #0
 800625e:	2140      	movs	r1, #64	; 0x40
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 fbf6 	bl	8006a52 <UART_WaitOnFlagUntilTimeout>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e006      	b.n	800627e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	e000      	b.n	800627e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800627c:	2302      	movs	r3, #2
  }
}
 800627e:	4618      	mov	r0, r3
 8006280:	3720      	adds	r7, #32
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08c      	sub	sp, #48	; 0x30
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	4613      	mov	r3, r2
 8006294:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b20      	cmp	r3, #32
 80062a0:	d165      	bne.n	800636e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <HAL_UART_Transmit_DMA+0x26>
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e05e      	b.n	8006370 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_UART_Transmit_DMA+0x38>
 80062bc:	2302      	movs	r3, #2
 80062be:	e057      	b.n	8006370 <HAL_UART_Transmit_DMA+0xe8>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	88fa      	ldrh	r2, [r7, #6]
 80062d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	88fa      	ldrh	r2, [r7, #6]
 80062d8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2221      	movs	r2, #33	; 0x21
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ec:	4a22      	ldr	r2, [pc, #136]	; (8006378 <HAL_UART_Transmit_DMA+0xf0>)
 80062ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f4:	4a21      	ldr	r2, [pc, #132]	; (800637c <HAL_UART_Transmit_DMA+0xf4>)
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fc:	4a20      	ldr	r2, [pc, #128]	; (8006380 <HAL_UART_Transmit_DMA+0xf8>)
 80062fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006304:	2200      	movs	r2, #0
 8006306:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006308:	f107 0308 	add.w	r3, r7, #8
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006314:	6819      	ldr	r1, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3304      	adds	r3, #4
 800631c:	461a      	mov	r2, r3
 800631e:	88fb      	ldrh	r3, [r7, #6]
 8006320:	f7fb fd9a 	bl	8001e58 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800632c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3314      	adds	r3, #20
 800633c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	617b      	str	r3, [r7, #20]
   return(result);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634c:	62bb      	str	r3, [r7, #40]	; 0x28
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3314      	adds	r3, #20
 8006354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006356:	627a      	str	r2, [r7, #36]	; 0x24
 8006358:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	6a39      	ldr	r1, [r7, #32]
 800635c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	61fb      	str	r3, [r7, #28]
   return(result);
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e5      	bne.n	8006336 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	e000      	b.n	8006370 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800636e:	2302      	movs	r3, #2
  }
}
 8006370:	4618      	mov	r0, r3
 8006372:	3730      	adds	r7, #48	; 0x30
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	08006909 	.word	0x08006909
 800637c:	080069a3 	.word	0x080069a3
 8006380:	080069bf 	.word	0x080069bf

08006384 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b0ba      	sub	sp, #232	; 0xe8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80063c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10f      	bne.n	80063ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d009      	beq.n	80063ea <HAL_UART_IRQHandler+0x66>
 80063d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fcaa 	bl	8006d3c <UART_Receive_IT>
      return;
 80063e8:	e256      	b.n	8006898 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80063ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 80de 	beq.w	80065b0 <HAL_UART_IRQHandler+0x22c>
 80063f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d106      	bne.n	800640e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006404:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 80d1 	beq.w	80065b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800640e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00b      	beq.n	8006432 <HAL_UART_IRQHandler+0xae>
 800641a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800641e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f043 0201 	orr.w	r2, r3, #1
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <HAL_UART_IRQHandler+0xd2>
 800643e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	f043 0202 	orr.w	r2, r3, #2
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <HAL_UART_IRQHandler+0xf6>
 8006462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d005      	beq.n	800647a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	f043 0204 	orr.w	r2, r3, #4
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800647a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d011      	beq.n	80064aa <HAL_UART_IRQHandler+0x126>
 8006486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	d105      	bne.n	800649e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d005      	beq.n	80064aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	f043 0208 	orr.w	r2, r3, #8
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 81ed 	beq.w	800688e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b8:	f003 0320 	and.w	r3, r3, #32
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d008      	beq.n	80064d2 <HAL_UART_IRQHandler+0x14e>
 80064c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c4:	f003 0320 	and.w	r3, r3, #32
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fc35 	bl	8006d3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b40      	cmp	r3, #64	; 0x40
 80064de:	bf0c      	ite	eq
 80064e0:	2301      	moveq	r3, #1
 80064e2:	2300      	movne	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d103      	bne.n	80064fe <HAL_UART_IRQHandler+0x17a>
 80064f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d04f      	beq.n	800659e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fb3d 	bl	8006b7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650e:	2b40      	cmp	r3, #64	; 0x40
 8006510:	d141      	bne.n	8006596 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3314      	adds	r3, #20
 8006518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800652c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3314      	adds	r3, #20
 800653a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800653e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006542:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800654a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1d9      	bne.n	8006512 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	2b00      	cmp	r3, #0
 8006564:	d013      	beq.n	800658e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	4a7d      	ldr	r2, [pc, #500]	; (8006760 <HAL_UART_IRQHandler+0x3dc>)
 800656c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006572:	4618      	mov	r0, r3
 8006574:	f7fb fd38 	bl	8001fe8 <HAL_DMA_Abort_IT>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d016      	beq.n	80065ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800658c:	e00e      	b.n	80065ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f9a4 	bl	80068dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006594:	e00a      	b.n	80065ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f9a0 	bl	80068dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800659c:	e006      	b.n	80065ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f99c 	bl	80068dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80065aa:	e170      	b.n	800688e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ac:	bf00      	nop
    return;
 80065ae:	e16e      	b.n	800688e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	f040 814a 	bne.w	800684e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80065ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065be:	f003 0310 	and.w	r3, r3, #16
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 8143 	beq.w	800684e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80065c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 813c 	beq.w	800684e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065d6:	2300      	movs	r3, #0
 80065d8:	60bb      	str	r3, [r7, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60bb      	str	r3, [r7, #8]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	60bb      	str	r3, [r7, #8]
 80065ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f6:	2b40      	cmp	r3, #64	; 0x40
 80065f8:	f040 80b4 	bne.w	8006764 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006608:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 8140 	beq.w	8006892 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800661a:	429a      	cmp	r2, r3
 800661c:	f080 8139 	bcs.w	8006892 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006626:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006632:	f000 8088 	beq.w	8006746 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	330c      	adds	r3, #12
 800663c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800664c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	330c      	adds	r3, #12
 800665e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006662:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800666e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800667a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1d9      	bne.n	8006636 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3314      	adds	r3, #20
 8006688:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006694:	f023 0301 	bic.w	r3, r3, #1
 8006698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3314      	adds	r3, #20
 80066a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e1      	bne.n	8006682 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3314      	adds	r3, #20
 80066c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3314      	adds	r3, #20
 80066de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e3      	bne.n	80066be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	330c      	adds	r3, #12
 800670a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006716:	f023 0310 	bic.w	r3, r3, #16
 800671a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	330c      	adds	r3, #12
 8006724:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006728:	65ba      	str	r2, [r7, #88]	; 0x58
 800672a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800672e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e3      	bne.n	8006704 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006740:	4618      	mov	r0, r3
 8006742:	f7fb fbe1 	bl	8001f08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800674e:	b29b      	uxth	r3, r3
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	b29b      	uxth	r3, r3
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f8ca 	bl	80068f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800675c:	e099      	b.n	8006892 <HAL_UART_IRQHandler+0x50e>
 800675e:	bf00      	nop
 8006760:	08006c45 	.word	0x08006c45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800676c:	b29b      	uxth	r3, r3
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006778:	b29b      	uxth	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 808b 	beq.w	8006896 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006780:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8086 	beq.w	8006896 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	330c      	adds	r3, #12
 8006790:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	330c      	adds	r3, #12
 80067aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80067ae:	647a      	str	r2, [r7, #68]	; 0x44
 80067b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e3      	bne.n	800678a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3314      	adds	r3, #20
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	623b      	str	r3, [r7, #32]
   return(result);
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	f023 0301 	bic.w	r3, r3, #1
 80067d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3314      	adds	r3, #20
 80067e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067e6:	633a      	str	r2, [r7, #48]	; 0x30
 80067e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e3      	bne.n	80067c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	330c      	adds	r3, #12
 800680e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	60fb      	str	r3, [r7, #12]
   return(result);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0310 	bic.w	r3, r3, #16
 800681e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	330c      	adds	r3, #12
 8006828:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800682c:	61fa      	str	r2, [r7, #28]
 800682e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	69b9      	ldr	r1, [r7, #24]
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	617b      	str	r3, [r7, #20]
   return(result);
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e3      	bne.n	8006808 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f852 	bl	80068f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800684c:	e023      	b.n	8006896 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800684e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <HAL_UART_IRQHandler+0x4ea>
 800685a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800685e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fa00 	bl	8006c6c <UART_Transmit_IT>
    return;
 800686c:	e014      	b.n	8006898 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800686e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00e      	beq.n	8006898 <HAL_UART_IRQHandler+0x514>
 800687a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d008      	beq.n	8006898 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fa40 	bl	8006d0c <UART_EndTransmit_IT>
    return;
 800688c:	e004      	b.n	8006898 <HAL_UART_IRQHandler+0x514>
    return;
 800688e:	bf00      	nop
 8006890:	e002      	b.n	8006898 <HAL_UART_IRQHandler+0x514>
      return;
 8006892:	bf00      	nop
 8006894:	e000      	b.n	8006898 <HAL_UART_IRQHandler+0x514>
      return;
 8006896:	bf00      	nop
  }
}
 8006898:	37e8      	adds	r7, #232	; 0xe8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop

080068a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b090      	sub	sp, #64	; 0x40
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006920:	2b00      	cmp	r3, #0
 8006922:	d137      	bne.n	8006994 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006926:	2200      	movs	r2, #0
 8006928:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800692a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3314      	adds	r3, #20
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	623b      	str	r3, [r7, #32]
   return(result);
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006940:	63bb      	str	r3, [r7, #56]	; 0x38
 8006942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3314      	adds	r3, #20
 8006948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800694a:	633a      	str	r2, [r7, #48]	; 0x30
 800694c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e5      	bne.n	800692a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800695e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	330c      	adds	r3, #12
 8006964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	60fb      	str	r3, [r7, #12]
   return(result);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006974:	637b      	str	r3, [r7, #52]	; 0x34
 8006976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	330c      	adds	r3, #12
 800697c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800697e:	61fa      	str	r2, [r7, #28]
 8006980:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	69b9      	ldr	r1, [r7, #24]
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	617b      	str	r3, [r7, #20]
   return(result);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e5      	bne.n	800695e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006992:	e002      	b.n	800699a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006994:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006996:	f7ff ff83 	bl	80068a0 <HAL_UART_TxCpltCallback>
}
 800699a:	bf00      	nop
 800699c:	3740      	adds	r7, #64	; 0x40
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f7ff ff7f 	bl	80068b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069b6:	bf00      	nop
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069da:	2b80      	cmp	r3, #128	; 0x80
 80069dc:	bf0c      	ite	eq
 80069de:	2301      	moveq	r3, #1
 80069e0:	2300      	movne	r3, #0
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b21      	cmp	r3, #33	; 0x21
 80069f0:	d108      	bne.n	8006a04 <UART_DMAError+0x46>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2200      	movs	r2, #0
 80069fc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80069fe:	68b8      	ldr	r0, [r7, #8]
 8006a00:	f000 f895 	bl	8006b2e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0e:	2b40      	cmp	r3, #64	; 0x40
 8006a10:	bf0c      	ite	eq
 8006a12:	2301      	moveq	r3, #1
 8006a14:	2300      	movne	r3, #0
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b22      	cmp	r3, #34	; 0x22
 8006a24:	d108      	bne.n	8006a38 <UART_DMAError+0x7a>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d005      	beq.n	8006a38 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006a32:	68b8      	ldr	r0, [r7, #8]
 8006a34:	f000 f8a3 	bl	8006b7e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3c:	f043 0210 	orr.w	r2, r3, #16
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a44:	68b8      	ldr	r0, [r7, #8]
 8006a46:	f7ff ff49 	bl	80068dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a4a:	bf00      	nop
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b090      	sub	sp, #64	; 0x40
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	603b      	str	r3, [r7, #0]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a62:	e050      	b.n	8006b06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6a:	d04c      	beq.n	8006b06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d007      	beq.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a72:	f7fb f825 	bl	8001ac0 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d241      	bcs.n	8006b06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	330c      	adds	r3, #12
 8006a88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	330c      	adds	r3, #12
 8006aa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006aa2:	637a      	str	r2, [r7, #52]	; 0x34
 8006aa4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e5      	bne.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3314      	adds	r3, #20
 8006abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f023 0301 	bic.w	r3, r3, #1
 8006acc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3314      	adds	r3, #20
 8006ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ad6:	623a      	str	r2, [r7, #32]
 8006ad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	69f9      	ldr	r1, [r7, #28]
 8006adc:	6a3a      	ldr	r2, [r7, #32]
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e5      	bne.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2220      	movs	r2, #32
 8006af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e00f      	b.n	8006b26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	bf0c      	ite	eq
 8006b16:	2301      	moveq	r3, #1
 8006b18:	2300      	movne	r3, #0
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	79fb      	ldrb	r3, [r7, #7]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d09f      	beq.n	8006a64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3740      	adds	r7, #64	; 0x40
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b089      	sub	sp, #36	; 0x24
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	330c      	adds	r3, #12
 8006b3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b4c:	61fb      	str	r3, [r7, #28]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	330c      	adds	r3, #12
 8006b54:	69fa      	ldr	r2, [r7, #28]
 8006b56:	61ba      	str	r2, [r7, #24]
 8006b58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	6979      	ldr	r1, [r7, #20]
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	613b      	str	r3, [r7, #16]
   return(result);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e5      	bne.n	8006b36 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006b72:	bf00      	nop
 8006b74:	3724      	adds	r7, #36	; 0x24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b095      	sub	sp, #84	; 0x54
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	330c      	adds	r3, #12
 8006b8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	330c      	adds	r3, #12
 8006ba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ba6:	643a      	str	r2, [r7, #64]	; 0x40
 8006ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e5      	bne.n	8006b86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3314      	adds	r3, #20
 8006bc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	f023 0301 	bic.w	r3, r3, #1
 8006bd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3314      	adds	r3, #20
 8006bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e5      	bne.n	8006bba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d119      	bne.n	8006c2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	330c      	adds	r3, #12
 8006bfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f023 0310 	bic.w	r3, r3, #16
 8006c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	330c      	adds	r3, #12
 8006c14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c16:	61ba      	str	r2, [r7, #24]
 8006c18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6979      	ldr	r1, [r7, #20]
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	613b      	str	r3, [r7, #16]
   return(result);
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e5      	bne.n	8006bf6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c38:	bf00      	nop
 8006c3a:	3754      	adds	r7, #84	; 0x54
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f7ff fe3c 	bl	80068dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c64:	bf00      	nop
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b21      	cmp	r3, #33	; 0x21
 8006c7e:	d13e      	bne.n	8006cfe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c88:	d114      	bne.n	8006cb4 <UART_Transmit_IT+0x48>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d110      	bne.n	8006cb4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ca6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	1c9a      	adds	r2, r3, #2
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	621a      	str	r2, [r3, #32]
 8006cb2:	e008      	b.n	8006cc6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	1c59      	adds	r1, r3, #1
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	6211      	str	r1, [r2, #32]
 8006cbe:	781a      	ldrb	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10f      	bne.n	8006cfa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ce8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e000      	b.n	8006d00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cfe:	2302      	movs	r3, #2
  }
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff fdb7 	bl	80068a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08c      	sub	sp, #48	; 0x30
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b22      	cmp	r3, #34	; 0x22
 8006d4e:	f040 80ab 	bne.w	8006ea8 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d5a:	d117      	bne.n	8006d8c <UART_Receive_IT+0x50>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d113      	bne.n	8006d8c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d64:	2300      	movs	r3, #0
 8006d66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	1c9a      	adds	r2, r3, #2
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	629a      	str	r2, [r3, #40]	; 0x28
 8006d8a:	e026      	b.n	8006dda <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d9e:	d007      	beq.n	8006db0 <UART_Receive_IT+0x74>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <UART_Receive_IT+0x82>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d106      	bne.n	8006dbe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	e008      	b.n	8006dd0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	4619      	mov	r1, r3
 8006de8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d15a      	bne.n	8006ea4 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68da      	ldr	r2, [r3, #12]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0220 	bic.w	r2, r2, #32
 8006dfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	695a      	ldr	r2, [r3, #20]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 0201 	bic.w	r2, r2, #1
 8006e1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d135      	bne.n	8006e9a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	613b      	str	r3, [r7, #16]
   return(result);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f023 0310 	bic.w	r3, r3, #16
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	330c      	adds	r3, #12
 8006e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e54:	623a      	str	r2, [r7, #32]
 8006e56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	69f9      	ldr	r1, [r7, #28]
 8006e5a:	6a3a      	ldr	r2, [r7, #32]
 8006e5c:	e841 2300 	strex	r3, r2, [r1]
 8006e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e5      	bne.n	8006e34 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0310 	and.w	r3, r3, #16
 8006e72:	2b10      	cmp	r3, #16
 8006e74:	d10a      	bne.n	8006e8c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7ff fd2c 	bl	80068f0 <HAL_UARTEx_RxEventCallback>
 8006e98:	e002      	b.n	8006ea0 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff fd14 	bl	80068c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	e002      	b.n	8006eaa <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	e000      	b.n	8006eaa <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006ea8:	2302      	movs	r3, #2
  }
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3730      	adds	r7, #48	; 0x30
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
	...

08006eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb8:	b0c0      	sub	sp, #256	; 0x100
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed0:	68d9      	ldr	r1, [r3, #12]
 8006ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	ea40 0301 	orr.w	r3, r0, r1
 8006edc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	431a      	orrs	r2, r3
 8006eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f0c:	f021 010c 	bic.w	r1, r1, #12
 8006f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2e:	6999      	ldr	r1, [r3, #24]
 8006f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	ea40 0301 	orr.w	r3, r0, r1
 8006f3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4b8f      	ldr	r3, [pc, #572]	; (8007180 <UART_SetConfig+0x2cc>)
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d005      	beq.n	8006f54 <UART_SetConfig+0xa0>
 8006f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	4b8d      	ldr	r3, [pc, #564]	; (8007184 <UART_SetConfig+0x2d0>)
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d104      	bne.n	8006f5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f54:	f7fe fc5e 	bl	8005814 <HAL_RCC_GetPCLK2Freq>
 8006f58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f5c:	e003      	b.n	8006f66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f5e:	f7fe fc45 	bl	80057ec <HAL_RCC_GetPCLK1Freq>
 8006f62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f70:	f040 810c 	bne.w	800718c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f86:	4622      	mov	r2, r4
 8006f88:	462b      	mov	r3, r5
 8006f8a:	1891      	adds	r1, r2, r2
 8006f8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f8e:	415b      	adcs	r3, r3
 8006f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f96:	4621      	mov	r1, r4
 8006f98:	eb12 0801 	adds.w	r8, r2, r1
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	eb43 0901 	adc.w	r9, r3, r1
 8006fa2:	f04f 0200 	mov.w	r2, #0
 8006fa6:	f04f 0300 	mov.w	r3, #0
 8006faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fb6:	4690      	mov	r8, r2
 8006fb8:	4699      	mov	r9, r3
 8006fba:	4623      	mov	r3, r4
 8006fbc:	eb18 0303 	adds.w	r3, r8, r3
 8006fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fc4:	462b      	mov	r3, r5
 8006fc6:	eb49 0303 	adc.w	r3, r9, r3
 8006fca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006fde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	18db      	adds	r3, r3, r3
 8006fe6:	653b      	str	r3, [r7, #80]	; 0x50
 8006fe8:	4613      	mov	r3, r2
 8006fea:	eb42 0303 	adc.w	r3, r2, r3
 8006fee:	657b      	str	r3, [r7, #84]	; 0x54
 8006ff0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ff4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ff8:	f7f9 fdde 	bl	8000bb8 <__aeabi_uldivmod>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4b61      	ldr	r3, [pc, #388]	; (8007188 <UART_SetConfig+0x2d4>)
 8007002:	fba3 2302 	umull	r2, r3, r3, r2
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	011c      	lsls	r4, r3, #4
 800700a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800700e:	2200      	movs	r2, #0
 8007010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007014:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007018:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800701c:	4642      	mov	r2, r8
 800701e:	464b      	mov	r3, r9
 8007020:	1891      	adds	r1, r2, r2
 8007022:	64b9      	str	r1, [r7, #72]	; 0x48
 8007024:	415b      	adcs	r3, r3
 8007026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007028:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800702c:	4641      	mov	r1, r8
 800702e:	eb12 0a01 	adds.w	sl, r2, r1
 8007032:	4649      	mov	r1, r9
 8007034:	eb43 0b01 	adc.w	fp, r3, r1
 8007038:	f04f 0200 	mov.w	r2, #0
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007044:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007048:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800704c:	4692      	mov	sl, r2
 800704e:	469b      	mov	fp, r3
 8007050:	4643      	mov	r3, r8
 8007052:	eb1a 0303 	adds.w	r3, sl, r3
 8007056:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800705a:	464b      	mov	r3, r9
 800705c:	eb4b 0303 	adc.w	r3, fp, r3
 8007060:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007070:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007074:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007078:	460b      	mov	r3, r1
 800707a:	18db      	adds	r3, r3, r3
 800707c:	643b      	str	r3, [r7, #64]	; 0x40
 800707e:	4613      	mov	r3, r2
 8007080:	eb42 0303 	adc.w	r3, r2, r3
 8007084:	647b      	str	r3, [r7, #68]	; 0x44
 8007086:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800708a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800708e:	f7f9 fd93 	bl	8000bb8 <__aeabi_uldivmod>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4611      	mov	r1, r2
 8007098:	4b3b      	ldr	r3, [pc, #236]	; (8007188 <UART_SetConfig+0x2d4>)
 800709a:	fba3 2301 	umull	r2, r3, r3, r1
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	2264      	movs	r2, #100	; 0x64
 80070a2:	fb02 f303 	mul.w	r3, r2, r3
 80070a6:	1acb      	subs	r3, r1, r3
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80070ae:	4b36      	ldr	r3, [pc, #216]	; (8007188 <UART_SetConfig+0x2d4>)
 80070b0:	fba3 2302 	umull	r2, r3, r3, r2
 80070b4:	095b      	lsrs	r3, r3, #5
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070bc:	441c      	add	r4, r3
 80070be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80070cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80070d0:	4642      	mov	r2, r8
 80070d2:	464b      	mov	r3, r9
 80070d4:	1891      	adds	r1, r2, r2
 80070d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80070d8:	415b      	adcs	r3, r3
 80070da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070e0:	4641      	mov	r1, r8
 80070e2:	1851      	adds	r1, r2, r1
 80070e4:	6339      	str	r1, [r7, #48]	; 0x30
 80070e6:	4649      	mov	r1, r9
 80070e8:	414b      	adcs	r3, r1
 80070ea:	637b      	str	r3, [r7, #52]	; 0x34
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80070f8:	4659      	mov	r1, fp
 80070fa:	00cb      	lsls	r3, r1, #3
 80070fc:	4651      	mov	r1, sl
 80070fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007102:	4651      	mov	r1, sl
 8007104:	00ca      	lsls	r2, r1, #3
 8007106:	4610      	mov	r0, r2
 8007108:	4619      	mov	r1, r3
 800710a:	4603      	mov	r3, r0
 800710c:	4642      	mov	r2, r8
 800710e:	189b      	adds	r3, r3, r2
 8007110:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007114:	464b      	mov	r3, r9
 8007116:	460a      	mov	r2, r1
 8007118:	eb42 0303 	adc.w	r3, r2, r3
 800711c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800712c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007130:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007134:	460b      	mov	r3, r1
 8007136:	18db      	adds	r3, r3, r3
 8007138:	62bb      	str	r3, [r7, #40]	; 0x28
 800713a:	4613      	mov	r3, r2
 800713c:	eb42 0303 	adc.w	r3, r2, r3
 8007140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007146:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800714a:	f7f9 fd35 	bl	8000bb8 <__aeabi_uldivmod>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <UART_SetConfig+0x2d4>)
 8007154:	fba3 1302 	umull	r1, r3, r3, r2
 8007158:	095b      	lsrs	r3, r3, #5
 800715a:	2164      	movs	r1, #100	; 0x64
 800715c:	fb01 f303 	mul.w	r3, r1, r3
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	3332      	adds	r3, #50	; 0x32
 8007166:	4a08      	ldr	r2, [pc, #32]	; (8007188 <UART_SetConfig+0x2d4>)
 8007168:	fba2 2303 	umull	r2, r3, r2, r3
 800716c:	095b      	lsrs	r3, r3, #5
 800716e:	f003 0207 	and.w	r2, r3, #7
 8007172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4422      	add	r2, r4
 800717a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800717c:	e106      	b.n	800738c <UART_SetConfig+0x4d8>
 800717e:	bf00      	nop
 8007180:	40011000 	.word	0x40011000
 8007184:	40011400 	.word	0x40011400
 8007188:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800718c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007190:	2200      	movs	r2, #0
 8007192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007196:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800719a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800719e:	4642      	mov	r2, r8
 80071a0:	464b      	mov	r3, r9
 80071a2:	1891      	adds	r1, r2, r2
 80071a4:	6239      	str	r1, [r7, #32]
 80071a6:	415b      	adcs	r3, r3
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
 80071aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071ae:	4641      	mov	r1, r8
 80071b0:	1854      	adds	r4, r2, r1
 80071b2:	4649      	mov	r1, r9
 80071b4:	eb43 0501 	adc.w	r5, r3, r1
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	f04f 0300 	mov.w	r3, #0
 80071c0:	00eb      	lsls	r3, r5, #3
 80071c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071c6:	00e2      	lsls	r2, r4, #3
 80071c8:	4614      	mov	r4, r2
 80071ca:	461d      	mov	r5, r3
 80071cc:	4643      	mov	r3, r8
 80071ce:	18e3      	adds	r3, r4, r3
 80071d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071d4:	464b      	mov	r3, r9
 80071d6:	eb45 0303 	adc.w	r3, r5, r3
 80071da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80071fa:	4629      	mov	r1, r5
 80071fc:	008b      	lsls	r3, r1, #2
 80071fe:	4621      	mov	r1, r4
 8007200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007204:	4621      	mov	r1, r4
 8007206:	008a      	lsls	r2, r1, #2
 8007208:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800720c:	f7f9 fcd4 	bl	8000bb8 <__aeabi_uldivmod>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	4b60      	ldr	r3, [pc, #384]	; (8007398 <UART_SetConfig+0x4e4>)
 8007216:	fba3 2302 	umull	r2, r3, r3, r2
 800721a:	095b      	lsrs	r3, r3, #5
 800721c:	011c      	lsls	r4, r3, #4
 800721e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007222:	2200      	movs	r2, #0
 8007224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007228:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800722c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007230:	4642      	mov	r2, r8
 8007232:	464b      	mov	r3, r9
 8007234:	1891      	adds	r1, r2, r2
 8007236:	61b9      	str	r1, [r7, #24]
 8007238:	415b      	adcs	r3, r3
 800723a:	61fb      	str	r3, [r7, #28]
 800723c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007240:	4641      	mov	r1, r8
 8007242:	1851      	adds	r1, r2, r1
 8007244:	6139      	str	r1, [r7, #16]
 8007246:	4649      	mov	r1, r9
 8007248:	414b      	adcs	r3, r1
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	f04f 0200 	mov.w	r2, #0
 8007250:	f04f 0300 	mov.w	r3, #0
 8007254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007258:	4659      	mov	r1, fp
 800725a:	00cb      	lsls	r3, r1, #3
 800725c:	4651      	mov	r1, sl
 800725e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007262:	4651      	mov	r1, sl
 8007264:	00ca      	lsls	r2, r1, #3
 8007266:	4610      	mov	r0, r2
 8007268:	4619      	mov	r1, r3
 800726a:	4603      	mov	r3, r0
 800726c:	4642      	mov	r2, r8
 800726e:	189b      	adds	r3, r3, r2
 8007270:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007274:	464b      	mov	r3, r9
 8007276:	460a      	mov	r2, r1
 8007278:	eb42 0303 	adc.w	r3, r2, r3
 800727c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	67bb      	str	r3, [r7, #120]	; 0x78
 800728a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800728c:	f04f 0200 	mov.w	r2, #0
 8007290:	f04f 0300 	mov.w	r3, #0
 8007294:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007298:	4649      	mov	r1, r9
 800729a:	008b      	lsls	r3, r1, #2
 800729c:	4641      	mov	r1, r8
 800729e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072a2:	4641      	mov	r1, r8
 80072a4:	008a      	lsls	r2, r1, #2
 80072a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80072aa:	f7f9 fc85 	bl	8000bb8 <__aeabi_uldivmod>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	4611      	mov	r1, r2
 80072b4:	4b38      	ldr	r3, [pc, #224]	; (8007398 <UART_SetConfig+0x4e4>)
 80072b6:	fba3 2301 	umull	r2, r3, r3, r1
 80072ba:	095b      	lsrs	r3, r3, #5
 80072bc:	2264      	movs	r2, #100	; 0x64
 80072be:	fb02 f303 	mul.w	r3, r2, r3
 80072c2:	1acb      	subs	r3, r1, r3
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	3332      	adds	r3, #50	; 0x32
 80072c8:	4a33      	ldr	r2, [pc, #204]	; (8007398 <UART_SetConfig+0x4e4>)
 80072ca:	fba2 2303 	umull	r2, r3, r2, r3
 80072ce:	095b      	lsrs	r3, r3, #5
 80072d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072d4:	441c      	add	r4, r3
 80072d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072da:	2200      	movs	r2, #0
 80072dc:	673b      	str	r3, [r7, #112]	; 0x70
 80072de:	677a      	str	r2, [r7, #116]	; 0x74
 80072e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80072e4:	4642      	mov	r2, r8
 80072e6:	464b      	mov	r3, r9
 80072e8:	1891      	adds	r1, r2, r2
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	415b      	adcs	r3, r3
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072f4:	4641      	mov	r1, r8
 80072f6:	1851      	adds	r1, r2, r1
 80072f8:	6039      	str	r1, [r7, #0]
 80072fa:	4649      	mov	r1, r9
 80072fc:	414b      	adcs	r3, r1
 80072fe:	607b      	str	r3, [r7, #4]
 8007300:	f04f 0200 	mov.w	r2, #0
 8007304:	f04f 0300 	mov.w	r3, #0
 8007308:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800730c:	4659      	mov	r1, fp
 800730e:	00cb      	lsls	r3, r1, #3
 8007310:	4651      	mov	r1, sl
 8007312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007316:	4651      	mov	r1, sl
 8007318:	00ca      	lsls	r2, r1, #3
 800731a:	4610      	mov	r0, r2
 800731c:	4619      	mov	r1, r3
 800731e:	4603      	mov	r3, r0
 8007320:	4642      	mov	r2, r8
 8007322:	189b      	adds	r3, r3, r2
 8007324:	66bb      	str	r3, [r7, #104]	; 0x68
 8007326:	464b      	mov	r3, r9
 8007328:	460a      	mov	r2, r1
 800732a:	eb42 0303 	adc.w	r3, r2, r3
 800732e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	663b      	str	r3, [r7, #96]	; 0x60
 800733a:	667a      	str	r2, [r7, #100]	; 0x64
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007348:	4649      	mov	r1, r9
 800734a:	008b      	lsls	r3, r1, #2
 800734c:	4641      	mov	r1, r8
 800734e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007352:	4641      	mov	r1, r8
 8007354:	008a      	lsls	r2, r1, #2
 8007356:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800735a:	f7f9 fc2d 	bl	8000bb8 <__aeabi_uldivmod>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	4b0d      	ldr	r3, [pc, #52]	; (8007398 <UART_SetConfig+0x4e4>)
 8007364:	fba3 1302 	umull	r1, r3, r3, r2
 8007368:	095b      	lsrs	r3, r3, #5
 800736a:	2164      	movs	r1, #100	; 0x64
 800736c:	fb01 f303 	mul.w	r3, r1, r3
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	3332      	adds	r3, #50	; 0x32
 8007376:	4a08      	ldr	r2, [pc, #32]	; (8007398 <UART_SetConfig+0x4e4>)
 8007378:	fba2 2303 	umull	r2, r3, r2, r3
 800737c:	095b      	lsrs	r3, r3, #5
 800737e:	f003 020f 	and.w	r2, r3, #15
 8007382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4422      	add	r2, r4
 800738a:	609a      	str	r2, [r3, #8]
}
 800738c:	bf00      	nop
 800738e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007392:	46bd      	mov	sp, r7
 8007394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007398:	51eb851f 	.word	0x51eb851f

0800739c <__cvt>:
 800739c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073a0:	ec55 4b10 	vmov	r4, r5, d0
 80073a4:	2d00      	cmp	r5, #0
 80073a6:	460e      	mov	r6, r1
 80073a8:	4619      	mov	r1, r3
 80073aa:	462b      	mov	r3, r5
 80073ac:	bfbb      	ittet	lt
 80073ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073b2:	461d      	movlt	r5, r3
 80073b4:	2300      	movge	r3, #0
 80073b6:	232d      	movlt	r3, #45	; 0x2d
 80073b8:	700b      	strb	r3, [r1, #0]
 80073ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073c0:	4691      	mov	r9, r2
 80073c2:	f023 0820 	bic.w	r8, r3, #32
 80073c6:	bfbc      	itt	lt
 80073c8:	4622      	movlt	r2, r4
 80073ca:	4614      	movlt	r4, r2
 80073cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073d0:	d005      	beq.n	80073de <__cvt+0x42>
 80073d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80073d6:	d100      	bne.n	80073da <__cvt+0x3e>
 80073d8:	3601      	adds	r6, #1
 80073da:	2102      	movs	r1, #2
 80073dc:	e000      	b.n	80073e0 <__cvt+0x44>
 80073de:	2103      	movs	r1, #3
 80073e0:	ab03      	add	r3, sp, #12
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	ab02      	add	r3, sp, #8
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	ec45 4b10 	vmov	d0, r4, r5
 80073ec:	4653      	mov	r3, sl
 80073ee:	4632      	mov	r2, r6
 80073f0:	f000 fe7e 	bl	80080f0 <_dtoa_r>
 80073f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80073f8:	4607      	mov	r7, r0
 80073fa:	d102      	bne.n	8007402 <__cvt+0x66>
 80073fc:	f019 0f01 	tst.w	r9, #1
 8007400:	d022      	beq.n	8007448 <__cvt+0xac>
 8007402:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007406:	eb07 0906 	add.w	r9, r7, r6
 800740a:	d110      	bne.n	800742e <__cvt+0x92>
 800740c:	783b      	ldrb	r3, [r7, #0]
 800740e:	2b30      	cmp	r3, #48	; 0x30
 8007410:	d10a      	bne.n	8007428 <__cvt+0x8c>
 8007412:	2200      	movs	r2, #0
 8007414:	2300      	movs	r3, #0
 8007416:	4620      	mov	r0, r4
 8007418:	4629      	mov	r1, r5
 800741a:	f7f9 fb5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800741e:	b918      	cbnz	r0, 8007428 <__cvt+0x8c>
 8007420:	f1c6 0601 	rsb	r6, r6, #1
 8007424:	f8ca 6000 	str.w	r6, [sl]
 8007428:	f8da 3000 	ldr.w	r3, [sl]
 800742c:	4499      	add	r9, r3
 800742e:	2200      	movs	r2, #0
 8007430:	2300      	movs	r3, #0
 8007432:	4620      	mov	r0, r4
 8007434:	4629      	mov	r1, r5
 8007436:	f7f9 fb4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800743a:	b108      	cbz	r0, 8007440 <__cvt+0xa4>
 800743c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007440:	2230      	movs	r2, #48	; 0x30
 8007442:	9b03      	ldr	r3, [sp, #12]
 8007444:	454b      	cmp	r3, r9
 8007446:	d307      	bcc.n	8007458 <__cvt+0xbc>
 8007448:	9b03      	ldr	r3, [sp, #12]
 800744a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800744c:	1bdb      	subs	r3, r3, r7
 800744e:	4638      	mov	r0, r7
 8007450:	6013      	str	r3, [r2, #0]
 8007452:	b004      	add	sp, #16
 8007454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007458:	1c59      	adds	r1, r3, #1
 800745a:	9103      	str	r1, [sp, #12]
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	e7f0      	b.n	8007442 <__cvt+0xa6>

08007460 <__exponent>:
 8007460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007462:	4603      	mov	r3, r0
 8007464:	2900      	cmp	r1, #0
 8007466:	bfb8      	it	lt
 8007468:	4249      	neglt	r1, r1
 800746a:	f803 2b02 	strb.w	r2, [r3], #2
 800746e:	bfb4      	ite	lt
 8007470:	222d      	movlt	r2, #45	; 0x2d
 8007472:	222b      	movge	r2, #43	; 0x2b
 8007474:	2909      	cmp	r1, #9
 8007476:	7042      	strb	r2, [r0, #1]
 8007478:	dd2a      	ble.n	80074d0 <__exponent+0x70>
 800747a:	f10d 0207 	add.w	r2, sp, #7
 800747e:	4617      	mov	r7, r2
 8007480:	260a      	movs	r6, #10
 8007482:	4694      	mov	ip, r2
 8007484:	fb91 f5f6 	sdiv	r5, r1, r6
 8007488:	fb06 1415 	mls	r4, r6, r5, r1
 800748c:	3430      	adds	r4, #48	; 0x30
 800748e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007492:	460c      	mov	r4, r1
 8007494:	2c63      	cmp	r4, #99	; 0x63
 8007496:	f102 32ff 	add.w	r2, r2, #4294967295
 800749a:	4629      	mov	r1, r5
 800749c:	dcf1      	bgt.n	8007482 <__exponent+0x22>
 800749e:	3130      	adds	r1, #48	; 0x30
 80074a0:	f1ac 0402 	sub.w	r4, ip, #2
 80074a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074a8:	1c41      	adds	r1, r0, #1
 80074aa:	4622      	mov	r2, r4
 80074ac:	42ba      	cmp	r2, r7
 80074ae:	d30a      	bcc.n	80074c6 <__exponent+0x66>
 80074b0:	f10d 0209 	add.w	r2, sp, #9
 80074b4:	eba2 020c 	sub.w	r2, r2, ip
 80074b8:	42bc      	cmp	r4, r7
 80074ba:	bf88      	it	hi
 80074bc:	2200      	movhi	r2, #0
 80074be:	4413      	add	r3, r2
 80074c0:	1a18      	subs	r0, r3, r0
 80074c2:	b003      	add	sp, #12
 80074c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80074ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 80074ce:	e7ed      	b.n	80074ac <__exponent+0x4c>
 80074d0:	2330      	movs	r3, #48	; 0x30
 80074d2:	3130      	adds	r1, #48	; 0x30
 80074d4:	7083      	strb	r3, [r0, #2]
 80074d6:	70c1      	strb	r1, [r0, #3]
 80074d8:	1d03      	adds	r3, r0, #4
 80074da:	e7f1      	b.n	80074c0 <__exponent+0x60>

080074dc <_printf_float>:
 80074dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e0:	ed2d 8b02 	vpush	{d8}
 80074e4:	b08d      	sub	sp, #52	; 0x34
 80074e6:	460c      	mov	r4, r1
 80074e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80074ec:	4616      	mov	r6, r2
 80074ee:	461f      	mov	r7, r3
 80074f0:	4605      	mov	r5, r0
 80074f2:	f000 fcfb 	bl	8007eec <_localeconv_r>
 80074f6:	f8d0 a000 	ldr.w	sl, [r0]
 80074fa:	4650      	mov	r0, sl
 80074fc:	f7f8 fec0 	bl	8000280 <strlen>
 8007500:	2300      	movs	r3, #0
 8007502:	930a      	str	r3, [sp, #40]	; 0x28
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	9305      	str	r3, [sp, #20]
 8007508:	f8d8 3000 	ldr.w	r3, [r8]
 800750c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007510:	3307      	adds	r3, #7
 8007512:	f023 0307 	bic.w	r3, r3, #7
 8007516:	f103 0208 	add.w	r2, r3, #8
 800751a:	f8c8 2000 	str.w	r2, [r8]
 800751e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007522:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007526:	9307      	str	r3, [sp, #28]
 8007528:	f8cd 8018 	str.w	r8, [sp, #24]
 800752c:	ee08 0a10 	vmov	s16, r0
 8007530:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007534:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007538:	4b9e      	ldr	r3, [pc, #632]	; (80077b4 <_printf_float+0x2d8>)
 800753a:	f04f 32ff 	mov.w	r2, #4294967295
 800753e:	f7f9 fafd 	bl	8000b3c <__aeabi_dcmpun>
 8007542:	bb88      	cbnz	r0, 80075a8 <_printf_float+0xcc>
 8007544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007548:	4b9a      	ldr	r3, [pc, #616]	; (80077b4 <_printf_float+0x2d8>)
 800754a:	f04f 32ff 	mov.w	r2, #4294967295
 800754e:	f7f9 fad7 	bl	8000b00 <__aeabi_dcmple>
 8007552:	bb48      	cbnz	r0, 80075a8 <_printf_float+0xcc>
 8007554:	2200      	movs	r2, #0
 8007556:	2300      	movs	r3, #0
 8007558:	4640      	mov	r0, r8
 800755a:	4649      	mov	r1, r9
 800755c:	f7f9 fac6 	bl	8000aec <__aeabi_dcmplt>
 8007560:	b110      	cbz	r0, 8007568 <_printf_float+0x8c>
 8007562:	232d      	movs	r3, #45	; 0x2d
 8007564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007568:	4a93      	ldr	r2, [pc, #588]	; (80077b8 <_printf_float+0x2dc>)
 800756a:	4b94      	ldr	r3, [pc, #592]	; (80077bc <_printf_float+0x2e0>)
 800756c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007570:	bf94      	ite	ls
 8007572:	4690      	movls	r8, r2
 8007574:	4698      	movhi	r8, r3
 8007576:	2303      	movs	r3, #3
 8007578:	6123      	str	r3, [r4, #16]
 800757a:	9b05      	ldr	r3, [sp, #20]
 800757c:	f023 0304 	bic.w	r3, r3, #4
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	f04f 0900 	mov.w	r9, #0
 8007586:	9700      	str	r7, [sp, #0]
 8007588:	4633      	mov	r3, r6
 800758a:	aa0b      	add	r2, sp, #44	; 0x2c
 800758c:	4621      	mov	r1, r4
 800758e:	4628      	mov	r0, r5
 8007590:	f000 f9da 	bl	8007948 <_printf_common>
 8007594:	3001      	adds	r0, #1
 8007596:	f040 8090 	bne.w	80076ba <_printf_float+0x1de>
 800759a:	f04f 30ff 	mov.w	r0, #4294967295
 800759e:	b00d      	add	sp, #52	; 0x34
 80075a0:	ecbd 8b02 	vpop	{d8}
 80075a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a8:	4642      	mov	r2, r8
 80075aa:	464b      	mov	r3, r9
 80075ac:	4640      	mov	r0, r8
 80075ae:	4649      	mov	r1, r9
 80075b0:	f7f9 fac4 	bl	8000b3c <__aeabi_dcmpun>
 80075b4:	b140      	cbz	r0, 80075c8 <_printf_float+0xec>
 80075b6:	464b      	mov	r3, r9
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	bfbc      	itt	lt
 80075bc:	232d      	movlt	r3, #45	; 0x2d
 80075be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075c2:	4a7f      	ldr	r2, [pc, #508]	; (80077c0 <_printf_float+0x2e4>)
 80075c4:	4b7f      	ldr	r3, [pc, #508]	; (80077c4 <_printf_float+0x2e8>)
 80075c6:	e7d1      	b.n	800756c <_printf_float+0x90>
 80075c8:	6863      	ldr	r3, [r4, #4]
 80075ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80075ce:	9206      	str	r2, [sp, #24]
 80075d0:	1c5a      	adds	r2, r3, #1
 80075d2:	d13f      	bne.n	8007654 <_printf_float+0x178>
 80075d4:	2306      	movs	r3, #6
 80075d6:	6063      	str	r3, [r4, #4]
 80075d8:	9b05      	ldr	r3, [sp, #20]
 80075da:	6861      	ldr	r1, [r4, #4]
 80075dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80075e0:	2300      	movs	r3, #0
 80075e2:	9303      	str	r3, [sp, #12]
 80075e4:	ab0a      	add	r3, sp, #40	; 0x28
 80075e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80075ea:	ab09      	add	r3, sp, #36	; 0x24
 80075ec:	ec49 8b10 	vmov	d0, r8, r9
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	6022      	str	r2, [r4, #0]
 80075f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80075f8:	4628      	mov	r0, r5
 80075fa:	f7ff fecf 	bl	800739c <__cvt>
 80075fe:	9b06      	ldr	r3, [sp, #24]
 8007600:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007602:	2b47      	cmp	r3, #71	; 0x47
 8007604:	4680      	mov	r8, r0
 8007606:	d108      	bne.n	800761a <_printf_float+0x13e>
 8007608:	1cc8      	adds	r0, r1, #3
 800760a:	db02      	blt.n	8007612 <_printf_float+0x136>
 800760c:	6863      	ldr	r3, [r4, #4]
 800760e:	4299      	cmp	r1, r3
 8007610:	dd41      	ble.n	8007696 <_printf_float+0x1ba>
 8007612:	f1ab 0302 	sub.w	r3, fp, #2
 8007616:	fa5f fb83 	uxtb.w	fp, r3
 800761a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800761e:	d820      	bhi.n	8007662 <_printf_float+0x186>
 8007620:	3901      	subs	r1, #1
 8007622:	465a      	mov	r2, fp
 8007624:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007628:	9109      	str	r1, [sp, #36]	; 0x24
 800762a:	f7ff ff19 	bl	8007460 <__exponent>
 800762e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007630:	1813      	adds	r3, r2, r0
 8007632:	2a01      	cmp	r2, #1
 8007634:	4681      	mov	r9, r0
 8007636:	6123      	str	r3, [r4, #16]
 8007638:	dc02      	bgt.n	8007640 <_printf_float+0x164>
 800763a:	6822      	ldr	r2, [r4, #0]
 800763c:	07d2      	lsls	r2, r2, #31
 800763e:	d501      	bpl.n	8007644 <_printf_float+0x168>
 8007640:	3301      	adds	r3, #1
 8007642:	6123      	str	r3, [r4, #16]
 8007644:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007648:	2b00      	cmp	r3, #0
 800764a:	d09c      	beq.n	8007586 <_printf_float+0xaa>
 800764c:	232d      	movs	r3, #45	; 0x2d
 800764e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007652:	e798      	b.n	8007586 <_printf_float+0xaa>
 8007654:	9a06      	ldr	r2, [sp, #24]
 8007656:	2a47      	cmp	r2, #71	; 0x47
 8007658:	d1be      	bne.n	80075d8 <_printf_float+0xfc>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1bc      	bne.n	80075d8 <_printf_float+0xfc>
 800765e:	2301      	movs	r3, #1
 8007660:	e7b9      	b.n	80075d6 <_printf_float+0xfa>
 8007662:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007666:	d118      	bne.n	800769a <_printf_float+0x1be>
 8007668:	2900      	cmp	r1, #0
 800766a:	6863      	ldr	r3, [r4, #4]
 800766c:	dd0b      	ble.n	8007686 <_printf_float+0x1aa>
 800766e:	6121      	str	r1, [r4, #16]
 8007670:	b913      	cbnz	r3, 8007678 <_printf_float+0x19c>
 8007672:	6822      	ldr	r2, [r4, #0]
 8007674:	07d0      	lsls	r0, r2, #31
 8007676:	d502      	bpl.n	800767e <_printf_float+0x1a2>
 8007678:	3301      	adds	r3, #1
 800767a:	440b      	add	r3, r1
 800767c:	6123      	str	r3, [r4, #16]
 800767e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007680:	f04f 0900 	mov.w	r9, #0
 8007684:	e7de      	b.n	8007644 <_printf_float+0x168>
 8007686:	b913      	cbnz	r3, 800768e <_printf_float+0x1b2>
 8007688:	6822      	ldr	r2, [r4, #0]
 800768a:	07d2      	lsls	r2, r2, #31
 800768c:	d501      	bpl.n	8007692 <_printf_float+0x1b6>
 800768e:	3302      	adds	r3, #2
 8007690:	e7f4      	b.n	800767c <_printf_float+0x1a0>
 8007692:	2301      	movs	r3, #1
 8007694:	e7f2      	b.n	800767c <_printf_float+0x1a0>
 8007696:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800769a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800769c:	4299      	cmp	r1, r3
 800769e:	db05      	blt.n	80076ac <_printf_float+0x1d0>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	6121      	str	r1, [r4, #16]
 80076a4:	07d8      	lsls	r0, r3, #31
 80076a6:	d5ea      	bpl.n	800767e <_printf_float+0x1a2>
 80076a8:	1c4b      	adds	r3, r1, #1
 80076aa:	e7e7      	b.n	800767c <_printf_float+0x1a0>
 80076ac:	2900      	cmp	r1, #0
 80076ae:	bfd4      	ite	le
 80076b0:	f1c1 0202 	rsble	r2, r1, #2
 80076b4:	2201      	movgt	r2, #1
 80076b6:	4413      	add	r3, r2
 80076b8:	e7e0      	b.n	800767c <_printf_float+0x1a0>
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	055a      	lsls	r2, r3, #21
 80076be:	d407      	bmi.n	80076d0 <_printf_float+0x1f4>
 80076c0:	6923      	ldr	r3, [r4, #16]
 80076c2:	4642      	mov	r2, r8
 80076c4:	4631      	mov	r1, r6
 80076c6:	4628      	mov	r0, r5
 80076c8:	47b8      	blx	r7
 80076ca:	3001      	adds	r0, #1
 80076cc:	d12c      	bne.n	8007728 <_printf_float+0x24c>
 80076ce:	e764      	b.n	800759a <_printf_float+0xbe>
 80076d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076d4:	f240 80e0 	bls.w	8007898 <_printf_float+0x3bc>
 80076d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076dc:	2200      	movs	r2, #0
 80076de:	2300      	movs	r3, #0
 80076e0:	f7f9 f9fa 	bl	8000ad8 <__aeabi_dcmpeq>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d034      	beq.n	8007752 <_printf_float+0x276>
 80076e8:	4a37      	ldr	r2, [pc, #220]	; (80077c8 <_printf_float+0x2ec>)
 80076ea:	2301      	movs	r3, #1
 80076ec:	4631      	mov	r1, r6
 80076ee:	4628      	mov	r0, r5
 80076f0:	47b8      	blx	r7
 80076f2:	3001      	adds	r0, #1
 80076f4:	f43f af51 	beq.w	800759a <_printf_float+0xbe>
 80076f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076fc:	429a      	cmp	r2, r3
 80076fe:	db02      	blt.n	8007706 <_printf_float+0x22a>
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	07d8      	lsls	r0, r3, #31
 8007704:	d510      	bpl.n	8007728 <_printf_float+0x24c>
 8007706:	ee18 3a10 	vmov	r3, s16
 800770a:	4652      	mov	r2, sl
 800770c:	4631      	mov	r1, r6
 800770e:	4628      	mov	r0, r5
 8007710:	47b8      	blx	r7
 8007712:	3001      	adds	r0, #1
 8007714:	f43f af41 	beq.w	800759a <_printf_float+0xbe>
 8007718:	f04f 0800 	mov.w	r8, #0
 800771c:	f104 091a 	add.w	r9, r4, #26
 8007720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007722:	3b01      	subs	r3, #1
 8007724:	4543      	cmp	r3, r8
 8007726:	dc09      	bgt.n	800773c <_printf_float+0x260>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	079b      	lsls	r3, r3, #30
 800772c:	f100 8107 	bmi.w	800793e <_printf_float+0x462>
 8007730:	68e0      	ldr	r0, [r4, #12]
 8007732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007734:	4298      	cmp	r0, r3
 8007736:	bfb8      	it	lt
 8007738:	4618      	movlt	r0, r3
 800773a:	e730      	b.n	800759e <_printf_float+0xc2>
 800773c:	2301      	movs	r3, #1
 800773e:	464a      	mov	r2, r9
 8007740:	4631      	mov	r1, r6
 8007742:	4628      	mov	r0, r5
 8007744:	47b8      	blx	r7
 8007746:	3001      	adds	r0, #1
 8007748:	f43f af27 	beq.w	800759a <_printf_float+0xbe>
 800774c:	f108 0801 	add.w	r8, r8, #1
 8007750:	e7e6      	b.n	8007720 <_printf_float+0x244>
 8007752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007754:	2b00      	cmp	r3, #0
 8007756:	dc39      	bgt.n	80077cc <_printf_float+0x2f0>
 8007758:	4a1b      	ldr	r2, [pc, #108]	; (80077c8 <_printf_float+0x2ec>)
 800775a:	2301      	movs	r3, #1
 800775c:	4631      	mov	r1, r6
 800775e:	4628      	mov	r0, r5
 8007760:	47b8      	blx	r7
 8007762:	3001      	adds	r0, #1
 8007764:	f43f af19 	beq.w	800759a <_printf_float+0xbe>
 8007768:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800776c:	4313      	orrs	r3, r2
 800776e:	d102      	bne.n	8007776 <_printf_float+0x29a>
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	07d9      	lsls	r1, r3, #31
 8007774:	d5d8      	bpl.n	8007728 <_printf_float+0x24c>
 8007776:	ee18 3a10 	vmov	r3, s16
 800777a:	4652      	mov	r2, sl
 800777c:	4631      	mov	r1, r6
 800777e:	4628      	mov	r0, r5
 8007780:	47b8      	blx	r7
 8007782:	3001      	adds	r0, #1
 8007784:	f43f af09 	beq.w	800759a <_printf_float+0xbe>
 8007788:	f04f 0900 	mov.w	r9, #0
 800778c:	f104 0a1a 	add.w	sl, r4, #26
 8007790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007792:	425b      	negs	r3, r3
 8007794:	454b      	cmp	r3, r9
 8007796:	dc01      	bgt.n	800779c <_printf_float+0x2c0>
 8007798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800779a:	e792      	b.n	80076c2 <_printf_float+0x1e6>
 800779c:	2301      	movs	r3, #1
 800779e:	4652      	mov	r2, sl
 80077a0:	4631      	mov	r1, r6
 80077a2:	4628      	mov	r0, r5
 80077a4:	47b8      	blx	r7
 80077a6:	3001      	adds	r0, #1
 80077a8:	f43f aef7 	beq.w	800759a <_printf_float+0xbe>
 80077ac:	f109 0901 	add.w	r9, r9, #1
 80077b0:	e7ee      	b.n	8007790 <_printf_float+0x2b4>
 80077b2:	bf00      	nop
 80077b4:	7fefffff 	.word	0x7fefffff
 80077b8:	0800a130 	.word	0x0800a130
 80077bc:	0800a134 	.word	0x0800a134
 80077c0:	0800a138 	.word	0x0800a138
 80077c4:	0800a13c 	.word	0x0800a13c
 80077c8:	0800a140 	.word	0x0800a140
 80077cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077d0:	429a      	cmp	r2, r3
 80077d2:	bfa8      	it	ge
 80077d4:	461a      	movge	r2, r3
 80077d6:	2a00      	cmp	r2, #0
 80077d8:	4691      	mov	r9, r2
 80077da:	dc37      	bgt.n	800784c <_printf_float+0x370>
 80077dc:	f04f 0b00 	mov.w	fp, #0
 80077e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077e4:	f104 021a 	add.w	r2, r4, #26
 80077e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077ea:	9305      	str	r3, [sp, #20]
 80077ec:	eba3 0309 	sub.w	r3, r3, r9
 80077f0:	455b      	cmp	r3, fp
 80077f2:	dc33      	bgt.n	800785c <_printf_float+0x380>
 80077f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077f8:	429a      	cmp	r2, r3
 80077fa:	db3b      	blt.n	8007874 <_printf_float+0x398>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	07da      	lsls	r2, r3, #31
 8007800:	d438      	bmi.n	8007874 <_printf_float+0x398>
 8007802:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007806:	eba2 0903 	sub.w	r9, r2, r3
 800780a:	9b05      	ldr	r3, [sp, #20]
 800780c:	1ad2      	subs	r2, r2, r3
 800780e:	4591      	cmp	r9, r2
 8007810:	bfa8      	it	ge
 8007812:	4691      	movge	r9, r2
 8007814:	f1b9 0f00 	cmp.w	r9, #0
 8007818:	dc35      	bgt.n	8007886 <_printf_float+0x3aa>
 800781a:	f04f 0800 	mov.w	r8, #0
 800781e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007822:	f104 0a1a 	add.w	sl, r4, #26
 8007826:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800782a:	1a9b      	subs	r3, r3, r2
 800782c:	eba3 0309 	sub.w	r3, r3, r9
 8007830:	4543      	cmp	r3, r8
 8007832:	f77f af79 	ble.w	8007728 <_printf_float+0x24c>
 8007836:	2301      	movs	r3, #1
 8007838:	4652      	mov	r2, sl
 800783a:	4631      	mov	r1, r6
 800783c:	4628      	mov	r0, r5
 800783e:	47b8      	blx	r7
 8007840:	3001      	adds	r0, #1
 8007842:	f43f aeaa 	beq.w	800759a <_printf_float+0xbe>
 8007846:	f108 0801 	add.w	r8, r8, #1
 800784a:	e7ec      	b.n	8007826 <_printf_float+0x34a>
 800784c:	4613      	mov	r3, r2
 800784e:	4631      	mov	r1, r6
 8007850:	4642      	mov	r2, r8
 8007852:	4628      	mov	r0, r5
 8007854:	47b8      	blx	r7
 8007856:	3001      	adds	r0, #1
 8007858:	d1c0      	bne.n	80077dc <_printf_float+0x300>
 800785a:	e69e      	b.n	800759a <_printf_float+0xbe>
 800785c:	2301      	movs	r3, #1
 800785e:	4631      	mov	r1, r6
 8007860:	4628      	mov	r0, r5
 8007862:	9205      	str	r2, [sp, #20]
 8007864:	47b8      	blx	r7
 8007866:	3001      	adds	r0, #1
 8007868:	f43f ae97 	beq.w	800759a <_printf_float+0xbe>
 800786c:	9a05      	ldr	r2, [sp, #20]
 800786e:	f10b 0b01 	add.w	fp, fp, #1
 8007872:	e7b9      	b.n	80077e8 <_printf_float+0x30c>
 8007874:	ee18 3a10 	vmov	r3, s16
 8007878:	4652      	mov	r2, sl
 800787a:	4631      	mov	r1, r6
 800787c:	4628      	mov	r0, r5
 800787e:	47b8      	blx	r7
 8007880:	3001      	adds	r0, #1
 8007882:	d1be      	bne.n	8007802 <_printf_float+0x326>
 8007884:	e689      	b.n	800759a <_printf_float+0xbe>
 8007886:	9a05      	ldr	r2, [sp, #20]
 8007888:	464b      	mov	r3, r9
 800788a:	4442      	add	r2, r8
 800788c:	4631      	mov	r1, r6
 800788e:	4628      	mov	r0, r5
 8007890:	47b8      	blx	r7
 8007892:	3001      	adds	r0, #1
 8007894:	d1c1      	bne.n	800781a <_printf_float+0x33e>
 8007896:	e680      	b.n	800759a <_printf_float+0xbe>
 8007898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800789a:	2a01      	cmp	r2, #1
 800789c:	dc01      	bgt.n	80078a2 <_printf_float+0x3c6>
 800789e:	07db      	lsls	r3, r3, #31
 80078a0:	d53a      	bpl.n	8007918 <_printf_float+0x43c>
 80078a2:	2301      	movs	r3, #1
 80078a4:	4642      	mov	r2, r8
 80078a6:	4631      	mov	r1, r6
 80078a8:	4628      	mov	r0, r5
 80078aa:	47b8      	blx	r7
 80078ac:	3001      	adds	r0, #1
 80078ae:	f43f ae74 	beq.w	800759a <_printf_float+0xbe>
 80078b2:	ee18 3a10 	vmov	r3, s16
 80078b6:	4652      	mov	r2, sl
 80078b8:	4631      	mov	r1, r6
 80078ba:	4628      	mov	r0, r5
 80078bc:	47b8      	blx	r7
 80078be:	3001      	adds	r0, #1
 80078c0:	f43f ae6b 	beq.w	800759a <_printf_float+0xbe>
 80078c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078c8:	2200      	movs	r2, #0
 80078ca:	2300      	movs	r3, #0
 80078cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80078d0:	f7f9 f902 	bl	8000ad8 <__aeabi_dcmpeq>
 80078d4:	b9d8      	cbnz	r0, 800790e <_printf_float+0x432>
 80078d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80078da:	f108 0201 	add.w	r2, r8, #1
 80078de:	4631      	mov	r1, r6
 80078e0:	4628      	mov	r0, r5
 80078e2:	47b8      	blx	r7
 80078e4:	3001      	adds	r0, #1
 80078e6:	d10e      	bne.n	8007906 <_printf_float+0x42a>
 80078e8:	e657      	b.n	800759a <_printf_float+0xbe>
 80078ea:	2301      	movs	r3, #1
 80078ec:	4652      	mov	r2, sl
 80078ee:	4631      	mov	r1, r6
 80078f0:	4628      	mov	r0, r5
 80078f2:	47b8      	blx	r7
 80078f4:	3001      	adds	r0, #1
 80078f6:	f43f ae50 	beq.w	800759a <_printf_float+0xbe>
 80078fa:	f108 0801 	add.w	r8, r8, #1
 80078fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007900:	3b01      	subs	r3, #1
 8007902:	4543      	cmp	r3, r8
 8007904:	dcf1      	bgt.n	80078ea <_printf_float+0x40e>
 8007906:	464b      	mov	r3, r9
 8007908:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800790c:	e6da      	b.n	80076c4 <_printf_float+0x1e8>
 800790e:	f04f 0800 	mov.w	r8, #0
 8007912:	f104 0a1a 	add.w	sl, r4, #26
 8007916:	e7f2      	b.n	80078fe <_printf_float+0x422>
 8007918:	2301      	movs	r3, #1
 800791a:	4642      	mov	r2, r8
 800791c:	e7df      	b.n	80078de <_printf_float+0x402>
 800791e:	2301      	movs	r3, #1
 8007920:	464a      	mov	r2, r9
 8007922:	4631      	mov	r1, r6
 8007924:	4628      	mov	r0, r5
 8007926:	47b8      	blx	r7
 8007928:	3001      	adds	r0, #1
 800792a:	f43f ae36 	beq.w	800759a <_printf_float+0xbe>
 800792e:	f108 0801 	add.w	r8, r8, #1
 8007932:	68e3      	ldr	r3, [r4, #12]
 8007934:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007936:	1a5b      	subs	r3, r3, r1
 8007938:	4543      	cmp	r3, r8
 800793a:	dcf0      	bgt.n	800791e <_printf_float+0x442>
 800793c:	e6f8      	b.n	8007730 <_printf_float+0x254>
 800793e:	f04f 0800 	mov.w	r8, #0
 8007942:	f104 0919 	add.w	r9, r4, #25
 8007946:	e7f4      	b.n	8007932 <_printf_float+0x456>

08007948 <_printf_common>:
 8007948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800794c:	4616      	mov	r6, r2
 800794e:	4699      	mov	r9, r3
 8007950:	688a      	ldr	r2, [r1, #8]
 8007952:	690b      	ldr	r3, [r1, #16]
 8007954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007958:	4293      	cmp	r3, r2
 800795a:	bfb8      	it	lt
 800795c:	4613      	movlt	r3, r2
 800795e:	6033      	str	r3, [r6, #0]
 8007960:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007964:	4607      	mov	r7, r0
 8007966:	460c      	mov	r4, r1
 8007968:	b10a      	cbz	r2, 800796e <_printf_common+0x26>
 800796a:	3301      	adds	r3, #1
 800796c:	6033      	str	r3, [r6, #0]
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	0699      	lsls	r1, r3, #26
 8007972:	bf42      	ittt	mi
 8007974:	6833      	ldrmi	r3, [r6, #0]
 8007976:	3302      	addmi	r3, #2
 8007978:	6033      	strmi	r3, [r6, #0]
 800797a:	6825      	ldr	r5, [r4, #0]
 800797c:	f015 0506 	ands.w	r5, r5, #6
 8007980:	d106      	bne.n	8007990 <_printf_common+0x48>
 8007982:	f104 0a19 	add.w	sl, r4, #25
 8007986:	68e3      	ldr	r3, [r4, #12]
 8007988:	6832      	ldr	r2, [r6, #0]
 800798a:	1a9b      	subs	r3, r3, r2
 800798c:	42ab      	cmp	r3, r5
 800798e:	dc26      	bgt.n	80079de <_printf_common+0x96>
 8007990:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007994:	1e13      	subs	r3, r2, #0
 8007996:	6822      	ldr	r2, [r4, #0]
 8007998:	bf18      	it	ne
 800799a:	2301      	movne	r3, #1
 800799c:	0692      	lsls	r2, r2, #26
 800799e:	d42b      	bmi.n	80079f8 <_printf_common+0xb0>
 80079a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079a4:	4649      	mov	r1, r9
 80079a6:	4638      	mov	r0, r7
 80079a8:	47c0      	blx	r8
 80079aa:	3001      	adds	r0, #1
 80079ac:	d01e      	beq.n	80079ec <_printf_common+0xa4>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	6922      	ldr	r2, [r4, #16]
 80079b2:	f003 0306 	and.w	r3, r3, #6
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	bf02      	ittt	eq
 80079ba:	68e5      	ldreq	r5, [r4, #12]
 80079bc:	6833      	ldreq	r3, [r6, #0]
 80079be:	1aed      	subeq	r5, r5, r3
 80079c0:	68a3      	ldr	r3, [r4, #8]
 80079c2:	bf0c      	ite	eq
 80079c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079c8:	2500      	movne	r5, #0
 80079ca:	4293      	cmp	r3, r2
 80079cc:	bfc4      	itt	gt
 80079ce:	1a9b      	subgt	r3, r3, r2
 80079d0:	18ed      	addgt	r5, r5, r3
 80079d2:	2600      	movs	r6, #0
 80079d4:	341a      	adds	r4, #26
 80079d6:	42b5      	cmp	r5, r6
 80079d8:	d11a      	bne.n	8007a10 <_printf_common+0xc8>
 80079da:	2000      	movs	r0, #0
 80079dc:	e008      	b.n	80079f0 <_printf_common+0xa8>
 80079de:	2301      	movs	r3, #1
 80079e0:	4652      	mov	r2, sl
 80079e2:	4649      	mov	r1, r9
 80079e4:	4638      	mov	r0, r7
 80079e6:	47c0      	blx	r8
 80079e8:	3001      	adds	r0, #1
 80079ea:	d103      	bne.n	80079f4 <_printf_common+0xac>
 80079ec:	f04f 30ff 	mov.w	r0, #4294967295
 80079f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079f4:	3501      	adds	r5, #1
 80079f6:	e7c6      	b.n	8007986 <_printf_common+0x3e>
 80079f8:	18e1      	adds	r1, r4, r3
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	2030      	movs	r0, #48	; 0x30
 80079fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a02:	4422      	add	r2, r4
 8007a04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a0c:	3302      	adds	r3, #2
 8007a0e:	e7c7      	b.n	80079a0 <_printf_common+0x58>
 8007a10:	2301      	movs	r3, #1
 8007a12:	4622      	mov	r2, r4
 8007a14:	4649      	mov	r1, r9
 8007a16:	4638      	mov	r0, r7
 8007a18:	47c0      	blx	r8
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	d0e6      	beq.n	80079ec <_printf_common+0xa4>
 8007a1e:	3601      	adds	r6, #1
 8007a20:	e7d9      	b.n	80079d6 <_printf_common+0x8e>
	...

08007a24 <_printf_i>:
 8007a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a28:	7e0f      	ldrb	r7, [r1, #24]
 8007a2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a2c:	2f78      	cmp	r7, #120	; 0x78
 8007a2e:	4691      	mov	r9, r2
 8007a30:	4680      	mov	r8, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	469a      	mov	sl, r3
 8007a36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a3a:	d807      	bhi.n	8007a4c <_printf_i+0x28>
 8007a3c:	2f62      	cmp	r7, #98	; 0x62
 8007a3e:	d80a      	bhi.n	8007a56 <_printf_i+0x32>
 8007a40:	2f00      	cmp	r7, #0
 8007a42:	f000 80d4 	beq.w	8007bee <_printf_i+0x1ca>
 8007a46:	2f58      	cmp	r7, #88	; 0x58
 8007a48:	f000 80c0 	beq.w	8007bcc <_printf_i+0x1a8>
 8007a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a54:	e03a      	b.n	8007acc <_printf_i+0xa8>
 8007a56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a5a:	2b15      	cmp	r3, #21
 8007a5c:	d8f6      	bhi.n	8007a4c <_printf_i+0x28>
 8007a5e:	a101      	add	r1, pc, #4	; (adr r1, 8007a64 <_printf_i+0x40>)
 8007a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a64:	08007abd 	.word	0x08007abd
 8007a68:	08007ad1 	.word	0x08007ad1
 8007a6c:	08007a4d 	.word	0x08007a4d
 8007a70:	08007a4d 	.word	0x08007a4d
 8007a74:	08007a4d 	.word	0x08007a4d
 8007a78:	08007a4d 	.word	0x08007a4d
 8007a7c:	08007ad1 	.word	0x08007ad1
 8007a80:	08007a4d 	.word	0x08007a4d
 8007a84:	08007a4d 	.word	0x08007a4d
 8007a88:	08007a4d 	.word	0x08007a4d
 8007a8c:	08007a4d 	.word	0x08007a4d
 8007a90:	08007bd5 	.word	0x08007bd5
 8007a94:	08007afd 	.word	0x08007afd
 8007a98:	08007b8f 	.word	0x08007b8f
 8007a9c:	08007a4d 	.word	0x08007a4d
 8007aa0:	08007a4d 	.word	0x08007a4d
 8007aa4:	08007bf7 	.word	0x08007bf7
 8007aa8:	08007a4d 	.word	0x08007a4d
 8007aac:	08007afd 	.word	0x08007afd
 8007ab0:	08007a4d 	.word	0x08007a4d
 8007ab4:	08007a4d 	.word	0x08007a4d
 8007ab8:	08007b97 	.word	0x08007b97
 8007abc:	682b      	ldr	r3, [r5, #0]
 8007abe:	1d1a      	adds	r2, r3, #4
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	602a      	str	r2, [r5, #0]
 8007ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007acc:	2301      	movs	r3, #1
 8007ace:	e09f      	b.n	8007c10 <_printf_i+0x1ec>
 8007ad0:	6820      	ldr	r0, [r4, #0]
 8007ad2:	682b      	ldr	r3, [r5, #0]
 8007ad4:	0607      	lsls	r7, r0, #24
 8007ad6:	f103 0104 	add.w	r1, r3, #4
 8007ada:	6029      	str	r1, [r5, #0]
 8007adc:	d501      	bpl.n	8007ae2 <_printf_i+0xbe>
 8007ade:	681e      	ldr	r6, [r3, #0]
 8007ae0:	e003      	b.n	8007aea <_printf_i+0xc6>
 8007ae2:	0646      	lsls	r6, r0, #25
 8007ae4:	d5fb      	bpl.n	8007ade <_printf_i+0xba>
 8007ae6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007aea:	2e00      	cmp	r6, #0
 8007aec:	da03      	bge.n	8007af6 <_printf_i+0xd2>
 8007aee:	232d      	movs	r3, #45	; 0x2d
 8007af0:	4276      	negs	r6, r6
 8007af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007af6:	485a      	ldr	r0, [pc, #360]	; (8007c60 <_printf_i+0x23c>)
 8007af8:	230a      	movs	r3, #10
 8007afa:	e012      	b.n	8007b22 <_printf_i+0xfe>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	6820      	ldr	r0, [r4, #0]
 8007b00:	1d19      	adds	r1, r3, #4
 8007b02:	6029      	str	r1, [r5, #0]
 8007b04:	0605      	lsls	r5, r0, #24
 8007b06:	d501      	bpl.n	8007b0c <_printf_i+0xe8>
 8007b08:	681e      	ldr	r6, [r3, #0]
 8007b0a:	e002      	b.n	8007b12 <_printf_i+0xee>
 8007b0c:	0641      	lsls	r1, r0, #25
 8007b0e:	d5fb      	bpl.n	8007b08 <_printf_i+0xe4>
 8007b10:	881e      	ldrh	r6, [r3, #0]
 8007b12:	4853      	ldr	r0, [pc, #332]	; (8007c60 <_printf_i+0x23c>)
 8007b14:	2f6f      	cmp	r7, #111	; 0x6f
 8007b16:	bf0c      	ite	eq
 8007b18:	2308      	moveq	r3, #8
 8007b1a:	230a      	movne	r3, #10
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b22:	6865      	ldr	r5, [r4, #4]
 8007b24:	60a5      	str	r5, [r4, #8]
 8007b26:	2d00      	cmp	r5, #0
 8007b28:	bfa2      	ittt	ge
 8007b2a:	6821      	ldrge	r1, [r4, #0]
 8007b2c:	f021 0104 	bicge.w	r1, r1, #4
 8007b30:	6021      	strge	r1, [r4, #0]
 8007b32:	b90e      	cbnz	r6, 8007b38 <_printf_i+0x114>
 8007b34:	2d00      	cmp	r5, #0
 8007b36:	d04b      	beq.n	8007bd0 <_printf_i+0x1ac>
 8007b38:	4615      	mov	r5, r2
 8007b3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b3e:	fb03 6711 	mls	r7, r3, r1, r6
 8007b42:	5dc7      	ldrb	r7, [r0, r7]
 8007b44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b48:	4637      	mov	r7, r6
 8007b4a:	42bb      	cmp	r3, r7
 8007b4c:	460e      	mov	r6, r1
 8007b4e:	d9f4      	bls.n	8007b3a <_printf_i+0x116>
 8007b50:	2b08      	cmp	r3, #8
 8007b52:	d10b      	bne.n	8007b6c <_printf_i+0x148>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	07de      	lsls	r6, r3, #31
 8007b58:	d508      	bpl.n	8007b6c <_printf_i+0x148>
 8007b5a:	6923      	ldr	r3, [r4, #16]
 8007b5c:	6861      	ldr	r1, [r4, #4]
 8007b5e:	4299      	cmp	r1, r3
 8007b60:	bfde      	ittt	le
 8007b62:	2330      	movle	r3, #48	; 0x30
 8007b64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b6c:	1b52      	subs	r2, r2, r5
 8007b6e:	6122      	str	r2, [r4, #16]
 8007b70:	f8cd a000 	str.w	sl, [sp]
 8007b74:	464b      	mov	r3, r9
 8007b76:	aa03      	add	r2, sp, #12
 8007b78:	4621      	mov	r1, r4
 8007b7a:	4640      	mov	r0, r8
 8007b7c:	f7ff fee4 	bl	8007948 <_printf_common>
 8007b80:	3001      	adds	r0, #1
 8007b82:	d14a      	bne.n	8007c1a <_printf_i+0x1f6>
 8007b84:	f04f 30ff 	mov.w	r0, #4294967295
 8007b88:	b004      	add	sp, #16
 8007b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	f043 0320 	orr.w	r3, r3, #32
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	4833      	ldr	r0, [pc, #204]	; (8007c64 <_printf_i+0x240>)
 8007b98:	2778      	movs	r7, #120	; 0x78
 8007b9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	6829      	ldr	r1, [r5, #0]
 8007ba2:	061f      	lsls	r7, r3, #24
 8007ba4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ba8:	d402      	bmi.n	8007bb0 <_printf_i+0x18c>
 8007baa:	065f      	lsls	r7, r3, #25
 8007bac:	bf48      	it	mi
 8007bae:	b2b6      	uxthmi	r6, r6
 8007bb0:	07df      	lsls	r7, r3, #31
 8007bb2:	bf48      	it	mi
 8007bb4:	f043 0320 	orrmi.w	r3, r3, #32
 8007bb8:	6029      	str	r1, [r5, #0]
 8007bba:	bf48      	it	mi
 8007bbc:	6023      	strmi	r3, [r4, #0]
 8007bbe:	b91e      	cbnz	r6, 8007bc8 <_printf_i+0x1a4>
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	f023 0320 	bic.w	r3, r3, #32
 8007bc6:	6023      	str	r3, [r4, #0]
 8007bc8:	2310      	movs	r3, #16
 8007bca:	e7a7      	b.n	8007b1c <_printf_i+0xf8>
 8007bcc:	4824      	ldr	r0, [pc, #144]	; (8007c60 <_printf_i+0x23c>)
 8007bce:	e7e4      	b.n	8007b9a <_printf_i+0x176>
 8007bd0:	4615      	mov	r5, r2
 8007bd2:	e7bd      	b.n	8007b50 <_printf_i+0x12c>
 8007bd4:	682b      	ldr	r3, [r5, #0]
 8007bd6:	6826      	ldr	r6, [r4, #0]
 8007bd8:	6961      	ldr	r1, [r4, #20]
 8007bda:	1d18      	adds	r0, r3, #4
 8007bdc:	6028      	str	r0, [r5, #0]
 8007bde:	0635      	lsls	r5, r6, #24
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	d501      	bpl.n	8007be8 <_printf_i+0x1c4>
 8007be4:	6019      	str	r1, [r3, #0]
 8007be6:	e002      	b.n	8007bee <_printf_i+0x1ca>
 8007be8:	0670      	lsls	r0, r6, #25
 8007bea:	d5fb      	bpl.n	8007be4 <_printf_i+0x1c0>
 8007bec:	8019      	strh	r1, [r3, #0]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	6123      	str	r3, [r4, #16]
 8007bf2:	4615      	mov	r5, r2
 8007bf4:	e7bc      	b.n	8007b70 <_printf_i+0x14c>
 8007bf6:	682b      	ldr	r3, [r5, #0]
 8007bf8:	1d1a      	adds	r2, r3, #4
 8007bfa:	602a      	str	r2, [r5, #0]
 8007bfc:	681d      	ldr	r5, [r3, #0]
 8007bfe:	6862      	ldr	r2, [r4, #4]
 8007c00:	2100      	movs	r1, #0
 8007c02:	4628      	mov	r0, r5
 8007c04:	f7f8 faec 	bl	80001e0 <memchr>
 8007c08:	b108      	cbz	r0, 8007c0e <_printf_i+0x1ea>
 8007c0a:	1b40      	subs	r0, r0, r5
 8007c0c:	6060      	str	r0, [r4, #4]
 8007c0e:	6863      	ldr	r3, [r4, #4]
 8007c10:	6123      	str	r3, [r4, #16]
 8007c12:	2300      	movs	r3, #0
 8007c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c18:	e7aa      	b.n	8007b70 <_printf_i+0x14c>
 8007c1a:	6923      	ldr	r3, [r4, #16]
 8007c1c:	462a      	mov	r2, r5
 8007c1e:	4649      	mov	r1, r9
 8007c20:	4640      	mov	r0, r8
 8007c22:	47d0      	blx	sl
 8007c24:	3001      	adds	r0, #1
 8007c26:	d0ad      	beq.n	8007b84 <_printf_i+0x160>
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	079b      	lsls	r3, r3, #30
 8007c2c:	d413      	bmi.n	8007c56 <_printf_i+0x232>
 8007c2e:	68e0      	ldr	r0, [r4, #12]
 8007c30:	9b03      	ldr	r3, [sp, #12]
 8007c32:	4298      	cmp	r0, r3
 8007c34:	bfb8      	it	lt
 8007c36:	4618      	movlt	r0, r3
 8007c38:	e7a6      	b.n	8007b88 <_printf_i+0x164>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	4632      	mov	r2, r6
 8007c3e:	4649      	mov	r1, r9
 8007c40:	4640      	mov	r0, r8
 8007c42:	47d0      	blx	sl
 8007c44:	3001      	adds	r0, #1
 8007c46:	d09d      	beq.n	8007b84 <_printf_i+0x160>
 8007c48:	3501      	adds	r5, #1
 8007c4a:	68e3      	ldr	r3, [r4, #12]
 8007c4c:	9903      	ldr	r1, [sp, #12]
 8007c4e:	1a5b      	subs	r3, r3, r1
 8007c50:	42ab      	cmp	r3, r5
 8007c52:	dcf2      	bgt.n	8007c3a <_printf_i+0x216>
 8007c54:	e7eb      	b.n	8007c2e <_printf_i+0x20a>
 8007c56:	2500      	movs	r5, #0
 8007c58:	f104 0619 	add.w	r6, r4, #25
 8007c5c:	e7f5      	b.n	8007c4a <_printf_i+0x226>
 8007c5e:	bf00      	nop
 8007c60:	0800a142 	.word	0x0800a142
 8007c64:	0800a153 	.word	0x0800a153

08007c68 <std>:
 8007c68:	2300      	movs	r3, #0
 8007c6a:	b510      	push	{r4, lr}
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c76:	6083      	str	r3, [r0, #8]
 8007c78:	8181      	strh	r1, [r0, #12]
 8007c7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007c7c:	81c2      	strh	r2, [r0, #14]
 8007c7e:	6183      	str	r3, [r0, #24]
 8007c80:	4619      	mov	r1, r3
 8007c82:	2208      	movs	r2, #8
 8007c84:	305c      	adds	r0, #92	; 0x5c
 8007c86:	f000 f928 	bl	8007eda <memset>
 8007c8a:	4b0d      	ldr	r3, [pc, #52]	; (8007cc0 <std+0x58>)
 8007c8c:	6263      	str	r3, [r4, #36]	; 0x24
 8007c8e:	4b0d      	ldr	r3, [pc, #52]	; (8007cc4 <std+0x5c>)
 8007c90:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c92:	4b0d      	ldr	r3, [pc, #52]	; (8007cc8 <std+0x60>)
 8007c94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c96:	4b0d      	ldr	r3, [pc, #52]	; (8007ccc <std+0x64>)
 8007c98:	6323      	str	r3, [r4, #48]	; 0x30
 8007c9a:	4b0d      	ldr	r3, [pc, #52]	; (8007cd0 <std+0x68>)
 8007c9c:	6224      	str	r4, [r4, #32]
 8007c9e:	429c      	cmp	r4, r3
 8007ca0:	d006      	beq.n	8007cb0 <std+0x48>
 8007ca2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007ca6:	4294      	cmp	r4, r2
 8007ca8:	d002      	beq.n	8007cb0 <std+0x48>
 8007caa:	33d0      	adds	r3, #208	; 0xd0
 8007cac:	429c      	cmp	r4, r3
 8007cae:	d105      	bne.n	8007cbc <std+0x54>
 8007cb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cb8:	f000 b98c 	b.w	8007fd4 <__retarget_lock_init_recursive>
 8007cbc:	bd10      	pop	{r4, pc}
 8007cbe:	bf00      	nop
 8007cc0:	08007e55 	.word	0x08007e55
 8007cc4:	08007e77 	.word	0x08007e77
 8007cc8:	08007eaf 	.word	0x08007eaf
 8007ccc:	08007ed3 	.word	0x08007ed3
 8007cd0:	20000404 	.word	0x20000404

08007cd4 <stdio_exit_handler>:
 8007cd4:	4a02      	ldr	r2, [pc, #8]	; (8007ce0 <stdio_exit_handler+0xc>)
 8007cd6:	4903      	ldr	r1, [pc, #12]	; (8007ce4 <stdio_exit_handler+0x10>)
 8007cd8:	4803      	ldr	r0, [pc, #12]	; (8007ce8 <stdio_exit_handler+0x14>)
 8007cda:	f000 b869 	b.w	8007db0 <_fwalk_sglue>
 8007cde:	bf00      	nop
 8007ce0:	20000010 	.word	0x20000010
 8007ce4:	08009989 	.word	0x08009989
 8007ce8:	2000001c 	.word	0x2000001c

08007cec <cleanup_stdio>:
 8007cec:	6841      	ldr	r1, [r0, #4]
 8007cee:	4b0c      	ldr	r3, [pc, #48]	; (8007d20 <cleanup_stdio+0x34>)
 8007cf0:	4299      	cmp	r1, r3
 8007cf2:	b510      	push	{r4, lr}
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	d001      	beq.n	8007cfc <cleanup_stdio+0x10>
 8007cf8:	f001 fe46 	bl	8009988 <_fflush_r>
 8007cfc:	68a1      	ldr	r1, [r4, #8]
 8007cfe:	4b09      	ldr	r3, [pc, #36]	; (8007d24 <cleanup_stdio+0x38>)
 8007d00:	4299      	cmp	r1, r3
 8007d02:	d002      	beq.n	8007d0a <cleanup_stdio+0x1e>
 8007d04:	4620      	mov	r0, r4
 8007d06:	f001 fe3f 	bl	8009988 <_fflush_r>
 8007d0a:	68e1      	ldr	r1, [r4, #12]
 8007d0c:	4b06      	ldr	r3, [pc, #24]	; (8007d28 <cleanup_stdio+0x3c>)
 8007d0e:	4299      	cmp	r1, r3
 8007d10:	d004      	beq.n	8007d1c <cleanup_stdio+0x30>
 8007d12:	4620      	mov	r0, r4
 8007d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d18:	f001 be36 	b.w	8009988 <_fflush_r>
 8007d1c:	bd10      	pop	{r4, pc}
 8007d1e:	bf00      	nop
 8007d20:	20000404 	.word	0x20000404
 8007d24:	2000046c 	.word	0x2000046c
 8007d28:	200004d4 	.word	0x200004d4

08007d2c <global_stdio_init.part.0>:
 8007d2c:	b510      	push	{r4, lr}
 8007d2e:	4b0b      	ldr	r3, [pc, #44]	; (8007d5c <global_stdio_init.part.0+0x30>)
 8007d30:	4c0b      	ldr	r4, [pc, #44]	; (8007d60 <global_stdio_init.part.0+0x34>)
 8007d32:	4a0c      	ldr	r2, [pc, #48]	; (8007d64 <global_stdio_init.part.0+0x38>)
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	4620      	mov	r0, r4
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2104      	movs	r1, #4
 8007d3c:	f7ff ff94 	bl	8007c68 <std>
 8007d40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d44:	2201      	movs	r2, #1
 8007d46:	2109      	movs	r1, #9
 8007d48:	f7ff ff8e 	bl	8007c68 <std>
 8007d4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d50:	2202      	movs	r2, #2
 8007d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d56:	2112      	movs	r1, #18
 8007d58:	f7ff bf86 	b.w	8007c68 <std>
 8007d5c:	2000053c 	.word	0x2000053c
 8007d60:	20000404 	.word	0x20000404
 8007d64:	08007cd5 	.word	0x08007cd5

08007d68 <__sfp_lock_acquire>:
 8007d68:	4801      	ldr	r0, [pc, #4]	; (8007d70 <__sfp_lock_acquire+0x8>)
 8007d6a:	f000 b934 	b.w	8007fd6 <__retarget_lock_acquire_recursive>
 8007d6e:	bf00      	nop
 8007d70:	20000545 	.word	0x20000545

08007d74 <__sfp_lock_release>:
 8007d74:	4801      	ldr	r0, [pc, #4]	; (8007d7c <__sfp_lock_release+0x8>)
 8007d76:	f000 b92f 	b.w	8007fd8 <__retarget_lock_release_recursive>
 8007d7a:	bf00      	nop
 8007d7c:	20000545 	.word	0x20000545

08007d80 <__sinit>:
 8007d80:	b510      	push	{r4, lr}
 8007d82:	4604      	mov	r4, r0
 8007d84:	f7ff fff0 	bl	8007d68 <__sfp_lock_acquire>
 8007d88:	6a23      	ldr	r3, [r4, #32]
 8007d8a:	b11b      	cbz	r3, 8007d94 <__sinit+0x14>
 8007d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d90:	f7ff bff0 	b.w	8007d74 <__sfp_lock_release>
 8007d94:	4b04      	ldr	r3, [pc, #16]	; (8007da8 <__sinit+0x28>)
 8007d96:	6223      	str	r3, [r4, #32]
 8007d98:	4b04      	ldr	r3, [pc, #16]	; (8007dac <__sinit+0x2c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1f5      	bne.n	8007d8c <__sinit+0xc>
 8007da0:	f7ff ffc4 	bl	8007d2c <global_stdio_init.part.0>
 8007da4:	e7f2      	b.n	8007d8c <__sinit+0xc>
 8007da6:	bf00      	nop
 8007da8:	08007ced 	.word	0x08007ced
 8007dac:	2000053c 	.word	0x2000053c

08007db0 <_fwalk_sglue>:
 8007db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007db4:	4607      	mov	r7, r0
 8007db6:	4688      	mov	r8, r1
 8007db8:	4614      	mov	r4, r2
 8007dba:	2600      	movs	r6, #0
 8007dbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dc0:	f1b9 0901 	subs.w	r9, r9, #1
 8007dc4:	d505      	bpl.n	8007dd2 <_fwalk_sglue+0x22>
 8007dc6:	6824      	ldr	r4, [r4, #0]
 8007dc8:	2c00      	cmp	r4, #0
 8007dca:	d1f7      	bne.n	8007dbc <_fwalk_sglue+0xc>
 8007dcc:	4630      	mov	r0, r6
 8007dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dd2:	89ab      	ldrh	r3, [r5, #12]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d907      	bls.n	8007de8 <_fwalk_sglue+0x38>
 8007dd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	d003      	beq.n	8007de8 <_fwalk_sglue+0x38>
 8007de0:	4629      	mov	r1, r5
 8007de2:	4638      	mov	r0, r7
 8007de4:	47c0      	blx	r8
 8007de6:	4306      	orrs	r6, r0
 8007de8:	3568      	adds	r5, #104	; 0x68
 8007dea:	e7e9      	b.n	8007dc0 <_fwalk_sglue+0x10>

08007dec <sniprintf>:
 8007dec:	b40c      	push	{r2, r3}
 8007dee:	b530      	push	{r4, r5, lr}
 8007df0:	4b17      	ldr	r3, [pc, #92]	; (8007e50 <sniprintf+0x64>)
 8007df2:	1e0c      	subs	r4, r1, #0
 8007df4:	681d      	ldr	r5, [r3, #0]
 8007df6:	b09d      	sub	sp, #116	; 0x74
 8007df8:	da08      	bge.n	8007e0c <sniprintf+0x20>
 8007dfa:	238b      	movs	r3, #139	; 0x8b
 8007dfc:	602b      	str	r3, [r5, #0]
 8007dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007e02:	b01d      	add	sp, #116	; 0x74
 8007e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e08:	b002      	add	sp, #8
 8007e0a:	4770      	bx	lr
 8007e0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007e10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e14:	bf14      	ite	ne
 8007e16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007e1a:	4623      	moveq	r3, r4
 8007e1c:	9304      	str	r3, [sp, #16]
 8007e1e:	9307      	str	r3, [sp, #28]
 8007e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e24:	9002      	str	r0, [sp, #8]
 8007e26:	9006      	str	r0, [sp, #24]
 8007e28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007e2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e2e:	ab21      	add	r3, sp, #132	; 0x84
 8007e30:	a902      	add	r1, sp, #8
 8007e32:	4628      	mov	r0, r5
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	f001 fc23 	bl	8009680 <_svfiprintf_r>
 8007e3a:	1c43      	adds	r3, r0, #1
 8007e3c:	bfbc      	itt	lt
 8007e3e:	238b      	movlt	r3, #139	; 0x8b
 8007e40:	602b      	strlt	r3, [r5, #0]
 8007e42:	2c00      	cmp	r4, #0
 8007e44:	d0dd      	beq.n	8007e02 <sniprintf+0x16>
 8007e46:	9b02      	ldr	r3, [sp, #8]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	701a      	strb	r2, [r3, #0]
 8007e4c:	e7d9      	b.n	8007e02 <sniprintf+0x16>
 8007e4e:	bf00      	nop
 8007e50:	20000068 	.word	0x20000068

08007e54 <__sread>:
 8007e54:	b510      	push	{r4, lr}
 8007e56:	460c      	mov	r4, r1
 8007e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e5c:	f000 f86c 	bl	8007f38 <_read_r>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	bfab      	itete	ge
 8007e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e66:	89a3      	ldrhlt	r3, [r4, #12]
 8007e68:	181b      	addge	r3, r3, r0
 8007e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e6e:	bfac      	ite	ge
 8007e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e72:	81a3      	strhlt	r3, [r4, #12]
 8007e74:	bd10      	pop	{r4, pc}

08007e76 <__swrite>:
 8007e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7a:	461f      	mov	r7, r3
 8007e7c:	898b      	ldrh	r3, [r1, #12]
 8007e7e:	05db      	lsls	r3, r3, #23
 8007e80:	4605      	mov	r5, r0
 8007e82:	460c      	mov	r4, r1
 8007e84:	4616      	mov	r6, r2
 8007e86:	d505      	bpl.n	8007e94 <__swrite+0x1e>
 8007e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f000 f840 	bl	8007f14 <_lseek_r>
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e9e:	81a3      	strh	r3, [r4, #12]
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eaa:	f000 b857 	b.w	8007f5c <_write_r>

08007eae <__sseek>:
 8007eae:	b510      	push	{r4, lr}
 8007eb0:	460c      	mov	r4, r1
 8007eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb6:	f000 f82d 	bl	8007f14 <_lseek_r>
 8007eba:	1c43      	adds	r3, r0, #1
 8007ebc:	89a3      	ldrh	r3, [r4, #12]
 8007ebe:	bf15      	itete	ne
 8007ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007eca:	81a3      	strheq	r3, [r4, #12]
 8007ecc:	bf18      	it	ne
 8007ece:	81a3      	strhne	r3, [r4, #12]
 8007ed0:	bd10      	pop	{r4, pc}

08007ed2 <__sclose>:
 8007ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed6:	f000 b80d 	b.w	8007ef4 <_close_r>

08007eda <memset>:
 8007eda:	4402      	add	r2, r0
 8007edc:	4603      	mov	r3, r0
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d100      	bne.n	8007ee4 <memset+0xa>
 8007ee2:	4770      	bx	lr
 8007ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ee8:	e7f9      	b.n	8007ede <memset+0x4>
	...

08007eec <_localeconv_r>:
 8007eec:	4800      	ldr	r0, [pc, #0]	; (8007ef0 <_localeconv_r+0x4>)
 8007eee:	4770      	bx	lr
 8007ef0:	2000015c 	.word	0x2000015c

08007ef4 <_close_r>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	4d06      	ldr	r5, [pc, #24]	; (8007f10 <_close_r+0x1c>)
 8007ef8:	2300      	movs	r3, #0
 8007efa:	4604      	mov	r4, r0
 8007efc:	4608      	mov	r0, r1
 8007efe:	602b      	str	r3, [r5, #0]
 8007f00:	f7f9 fcd1 	bl	80018a6 <_close>
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	d102      	bne.n	8007f0e <_close_r+0x1a>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	b103      	cbz	r3, 8007f0e <_close_r+0x1a>
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	20000540 	.word	0x20000540

08007f14 <_lseek_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d07      	ldr	r5, [pc, #28]	; (8007f34 <_lseek_r+0x20>)
 8007f18:	4604      	mov	r4, r0
 8007f1a:	4608      	mov	r0, r1
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	2200      	movs	r2, #0
 8007f20:	602a      	str	r2, [r5, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	f7f9 fce6 	bl	80018f4 <_lseek>
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	d102      	bne.n	8007f32 <_lseek_r+0x1e>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	b103      	cbz	r3, 8007f32 <_lseek_r+0x1e>
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	bd38      	pop	{r3, r4, r5, pc}
 8007f34:	20000540 	.word	0x20000540

08007f38 <_read_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4d07      	ldr	r5, [pc, #28]	; (8007f58 <_read_r+0x20>)
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	4608      	mov	r0, r1
 8007f40:	4611      	mov	r1, r2
 8007f42:	2200      	movs	r2, #0
 8007f44:	602a      	str	r2, [r5, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	f7f9 fc74 	bl	8001834 <_read>
 8007f4c:	1c43      	adds	r3, r0, #1
 8007f4e:	d102      	bne.n	8007f56 <_read_r+0x1e>
 8007f50:	682b      	ldr	r3, [r5, #0]
 8007f52:	b103      	cbz	r3, 8007f56 <_read_r+0x1e>
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	bd38      	pop	{r3, r4, r5, pc}
 8007f58:	20000540 	.word	0x20000540

08007f5c <_write_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4d07      	ldr	r5, [pc, #28]	; (8007f7c <_write_r+0x20>)
 8007f60:	4604      	mov	r4, r0
 8007f62:	4608      	mov	r0, r1
 8007f64:	4611      	mov	r1, r2
 8007f66:	2200      	movs	r2, #0
 8007f68:	602a      	str	r2, [r5, #0]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	f7f9 fc7f 	bl	800186e <_write>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d102      	bne.n	8007f7a <_write_r+0x1e>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	b103      	cbz	r3, 8007f7a <_write_r+0x1e>
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	bd38      	pop	{r3, r4, r5, pc}
 8007f7c:	20000540 	.word	0x20000540

08007f80 <__errno>:
 8007f80:	4b01      	ldr	r3, [pc, #4]	; (8007f88 <__errno+0x8>)
 8007f82:	6818      	ldr	r0, [r3, #0]
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	20000068 	.word	0x20000068

08007f8c <__libc_init_array>:
 8007f8c:	b570      	push	{r4, r5, r6, lr}
 8007f8e:	4d0d      	ldr	r5, [pc, #52]	; (8007fc4 <__libc_init_array+0x38>)
 8007f90:	4c0d      	ldr	r4, [pc, #52]	; (8007fc8 <__libc_init_array+0x3c>)
 8007f92:	1b64      	subs	r4, r4, r5
 8007f94:	10a4      	asrs	r4, r4, #2
 8007f96:	2600      	movs	r6, #0
 8007f98:	42a6      	cmp	r6, r4
 8007f9a:	d109      	bne.n	8007fb0 <__libc_init_array+0x24>
 8007f9c:	4d0b      	ldr	r5, [pc, #44]	; (8007fcc <__libc_init_array+0x40>)
 8007f9e:	4c0c      	ldr	r4, [pc, #48]	; (8007fd0 <__libc_init_array+0x44>)
 8007fa0:	f002 f896 	bl	800a0d0 <_init>
 8007fa4:	1b64      	subs	r4, r4, r5
 8007fa6:	10a4      	asrs	r4, r4, #2
 8007fa8:	2600      	movs	r6, #0
 8007faa:	42a6      	cmp	r6, r4
 8007fac:	d105      	bne.n	8007fba <__libc_init_array+0x2e>
 8007fae:	bd70      	pop	{r4, r5, r6, pc}
 8007fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fb4:	4798      	blx	r3
 8007fb6:	3601      	adds	r6, #1
 8007fb8:	e7ee      	b.n	8007f98 <__libc_init_array+0xc>
 8007fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fbe:	4798      	blx	r3
 8007fc0:	3601      	adds	r6, #1
 8007fc2:	e7f2      	b.n	8007faa <__libc_init_array+0x1e>
 8007fc4:	0800a4ac 	.word	0x0800a4ac
 8007fc8:	0800a4ac 	.word	0x0800a4ac
 8007fcc:	0800a4ac 	.word	0x0800a4ac
 8007fd0:	0800a4b0 	.word	0x0800a4b0

08007fd4 <__retarget_lock_init_recursive>:
 8007fd4:	4770      	bx	lr

08007fd6 <__retarget_lock_acquire_recursive>:
 8007fd6:	4770      	bx	lr

08007fd8 <__retarget_lock_release_recursive>:
 8007fd8:	4770      	bx	lr

08007fda <quorem>:
 8007fda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fde:	6903      	ldr	r3, [r0, #16]
 8007fe0:	690c      	ldr	r4, [r1, #16]
 8007fe2:	42a3      	cmp	r3, r4
 8007fe4:	4607      	mov	r7, r0
 8007fe6:	db7e      	blt.n	80080e6 <quorem+0x10c>
 8007fe8:	3c01      	subs	r4, #1
 8007fea:	f101 0814 	add.w	r8, r1, #20
 8007fee:	f100 0514 	add.w	r5, r0, #20
 8007ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ffc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008000:	3301      	adds	r3, #1
 8008002:	429a      	cmp	r2, r3
 8008004:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008008:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800800c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008010:	d331      	bcc.n	8008076 <quorem+0x9c>
 8008012:	f04f 0e00 	mov.w	lr, #0
 8008016:	4640      	mov	r0, r8
 8008018:	46ac      	mov	ip, r5
 800801a:	46f2      	mov	sl, lr
 800801c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008020:	b293      	uxth	r3, r2
 8008022:	fb06 e303 	mla	r3, r6, r3, lr
 8008026:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800802a:	0c1a      	lsrs	r2, r3, #16
 800802c:	b29b      	uxth	r3, r3
 800802e:	ebaa 0303 	sub.w	r3, sl, r3
 8008032:	f8dc a000 	ldr.w	sl, [ip]
 8008036:	fa13 f38a 	uxtah	r3, r3, sl
 800803a:	fb06 220e 	mla	r2, r6, lr, r2
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	9b00      	ldr	r3, [sp, #0]
 8008042:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008046:	b292      	uxth	r2, r2
 8008048:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800804c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008050:	f8bd 3000 	ldrh.w	r3, [sp]
 8008054:	4581      	cmp	r9, r0
 8008056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800805a:	f84c 3b04 	str.w	r3, [ip], #4
 800805e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008062:	d2db      	bcs.n	800801c <quorem+0x42>
 8008064:	f855 300b 	ldr.w	r3, [r5, fp]
 8008068:	b92b      	cbnz	r3, 8008076 <quorem+0x9c>
 800806a:	9b01      	ldr	r3, [sp, #4]
 800806c:	3b04      	subs	r3, #4
 800806e:	429d      	cmp	r5, r3
 8008070:	461a      	mov	r2, r3
 8008072:	d32c      	bcc.n	80080ce <quorem+0xf4>
 8008074:	613c      	str	r4, [r7, #16]
 8008076:	4638      	mov	r0, r7
 8008078:	f001 f9a8 	bl	80093cc <__mcmp>
 800807c:	2800      	cmp	r0, #0
 800807e:	db22      	blt.n	80080c6 <quorem+0xec>
 8008080:	3601      	adds	r6, #1
 8008082:	4629      	mov	r1, r5
 8008084:	2000      	movs	r0, #0
 8008086:	f858 2b04 	ldr.w	r2, [r8], #4
 800808a:	f8d1 c000 	ldr.w	ip, [r1]
 800808e:	b293      	uxth	r3, r2
 8008090:	1ac3      	subs	r3, r0, r3
 8008092:	0c12      	lsrs	r2, r2, #16
 8008094:	fa13 f38c 	uxtah	r3, r3, ip
 8008098:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800809c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080a6:	45c1      	cmp	r9, r8
 80080a8:	f841 3b04 	str.w	r3, [r1], #4
 80080ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 80080b0:	d2e9      	bcs.n	8008086 <quorem+0xac>
 80080b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080ba:	b922      	cbnz	r2, 80080c6 <quorem+0xec>
 80080bc:	3b04      	subs	r3, #4
 80080be:	429d      	cmp	r5, r3
 80080c0:	461a      	mov	r2, r3
 80080c2:	d30a      	bcc.n	80080da <quorem+0x100>
 80080c4:	613c      	str	r4, [r7, #16]
 80080c6:	4630      	mov	r0, r6
 80080c8:	b003      	add	sp, #12
 80080ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ce:	6812      	ldr	r2, [r2, #0]
 80080d0:	3b04      	subs	r3, #4
 80080d2:	2a00      	cmp	r2, #0
 80080d4:	d1ce      	bne.n	8008074 <quorem+0x9a>
 80080d6:	3c01      	subs	r4, #1
 80080d8:	e7c9      	b.n	800806e <quorem+0x94>
 80080da:	6812      	ldr	r2, [r2, #0]
 80080dc:	3b04      	subs	r3, #4
 80080de:	2a00      	cmp	r2, #0
 80080e0:	d1f0      	bne.n	80080c4 <quorem+0xea>
 80080e2:	3c01      	subs	r4, #1
 80080e4:	e7eb      	b.n	80080be <quorem+0xe4>
 80080e6:	2000      	movs	r0, #0
 80080e8:	e7ee      	b.n	80080c8 <quorem+0xee>
 80080ea:	0000      	movs	r0, r0
 80080ec:	0000      	movs	r0, r0
	...

080080f0 <_dtoa_r>:
 80080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	ed2d 8b04 	vpush	{d8-d9}
 80080f8:	69c5      	ldr	r5, [r0, #28]
 80080fa:	b093      	sub	sp, #76	; 0x4c
 80080fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008100:	ec57 6b10 	vmov	r6, r7, d0
 8008104:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008108:	9107      	str	r1, [sp, #28]
 800810a:	4604      	mov	r4, r0
 800810c:	920a      	str	r2, [sp, #40]	; 0x28
 800810e:	930d      	str	r3, [sp, #52]	; 0x34
 8008110:	b975      	cbnz	r5, 8008130 <_dtoa_r+0x40>
 8008112:	2010      	movs	r0, #16
 8008114:	f000 fe2a 	bl	8008d6c <malloc>
 8008118:	4602      	mov	r2, r0
 800811a:	61e0      	str	r0, [r4, #28]
 800811c:	b920      	cbnz	r0, 8008128 <_dtoa_r+0x38>
 800811e:	4bae      	ldr	r3, [pc, #696]	; (80083d8 <_dtoa_r+0x2e8>)
 8008120:	21ef      	movs	r1, #239	; 0xef
 8008122:	48ae      	ldr	r0, [pc, #696]	; (80083dc <_dtoa_r+0x2ec>)
 8008124:	f001 fc90 	bl	8009a48 <__assert_func>
 8008128:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800812c:	6005      	str	r5, [r0, #0]
 800812e:	60c5      	str	r5, [r0, #12]
 8008130:	69e3      	ldr	r3, [r4, #28]
 8008132:	6819      	ldr	r1, [r3, #0]
 8008134:	b151      	cbz	r1, 800814c <_dtoa_r+0x5c>
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	604a      	str	r2, [r1, #4]
 800813a:	2301      	movs	r3, #1
 800813c:	4093      	lsls	r3, r2
 800813e:	608b      	str	r3, [r1, #8]
 8008140:	4620      	mov	r0, r4
 8008142:	f000 ff07 	bl	8008f54 <_Bfree>
 8008146:	69e3      	ldr	r3, [r4, #28]
 8008148:	2200      	movs	r2, #0
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	1e3b      	subs	r3, r7, #0
 800814e:	bfbb      	ittet	lt
 8008150:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008154:	9303      	strlt	r3, [sp, #12]
 8008156:	2300      	movge	r3, #0
 8008158:	2201      	movlt	r2, #1
 800815a:	bfac      	ite	ge
 800815c:	f8c8 3000 	strge.w	r3, [r8]
 8008160:	f8c8 2000 	strlt.w	r2, [r8]
 8008164:	4b9e      	ldr	r3, [pc, #632]	; (80083e0 <_dtoa_r+0x2f0>)
 8008166:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800816a:	ea33 0308 	bics.w	r3, r3, r8
 800816e:	d11b      	bne.n	80081a8 <_dtoa_r+0xb8>
 8008170:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008172:	f242 730f 	movw	r3, #9999	; 0x270f
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800817c:	4333      	orrs	r3, r6
 800817e:	f000 8593 	beq.w	8008ca8 <_dtoa_r+0xbb8>
 8008182:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008184:	b963      	cbnz	r3, 80081a0 <_dtoa_r+0xb0>
 8008186:	4b97      	ldr	r3, [pc, #604]	; (80083e4 <_dtoa_r+0x2f4>)
 8008188:	e027      	b.n	80081da <_dtoa_r+0xea>
 800818a:	4b97      	ldr	r3, [pc, #604]	; (80083e8 <_dtoa_r+0x2f8>)
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	3308      	adds	r3, #8
 8008190:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	9800      	ldr	r0, [sp, #0]
 8008196:	b013      	add	sp, #76	; 0x4c
 8008198:	ecbd 8b04 	vpop	{d8-d9}
 800819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a0:	4b90      	ldr	r3, [pc, #576]	; (80083e4 <_dtoa_r+0x2f4>)
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	3303      	adds	r3, #3
 80081a6:	e7f3      	b.n	8008190 <_dtoa_r+0xa0>
 80081a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081ac:	2200      	movs	r2, #0
 80081ae:	ec51 0b17 	vmov	r0, r1, d7
 80081b2:	eeb0 8a47 	vmov.f32	s16, s14
 80081b6:	eef0 8a67 	vmov.f32	s17, s15
 80081ba:	2300      	movs	r3, #0
 80081bc:	f7f8 fc8c 	bl	8000ad8 <__aeabi_dcmpeq>
 80081c0:	4681      	mov	r9, r0
 80081c2:	b160      	cbz	r0, 80081de <_dtoa_r+0xee>
 80081c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081c6:	2301      	movs	r3, #1
 80081c8:	6013      	str	r3, [r2, #0]
 80081ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 8568 	beq.w	8008ca2 <_dtoa_r+0xbb2>
 80081d2:	4b86      	ldr	r3, [pc, #536]	; (80083ec <_dtoa_r+0x2fc>)
 80081d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	3b01      	subs	r3, #1
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	e7da      	b.n	8008194 <_dtoa_r+0xa4>
 80081de:	aa10      	add	r2, sp, #64	; 0x40
 80081e0:	a911      	add	r1, sp, #68	; 0x44
 80081e2:	4620      	mov	r0, r4
 80081e4:	eeb0 0a48 	vmov.f32	s0, s16
 80081e8:	eef0 0a68 	vmov.f32	s1, s17
 80081ec:	f001 f994 	bl	8009518 <__d2b>
 80081f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80081f4:	4682      	mov	sl, r0
 80081f6:	2d00      	cmp	r5, #0
 80081f8:	d07f      	beq.n	80082fa <_dtoa_r+0x20a>
 80081fa:	ee18 3a90 	vmov	r3, s17
 80081fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008202:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008206:	ec51 0b18 	vmov	r0, r1, d8
 800820a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800820e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008212:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008216:	4619      	mov	r1, r3
 8008218:	2200      	movs	r2, #0
 800821a:	4b75      	ldr	r3, [pc, #468]	; (80083f0 <_dtoa_r+0x300>)
 800821c:	f7f8 f83c 	bl	8000298 <__aeabi_dsub>
 8008220:	a367      	add	r3, pc, #412	; (adr r3, 80083c0 <_dtoa_r+0x2d0>)
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	f7f8 f9ef 	bl	8000608 <__aeabi_dmul>
 800822a:	a367      	add	r3, pc, #412	; (adr r3, 80083c8 <_dtoa_r+0x2d8>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f7f8 f834 	bl	800029c <__adddf3>
 8008234:	4606      	mov	r6, r0
 8008236:	4628      	mov	r0, r5
 8008238:	460f      	mov	r7, r1
 800823a:	f7f8 f97b 	bl	8000534 <__aeabi_i2d>
 800823e:	a364      	add	r3, pc, #400	; (adr r3, 80083d0 <_dtoa_r+0x2e0>)
 8008240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008244:	f7f8 f9e0 	bl	8000608 <__aeabi_dmul>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4630      	mov	r0, r6
 800824e:	4639      	mov	r1, r7
 8008250:	f7f8 f824 	bl	800029c <__adddf3>
 8008254:	4606      	mov	r6, r0
 8008256:	460f      	mov	r7, r1
 8008258:	f7f8 fc86 	bl	8000b68 <__aeabi_d2iz>
 800825c:	2200      	movs	r2, #0
 800825e:	4683      	mov	fp, r0
 8008260:	2300      	movs	r3, #0
 8008262:	4630      	mov	r0, r6
 8008264:	4639      	mov	r1, r7
 8008266:	f7f8 fc41 	bl	8000aec <__aeabi_dcmplt>
 800826a:	b148      	cbz	r0, 8008280 <_dtoa_r+0x190>
 800826c:	4658      	mov	r0, fp
 800826e:	f7f8 f961 	bl	8000534 <__aeabi_i2d>
 8008272:	4632      	mov	r2, r6
 8008274:	463b      	mov	r3, r7
 8008276:	f7f8 fc2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800827a:	b908      	cbnz	r0, 8008280 <_dtoa_r+0x190>
 800827c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008280:	f1bb 0f16 	cmp.w	fp, #22
 8008284:	d857      	bhi.n	8008336 <_dtoa_r+0x246>
 8008286:	4b5b      	ldr	r3, [pc, #364]	; (80083f4 <_dtoa_r+0x304>)
 8008288:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800828c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008290:	ec51 0b18 	vmov	r0, r1, d8
 8008294:	f7f8 fc2a 	bl	8000aec <__aeabi_dcmplt>
 8008298:	2800      	cmp	r0, #0
 800829a:	d04e      	beq.n	800833a <_dtoa_r+0x24a>
 800829c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082a0:	2300      	movs	r3, #0
 80082a2:	930c      	str	r3, [sp, #48]	; 0x30
 80082a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082a6:	1b5b      	subs	r3, r3, r5
 80082a8:	1e5a      	subs	r2, r3, #1
 80082aa:	bf45      	ittet	mi
 80082ac:	f1c3 0301 	rsbmi	r3, r3, #1
 80082b0:	9305      	strmi	r3, [sp, #20]
 80082b2:	2300      	movpl	r3, #0
 80082b4:	2300      	movmi	r3, #0
 80082b6:	9206      	str	r2, [sp, #24]
 80082b8:	bf54      	ite	pl
 80082ba:	9305      	strpl	r3, [sp, #20]
 80082bc:	9306      	strmi	r3, [sp, #24]
 80082be:	f1bb 0f00 	cmp.w	fp, #0
 80082c2:	db3c      	blt.n	800833e <_dtoa_r+0x24e>
 80082c4:	9b06      	ldr	r3, [sp, #24]
 80082c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80082ca:	445b      	add	r3, fp
 80082cc:	9306      	str	r3, [sp, #24]
 80082ce:	2300      	movs	r3, #0
 80082d0:	9308      	str	r3, [sp, #32]
 80082d2:	9b07      	ldr	r3, [sp, #28]
 80082d4:	2b09      	cmp	r3, #9
 80082d6:	d868      	bhi.n	80083aa <_dtoa_r+0x2ba>
 80082d8:	2b05      	cmp	r3, #5
 80082da:	bfc4      	itt	gt
 80082dc:	3b04      	subgt	r3, #4
 80082de:	9307      	strgt	r3, [sp, #28]
 80082e0:	9b07      	ldr	r3, [sp, #28]
 80082e2:	f1a3 0302 	sub.w	r3, r3, #2
 80082e6:	bfcc      	ite	gt
 80082e8:	2500      	movgt	r5, #0
 80082ea:	2501      	movle	r5, #1
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	f200 8085 	bhi.w	80083fc <_dtoa_r+0x30c>
 80082f2:	e8df f003 	tbb	[pc, r3]
 80082f6:	3b2e      	.short	0x3b2e
 80082f8:	5839      	.short	0x5839
 80082fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80082fe:	441d      	add	r5, r3
 8008300:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008304:	2b20      	cmp	r3, #32
 8008306:	bfc1      	itttt	gt
 8008308:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800830c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008310:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008314:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008318:	bfd6      	itet	le
 800831a:	f1c3 0320 	rsble	r3, r3, #32
 800831e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008322:	fa06 f003 	lslle.w	r0, r6, r3
 8008326:	f7f8 f8f5 	bl	8000514 <__aeabi_ui2d>
 800832a:	2201      	movs	r2, #1
 800832c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008330:	3d01      	subs	r5, #1
 8008332:	920e      	str	r2, [sp, #56]	; 0x38
 8008334:	e76f      	b.n	8008216 <_dtoa_r+0x126>
 8008336:	2301      	movs	r3, #1
 8008338:	e7b3      	b.n	80082a2 <_dtoa_r+0x1b2>
 800833a:	900c      	str	r0, [sp, #48]	; 0x30
 800833c:	e7b2      	b.n	80082a4 <_dtoa_r+0x1b4>
 800833e:	9b05      	ldr	r3, [sp, #20]
 8008340:	eba3 030b 	sub.w	r3, r3, fp
 8008344:	9305      	str	r3, [sp, #20]
 8008346:	f1cb 0300 	rsb	r3, fp, #0
 800834a:	9308      	str	r3, [sp, #32]
 800834c:	2300      	movs	r3, #0
 800834e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008350:	e7bf      	b.n	80082d2 <_dtoa_r+0x1e2>
 8008352:	2300      	movs	r3, #0
 8008354:	9309      	str	r3, [sp, #36]	; 0x24
 8008356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008358:	2b00      	cmp	r3, #0
 800835a:	dc52      	bgt.n	8008402 <_dtoa_r+0x312>
 800835c:	2301      	movs	r3, #1
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	9304      	str	r3, [sp, #16]
 8008362:	461a      	mov	r2, r3
 8008364:	920a      	str	r2, [sp, #40]	; 0x28
 8008366:	e00b      	b.n	8008380 <_dtoa_r+0x290>
 8008368:	2301      	movs	r3, #1
 800836a:	e7f3      	b.n	8008354 <_dtoa_r+0x264>
 800836c:	2300      	movs	r3, #0
 800836e:	9309      	str	r3, [sp, #36]	; 0x24
 8008370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008372:	445b      	add	r3, fp
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	3301      	adds	r3, #1
 8008378:	2b01      	cmp	r3, #1
 800837a:	9304      	str	r3, [sp, #16]
 800837c:	bfb8      	it	lt
 800837e:	2301      	movlt	r3, #1
 8008380:	69e0      	ldr	r0, [r4, #28]
 8008382:	2100      	movs	r1, #0
 8008384:	2204      	movs	r2, #4
 8008386:	f102 0614 	add.w	r6, r2, #20
 800838a:	429e      	cmp	r6, r3
 800838c:	d93d      	bls.n	800840a <_dtoa_r+0x31a>
 800838e:	6041      	str	r1, [r0, #4]
 8008390:	4620      	mov	r0, r4
 8008392:	f000 fd9f 	bl	8008ed4 <_Balloc>
 8008396:	9000      	str	r0, [sp, #0]
 8008398:	2800      	cmp	r0, #0
 800839a:	d139      	bne.n	8008410 <_dtoa_r+0x320>
 800839c:	4b16      	ldr	r3, [pc, #88]	; (80083f8 <_dtoa_r+0x308>)
 800839e:	4602      	mov	r2, r0
 80083a0:	f240 11af 	movw	r1, #431	; 0x1af
 80083a4:	e6bd      	b.n	8008122 <_dtoa_r+0x32>
 80083a6:	2301      	movs	r3, #1
 80083a8:	e7e1      	b.n	800836e <_dtoa_r+0x27e>
 80083aa:	2501      	movs	r5, #1
 80083ac:	2300      	movs	r3, #0
 80083ae:	9307      	str	r3, [sp, #28]
 80083b0:	9509      	str	r5, [sp, #36]	; 0x24
 80083b2:	f04f 33ff 	mov.w	r3, #4294967295
 80083b6:	9301      	str	r3, [sp, #4]
 80083b8:	9304      	str	r3, [sp, #16]
 80083ba:	2200      	movs	r2, #0
 80083bc:	2312      	movs	r3, #18
 80083be:	e7d1      	b.n	8008364 <_dtoa_r+0x274>
 80083c0:	636f4361 	.word	0x636f4361
 80083c4:	3fd287a7 	.word	0x3fd287a7
 80083c8:	8b60c8b3 	.word	0x8b60c8b3
 80083cc:	3fc68a28 	.word	0x3fc68a28
 80083d0:	509f79fb 	.word	0x509f79fb
 80083d4:	3fd34413 	.word	0x3fd34413
 80083d8:	0800a171 	.word	0x0800a171
 80083dc:	0800a188 	.word	0x0800a188
 80083e0:	7ff00000 	.word	0x7ff00000
 80083e4:	0800a16d 	.word	0x0800a16d
 80083e8:	0800a164 	.word	0x0800a164
 80083ec:	0800a141 	.word	0x0800a141
 80083f0:	3ff80000 	.word	0x3ff80000
 80083f4:	0800a278 	.word	0x0800a278
 80083f8:	0800a1e0 	.word	0x0800a1e0
 80083fc:	2301      	movs	r3, #1
 80083fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008400:	e7d7      	b.n	80083b2 <_dtoa_r+0x2c2>
 8008402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008404:	9301      	str	r3, [sp, #4]
 8008406:	9304      	str	r3, [sp, #16]
 8008408:	e7ba      	b.n	8008380 <_dtoa_r+0x290>
 800840a:	3101      	adds	r1, #1
 800840c:	0052      	lsls	r2, r2, #1
 800840e:	e7ba      	b.n	8008386 <_dtoa_r+0x296>
 8008410:	69e3      	ldr	r3, [r4, #28]
 8008412:	9a00      	ldr	r2, [sp, #0]
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	9b04      	ldr	r3, [sp, #16]
 8008418:	2b0e      	cmp	r3, #14
 800841a:	f200 80a8 	bhi.w	800856e <_dtoa_r+0x47e>
 800841e:	2d00      	cmp	r5, #0
 8008420:	f000 80a5 	beq.w	800856e <_dtoa_r+0x47e>
 8008424:	f1bb 0f00 	cmp.w	fp, #0
 8008428:	dd38      	ble.n	800849c <_dtoa_r+0x3ac>
 800842a:	4bc0      	ldr	r3, [pc, #768]	; (800872c <_dtoa_r+0x63c>)
 800842c:	f00b 020f 	and.w	r2, fp, #15
 8008430:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008434:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008438:	e9d3 6700 	ldrd	r6, r7, [r3]
 800843c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008440:	d019      	beq.n	8008476 <_dtoa_r+0x386>
 8008442:	4bbb      	ldr	r3, [pc, #748]	; (8008730 <_dtoa_r+0x640>)
 8008444:	ec51 0b18 	vmov	r0, r1, d8
 8008448:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800844c:	f7f8 fa06 	bl	800085c <__aeabi_ddiv>
 8008450:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008454:	f008 080f 	and.w	r8, r8, #15
 8008458:	2503      	movs	r5, #3
 800845a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008730 <_dtoa_r+0x640>
 800845e:	f1b8 0f00 	cmp.w	r8, #0
 8008462:	d10a      	bne.n	800847a <_dtoa_r+0x38a>
 8008464:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008468:	4632      	mov	r2, r6
 800846a:	463b      	mov	r3, r7
 800846c:	f7f8 f9f6 	bl	800085c <__aeabi_ddiv>
 8008470:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008474:	e02b      	b.n	80084ce <_dtoa_r+0x3de>
 8008476:	2502      	movs	r5, #2
 8008478:	e7ef      	b.n	800845a <_dtoa_r+0x36a>
 800847a:	f018 0f01 	tst.w	r8, #1
 800847e:	d008      	beq.n	8008492 <_dtoa_r+0x3a2>
 8008480:	4630      	mov	r0, r6
 8008482:	4639      	mov	r1, r7
 8008484:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008488:	f7f8 f8be 	bl	8000608 <__aeabi_dmul>
 800848c:	3501      	adds	r5, #1
 800848e:	4606      	mov	r6, r0
 8008490:	460f      	mov	r7, r1
 8008492:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008496:	f109 0908 	add.w	r9, r9, #8
 800849a:	e7e0      	b.n	800845e <_dtoa_r+0x36e>
 800849c:	f000 809f 	beq.w	80085de <_dtoa_r+0x4ee>
 80084a0:	f1cb 0600 	rsb	r6, fp, #0
 80084a4:	4ba1      	ldr	r3, [pc, #644]	; (800872c <_dtoa_r+0x63c>)
 80084a6:	4fa2      	ldr	r7, [pc, #648]	; (8008730 <_dtoa_r+0x640>)
 80084a8:	f006 020f 	and.w	r2, r6, #15
 80084ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	ec51 0b18 	vmov	r0, r1, d8
 80084b8:	f7f8 f8a6 	bl	8000608 <__aeabi_dmul>
 80084bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084c0:	1136      	asrs	r6, r6, #4
 80084c2:	2300      	movs	r3, #0
 80084c4:	2502      	movs	r5, #2
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	d17e      	bne.n	80085c8 <_dtoa_r+0x4d8>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1d0      	bne.n	8008470 <_dtoa_r+0x380>
 80084ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 8084 	beq.w	80085e2 <_dtoa_r+0x4f2>
 80084da:	4b96      	ldr	r3, [pc, #600]	; (8008734 <_dtoa_r+0x644>)
 80084dc:	2200      	movs	r2, #0
 80084de:	4640      	mov	r0, r8
 80084e0:	4649      	mov	r1, r9
 80084e2:	f7f8 fb03 	bl	8000aec <__aeabi_dcmplt>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d07b      	beq.n	80085e2 <_dtoa_r+0x4f2>
 80084ea:	9b04      	ldr	r3, [sp, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d078      	beq.n	80085e2 <_dtoa_r+0x4f2>
 80084f0:	9b01      	ldr	r3, [sp, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	dd39      	ble.n	800856a <_dtoa_r+0x47a>
 80084f6:	4b90      	ldr	r3, [pc, #576]	; (8008738 <_dtoa_r+0x648>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	4640      	mov	r0, r8
 80084fc:	4649      	mov	r1, r9
 80084fe:	f7f8 f883 	bl	8000608 <__aeabi_dmul>
 8008502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008506:	9e01      	ldr	r6, [sp, #4]
 8008508:	f10b 37ff 	add.w	r7, fp, #4294967295
 800850c:	3501      	adds	r5, #1
 800850e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008512:	4628      	mov	r0, r5
 8008514:	f7f8 f80e 	bl	8000534 <__aeabi_i2d>
 8008518:	4642      	mov	r2, r8
 800851a:	464b      	mov	r3, r9
 800851c:	f7f8 f874 	bl	8000608 <__aeabi_dmul>
 8008520:	4b86      	ldr	r3, [pc, #536]	; (800873c <_dtoa_r+0x64c>)
 8008522:	2200      	movs	r2, #0
 8008524:	f7f7 feba 	bl	800029c <__adddf3>
 8008528:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800852c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008530:	9303      	str	r3, [sp, #12]
 8008532:	2e00      	cmp	r6, #0
 8008534:	d158      	bne.n	80085e8 <_dtoa_r+0x4f8>
 8008536:	4b82      	ldr	r3, [pc, #520]	; (8008740 <_dtoa_r+0x650>)
 8008538:	2200      	movs	r2, #0
 800853a:	4640      	mov	r0, r8
 800853c:	4649      	mov	r1, r9
 800853e:	f7f7 feab 	bl	8000298 <__aeabi_dsub>
 8008542:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008546:	4680      	mov	r8, r0
 8008548:	4689      	mov	r9, r1
 800854a:	f7f8 faed 	bl	8000b28 <__aeabi_dcmpgt>
 800854e:	2800      	cmp	r0, #0
 8008550:	f040 8296 	bne.w	8008a80 <_dtoa_r+0x990>
 8008554:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008558:	4640      	mov	r0, r8
 800855a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800855e:	4649      	mov	r1, r9
 8008560:	f7f8 fac4 	bl	8000aec <__aeabi_dcmplt>
 8008564:	2800      	cmp	r0, #0
 8008566:	f040 8289 	bne.w	8008a7c <_dtoa_r+0x98c>
 800856a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800856e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008570:	2b00      	cmp	r3, #0
 8008572:	f2c0 814e 	blt.w	8008812 <_dtoa_r+0x722>
 8008576:	f1bb 0f0e 	cmp.w	fp, #14
 800857a:	f300 814a 	bgt.w	8008812 <_dtoa_r+0x722>
 800857e:	4b6b      	ldr	r3, [pc, #428]	; (800872c <_dtoa_r+0x63c>)
 8008580:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008584:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800858a:	2b00      	cmp	r3, #0
 800858c:	f280 80dc 	bge.w	8008748 <_dtoa_r+0x658>
 8008590:	9b04      	ldr	r3, [sp, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f300 80d8 	bgt.w	8008748 <_dtoa_r+0x658>
 8008598:	f040 826f 	bne.w	8008a7a <_dtoa_r+0x98a>
 800859c:	4b68      	ldr	r3, [pc, #416]	; (8008740 <_dtoa_r+0x650>)
 800859e:	2200      	movs	r2, #0
 80085a0:	4640      	mov	r0, r8
 80085a2:	4649      	mov	r1, r9
 80085a4:	f7f8 f830 	bl	8000608 <__aeabi_dmul>
 80085a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085ac:	f7f8 fab2 	bl	8000b14 <__aeabi_dcmpge>
 80085b0:	9e04      	ldr	r6, [sp, #16]
 80085b2:	4637      	mov	r7, r6
 80085b4:	2800      	cmp	r0, #0
 80085b6:	f040 8245 	bne.w	8008a44 <_dtoa_r+0x954>
 80085ba:	9d00      	ldr	r5, [sp, #0]
 80085bc:	2331      	movs	r3, #49	; 0x31
 80085be:	f805 3b01 	strb.w	r3, [r5], #1
 80085c2:	f10b 0b01 	add.w	fp, fp, #1
 80085c6:	e241      	b.n	8008a4c <_dtoa_r+0x95c>
 80085c8:	07f2      	lsls	r2, r6, #31
 80085ca:	d505      	bpl.n	80085d8 <_dtoa_r+0x4e8>
 80085cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d0:	f7f8 f81a 	bl	8000608 <__aeabi_dmul>
 80085d4:	3501      	adds	r5, #1
 80085d6:	2301      	movs	r3, #1
 80085d8:	1076      	asrs	r6, r6, #1
 80085da:	3708      	adds	r7, #8
 80085dc:	e773      	b.n	80084c6 <_dtoa_r+0x3d6>
 80085de:	2502      	movs	r5, #2
 80085e0:	e775      	b.n	80084ce <_dtoa_r+0x3de>
 80085e2:	9e04      	ldr	r6, [sp, #16]
 80085e4:	465f      	mov	r7, fp
 80085e6:	e792      	b.n	800850e <_dtoa_r+0x41e>
 80085e8:	9900      	ldr	r1, [sp, #0]
 80085ea:	4b50      	ldr	r3, [pc, #320]	; (800872c <_dtoa_r+0x63c>)
 80085ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085f0:	4431      	add	r1, r6
 80085f2:	9102      	str	r1, [sp, #8]
 80085f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085f6:	eeb0 9a47 	vmov.f32	s18, s14
 80085fa:	eef0 9a67 	vmov.f32	s19, s15
 80085fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008602:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008606:	2900      	cmp	r1, #0
 8008608:	d044      	beq.n	8008694 <_dtoa_r+0x5a4>
 800860a:	494e      	ldr	r1, [pc, #312]	; (8008744 <_dtoa_r+0x654>)
 800860c:	2000      	movs	r0, #0
 800860e:	f7f8 f925 	bl	800085c <__aeabi_ddiv>
 8008612:	ec53 2b19 	vmov	r2, r3, d9
 8008616:	f7f7 fe3f 	bl	8000298 <__aeabi_dsub>
 800861a:	9d00      	ldr	r5, [sp, #0]
 800861c:	ec41 0b19 	vmov	d9, r0, r1
 8008620:	4649      	mov	r1, r9
 8008622:	4640      	mov	r0, r8
 8008624:	f7f8 faa0 	bl	8000b68 <__aeabi_d2iz>
 8008628:	4606      	mov	r6, r0
 800862a:	f7f7 ff83 	bl	8000534 <__aeabi_i2d>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	4640      	mov	r0, r8
 8008634:	4649      	mov	r1, r9
 8008636:	f7f7 fe2f 	bl	8000298 <__aeabi_dsub>
 800863a:	3630      	adds	r6, #48	; 0x30
 800863c:	f805 6b01 	strb.w	r6, [r5], #1
 8008640:	ec53 2b19 	vmov	r2, r3, d9
 8008644:	4680      	mov	r8, r0
 8008646:	4689      	mov	r9, r1
 8008648:	f7f8 fa50 	bl	8000aec <__aeabi_dcmplt>
 800864c:	2800      	cmp	r0, #0
 800864e:	d164      	bne.n	800871a <_dtoa_r+0x62a>
 8008650:	4642      	mov	r2, r8
 8008652:	464b      	mov	r3, r9
 8008654:	4937      	ldr	r1, [pc, #220]	; (8008734 <_dtoa_r+0x644>)
 8008656:	2000      	movs	r0, #0
 8008658:	f7f7 fe1e 	bl	8000298 <__aeabi_dsub>
 800865c:	ec53 2b19 	vmov	r2, r3, d9
 8008660:	f7f8 fa44 	bl	8000aec <__aeabi_dcmplt>
 8008664:	2800      	cmp	r0, #0
 8008666:	f040 80b6 	bne.w	80087d6 <_dtoa_r+0x6e6>
 800866a:	9b02      	ldr	r3, [sp, #8]
 800866c:	429d      	cmp	r5, r3
 800866e:	f43f af7c 	beq.w	800856a <_dtoa_r+0x47a>
 8008672:	4b31      	ldr	r3, [pc, #196]	; (8008738 <_dtoa_r+0x648>)
 8008674:	ec51 0b19 	vmov	r0, r1, d9
 8008678:	2200      	movs	r2, #0
 800867a:	f7f7 ffc5 	bl	8000608 <__aeabi_dmul>
 800867e:	4b2e      	ldr	r3, [pc, #184]	; (8008738 <_dtoa_r+0x648>)
 8008680:	ec41 0b19 	vmov	d9, r0, r1
 8008684:	2200      	movs	r2, #0
 8008686:	4640      	mov	r0, r8
 8008688:	4649      	mov	r1, r9
 800868a:	f7f7 ffbd 	bl	8000608 <__aeabi_dmul>
 800868e:	4680      	mov	r8, r0
 8008690:	4689      	mov	r9, r1
 8008692:	e7c5      	b.n	8008620 <_dtoa_r+0x530>
 8008694:	ec51 0b17 	vmov	r0, r1, d7
 8008698:	f7f7 ffb6 	bl	8000608 <__aeabi_dmul>
 800869c:	9b02      	ldr	r3, [sp, #8]
 800869e:	9d00      	ldr	r5, [sp, #0]
 80086a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80086a2:	ec41 0b19 	vmov	d9, r0, r1
 80086a6:	4649      	mov	r1, r9
 80086a8:	4640      	mov	r0, r8
 80086aa:	f7f8 fa5d 	bl	8000b68 <__aeabi_d2iz>
 80086ae:	4606      	mov	r6, r0
 80086b0:	f7f7 ff40 	bl	8000534 <__aeabi_i2d>
 80086b4:	3630      	adds	r6, #48	; 0x30
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4640      	mov	r0, r8
 80086bc:	4649      	mov	r1, r9
 80086be:	f7f7 fdeb 	bl	8000298 <__aeabi_dsub>
 80086c2:	f805 6b01 	strb.w	r6, [r5], #1
 80086c6:	9b02      	ldr	r3, [sp, #8]
 80086c8:	429d      	cmp	r5, r3
 80086ca:	4680      	mov	r8, r0
 80086cc:	4689      	mov	r9, r1
 80086ce:	f04f 0200 	mov.w	r2, #0
 80086d2:	d124      	bne.n	800871e <_dtoa_r+0x62e>
 80086d4:	4b1b      	ldr	r3, [pc, #108]	; (8008744 <_dtoa_r+0x654>)
 80086d6:	ec51 0b19 	vmov	r0, r1, d9
 80086da:	f7f7 fddf 	bl	800029c <__adddf3>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4640      	mov	r0, r8
 80086e4:	4649      	mov	r1, r9
 80086e6:	f7f8 fa1f 	bl	8000b28 <__aeabi_dcmpgt>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	d173      	bne.n	80087d6 <_dtoa_r+0x6e6>
 80086ee:	ec53 2b19 	vmov	r2, r3, d9
 80086f2:	4914      	ldr	r1, [pc, #80]	; (8008744 <_dtoa_r+0x654>)
 80086f4:	2000      	movs	r0, #0
 80086f6:	f7f7 fdcf 	bl	8000298 <__aeabi_dsub>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4640      	mov	r0, r8
 8008700:	4649      	mov	r1, r9
 8008702:	f7f8 f9f3 	bl	8000aec <__aeabi_dcmplt>
 8008706:	2800      	cmp	r0, #0
 8008708:	f43f af2f 	beq.w	800856a <_dtoa_r+0x47a>
 800870c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800870e:	1e6b      	subs	r3, r5, #1
 8008710:	930f      	str	r3, [sp, #60]	; 0x3c
 8008712:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008716:	2b30      	cmp	r3, #48	; 0x30
 8008718:	d0f8      	beq.n	800870c <_dtoa_r+0x61c>
 800871a:	46bb      	mov	fp, r7
 800871c:	e04a      	b.n	80087b4 <_dtoa_r+0x6c4>
 800871e:	4b06      	ldr	r3, [pc, #24]	; (8008738 <_dtoa_r+0x648>)
 8008720:	f7f7 ff72 	bl	8000608 <__aeabi_dmul>
 8008724:	4680      	mov	r8, r0
 8008726:	4689      	mov	r9, r1
 8008728:	e7bd      	b.n	80086a6 <_dtoa_r+0x5b6>
 800872a:	bf00      	nop
 800872c:	0800a278 	.word	0x0800a278
 8008730:	0800a250 	.word	0x0800a250
 8008734:	3ff00000 	.word	0x3ff00000
 8008738:	40240000 	.word	0x40240000
 800873c:	401c0000 	.word	0x401c0000
 8008740:	40140000 	.word	0x40140000
 8008744:	3fe00000 	.word	0x3fe00000
 8008748:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800874c:	9d00      	ldr	r5, [sp, #0]
 800874e:	4642      	mov	r2, r8
 8008750:	464b      	mov	r3, r9
 8008752:	4630      	mov	r0, r6
 8008754:	4639      	mov	r1, r7
 8008756:	f7f8 f881 	bl	800085c <__aeabi_ddiv>
 800875a:	f7f8 fa05 	bl	8000b68 <__aeabi_d2iz>
 800875e:	9001      	str	r0, [sp, #4]
 8008760:	f7f7 fee8 	bl	8000534 <__aeabi_i2d>
 8008764:	4642      	mov	r2, r8
 8008766:	464b      	mov	r3, r9
 8008768:	f7f7 ff4e 	bl	8000608 <__aeabi_dmul>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	4630      	mov	r0, r6
 8008772:	4639      	mov	r1, r7
 8008774:	f7f7 fd90 	bl	8000298 <__aeabi_dsub>
 8008778:	9e01      	ldr	r6, [sp, #4]
 800877a:	9f04      	ldr	r7, [sp, #16]
 800877c:	3630      	adds	r6, #48	; 0x30
 800877e:	f805 6b01 	strb.w	r6, [r5], #1
 8008782:	9e00      	ldr	r6, [sp, #0]
 8008784:	1bae      	subs	r6, r5, r6
 8008786:	42b7      	cmp	r7, r6
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	d134      	bne.n	80087f8 <_dtoa_r+0x708>
 800878e:	f7f7 fd85 	bl	800029c <__adddf3>
 8008792:	4642      	mov	r2, r8
 8008794:	464b      	mov	r3, r9
 8008796:	4606      	mov	r6, r0
 8008798:	460f      	mov	r7, r1
 800879a:	f7f8 f9c5 	bl	8000b28 <__aeabi_dcmpgt>
 800879e:	b9c8      	cbnz	r0, 80087d4 <_dtoa_r+0x6e4>
 80087a0:	4642      	mov	r2, r8
 80087a2:	464b      	mov	r3, r9
 80087a4:	4630      	mov	r0, r6
 80087a6:	4639      	mov	r1, r7
 80087a8:	f7f8 f996 	bl	8000ad8 <__aeabi_dcmpeq>
 80087ac:	b110      	cbz	r0, 80087b4 <_dtoa_r+0x6c4>
 80087ae:	9b01      	ldr	r3, [sp, #4]
 80087b0:	07db      	lsls	r3, r3, #31
 80087b2:	d40f      	bmi.n	80087d4 <_dtoa_r+0x6e4>
 80087b4:	4651      	mov	r1, sl
 80087b6:	4620      	mov	r0, r4
 80087b8:	f000 fbcc 	bl	8008f54 <_Bfree>
 80087bc:	2300      	movs	r3, #0
 80087be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087c0:	702b      	strb	r3, [r5, #0]
 80087c2:	f10b 0301 	add.w	r3, fp, #1
 80087c6:	6013      	str	r3, [r2, #0]
 80087c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f43f ace2 	beq.w	8008194 <_dtoa_r+0xa4>
 80087d0:	601d      	str	r5, [r3, #0]
 80087d2:	e4df      	b.n	8008194 <_dtoa_r+0xa4>
 80087d4:	465f      	mov	r7, fp
 80087d6:	462b      	mov	r3, r5
 80087d8:	461d      	mov	r5, r3
 80087da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087de:	2a39      	cmp	r2, #57	; 0x39
 80087e0:	d106      	bne.n	80087f0 <_dtoa_r+0x700>
 80087e2:	9a00      	ldr	r2, [sp, #0]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d1f7      	bne.n	80087d8 <_dtoa_r+0x6e8>
 80087e8:	9900      	ldr	r1, [sp, #0]
 80087ea:	2230      	movs	r2, #48	; 0x30
 80087ec:	3701      	adds	r7, #1
 80087ee:	700a      	strb	r2, [r1, #0]
 80087f0:	781a      	ldrb	r2, [r3, #0]
 80087f2:	3201      	adds	r2, #1
 80087f4:	701a      	strb	r2, [r3, #0]
 80087f6:	e790      	b.n	800871a <_dtoa_r+0x62a>
 80087f8:	4ba3      	ldr	r3, [pc, #652]	; (8008a88 <_dtoa_r+0x998>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	f7f7 ff04 	bl	8000608 <__aeabi_dmul>
 8008800:	2200      	movs	r2, #0
 8008802:	2300      	movs	r3, #0
 8008804:	4606      	mov	r6, r0
 8008806:	460f      	mov	r7, r1
 8008808:	f7f8 f966 	bl	8000ad8 <__aeabi_dcmpeq>
 800880c:	2800      	cmp	r0, #0
 800880e:	d09e      	beq.n	800874e <_dtoa_r+0x65e>
 8008810:	e7d0      	b.n	80087b4 <_dtoa_r+0x6c4>
 8008812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008814:	2a00      	cmp	r2, #0
 8008816:	f000 80ca 	beq.w	80089ae <_dtoa_r+0x8be>
 800881a:	9a07      	ldr	r2, [sp, #28]
 800881c:	2a01      	cmp	r2, #1
 800881e:	f300 80ad 	bgt.w	800897c <_dtoa_r+0x88c>
 8008822:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008824:	2a00      	cmp	r2, #0
 8008826:	f000 80a5 	beq.w	8008974 <_dtoa_r+0x884>
 800882a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800882e:	9e08      	ldr	r6, [sp, #32]
 8008830:	9d05      	ldr	r5, [sp, #20]
 8008832:	9a05      	ldr	r2, [sp, #20]
 8008834:	441a      	add	r2, r3
 8008836:	9205      	str	r2, [sp, #20]
 8008838:	9a06      	ldr	r2, [sp, #24]
 800883a:	2101      	movs	r1, #1
 800883c:	441a      	add	r2, r3
 800883e:	4620      	mov	r0, r4
 8008840:	9206      	str	r2, [sp, #24]
 8008842:	f000 fc3d 	bl	80090c0 <__i2b>
 8008846:	4607      	mov	r7, r0
 8008848:	b165      	cbz	r5, 8008864 <_dtoa_r+0x774>
 800884a:	9b06      	ldr	r3, [sp, #24]
 800884c:	2b00      	cmp	r3, #0
 800884e:	dd09      	ble.n	8008864 <_dtoa_r+0x774>
 8008850:	42ab      	cmp	r3, r5
 8008852:	9a05      	ldr	r2, [sp, #20]
 8008854:	bfa8      	it	ge
 8008856:	462b      	movge	r3, r5
 8008858:	1ad2      	subs	r2, r2, r3
 800885a:	9205      	str	r2, [sp, #20]
 800885c:	9a06      	ldr	r2, [sp, #24]
 800885e:	1aed      	subs	r5, r5, r3
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	9306      	str	r3, [sp, #24]
 8008864:	9b08      	ldr	r3, [sp, #32]
 8008866:	b1f3      	cbz	r3, 80088a6 <_dtoa_r+0x7b6>
 8008868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 80a3 	beq.w	80089b6 <_dtoa_r+0x8c6>
 8008870:	2e00      	cmp	r6, #0
 8008872:	dd10      	ble.n	8008896 <_dtoa_r+0x7a6>
 8008874:	4639      	mov	r1, r7
 8008876:	4632      	mov	r2, r6
 8008878:	4620      	mov	r0, r4
 800887a:	f000 fce1 	bl	8009240 <__pow5mult>
 800887e:	4652      	mov	r2, sl
 8008880:	4601      	mov	r1, r0
 8008882:	4607      	mov	r7, r0
 8008884:	4620      	mov	r0, r4
 8008886:	f000 fc31 	bl	80090ec <__multiply>
 800888a:	4651      	mov	r1, sl
 800888c:	4680      	mov	r8, r0
 800888e:	4620      	mov	r0, r4
 8008890:	f000 fb60 	bl	8008f54 <_Bfree>
 8008894:	46c2      	mov	sl, r8
 8008896:	9b08      	ldr	r3, [sp, #32]
 8008898:	1b9a      	subs	r2, r3, r6
 800889a:	d004      	beq.n	80088a6 <_dtoa_r+0x7b6>
 800889c:	4651      	mov	r1, sl
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 fcce 	bl	8009240 <__pow5mult>
 80088a4:	4682      	mov	sl, r0
 80088a6:	2101      	movs	r1, #1
 80088a8:	4620      	mov	r0, r4
 80088aa:	f000 fc09 	bl	80090c0 <__i2b>
 80088ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	4606      	mov	r6, r0
 80088b4:	f340 8081 	ble.w	80089ba <_dtoa_r+0x8ca>
 80088b8:	461a      	mov	r2, r3
 80088ba:	4601      	mov	r1, r0
 80088bc:	4620      	mov	r0, r4
 80088be:	f000 fcbf 	bl	8009240 <__pow5mult>
 80088c2:	9b07      	ldr	r3, [sp, #28]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	4606      	mov	r6, r0
 80088c8:	dd7a      	ble.n	80089c0 <_dtoa_r+0x8d0>
 80088ca:	f04f 0800 	mov.w	r8, #0
 80088ce:	6933      	ldr	r3, [r6, #16]
 80088d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088d4:	6918      	ldr	r0, [r3, #16]
 80088d6:	f000 fba5 	bl	8009024 <__hi0bits>
 80088da:	f1c0 0020 	rsb	r0, r0, #32
 80088de:	9b06      	ldr	r3, [sp, #24]
 80088e0:	4418      	add	r0, r3
 80088e2:	f010 001f 	ands.w	r0, r0, #31
 80088e6:	f000 8094 	beq.w	8008a12 <_dtoa_r+0x922>
 80088ea:	f1c0 0320 	rsb	r3, r0, #32
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	f340 8085 	ble.w	80089fe <_dtoa_r+0x90e>
 80088f4:	9b05      	ldr	r3, [sp, #20]
 80088f6:	f1c0 001c 	rsb	r0, r0, #28
 80088fa:	4403      	add	r3, r0
 80088fc:	9305      	str	r3, [sp, #20]
 80088fe:	9b06      	ldr	r3, [sp, #24]
 8008900:	4403      	add	r3, r0
 8008902:	4405      	add	r5, r0
 8008904:	9306      	str	r3, [sp, #24]
 8008906:	9b05      	ldr	r3, [sp, #20]
 8008908:	2b00      	cmp	r3, #0
 800890a:	dd05      	ble.n	8008918 <_dtoa_r+0x828>
 800890c:	4651      	mov	r1, sl
 800890e:	461a      	mov	r2, r3
 8008910:	4620      	mov	r0, r4
 8008912:	f000 fcef 	bl	80092f4 <__lshift>
 8008916:	4682      	mov	sl, r0
 8008918:	9b06      	ldr	r3, [sp, #24]
 800891a:	2b00      	cmp	r3, #0
 800891c:	dd05      	ble.n	800892a <_dtoa_r+0x83a>
 800891e:	4631      	mov	r1, r6
 8008920:	461a      	mov	r2, r3
 8008922:	4620      	mov	r0, r4
 8008924:	f000 fce6 	bl	80092f4 <__lshift>
 8008928:	4606      	mov	r6, r0
 800892a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800892c:	2b00      	cmp	r3, #0
 800892e:	d072      	beq.n	8008a16 <_dtoa_r+0x926>
 8008930:	4631      	mov	r1, r6
 8008932:	4650      	mov	r0, sl
 8008934:	f000 fd4a 	bl	80093cc <__mcmp>
 8008938:	2800      	cmp	r0, #0
 800893a:	da6c      	bge.n	8008a16 <_dtoa_r+0x926>
 800893c:	2300      	movs	r3, #0
 800893e:	4651      	mov	r1, sl
 8008940:	220a      	movs	r2, #10
 8008942:	4620      	mov	r0, r4
 8008944:	f000 fb28 	bl	8008f98 <__multadd>
 8008948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800894a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800894e:	4682      	mov	sl, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 81b0 	beq.w	8008cb6 <_dtoa_r+0xbc6>
 8008956:	2300      	movs	r3, #0
 8008958:	4639      	mov	r1, r7
 800895a:	220a      	movs	r2, #10
 800895c:	4620      	mov	r0, r4
 800895e:	f000 fb1b 	bl	8008f98 <__multadd>
 8008962:	9b01      	ldr	r3, [sp, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	4607      	mov	r7, r0
 8008968:	f300 8096 	bgt.w	8008a98 <_dtoa_r+0x9a8>
 800896c:	9b07      	ldr	r3, [sp, #28]
 800896e:	2b02      	cmp	r3, #2
 8008970:	dc59      	bgt.n	8008a26 <_dtoa_r+0x936>
 8008972:	e091      	b.n	8008a98 <_dtoa_r+0x9a8>
 8008974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800897a:	e758      	b.n	800882e <_dtoa_r+0x73e>
 800897c:	9b04      	ldr	r3, [sp, #16]
 800897e:	1e5e      	subs	r6, r3, #1
 8008980:	9b08      	ldr	r3, [sp, #32]
 8008982:	42b3      	cmp	r3, r6
 8008984:	bfbf      	itttt	lt
 8008986:	9b08      	ldrlt	r3, [sp, #32]
 8008988:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800898a:	9608      	strlt	r6, [sp, #32]
 800898c:	1af3      	sublt	r3, r6, r3
 800898e:	bfb4      	ite	lt
 8008990:	18d2      	addlt	r2, r2, r3
 8008992:	1b9e      	subge	r6, r3, r6
 8008994:	9b04      	ldr	r3, [sp, #16]
 8008996:	bfbc      	itt	lt
 8008998:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800899a:	2600      	movlt	r6, #0
 800899c:	2b00      	cmp	r3, #0
 800899e:	bfb7      	itett	lt
 80089a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80089a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80089a8:	1a9d      	sublt	r5, r3, r2
 80089aa:	2300      	movlt	r3, #0
 80089ac:	e741      	b.n	8008832 <_dtoa_r+0x742>
 80089ae:	9e08      	ldr	r6, [sp, #32]
 80089b0:	9d05      	ldr	r5, [sp, #20]
 80089b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80089b4:	e748      	b.n	8008848 <_dtoa_r+0x758>
 80089b6:	9a08      	ldr	r2, [sp, #32]
 80089b8:	e770      	b.n	800889c <_dtoa_r+0x7ac>
 80089ba:	9b07      	ldr	r3, [sp, #28]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	dc19      	bgt.n	80089f4 <_dtoa_r+0x904>
 80089c0:	9b02      	ldr	r3, [sp, #8]
 80089c2:	b9bb      	cbnz	r3, 80089f4 <_dtoa_r+0x904>
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089ca:	b99b      	cbnz	r3, 80089f4 <_dtoa_r+0x904>
 80089cc:	9b03      	ldr	r3, [sp, #12]
 80089ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089d2:	0d1b      	lsrs	r3, r3, #20
 80089d4:	051b      	lsls	r3, r3, #20
 80089d6:	b183      	cbz	r3, 80089fa <_dtoa_r+0x90a>
 80089d8:	9b05      	ldr	r3, [sp, #20]
 80089da:	3301      	adds	r3, #1
 80089dc:	9305      	str	r3, [sp, #20]
 80089de:	9b06      	ldr	r3, [sp, #24]
 80089e0:	3301      	adds	r3, #1
 80089e2:	9306      	str	r3, [sp, #24]
 80089e4:	f04f 0801 	mov.w	r8, #1
 80089e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f47f af6f 	bne.w	80088ce <_dtoa_r+0x7de>
 80089f0:	2001      	movs	r0, #1
 80089f2:	e774      	b.n	80088de <_dtoa_r+0x7ee>
 80089f4:	f04f 0800 	mov.w	r8, #0
 80089f8:	e7f6      	b.n	80089e8 <_dtoa_r+0x8f8>
 80089fa:	4698      	mov	r8, r3
 80089fc:	e7f4      	b.n	80089e8 <_dtoa_r+0x8f8>
 80089fe:	d082      	beq.n	8008906 <_dtoa_r+0x816>
 8008a00:	9a05      	ldr	r2, [sp, #20]
 8008a02:	331c      	adds	r3, #28
 8008a04:	441a      	add	r2, r3
 8008a06:	9205      	str	r2, [sp, #20]
 8008a08:	9a06      	ldr	r2, [sp, #24]
 8008a0a:	441a      	add	r2, r3
 8008a0c:	441d      	add	r5, r3
 8008a0e:	9206      	str	r2, [sp, #24]
 8008a10:	e779      	b.n	8008906 <_dtoa_r+0x816>
 8008a12:	4603      	mov	r3, r0
 8008a14:	e7f4      	b.n	8008a00 <_dtoa_r+0x910>
 8008a16:	9b04      	ldr	r3, [sp, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	dc37      	bgt.n	8008a8c <_dtoa_r+0x99c>
 8008a1c:	9b07      	ldr	r3, [sp, #28]
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	dd34      	ble.n	8008a8c <_dtoa_r+0x99c>
 8008a22:	9b04      	ldr	r3, [sp, #16]
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	9b01      	ldr	r3, [sp, #4]
 8008a28:	b963      	cbnz	r3, 8008a44 <_dtoa_r+0x954>
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	2205      	movs	r2, #5
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 fab2 	bl	8008f98 <__multadd>
 8008a34:	4601      	mov	r1, r0
 8008a36:	4606      	mov	r6, r0
 8008a38:	4650      	mov	r0, sl
 8008a3a:	f000 fcc7 	bl	80093cc <__mcmp>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	f73f adbb 	bgt.w	80085ba <_dtoa_r+0x4ca>
 8008a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a46:	9d00      	ldr	r5, [sp, #0]
 8008a48:	ea6f 0b03 	mvn.w	fp, r3
 8008a4c:	f04f 0800 	mov.w	r8, #0
 8008a50:	4631      	mov	r1, r6
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 fa7e 	bl	8008f54 <_Bfree>
 8008a58:	2f00      	cmp	r7, #0
 8008a5a:	f43f aeab 	beq.w	80087b4 <_dtoa_r+0x6c4>
 8008a5e:	f1b8 0f00 	cmp.w	r8, #0
 8008a62:	d005      	beq.n	8008a70 <_dtoa_r+0x980>
 8008a64:	45b8      	cmp	r8, r7
 8008a66:	d003      	beq.n	8008a70 <_dtoa_r+0x980>
 8008a68:	4641      	mov	r1, r8
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 fa72 	bl	8008f54 <_Bfree>
 8008a70:	4639      	mov	r1, r7
 8008a72:	4620      	mov	r0, r4
 8008a74:	f000 fa6e 	bl	8008f54 <_Bfree>
 8008a78:	e69c      	b.n	80087b4 <_dtoa_r+0x6c4>
 8008a7a:	2600      	movs	r6, #0
 8008a7c:	4637      	mov	r7, r6
 8008a7e:	e7e1      	b.n	8008a44 <_dtoa_r+0x954>
 8008a80:	46bb      	mov	fp, r7
 8008a82:	4637      	mov	r7, r6
 8008a84:	e599      	b.n	80085ba <_dtoa_r+0x4ca>
 8008a86:	bf00      	nop
 8008a88:	40240000 	.word	0x40240000
 8008a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f000 80c8 	beq.w	8008c24 <_dtoa_r+0xb34>
 8008a94:	9b04      	ldr	r3, [sp, #16]
 8008a96:	9301      	str	r3, [sp, #4]
 8008a98:	2d00      	cmp	r5, #0
 8008a9a:	dd05      	ble.n	8008aa8 <_dtoa_r+0x9b8>
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	462a      	mov	r2, r5
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 fc27 	bl	80092f4 <__lshift>
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	f1b8 0f00 	cmp.w	r8, #0
 8008aac:	d05b      	beq.n	8008b66 <_dtoa_r+0xa76>
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 fa0f 	bl	8008ed4 <_Balloc>
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	b928      	cbnz	r0, 8008ac6 <_dtoa_r+0x9d6>
 8008aba:	4b83      	ldr	r3, [pc, #524]	; (8008cc8 <_dtoa_r+0xbd8>)
 8008abc:	4602      	mov	r2, r0
 8008abe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008ac2:	f7ff bb2e 	b.w	8008122 <_dtoa_r+0x32>
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	3202      	adds	r2, #2
 8008aca:	0092      	lsls	r2, r2, #2
 8008acc:	f107 010c 	add.w	r1, r7, #12
 8008ad0:	300c      	adds	r0, #12
 8008ad2:	f000 ffab 	bl	8009a2c <memcpy>
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	4629      	mov	r1, r5
 8008ada:	4620      	mov	r0, r4
 8008adc:	f000 fc0a 	bl	80092f4 <__lshift>
 8008ae0:	9b00      	ldr	r3, [sp, #0]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	9304      	str	r3, [sp, #16]
 8008ae6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aea:	4413      	add	r3, r2
 8008aec:	9308      	str	r3, [sp, #32]
 8008aee:	9b02      	ldr	r3, [sp, #8]
 8008af0:	f003 0301 	and.w	r3, r3, #1
 8008af4:	46b8      	mov	r8, r7
 8008af6:	9306      	str	r3, [sp, #24]
 8008af8:	4607      	mov	r7, r0
 8008afa:	9b04      	ldr	r3, [sp, #16]
 8008afc:	4631      	mov	r1, r6
 8008afe:	3b01      	subs	r3, #1
 8008b00:	4650      	mov	r0, sl
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	f7ff fa69 	bl	8007fda <quorem>
 8008b08:	4641      	mov	r1, r8
 8008b0a:	9002      	str	r0, [sp, #8]
 8008b0c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008b10:	4650      	mov	r0, sl
 8008b12:	f000 fc5b 	bl	80093cc <__mcmp>
 8008b16:	463a      	mov	r2, r7
 8008b18:	9005      	str	r0, [sp, #20]
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f000 fc71 	bl	8009404 <__mdiff>
 8008b22:	68c2      	ldr	r2, [r0, #12]
 8008b24:	4605      	mov	r5, r0
 8008b26:	bb02      	cbnz	r2, 8008b6a <_dtoa_r+0xa7a>
 8008b28:	4601      	mov	r1, r0
 8008b2a:	4650      	mov	r0, sl
 8008b2c:	f000 fc4e 	bl	80093cc <__mcmp>
 8008b30:	4602      	mov	r2, r0
 8008b32:	4629      	mov	r1, r5
 8008b34:	4620      	mov	r0, r4
 8008b36:	9209      	str	r2, [sp, #36]	; 0x24
 8008b38:	f000 fa0c 	bl	8008f54 <_Bfree>
 8008b3c:	9b07      	ldr	r3, [sp, #28]
 8008b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b40:	9d04      	ldr	r5, [sp, #16]
 8008b42:	ea43 0102 	orr.w	r1, r3, r2
 8008b46:	9b06      	ldr	r3, [sp, #24]
 8008b48:	4319      	orrs	r1, r3
 8008b4a:	d110      	bne.n	8008b6e <_dtoa_r+0xa7e>
 8008b4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b50:	d029      	beq.n	8008ba6 <_dtoa_r+0xab6>
 8008b52:	9b05      	ldr	r3, [sp, #20]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	dd02      	ble.n	8008b5e <_dtoa_r+0xa6e>
 8008b58:	9b02      	ldr	r3, [sp, #8]
 8008b5a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008b5e:	9b01      	ldr	r3, [sp, #4]
 8008b60:	f883 9000 	strb.w	r9, [r3]
 8008b64:	e774      	b.n	8008a50 <_dtoa_r+0x960>
 8008b66:	4638      	mov	r0, r7
 8008b68:	e7ba      	b.n	8008ae0 <_dtoa_r+0x9f0>
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	e7e1      	b.n	8008b32 <_dtoa_r+0xa42>
 8008b6e:	9b05      	ldr	r3, [sp, #20]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	db04      	blt.n	8008b7e <_dtoa_r+0xa8e>
 8008b74:	9907      	ldr	r1, [sp, #28]
 8008b76:	430b      	orrs	r3, r1
 8008b78:	9906      	ldr	r1, [sp, #24]
 8008b7a:	430b      	orrs	r3, r1
 8008b7c:	d120      	bne.n	8008bc0 <_dtoa_r+0xad0>
 8008b7e:	2a00      	cmp	r2, #0
 8008b80:	dded      	ble.n	8008b5e <_dtoa_r+0xa6e>
 8008b82:	4651      	mov	r1, sl
 8008b84:	2201      	movs	r2, #1
 8008b86:	4620      	mov	r0, r4
 8008b88:	f000 fbb4 	bl	80092f4 <__lshift>
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4682      	mov	sl, r0
 8008b90:	f000 fc1c 	bl	80093cc <__mcmp>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	dc03      	bgt.n	8008ba0 <_dtoa_r+0xab0>
 8008b98:	d1e1      	bne.n	8008b5e <_dtoa_r+0xa6e>
 8008b9a:	f019 0f01 	tst.w	r9, #1
 8008b9e:	d0de      	beq.n	8008b5e <_dtoa_r+0xa6e>
 8008ba0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ba4:	d1d8      	bne.n	8008b58 <_dtoa_r+0xa68>
 8008ba6:	9a01      	ldr	r2, [sp, #4]
 8008ba8:	2339      	movs	r3, #57	; 0x39
 8008baa:	7013      	strb	r3, [r2, #0]
 8008bac:	462b      	mov	r3, r5
 8008bae:	461d      	mov	r5, r3
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bb6:	2a39      	cmp	r2, #57	; 0x39
 8008bb8:	d06c      	beq.n	8008c94 <_dtoa_r+0xba4>
 8008bba:	3201      	adds	r2, #1
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	e747      	b.n	8008a50 <_dtoa_r+0x960>
 8008bc0:	2a00      	cmp	r2, #0
 8008bc2:	dd07      	ble.n	8008bd4 <_dtoa_r+0xae4>
 8008bc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008bc8:	d0ed      	beq.n	8008ba6 <_dtoa_r+0xab6>
 8008bca:	9a01      	ldr	r2, [sp, #4]
 8008bcc:	f109 0301 	add.w	r3, r9, #1
 8008bd0:	7013      	strb	r3, [r2, #0]
 8008bd2:	e73d      	b.n	8008a50 <_dtoa_r+0x960>
 8008bd4:	9b04      	ldr	r3, [sp, #16]
 8008bd6:	9a08      	ldr	r2, [sp, #32]
 8008bd8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d043      	beq.n	8008c68 <_dtoa_r+0xb78>
 8008be0:	4651      	mov	r1, sl
 8008be2:	2300      	movs	r3, #0
 8008be4:	220a      	movs	r2, #10
 8008be6:	4620      	mov	r0, r4
 8008be8:	f000 f9d6 	bl	8008f98 <__multadd>
 8008bec:	45b8      	cmp	r8, r7
 8008bee:	4682      	mov	sl, r0
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	f04f 020a 	mov.w	r2, #10
 8008bf8:	4641      	mov	r1, r8
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	d107      	bne.n	8008c0e <_dtoa_r+0xb1e>
 8008bfe:	f000 f9cb 	bl	8008f98 <__multadd>
 8008c02:	4680      	mov	r8, r0
 8008c04:	4607      	mov	r7, r0
 8008c06:	9b04      	ldr	r3, [sp, #16]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	9304      	str	r3, [sp, #16]
 8008c0c:	e775      	b.n	8008afa <_dtoa_r+0xa0a>
 8008c0e:	f000 f9c3 	bl	8008f98 <__multadd>
 8008c12:	4639      	mov	r1, r7
 8008c14:	4680      	mov	r8, r0
 8008c16:	2300      	movs	r3, #0
 8008c18:	220a      	movs	r2, #10
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f000 f9bc 	bl	8008f98 <__multadd>
 8008c20:	4607      	mov	r7, r0
 8008c22:	e7f0      	b.n	8008c06 <_dtoa_r+0xb16>
 8008c24:	9b04      	ldr	r3, [sp, #16]
 8008c26:	9301      	str	r3, [sp, #4]
 8008c28:	9d00      	ldr	r5, [sp, #0]
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	4650      	mov	r0, sl
 8008c2e:	f7ff f9d4 	bl	8007fda <quorem>
 8008c32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008c36:	9b00      	ldr	r3, [sp, #0]
 8008c38:	f805 9b01 	strb.w	r9, [r5], #1
 8008c3c:	1aea      	subs	r2, r5, r3
 8008c3e:	9b01      	ldr	r3, [sp, #4]
 8008c40:	4293      	cmp	r3, r2
 8008c42:	dd07      	ble.n	8008c54 <_dtoa_r+0xb64>
 8008c44:	4651      	mov	r1, sl
 8008c46:	2300      	movs	r3, #0
 8008c48:	220a      	movs	r2, #10
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f000 f9a4 	bl	8008f98 <__multadd>
 8008c50:	4682      	mov	sl, r0
 8008c52:	e7ea      	b.n	8008c2a <_dtoa_r+0xb3a>
 8008c54:	9b01      	ldr	r3, [sp, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	bfc8      	it	gt
 8008c5a:	461d      	movgt	r5, r3
 8008c5c:	9b00      	ldr	r3, [sp, #0]
 8008c5e:	bfd8      	it	le
 8008c60:	2501      	movle	r5, #1
 8008c62:	441d      	add	r5, r3
 8008c64:	f04f 0800 	mov.w	r8, #0
 8008c68:	4651      	mov	r1, sl
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f000 fb41 	bl	80092f4 <__lshift>
 8008c72:	4631      	mov	r1, r6
 8008c74:	4682      	mov	sl, r0
 8008c76:	f000 fba9 	bl	80093cc <__mcmp>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	dc96      	bgt.n	8008bac <_dtoa_r+0xabc>
 8008c7e:	d102      	bne.n	8008c86 <_dtoa_r+0xb96>
 8008c80:	f019 0f01 	tst.w	r9, #1
 8008c84:	d192      	bne.n	8008bac <_dtoa_r+0xabc>
 8008c86:	462b      	mov	r3, r5
 8008c88:	461d      	mov	r5, r3
 8008c8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c8e:	2a30      	cmp	r2, #48	; 0x30
 8008c90:	d0fa      	beq.n	8008c88 <_dtoa_r+0xb98>
 8008c92:	e6dd      	b.n	8008a50 <_dtoa_r+0x960>
 8008c94:	9a00      	ldr	r2, [sp, #0]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d189      	bne.n	8008bae <_dtoa_r+0xabe>
 8008c9a:	f10b 0b01 	add.w	fp, fp, #1
 8008c9e:	2331      	movs	r3, #49	; 0x31
 8008ca0:	e796      	b.n	8008bd0 <_dtoa_r+0xae0>
 8008ca2:	4b0a      	ldr	r3, [pc, #40]	; (8008ccc <_dtoa_r+0xbdc>)
 8008ca4:	f7ff ba99 	b.w	80081da <_dtoa_r+0xea>
 8008ca8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f47f aa6d 	bne.w	800818a <_dtoa_r+0x9a>
 8008cb0:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <_dtoa_r+0xbe0>)
 8008cb2:	f7ff ba92 	b.w	80081da <_dtoa_r+0xea>
 8008cb6:	9b01      	ldr	r3, [sp, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	dcb5      	bgt.n	8008c28 <_dtoa_r+0xb38>
 8008cbc:	9b07      	ldr	r3, [sp, #28]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	f73f aeb1 	bgt.w	8008a26 <_dtoa_r+0x936>
 8008cc4:	e7b0      	b.n	8008c28 <_dtoa_r+0xb38>
 8008cc6:	bf00      	nop
 8008cc8:	0800a1e0 	.word	0x0800a1e0
 8008ccc:	0800a140 	.word	0x0800a140
 8008cd0:	0800a164 	.word	0x0800a164

08008cd4 <_free_r>:
 8008cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cd6:	2900      	cmp	r1, #0
 8008cd8:	d044      	beq.n	8008d64 <_free_r+0x90>
 8008cda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cde:	9001      	str	r0, [sp, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ce6:	bfb8      	it	lt
 8008ce8:	18e4      	addlt	r4, r4, r3
 8008cea:	f000 f8e7 	bl	8008ebc <__malloc_lock>
 8008cee:	4a1e      	ldr	r2, [pc, #120]	; (8008d68 <_free_r+0x94>)
 8008cf0:	9801      	ldr	r0, [sp, #4]
 8008cf2:	6813      	ldr	r3, [r2, #0]
 8008cf4:	b933      	cbnz	r3, 8008d04 <_free_r+0x30>
 8008cf6:	6063      	str	r3, [r4, #4]
 8008cf8:	6014      	str	r4, [r2, #0]
 8008cfa:	b003      	add	sp, #12
 8008cfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d00:	f000 b8e2 	b.w	8008ec8 <__malloc_unlock>
 8008d04:	42a3      	cmp	r3, r4
 8008d06:	d908      	bls.n	8008d1a <_free_r+0x46>
 8008d08:	6825      	ldr	r5, [r4, #0]
 8008d0a:	1961      	adds	r1, r4, r5
 8008d0c:	428b      	cmp	r3, r1
 8008d0e:	bf01      	itttt	eq
 8008d10:	6819      	ldreq	r1, [r3, #0]
 8008d12:	685b      	ldreq	r3, [r3, #4]
 8008d14:	1949      	addeq	r1, r1, r5
 8008d16:	6021      	streq	r1, [r4, #0]
 8008d18:	e7ed      	b.n	8008cf6 <_free_r+0x22>
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	b10b      	cbz	r3, 8008d24 <_free_r+0x50>
 8008d20:	42a3      	cmp	r3, r4
 8008d22:	d9fa      	bls.n	8008d1a <_free_r+0x46>
 8008d24:	6811      	ldr	r1, [r2, #0]
 8008d26:	1855      	adds	r5, r2, r1
 8008d28:	42a5      	cmp	r5, r4
 8008d2a:	d10b      	bne.n	8008d44 <_free_r+0x70>
 8008d2c:	6824      	ldr	r4, [r4, #0]
 8008d2e:	4421      	add	r1, r4
 8008d30:	1854      	adds	r4, r2, r1
 8008d32:	42a3      	cmp	r3, r4
 8008d34:	6011      	str	r1, [r2, #0]
 8008d36:	d1e0      	bne.n	8008cfa <_free_r+0x26>
 8008d38:	681c      	ldr	r4, [r3, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	6053      	str	r3, [r2, #4]
 8008d3e:	440c      	add	r4, r1
 8008d40:	6014      	str	r4, [r2, #0]
 8008d42:	e7da      	b.n	8008cfa <_free_r+0x26>
 8008d44:	d902      	bls.n	8008d4c <_free_r+0x78>
 8008d46:	230c      	movs	r3, #12
 8008d48:	6003      	str	r3, [r0, #0]
 8008d4a:	e7d6      	b.n	8008cfa <_free_r+0x26>
 8008d4c:	6825      	ldr	r5, [r4, #0]
 8008d4e:	1961      	adds	r1, r4, r5
 8008d50:	428b      	cmp	r3, r1
 8008d52:	bf04      	itt	eq
 8008d54:	6819      	ldreq	r1, [r3, #0]
 8008d56:	685b      	ldreq	r3, [r3, #4]
 8008d58:	6063      	str	r3, [r4, #4]
 8008d5a:	bf04      	itt	eq
 8008d5c:	1949      	addeq	r1, r1, r5
 8008d5e:	6021      	streq	r1, [r4, #0]
 8008d60:	6054      	str	r4, [r2, #4]
 8008d62:	e7ca      	b.n	8008cfa <_free_r+0x26>
 8008d64:	b003      	add	sp, #12
 8008d66:	bd30      	pop	{r4, r5, pc}
 8008d68:	20000548 	.word	0x20000548

08008d6c <malloc>:
 8008d6c:	4b02      	ldr	r3, [pc, #8]	; (8008d78 <malloc+0xc>)
 8008d6e:	4601      	mov	r1, r0
 8008d70:	6818      	ldr	r0, [r3, #0]
 8008d72:	f000 b823 	b.w	8008dbc <_malloc_r>
 8008d76:	bf00      	nop
 8008d78:	20000068 	.word	0x20000068

08008d7c <sbrk_aligned>:
 8008d7c:	b570      	push	{r4, r5, r6, lr}
 8008d7e:	4e0e      	ldr	r6, [pc, #56]	; (8008db8 <sbrk_aligned+0x3c>)
 8008d80:	460c      	mov	r4, r1
 8008d82:	6831      	ldr	r1, [r6, #0]
 8008d84:	4605      	mov	r5, r0
 8008d86:	b911      	cbnz	r1, 8008d8e <sbrk_aligned+0x12>
 8008d88:	f000 fe40 	bl	8009a0c <_sbrk_r>
 8008d8c:	6030      	str	r0, [r6, #0]
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4628      	mov	r0, r5
 8008d92:	f000 fe3b 	bl	8009a0c <_sbrk_r>
 8008d96:	1c43      	adds	r3, r0, #1
 8008d98:	d00a      	beq.n	8008db0 <sbrk_aligned+0x34>
 8008d9a:	1cc4      	adds	r4, r0, #3
 8008d9c:	f024 0403 	bic.w	r4, r4, #3
 8008da0:	42a0      	cmp	r0, r4
 8008da2:	d007      	beq.n	8008db4 <sbrk_aligned+0x38>
 8008da4:	1a21      	subs	r1, r4, r0
 8008da6:	4628      	mov	r0, r5
 8008da8:	f000 fe30 	bl	8009a0c <_sbrk_r>
 8008dac:	3001      	adds	r0, #1
 8008dae:	d101      	bne.n	8008db4 <sbrk_aligned+0x38>
 8008db0:	f04f 34ff 	mov.w	r4, #4294967295
 8008db4:	4620      	mov	r0, r4
 8008db6:	bd70      	pop	{r4, r5, r6, pc}
 8008db8:	2000054c 	.word	0x2000054c

08008dbc <_malloc_r>:
 8008dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dc0:	1ccd      	adds	r5, r1, #3
 8008dc2:	f025 0503 	bic.w	r5, r5, #3
 8008dc6:	3508      	adds	r5, #8
 8008dc8:	2d0c      	cmp	r5, #12
 8008dca:	bf38      	it	cc
 8008dcc:	250c      	movcc	r5, #12
 8008dce:	2d00      	cmp	r5, #0
 8008dd0:	4607      	mov	r7, r0
 8008dd2:	db01      	blt.n	8008dd8 <_malloc_r+0x1c>
 8008dd4:	42a9      	cmp	r1, r5
 8008dd6:	d905      	bls.n	8008de4 <_malloc_r+0x28>
 8008dd8:	230c      	movs	r3, #12
 8008dda:	603b      	str	r3, [r7, #0]
 8008ddc:	2600      	movs	r6, #0
 8008dde:	4630      	mov	r0, r6
 8008de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008de4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008eb8 <_malloc_r+0xfc>
 8008de8:	f000 f868 	bl	8008ebc <__malloc_lock>
 8008dec:	f8d8 3000 	ldr.w	r3, [r8]
 8008df0:	461c      	mov	r4, r3
 8008df2:	bb5c      	cbnz	r4, 8008e4c <_malloc_r+0x90>
 8008df4:	4629      	mov	r1, r5
 8008df6:	4638      	mov	r0, r7
 8008df8:	f7ff ffc0 	bl	8008d7c <sbrk_aligned>
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	4604      	mov	r4, r0
 8008e00:	d155      	bne.n	8008eae <_malloc_r+0xf2>
 8008e02:	f8d8 4000 	ldr.w	r4, [r8]
 8008e06:	4626      	mov	r6, r4
 8008e08:	2e00      	cmp	r6, #0
 8008e0a:	d145      	bne.n	8008e98 <_malloc_r+0xdc>
 8008e0c:	2c00      	cmp	r4, #0
 8008e0e:	d048      	beq.n	8008ea2 <_malloc_r+0xe6>
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	4631      	mov	r1, r6
 8008e14:	4638      	mov	r0, r7
 8008e16:	eb04 0903 	add.w	r9, r4, r3
 8008e1a:	f000 fdf7 	bl	8009a0c <_sbrk_r>
 8008e1e:	4581      	cmp	r9, r0
 8008e20:	d13f      	bne.n	8008ea2 <_malloc_r+0xe6>
 8008e22:	6821      	ldr	r1, [r4, #0]
 8008e24:	1a6d      	subs	r5, r5, r1
 8008e26:	4629      	mov	r1, r5
 8008e28:	4638      	mov	r0, r7
 8008e2a:	f7ff ffa7 	bl	8008d7c <sbrk_aligned>
 8008e2e:	3001      	adds	r0, #1
 8008e30:	d037      	beq.n	8008ea2 <_malloc_r+0xe6>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	442b      	add	r3, r5
 8008e36:	6023      	str	r3, [r4, #0]
 8008e38:	f8d8 3000 	ldr.w	r3, [r8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d038      	beq.n	8008eb2 <_malloc_r+0xf6>
 8008e40:	685a      	ldr	r2, [r3, #4]
 8008e42:	42a2      	cmp	r2, r4
 8008e44:	d12b      	bne.n	8008e9e <_malloc_r+0xe2>
 8008e46:	2200      	movs	r2, #0
 8008e48:	605a      	str	r2, [r3, #4]
 8008e4a:	e00f      	b.n	8008e6c <_malloc_r+0xb0>
 8008e4c:	6822      	ldr	r2, [r4, #0]
 8008e4e:	1b52      	subs	r2, r2, r5
 8008e50:	d41f      	bmi.n	8008e92 <_malloc_r+0xd6>
 8008e52:	2a0b      	cmp	r2, #11
 8008e54:	d917      	bls.n	8008e86 <_malloc_r+0xca>
 8008e56:	1961      	adds	r1, r4, r5
 8008e58:	42a3      	cmp	r3, r4
 8008e5a:	6025      	str	r5, [r4, #0]
 8008e5c:	bf18      	it	ne
 8008e5e:	6059      	strne	r1, [r3, #4]
 8008e60:	6863      	ldr	r3, [r4, #4]
 8008e62:	bf08      	it	eq
 8008e64:	f8c8 1000 	streq.w	r1, [r8]
 8008e68:	5162      	str	r2, [r4, r5]
 8008e6a:	604b      	str	r3, [r1, #4]
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	f104 060b 	add.w	r6, r4, #11
 8008e72:	f000 f829 	bl	8008ec8 <__malloc_unlock>
 8008e76:	f026 0607 	bic.w	r6, r6, #7
 8008e7a:	1d23      	adds	r3, r4, #4
 8008e7c:	1af2      	subs	r2, r6, r3
 8008e7e:	d0ae      	beq.n	8008dde <_malloc_r+0x22>
 8008e80:	1b9b      	subs	r3, r3, r6
 8008e82:	50a3      	str	r3, [r4, r2]
 8008e84:	e7ab      	b.n	8008dde <_malloc_r+0x22>
 8008e86:	42a3      	cmp	r3, r4
 8008e88:	6862      	ldr	r2, [r4, #4]
 8008e8a:	d1dd      	bne.n	8008e48 <_malloc_r+0x8c>
 8008e8c:	f8c8 2000 	str.w	r2, [r8]
 8008e90:	e7ec      	b.n	8008e6c <_malloc_r+0xb0>
 8008e92:	4623      	mov	r3, r4
 8008e94:	6864      	ldr	r4, [r4, #4]
 8008e96:	e7ac      	b.n	8008df2 <_malloc_r+0x36>
 8008e98:	4634      	mov	r4, r6
 8008e9a:	6876      	ldr	r6, [r6, #4]
 8008e9c:	e7b4      	b.n	8008e08 <_malloc_r+0x4c>
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	e7cc      	b.n	8008e3c <_malloc_r+0x80>
 8008ea2:	230c      	movs	r3, #12
 8008ea4:	603b      	str	r3, [r7, #0]
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	f000 f80e 	bl	8008ec8 <__malloc_unlock>
 8008eac:	e797      	b.n	8008dde <_malloc_r+0x22>
 8008eae:	6025      	str	r5, [r4, #0]
 8008eb0:	e7dc      	b.n	8008e6c <_malloc_r+0xb0>
 8008eb2:	605b      	str	r3, [r3, #4]
 8008eb4:	deff      	udf	#255	; 0xff
 8008eb6:	bf00      	nop
 8008eb8:	20000548 	.word	0x20000548

08008ebc <__malloc_lock>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	; (8008ec4 <__malloc_lock+0x8>)
 8008ebe:	f7ff b88a 	b.w	8007fd6 <__retarget_lock_acquire_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	20000544 	.word	0x20000544

08008ec8 <__malloc_unlock>:
 8008ec8:	4801      	ldr	r0, [pc, #4]	; (8008ed0 <__malloc_unlock+0x8>)
 8008eca:	f7ff b885 	b.w	8007fd8 <__retarget_lock_release_recursive>
 8008ece:	bf00      	nop
 8008ed0:	20000544 	.word	0x20000544

08008ed4 <_Balloc>:
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	69c6      	ldr	r6, [r0, #28]
 8008ed8:	4604      	mov	r4, r0
 8008eda:	460d      	mov	r5, r1
 8008edc:	b976      	cbnz	r6, 8008efc <_Balloc+0x28>
 8008ede:	2010      	movs	r0, #16
 8008ee0:	f7ff ff44 	bl	8008d6c <malloc>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	61e0      	str	r0, [r4, #28]
 8008ee8:	b920      	cbnz	r0, 8008ef4 <_Balloc+0x20>
 8008eea:	4b18      	ldr	r3, [pc, #96]	; (8008f4c <_Balloc+0x78>)
 8008eec:	4818      	ldr	r0, [pc, #96]	; (8008f50 <_Balloc+0x7c>)
 8008eee:	216b      	movs	r1, #107	; 0x6b
 8008ef0:	f000 fdaa 	bl	8009a48 <__assert_func>
 8008ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ef8:	6006      	str	r6, [r0, #0]
 8008efa:	60c6      	str	r6, [r0, #12]
 8008efc:	69e6      	ldr	r6, [r4, #28]
 8008efe:	68f3      	ldr	r3, [r6, #12]
 8008f00:	b183      	cbz	r3, 8008f24 <_Balloc+0x50>
 8008f02:	69e3      	ldr	r3, [r4, #28]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f0a:	b9b8      	cbnz	r0, 8008f3c <_Balloc+0x68>
 8008f0c:	2101      	movs	r1, #1
 8008f0e:	fa01 f605 	lsl.w	r6, r1, r5
 8008f12:	1d72      	adds	r2, r6, #5
 8008f14:	0092      	lsls	r2, r2, #2
 8008f16:	4620      	mov	r0, r4
 8008f18:	f000 fdb4 	bl	8009a84 <_calloc_r>
 8008f1c:	b160      	cbz	r0, 8008f38 <_Balloc+0x64>
 8008f1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f22:	e00e      	b.n	8008f42 <_Balloc+0x6e>
 8008f24:	2221      	movs	r2, #33	; 0x21
 8008f26:	2104      	movs	r1, #4
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f000 fdab 	bl	8009a84 <_calloc_r>
 8008f2e:	69e3      	ldr	r3, [r4, #28]
 8008f30:	60f0      	str	r0, [r6, #12]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e4      	bne.n	8008f02 <_Balloc+0x2e>
 8008f38:	2000      	movs	r0, #0
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
 8008f3c:	6802      	ldr	r2, [r0, #0]
 8008f3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f42:	2300      	movs	r3, #0
 8008f44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f48:	e7f7      	b.n	8008f3a <_Balloc+0x66>
 8008f4a:	bf00      	nop
 8008f4c:	0800a171 	.word	0x0800a171
 8008f50:	0800a1f1 	.word	0x0800a1f1

08008f54 <_Bfree>:
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	69c6      	ldr	r6, [r0, #28]
 8008f58:	4605      	mov	r5, r0
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	b976      	cbnz	r6, 8008f7c <_Bfree+0x28>
 8008f5e:	2010      	movs	r0, #16
 8008f60:	f7ff ff04 	bl	8008d6c <malloc>
 8008f64:	4602      	mov	r2, r0
 8008f66:	61e8      	str	r0, [r5, #28]
 8008f68:	b920      	cbnz	r0, 8008f74 <_Bfree+0x20>
 8008f6a:	4b09      	ldr	r3, [pc, #36]	; (8008f90 <_Bfree+0x3c>)
 8008f6c:	4809      	ldr	r0, [pc, #36]	; (8008f94 <_Bfree+0x40>)
 8008f6e:	218f      	movs	r1, #143	; 0x8f
 8008f70:	f000 fd6a 	bl	8009a48 <__assert_func>
 8008f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f78:	6006      	str	r6, [r0, #0]
 8008f7a:	60c6      	str	r6, [r0, #12]
 8008f7c:	b13c      	cbz	r4, 8008f8e <_Bfree+0x3a>
 8008f7e:	69eb      	ldr	r3, [r5, #28]
 8008f80:	6862      	ldr	r2, [r4, #4]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f88:	6021      	str	r1, [r4, #0]
 8008f8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f8e:	bd70      	pop	{r4, r5, r6, pc}
 8008f90:	0800a171 	.word	0x0800a171
 8008f94:	0800a1f1 	.word	0x0800a1f1

08008f98 <__multadd>:
 8008f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9c:	690d      	ldr	r5, [r1, #16]
 8008f9e:	4607      	mov	r7, r0
 8008fa0:	460c      	mov	r4, r1
 8008fa2:	461e      	mov	r6, r3
 8008fa4:	f101 0c14 	add.w	ip, r1, #20
 8008fa8:	2000      	movs	r0, #0
 8008faa:	f8dc 3000 	ldr.w	r3, [ip]
 8008fae:	b299      	uxth	r1, r3
 8008fb0:	fb02 6101 	mla	r1, r2, r1, r6
 8008fb4:	0c1e      	lsrs	r6, r3, #16
 8008fb6:	0c0b      	lsrs	r3, r1, #16
 8008fb8:	fb02 3306 	mla	r3, r2, r6, r3
 8008fbc:	b289      	uxth	r1, r1
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fc4:	4285      	cmp	r5, r0
 8008fc6:	f84c 1b04 	str.w	r1, [ip], #4
 8008fca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fce:	dcec      	bgt.n	8008faa <__multadd+0x12>
 8008fd0:	b30e      	cbz	r6, 8009016 <__multadd+0x7e>
 8008fd2:	68a3      	ldr	r3, [r4, #8]
 8008fd4:	42ab      	cmp	r3, r5
 8008fd6:	dc19      	bgt.n	800900c <__multadd+0x74>
 8008fd8:	6861      	ldr	r1, [r4, #4]
 8008fda:	4638      	mov	r0, r7
 8008fdc:	3101      	adds	r1, #1
 8008fde:	f7ff ff79 	bl	8008ed4 <_Balloc>
 8008fe2:	4680      	mov	r8, r0
 8008fe4:	b928      	cbnz	r0, 8008ff2 <__multadd+0x5a>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	4b0c      	ldr	r3, [pc, #48]	; (800901c <__multadd+0x84>)
 8008fea:	480d      	ldr	r0, [pc, #52]	; (8009020 <__multadd+0x88>)
 8008fec:	21ba      	movs	r1, #186	; 0xba
 8008fee:	f000 fd2b 	bl	8009a48 <__assert_func>
 8008ff2:	6922      	ldr	r2, [r4, #16]
 8008ff4:	3202      	adds	r2, #2
 8008ff6:	f104 010c 	add.w	r1, r4, #12
 8008ffa:	0092      	lsls	r2, r2, #2
 8008ffc:	300c      	adds	r0, #12
 8008ffe:	f000 fd15 	bl	8009a2c <memcpy>
 8009002:	4621      	mov	r1, r4
 8009004:	4638      	mov	r0, r7
 8009006:	f7ff ffa5 	bl	8008f54 <_Bfree>
 800900a:	4644      	mov	r4, r8
 800900c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009010:	3501      	adds	r5, #1
 8009012:	615e      	str	r6, [r3, #20]
 8009014:	6125      	str	r5, [r4, #16]
 8009016:	4620      	mov	r0, r4
 8009018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800901c:	0800a1e0 	.word	0x0800a1e0
 8009020:	0800a1f1 	.word	0x0800a1f1

08009024 <__hi0bits>:
 8009024:	0c03      	lsrs	r3, r0, #16
 8009026:	041b      	lsls	r3, r3, #16
 8009028:	b9d3      	cbnz	r3, 8009060 <__hi0bits+0x3c>
 800902a:	0400      	lsls	r0, r0, #16
 800902c:	2310      	movs	r3, #16
 800902e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009032:	bf04      	itt	eq
 8009034:	0200      	lsleq	r0, r0, #8
 8009036:	3308      	addeq	r3, #8
 8009038:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800903c:	bf04      	itt	eq
 800903e:	0100      	lsleq	r0, r0, #4
 8009040:	3304      	addeq	r3, #4
 8009042:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009046:	bf04      	itt	eq
 8009048:	0080      	lsleq	r0, r0, #2
 800904a:	3302      	addeq	r3, #2
 800904c:	2800      	cmp	r0, #0
 800904e:	db05      	blt.n	800905c <__hi0bits+0x38>
 8009050:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009054:	f103 0301 	add.w	r3, r3, #1
 8009058:	bf08      	it	eq
 800905a:	2320      	moveq	r3, #32
 800905c:	4618      	mov	r0, r3
 800905e:	4770      	bx	lr
 8009060:	2300      	movs	r3, #0
 8009062:	e7e4      	b.n	800902e <__hi0bits+0xa>

08009064 <__lo0bits>:
 8009064:	6803      	ldr	r3, [r0, #0]
 8009066:	f013 0207 	ands.w	r2, r3, #7
 800906a:	d00c      	beq.n	8009086 <__lo0bits+0x22>
 800906c:	07d9      	lsls	r1, r3, #31
 800906e:	d422      	bmi.n	80090b6 <__lo0bits+0x52>
 8009070:	079a      	lsls	r2, r3, #30
 8009072:	bf49      	itett	mi
 8009074:	085b      	lsrmi	r3, r3, #1
 8009076:	089b      	lsrpl	r3, r3, #2
 8009078:	6003      	strmi	r3, [r0, #0]
 800907a:	2201      	movmi	r2, #1
 800907c:	bf5c      	itt	pl
 800907e:	6003      	strpl	r3, [r0, #0]
 8009080:	2202      	movpl	r2, #2
 8009082:	4610      	mov	r0, r2
 8009084:	4770      	bx	lr
 8009086:	b299      	uxth	r1, r3
 8009088:	b909      	cbnz	r1, 800908e <__lo0bits+0x2a>
 800908a:	0c1b      	lsrs	r3, r3, #16
 800908c:	2210      	movs	r2, #16
 800908e:	b2d9      	uxtb	r1, r3
 8009090:	b909      	cbnz	r1, 8009096 <__lo0bits+0x32>
 8009092:	3208      	adds	r2, #8
 8009094:	0a1b      	lsrs	r3, r3, #8
 8009096:	0719      	lsls	r1, r3, #28
 8009098:	bf04      	itt	eq
 800909a:	091b      	lsreq	r3, r3, #4
 800909c:	3204      	addeq	r2, #4
 800909e:	0799      	lsls	r1, r3, #30
 80090a0:	bf04      	itt	eq
 80090a2:	089b      	lsreq	r3, r3, #2
 80090a4:	3202      	addeq	r2, #2
 80090a6:	07d9      	lsls	r1, r3, #31
 80090a8:	d403      	bmi.n	80090b2 <__lo0bits+0x4e>
 80090aa:	085b      	lsrs	r3, r3, #1
 80090ac:	f102 0201 	add.w	r2, r2, #1
 80090b0:	d003      	beq.n	80090ba <__lo0bits+0x56>
 80090b2:	6003      	str	r3, [r0, #0]
 80090b4:	e7e5      	b.n	8009082 <__lo0bits+0x1e>
 80090b6:	2200      	movs	r2, #0
 80090b8:	e7e3      	b.n	8009082 <__lo0bits+0x1e>
 80090ba:	2220      	movs	r2, #32
 80090bc:	e7e1      	b.n	8009082 <__lo0bits+0x1e>
	...

080090c0 <__i2b>:
 80090c0:	b510      	push	{r4, lr}
 80090c2:	460c      	mov	r4, r1
 80090c4:	2101      	movs	r1, #1
 80090c6:	f7ff ff05 	bl	8008ed4 <_Balloc>
 80090ca:	4602      	mov	r2, r0
 80090cc:	b928      	cbnz	r0, 80090da <__i2b+0x1a>
 80090ce:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <__i2b+0x24>)
 80090d0:	4805      	ldr	r0, [pc, #20]	; (80090e8 <__i2b+0x28>)
 80090d2:	f240 1145 	movw	r1, #325	; 0x145
 80090d6:	f000 fcb7 	bl	8009a48 <__assert_func>
 80090da:	2301      	movs	r3, #1
 80090dc:	6144      	str	r4, [r0, #20]
 80090de:	6103      	str	r3, [r0, #16]
 80090e0:	bd10      	pop	{r4, pc}
 80090e2:	bf00      	nop
 80090e4:	0800a1e0 	.word	0x0800a1e0
 80090e8:	0800a1f1 	.word	0x0800a1f1

080090ec <__multiply>:
 80090ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f0:	4691      	mov	r9, r2
 80090f2:	690a      	ldr	r2, [r1, #16]
 80090f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	bfb8      	it	lt
 80090fc:	460b      	movlt	r3, r1
 80090fe:	460c      	mov	r4, r1
 8009100:	bfbc      	itt	lt
 8009102:	464c      	movlt	r4, r9
 8009104:	4699      	movlt	r9, r3
 8009106:	6927      	ldr	r7, [r4, #16]
 8009108:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800910c:	68a3      	ldr	r3, [r4, #8]
 800910e:	6861      	ldr	r1, [r4, #4]
 8009110:	eb07 060a 	add.w	r6, r7, sl
 8009114:	42b3      	cmp	r3, r6
 8009116:	b085      	sub	sp, #20
 8009118:	bfb8      	it	lt
 800911a:	3101      	addlt	r1, #1
 800911c:	f7ff feda 	bl	8008ed4 <_Balloc>
 8009120:	b930      	cbnz	r0, 8009130 <__multiply+0x44>
 8009122:	4602      	mov	r2, r0
 8009124:	4b44      	ldr	r3, [pc, #272]	; (8009238 <__multiply+0x14c>)
 8009126:	4845      	ldr	r0, [pc, #276]	; (800923c <__multiply+0x150>)
 8009128:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800912c:	f000 fc8c 	bl	8009a48 <__assert_func>
 8009130:	f100 0514 	add.w	r5, r0, #20
 8009134:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009138:	462b      	mov	r3, r5
 800913a:	2200      	movs	r2, #0
 800913c:	4543      	cmp	r3, r8
 800913e:	d321      	bcc.n	8009184 <__multiply+0x98>
 8009140:	f104 0314 	add.w	r3, r4, #20
 8009144:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009148:	f109 0314 	add.w	r3, r9, #20
 800914c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009150:	9202      	str	r2, [sp, #8]
 8009152:	1b3a      	subs	r2, r7, r4
 8009154:	3a15      	subs	r2, #21
 8009156:	f022 0203 	bic.w	r2, r2, #3
 800915a:	3204      	adds	r2, #4
 800915c:	f104 0115 	add.w	r1, r4, #21
 8009160:	428f      	cmp	r7, r1
 8009162:	bf38      	it	cc
 8009164:	2204      	movcc	r2, #4
 8009166:	9201      	str	r2, [sp, #4]
 8009168:	9a02      	ldr	r2, [sp, #8]
 800916a:	9303      	str	r3, [sp, #12]
 800916c:	429a      	cmp	r2, r3
 800916e:	d80c      	bhi.n	800918a <__multiply+0x9e>
 8009170:	2e00      	cmp	r6, #0
 8009172:	dd03      	ble.n	800917c <__multiply+0x90>
 8009174:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009178:	2b00      	cmp	r3, #0
 800917a:	d05b      	beq.n	8009234 <__multiply+0x148>
 800917c:	6106      	str	r6, [r0, #16]
 800917e:	b005      	add	sp, #20
 8009180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009184:	f843 2b04 	str.w	r2, [r3], #4
 8009188:	e7d8      	b.n	800913c <__multiply+0x50>
 800918a:	f8b3 a000 	ldrh.w	sl, [r3]
 800918e:	f1ba 0f00 	cmp.w	sl, #0
 8009192:	d024      	beq.n	80091de <__multiply+0xf2>
 8009194:	f104 0e14 	add.w	lr, r4, #20
 8009198:	46a9      	mov	r9, r5
 800919a:	f04f 0c00 	mov.w	ip, #0
 800919e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091a2:	f8d9 1000 	ldr.w	r1, [r9]
 80091a6:	fa1f fb82 	uxth.w	fp, r2
 80091aa:	b289      	uxth	r1, r1
 80091ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80091b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80091b4:	f8d9 2000 	ldr.w	r2, [r9]
 80091b8:	4461      	add	r1, ip
 80091ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091be:	fb0a c20b 	mla	r2, sl, fp, ip
 80091c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091c6:	b289      	uxth	r1, r1
 80091c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091cc:	4577      	cmp	r7, lr
 80091ce:	f849 1b04 	str.w	r1, [r9], #4
 80091d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091d6:	d8e2      	bhi.n	800919e <__multiply+0xb2>
 80091d8:	9a01      	ldr	r2, [sp, #4]
 80091da:	f845 c002 	str.w	ip, [r5, r2]
 80091de:	9a03      	ldr	r2, [sp, #12]
 80091e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091e4:	3304      	adds	r3, #4
 80091e6:	f1b9 0f00 	cmp.w	r9, #0
 80091ea:	d021      	beq.n	8009230 <__multiply+0x144>
 80091ec:	6829      	ldr	r1, [r5, #0]
 80091ee:	f104 0c14 	add.w	ip, r4, #20
 80091f2:	46ae      	mov	lr, r5
 80091f4:	f04f 0a00 	mov.w	sl, #0
 80091f8:	f8bc b000 	ldrh.w	fp, [ip]
 80091fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009200:	fb09 220b 	mla	r2, r9, fp, r2
 8009204:	4452      	add	r2, sl
 8009206:	b289      	uxth	r1, r1
 8009208:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800920c:	f84e 1b04 	str.w	r1, [lr], #4
 8009210:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009214:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009218:	f8be 1000 	ldrh.w	r1, [lr]
 800921c:	fb09 110a 	mla	r1, r9, sl, r1
 8009220:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009224:	4567      	cmp	r7, ip
 8009226:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800922a:	d8e5      	bhi.n	80091f8 <__multiply+0x10c>
 800922c:	9a01      	ldr	r2, [sp, #4]
 800922e:	50a9      	str	r1, [r5, r2]
 8009230:	3504      	adds	r5, #4
 8009232:	e799      	b.n	8009168 <__multiply+0x7c>
 8009234:	3e01      	subs	r6, #1
 8009236:	e79b      	b.n	8009170 <__multiply+0x84>
 8009238:	0800a1e0 	.word	0x0800a1e0
 800923c:	0800a1f1 	.word	0x0800a1f1

08009240 <__pow5mult>:
 8009240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009244:	4615      	mov	r5, r2
 8009246:	f012 0203 	ands.w	r2, r2, #3
 800924a:	4606      	mov	r6, r0
 800924c:	460f      	mov	r7, r1
 800924e:	d007      	beq.n	8009260 <__pow5mult+0x20>
 8009250:	4c25      	ldr	r4, [pc, #148]	; (80092e8 <__pow5mult+0xa8>)
 8009252:	3a01      	subs	r2, #1
 8009254:	2300      	movs	r3, #0
 8009256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800925a:	f7ff fe9d 	bl	8008f98 <__multadd>
 800925e:	4607      	mov	r7, r0
 8009260:	10ad      	asrs	r5, r5, #2
 8009262:	d03d      	beq.n	80092e0 <__pow5mult+0xa0>
 8009264:	69f4      	ldr	r4, [r6, #28]
 8009266:	b97c      	cbnz	r4, 8009288 <__pow5mult+0x48>
 8009268:	2010      	movs	r0, #16
 800926a:	f7ff fd7f 	bl	8008d6c <malloc>
 800926e:	4602      	mov	r2, r0
 8009270:	61f0      	str	r0, [r6, #28]
 8009272:	b928      	cbnz	r0, 8009280 <__pow5mult+0x40>
 8009274:	4b1d      	ldr	r3, [pc, #116]	; (80092ec <__pow5mult+0xac>)
 8009276:	481e      	ldr	r0, [pc, #120]	; (80092f0 <__pow5mult+0xb0>)
 8009278:	f240 11b3 	movw	r1, #435	; 0x1b3
 800927c:	f000 fbe4 	bl	8009a48 <__assert_func>
 8009280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009284:	6004      	str	r4, [r0, #0]
 8009286:	60c4      	str	r4, [r0, #12]
 8009288:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800928c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009290:	b94c      	cbnz	r4, 80092a6 <__pow5mult+0x66>
 8009292:	f240 2171 	movw	r1, #625	; 0x271
 8009296:	4630      	mov	r0, r6
 8009298:	f7ff ff12 	bl	80090c0 <__i2b>
 800929c:	2300      	movs	r3, #0
 800929e:	f8c8 0008 	str.w	r0, [r8, #8]
 80092a2:	4604      	mov	r4, r0
 80092a4:	6003      	str	r3, [r0, #0]
 80092a6:	f04f 0900 	mov.w	r9, #0
 80092aa:	07eb      	lsls	r3, r5, #31
 80092ac:	d50a      	bpl.n	80092c4 <__pow5mult+0x84>
 80092ae:	4639      	mov	r1, r7
 80092b0:	4622      	mov	r2, r4
 80092b2:	4630      	mov	r0, r6
 80092b4:	f7ff ff1a 	bl	80090ec <__multiply>
 80092b8:	4639      	mov	r1, r7
 80092ba:	4680      	mov	r8, r0
 80092bc:	4630      	mov	r0, r6
 80092be:	f7ff fe49 	bl	8008f54 <_Bfree>
 80092c2:	4647      	mov	r7, r8
 80092c4:	106d      	asrs	r5, r5, #1
 80092c6:	d00b      	beq.n	80092e0 <__pow5mult+0xa0>
 80092c8:	6820      	ldr	r0, [r4, #0]
 80092ca:	b938      	cbnz	r0, 80092dc <__pow5mult+0x9c>
 80092cc:	4622      	mov	r2, r4
 80092ce:	4621      	mov	r1, r4
 80092d0:	4630      	mov	r0, r6
 80092d2:	f7ff ff0b 	bl	80090ec <__multiply>
 80092d6:	6020      	str	r0, [r4, #0]
 80092d8:	f8c0 9000 	str.w	r9, [r0]
 80092dc:	4604      	mov	r4, r0
 80092de:	e7e4      	b.n	80092aa <__pow5mult+0x6a>
 80092e0:	4638      	mov	r0, r7
 80092e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092e6:	bf00      	nop
 80092e8:	0800a340 	.word	0x0800a340
 80092ec:	0800a171 	.word	0x0800a171
 80092f0:	0800a1f1 	.word	0x0800a1f1

080092f4 <__lshift>:
 80092f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f8:	460c      	mov	r4, r1
 80092fa:	6849      	ldr	r1, [r1, #4]
 80092fc:	6923      	ldr	r3, [r4, #16]
 80092fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009302:	68a3      	ldr	r3, [r4, #8]
 8009304:	4607      	mov	r7, r0
 8009306:	4691      	mov	r9, r2
 8009308:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800930c:	f108 0601 	add.w	r6, r8, #1
 8009310:	42b3      	cmp	r3, r6
 8009312:	db0b      	blt.n	800932c <__lshift+0x38>
 8009314:	4638      	mov	r0, r7
 8009316:	f7ff fddd 	bl	8008ed4 <_Balloc>
 800931a:	4605      	mov	r5, r0
 800931c:	b948      	cbnz	r0, 8009332 <__lshift+0x3e>
 800931e:	4602      	mov	r2, r0
 8009320:	4b28      	ldr	r3, [pc, #160]	; (80093c4 <__lshift+0xd0>)
 8009322:	4829      	ldr	r0, [pc, #164]	; (80093c8 <__lshift+0xd4>)
 8009324:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009328:	f000 fb8e 	bl	8009a48 <__assert_func>
 800932c:	3101      	adds	r1, #1
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	e7ee      	b.n	8009310 <__lshift+0x1c>
 8009332:	2300      	movs	r3, #0
 8009334:	f100 0114 	add.w	r1, r0, #20
 8009338:	f100 0210 	add.w	r2, r0, #16
 800933c:	4618      	mov	r0, r3
 800933e:	4553      	cmp	r3, sl
 8009340:	db33      	blt.n	80093aa <__lshift+0xb6>
 8009342:	6920      	ldr	r0, [r4, #16]
 8009344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009348:	f104 0314 	add.w	r3, r4, #20
 800934c:	f019 091f 	ands.w	r9, r9, #31
 8009350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009354:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009358:	d02b      	beq.n	80093b2 <__lshift+0xbe>
 800935a:	f1c9 0e20 	rsb	lr, r9, #32
 800935e:	468a      	mov	sl, r1
 8009360:	2200      	movs	r2, #0
 8009362:	6818      	ldr	r0, [r3, #0]
 8009364:	fa00 f009 	lsl.w	r0, r0, r9
 8009368:	4310      	orrs	r0, r2
 800936a:	f84a 0b04 	str.w	r0, [sl], #4
 800936e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009372:	459c      	cmp	ip, r3
 8009374:	fa22 f20e 	lsr.w	r2, r2, lr
 8009378:	d8f3      	bhi.n	8009362 <__lshift+0x6e>
 800937a:	ebac 0304 	sub.w	r3, ip, r4
 800937e:	3b15      	subs	r3, #21
 8009380:	f023 0303 	bic.w	r3, r3, #3
 8009384:	3304      	adds	r3, #4
 8009386:	f104 0015 	add.w	r0, r4, #21
 800938a:	4584      	cmp	ip, r0
 800938c:	bf38      	it	cc
 800938e:	2304      	movcc	r3, #4
 8009390:	50ca      	str	r2, [r1, r3]
 8009392:	b10a      	cbz	r2, 8009398 <__lshift+0xa4>
 8009394:	f108 0602 	add.w	r6, r8, #2
 8009398:	3e01      	subs	r6, #1
 800939a:	4638      	mov	r0, r7
 800939c:	612e      	str	r6, [r5, #16]
 800939e:	4621      	mov	r1, r4
 80093a0:	f7ff fdd8 	bl	8008f54 <_Bfree>
 80093a4:	4628      	mov	r0, r5
 80093a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80093ae:	3301      	adds	r3, #1
 80093b0:	e7c5      	b.n	800933e <__lshift+0x4a>
 80093b2:	3904      	subs	r1, #4
 80093b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80093b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80093bc:	459c      	cmp	ip, r3
 80093be:	d8f9      	bhi.n	80093b4 <__lshift+0xc0>
 80093c0:	e7ea      	b.n	8009398 <__lshift+0xa4>
 80093c2:	bf00      	nop
 80093c4:	0800a1e0 	.word	0x0800a1e0
 80093c8:	0800a1f1 	.word	0x0800a1f1

080093cc <__mcmp>:
 80093cc:	b530      	push	{r4, r5, lr}
 80093ce:	6902      	ldr	r2, [r0, #16]
 80093d0:	690c      	ldr	r4, [r1, #16]
 80093d2:	1b12      	subs	r2, r2, r4
 80093d4:	d10e      	bne.n	80093f4 <__mcmp+0x28>
 80093d6:	f100 0314 	add.w	r3, r0, #20
 80093da:	3114      	adds	r1, #20
 80093dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80093e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80093ec:	42a5      	cmp	r5, r4
 80093ee:	d003      	beq.n	80093f8 <__mcmp+0x2c>
 80093f0:	d305      	bcc.n	80093fe <__mcmp+0x32>
 80093f2:	2201      	movs	r2, #1
 80093f4:	4610      	mov	r0, r2
 80093f6:	bd30      	pop	{r4, r5, pc}
 80093f8:	4283      	cmp	r3, r0
 80093fa:	d3f3      	bcc.n	80093e4 <__mcmp+0x18>
 80093fc:	e7fa      	b.n	80093f4 <__mcmp+0x28>
 80093fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009402:	e7f7      	b.n	80093f4 <__mcmp+0x28>

08009404 <__mdiff>:
 8009404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009408:	460c      	mov	r4, r1
 800940a:	4606      	mov	r6, r0
 800940c:	4611      	mov	r1, r2
 800940e:	4620      	mov	r0, r4
 8009410:	4690      	mov	r8, r2
 8009412:	f7ff ffdb 	bl	80093cc <__mcmp>
 8009416:	1e05      	subs	r5, r0, #0
 8009418:	d110      	bne.n	800943c <__mdiff+0x38>
 800941a:	4629      	mov	r1, r5
 800941c:	4630      	mov	r0, r6
 800941e:	f7ff fd59 	bl	8008ed4 <_Balloc>
 8009422:	b930      	cbnz	r0, 8009432 <__mdiff+0x2e>
 8009424:	4b3a      	ldr	r3, [pc, #232]	; (8009510 <__mdiff+0x10c>)
 8009426:	4602      	mov	r2, r0
 8009428:	f240 2137 	movw	r1, #567	; 0x237
 800942c:	4839      	ldr	r0, [pc, #228]	; (8009514 <__mdiff+0x110>)
 800942e:	f000 fb0b 	bl	8009a48 <__assert_func>
 8009432:	2301      	movs	r3, #1
 8009434:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943c:	bfa4      	itt	ge
 800943e:	4643      	movge	r3, r8
 8009440:	46a0      	movge	r8, r4
 8009442:	4630      	mov	r0, r6
 8009444:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009448:	bfa6      	itte	ge
 800944a:	461c      	movge	r4, r3
 800944c:	2500      	movge	r5, #0
 800944e:	2501      	movlt	r5, #1
 8009450:	f7ff fd40 	bl	8008ed4 <_Balloc>
 8009454:	b920      	cbnz	r0, 8009460 <__mdiff+0x5c>
 8009456:	4b2e      	ldr	r3, [pc, #184]	; (8009510 <__mdiff+0x10c>)
 8009458:	4602      	mov	r2, r0
 800945a:	f240 2145 	movw	r1, #581	; 0x245
 800945e:	e7e5      	b.n	800942c <__mdiff+0x28>
 8009460:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009464:	6926      	ldr	r6, [r4, #16]
 8009466:	60c5      	str	r5, [r0, #12]
 8009468:	f104 0914 	add.w	r9, r4, #20
 800946c:	f108 0514 	add.w	r5, r8, #20
 8009470:	f100 0e14 	add.w	lr, r0, #20
 8009474:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009478:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800947c:	f108 0210 	add.w	r2, r8, #16
 8009480:	46f2      	mov	sl, lr
 8009482:	2100      	movs	r1, #0
 8009484:	f859 3b04 	ldr.w	r3, [r9], #4
 8009488:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800948c:	fa11 f88b 	uxtah	r8, r1, fp
 8009490:	b299      	uxth	r1, r3
 8009492:	0c1b      	lsrs	r3, r3, #16
 8009494:	eba8 0801 	sub.w	r8, r8, r1
 8009498:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800949c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094a0:	fa1f f888 	uxth.w	r8, r8
 80094a4:	1419      	asrs	r1, r3, #16
 80094a6:	454e      	cmp	r6, r9
 80094a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094ac:	f84a 3b04 	str.w	r3, [sl], #4
 80094b0:	d8e8      	bhi.n	8009484 <__mdiff+0x80>
 80094b2:	1b33      	subs	r3, r6, r4
 80094b4:	3b15      	subs	r3, #21
 80094b6:	f023 0303 	bic.w	r3, r3, #3
 80094ba:	3304      	adds	r3, #4
 80094bc:	3415      	adds	r4, #21
 80094be:	42a6      	cmp	r6, r4
 80094c0:	bf38      	it	cc
 80094c2:	2304      	movcc	r3, #4
 80094c4:	441d      	add	r5, r3
 80094c6:	4473      	add	r3, lr
 80094c8:	469e      	mov	lr, r3
 80094ca:	462e      	mov	r6, r5
 80094cc:	4566      	cmp	r6, ip
 80094ce:	d30e      	bcc.n	80094ee <__mdiff+0xea>
 80094d0:	f10c 0203 	add.w	r2, ip, #3
 80094d4:	1b52      	subs	r2, r2, r5
 80094d6:	f022 0203 	bic.w	r2, r2, #3
 80094da:	3d03      	subs	r5, #3
 80094dc:	45ac      	cmp	ip, r5
 80094de:	bf38      	it	cc
 80094e0:	2200      	movcc	r2, #0
 80094e2:	4413      	add	r3, r2
 80094e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80094e8:	b17a      	cbz	r2, 800950a <__mdiff+0x106>
 80094ea:	6107      	str	r7, [r0, #16]
 80094ec:	e7a4      	b.n	8009438 <__mdiff+0x34>
 80094ee:	f856 8b04 	ldr.w	r8, [r6], #4
 80094f2:	fa11 f288 	uxtah	r2, r1, r8
 80094f6:	1414      	asrs	r4, r2, #16
 80094f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80094fc:	b292      	uxth	r2, r2
 80094fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009502:	f84e 2b04 	str.w	r2, [lr], #4
 8009506:	1421      	asrs	r1, r4, #16
 8009508:	e7e0      	b.n	80094cc <__mdiff+0xc8>
 800950a:	3f01      	subs	r7, #1
 800950c:	e7ea      	b.n	80094e4 <__mdiff+0xe0>
 800950e:	bf00      	nop
 8009510:	0800a1e0 	.word	0x0800a1e0
 8009514:	0800a1f1 	.word	0x0800a1f1

08009518 <__d2b>:
 8009518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800951c:	460f      	mov	r7, r1
 800951e:	2101      	movs	r1, #1
 8009520:	ec59 8b10 	vmov	r8, r9, d0
 8009524:	4616      	mov	r6, r2
 8009526:	f7ff fcd5 	bl	8008ed4 <_Balloc>
 800952a:	4604      	mov	r4, r0
 800952c:	b930      	cbnz	r0, 800953c <__d2b+0x24>
 800952e:	4602      	mov	r2, r0
 8009530:	4b24      	ldr	r3, [pc, #144]	; (80095c4 <__d2b+0xac>)
 8009532:	4825      	ldr	r0, [pc, #148]	; (80095c8 <__d2b+0xb0>)
 8009534:	f240 310f 	movw	r1, #783	; 0x30f
 8009538:	f000 fa86 	bl	8009a48 <__assert_func>
 800953c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009540:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009544:	bb2d      	cbnz	r5, 8009592 <__d2b+0x7a>
 8009546:	9301      	str	r3, [sp, #4]
 8009548:	f1b8 0300 	subs.w	r3, r8, #0
 800954c:	d026      	beq.n	800959c <__d2b+0x84>
 800954e:	4668      	mov	r0, sp
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	f7ff fd87 	bl	8009064 <__lo0bits>
 8009556:	e9dd 1200 	ldrd	r1, r2, [sp]
 800955a:	b1e8      	cbz	r0, 8009598 <__d2b+0x80>
 800955c:	f1c0 0320 	rsb	r3, r0, #32
 8009560:	fa02 f303 	lsl.w	r3, r2, r3
 8009564:	430b      	orrs	r3, r1
 8009566:	40c2      	lsrs	r2, r0
 8009568:	6163      	str	r3, [r4, #20]
 800956a:	9201      	str	r2, [sp, #4]
 800956c:	9b01      	ldr	r3, [sp, #4]
 800956e:	61a3      	str	r3, [r4, #24]
 8009570:	2b00      	cmp	r3, #0
 8009572:	bf14      	ite	ne
 8009574:	2202      	movne	r2, #2
 8009576:	2201      	moveq	r2, #1
 8009578:	6122      	str	r2, [r4, #16]
 800957a:	b1bd      	cbz	r5, 80095ac <__d2b+0x94>
 800957c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009580:	4405      	add	r5, r0
 8009582:	603d      	str	r5, [r7, #0]
 8009584:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009588:	6030      	str	r0, [r6, #0]
 800958a:	4620      	mov	r0, r4
 800958c:	b003      	add	sp, #12
 800958e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009596:	e7d6      	b.n	8009546 <__d2b+0x2e>
 8009598:	6161      	str	r1, [r4, #20]
 800959a:	e7e7      	b.n	800956c <__d2b+0x54>
 800959c:	a801      	add	r0, sp, #4
 800959e:	f7ff fd61 	bl	8009064 <__lo0bits>
 80095a2:	9b01      	ldr	r3, [sp, #4]
 80095a4:	6163      	str	r3, [r4, #20]
 80095a6:	3020      	adds	r0, #32
 80095a8:	2201      	movs	r2, #1
 80095aa:	e7e5      	b.n	8009578 <__d2b+0x60>
 80095ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095b4:	6038      	str	r0, [r7, #0]
 80095b6:	6918      	ldr	r0, [r3, #16]
 80095b8:	f7ff fd34 	bl	8009024 <__hi0bits>
 80095bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095c0:	e7e2      	b.n	8009588 <__d2b+0x70>
 80095c2:	bf00      	nop
 80095c4:	0800a1e0 	.word	0x0800a1e0
 80095c8:	0800a1f1 	.word	0x0800a1f1

080095cc <__ssputs_r>:
 80095cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d0:	688e      	ldr	r6, [r1, #8]
 80095d2:	461f      	mov	r7, r3
 80095d4:	42be      	cmp	r6, r7
 80095d6:	680b      	ldr	r3, [r1, #0]
 80095d8:	4682      	mov	sl, r0
 80095da:	460c      	mov	r4, r1
 80095dc:	4690      	mov	r8, r2
 80095de:	d82c      	bhi.n	800963a <__ssputs_r+0x6e>
 80095e0:	898a      	ldrh	r2, [r1, #12]
 80095e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095e6:	d026      	beq.n	8009636 <__ssputs_r+0x6a>
 80095e8:	6965      	ldr	r5, [r4, #20]
 80095ea:	6909      	ldr	r1, [r1, #16]
 80095ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095f0:	eba3 0901 	sub.w	r9, r3, r1
 80095f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095f8:	1c7b      	adds	r3, r7, #1
 80095fa:	444b      	add	r3, r9
 80095fc:	106d      	asrs	r5, r5, #1
 80095fe:	429d      	cmp	r5, r3
 8009600:	bf38      	it	cc
 8009602:	461d      	movcc	r5, r3
 8009604:	0553      	lsls	r3, r2, #21
 8009606:	d527      	bpl.n	8009658 <__ssputs_r+0x8c>
 8009608:	4629      	mov	r1, r5
 800960a:	f7ff fbd7 	bl	8008dbc <_malloc_r>
 800960e:	4606      	mov	r6, r0
 8009610:	b360      	cbz	r0, 800966c <__ssputs_r+0xa0>
 8009612:	6921      	ldr	r1, [r4, #16]
 8009614:	464a      	mov	r2, r9
 8009616:	f000 fa09 	bl	8009a2c <memcpy>
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009624:	81a3      	strh	r3, [r4, #12]
 8009626:	6126      	str	r6, [r4, #16]
 8009628:	6165      	str	r5, [r4, #20]
 800962a:	444e      	add	r6, r9
 800962c:	eba5 0509 	sub.w	r5, r5, r9
 8009630:	6026      	str	r6, [r4, #0]
 8009632:	60a5      	str	r5, [r4, #8]
 8009634:	463e      	mov	r6, r7
 8009636:	42be      	cmp	r6, r7
 8009638:	d900      	bls.n	800963c <__ssputs_r+0x70>
 800963a:	463e      	mov	r6, r7
 800963c:	6820      	ldr	r0, [r4, #0]
 800963e:	4632      	mov	r2, r6
 8009640:	4641      	mov	r1, r8
 8009642:	f000 f9c9 	bl	80099d8 <memmove>
 8009646:	68a3      	ldr	r3, [r4, #8]
 8009648:	1b9b      	subs	r3, r3, r6
 800964a:	60a3      	str	r3, [r4, #8]
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	4433      	add	r3, r6
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	2000      	movs	r0, #0
 8009654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009658:	462a      	mov	r2, r5
 800965a:	f000 fa3b 	bl	8009ad4 <_realloc_r>
 800965e:	4606      	mov	r6, r0
 8009660:	2800      	cmp	r0, #0
 8009662:	d1e0      	bne.n	8009626 <__ssputs_r+0x5a>
 8009664:	6921      	ldr	r1, [r4, #16]
 8009666:	4650      	mov	r0, sl
 8009668:	f7ff fb34 	bl	8008cd4 <_free_r>
 800966c:	230c      	movs	r3, #12
 800966e:	f8ca 3000 	str.w	r3, [sl]
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	f04f 30ff 	mov.w	r0, #4294967295
 800967e:	e7e9      	b.n	8009654 <__ssputs_r+0x88>

08009680 <_svfiprintf_r>:
 8009680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009684:	4698      	mov	r8, r3
 8009686:	898b      	ldrh	r3, [r1, #12]
 8009688:	061b      	lsls	r3, r3, #24
 800968a:	b09d      	sub	sp, #116	; 0x74
 800968c:	4607      	mov	r7, r0
 800968e:	460d      	mov	r5, r1
 8009690:	4614      	mov	r4, r2
 8009692:	d50e      	bpl.n	80096b2 <_svfiprintf_r+0x32>
 8009694:	690b      	ldr	r3, [r1, #16]
 8009696:	b963      	cbnz	r3, 80096b2 <_svfiprintf_r+0x32>
 8009698:	2140      	movs	r1, #64	; 0x40
 800969a:	f7ff fb8f 	bl	8008dbc <_malloc_r>
 800969e:	6028      	str	r0, [r5, #0]
 80096a0:	6128      	str	r0, [r5, #16]
 80096a2:	b920      	cbnz	r0, 80096ae <_svfiprintf_r+0x2e>
 80096a4:	230c      	movs	r3, #12
 80096a6:	603b      	str	r3, [r7, #0]
 80096a8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ac:	e0d0      	b.n	8009850 <_svfiprintf_r+0x1d0>
 80096ae:	2340      	movs	r3, #64	; 0x40
 80096b0:	616b      	str	r3, [r5, #20]
 80096b2:	2300      	movs	r3, #0
 80096b4:	9309      	str	r3, [sp, #36]	; 0x24
 80096b6:	2320      	movs	r3, #32
 80096b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80096c0:	2330      	movs	r3, #48	; 0x30
 80096c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009868 <_svfiprintf_r+0x1e8>
 80096c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096ca:	f04f 0901 	mov.w	r9, #1
 80096ce:	4623      	mov	r3, r4
 80096d0:	469a      	mov	sl, r3
 80096d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096d6:	b10a      	cbz	r2, 80096dc <_svfiprintf_r+0x5c>
 80096d8:	2a25      	cmp	r2, #37	; 0x25
 80096da:	d1f9      	bne.n	80096d0 <_svfiprintf_r+0x50>
 80096dc:	ebba 0b04 	subs.w	fp, sl, r4
 80096e0:	d00b      	beq.n	80096fa <_svfiprintf_r+0x7a>
 80096e2:	465b      	mov	r3, fp
 80096e4:	4622      	mov	r2, r4
 80096e6:	4629      	mov	r1, r5
 80096e8:	4638      	mov	r0, r7
 80096ea:	f7ff ff6f 	bl	80095cc <__ssputs_r>
 80096ee:	3001      	adds	r0, #1
 80096f0:	f000 80a9 	beq.w	8009846 <_svfiprintf_r+0x1c6>
 80096f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096f6:	445a      	add	r2, fp
 80096f8:	9209      	str	r2, [sp, #36]	; 0x24
 80096fa:	f89a 3000 	ldrb.w	r3, [sl]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 80a1 	beq.w	8009846 <_svfiprintf_r+0x1c6>
 8009704:	2300      	movs	r3, #0
 8009706:	f04f 32ff 	mov.w	r2, #4294967295
 800970a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800970e:	f10a 0a01 	add.w	sl, sl, #1
 8009712:	9304      	str	r3, [sp, #16]
 8009714:	9307      	str	r3, [sp, #28]
 8009716:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800971a:	931a      	str	r3, [sp, #104]	; 0x68
 800971c:	4654      	mov	r4, sl
 800971e:	2205      	movs	r2, #5
 8009720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009724:	4850      	ldr	r0, [pc, #320]	; (8009868 <_svfiprintf_r+0x1e8>)
 8009726:	f7f6 fd5b 	bl	80001e0 <memchr>
 800972a:	9a04      	ldr	r2, [sp, #16]
 800972c:	b9d8      	cbnz	r0, 8009766 <_svfiprintf_r+0xe6>
 800972e:	06d0      	lsls	r0, r2, #27
 8009730:	bf44      	itt	mi
 8009732:	2320      	movmi	r3, #32
 8009734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009738:	0711      	lsls	r1, r2, #28
 800973a:	bf44      	itt	mi
 800973c:	232b      	movmi	r3, #43	; 0x2b
 800973e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009742:	f89a 3000 	ldrb.w	r3, [sl]
 8009746:	2b2a      	cmp	r3, #42	; 0x2a
 8009748:	d015      	beq.n	8009776 <_svfiprintf_r+0xf6>
 800974a:	9a07      	ldr	r2, [sp, #28]
 800974c:	4654      	mov	r4, sl
 800974e:	2000      	movs	r0, #0
 8009750:	f04f 0c0a 	mov.w	ip, #10
 8009754:	4621      	mov	r1, r4
 8009756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800975a:	3b30      	subs	r3, #48	; 0x30
 800975c:	2b09      	cmp	r3, #9
 800975e:	d94d      	bls.n	80097fc <_svfiprintf_r+0x17c>
 8009760:	b1b0      	cbz	r0, 8009790 <_svfiprintf_r+0x110>
 8009762:	9207      	str	r2, [sp, #28]
 8009764:	e014      	b.n	8009790 <_svfiprintf_r+0x110>
 8009766:	eba0 0308 	sub.w	r3, r0, r8
 800976a:	fa09 f303 	lsl.w	r3, r9, r3
 800976e:	4313      	orrs	r3, r2
 8009770:	9304      	str	r3, [sp, #16]
 8009772:	46a2      	mov	sl, r4
 8009774:	e7d2      	b.n	800971c <_svfiprintf_r+0x9c>
 8009776:	9b03      	ldr	r3, [sp, #12]
 8009778:	1d19      	adds	r1, r3, #4
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	9103      	str	r1, [sp, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	bfbb      	ittet	lt
 8009782:	425b      	neglt	r3, r3
 8009784:	f042 0202 	orrlt.w	r2, r2, #2
 8009788:	9307      	strge	r3, [sp, #28]
 800978a:	9307      	strlt	r3, [sp, #28]
 800978c:	bfb8      	it	lt
 800978e:	9204      	strlt	r2, [sp, #16]
 8009790:	7823      	ldrb	r3, [r4, #0]
 8009792:	2b2e      	cmp	r3, #46	; 0x2e
 8009794:	d10c      	bne.n	80097b0 <_svfiprintf_r+0x130>
 8009796:	7863      	ldrb	r3, [r4, #1]
 8009798:	2b2a      	cmp	r3, #42	; 0x2a
 800979a:	d134      	bne.n	8009806 <_svfiprintf_r+0x186>
 800979c:	9b03      	ldr	r3, [sp, #12]
 800979e:	1d1a      	adds	r2, r3, #4
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	9203      	str	r2, [sp, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	bfb8      	it	lt
 80097a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80097ac:	3402      	adds	r4, #2
 80097ae:	9305      	str	r3, [sp, #20]
 80097b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009878 <_svfiprintf_r+0x1f8>
 80097b4:	7821      	ldrb	r1, [r4, #0]
 80097b6:	2203      	movs	r2, #3
 80097b8:	4650      	mov	r0, sl
 80097ba:	f7f6 fd11 	bl	80001e0 <memchr>
 80097be:	b138      	cbz	r0, 80097d0 <_svfiprintf_r+0x150>
 80097c0:	9b04      	ldr	r3, [sp, #16]
 80097c2:	eba0 000a 	sub.w	r0, r0, sl
 80097c6:	2240      	movs	r2, #64	; 0x40
 80097c8:	4082      	lsls	r2, r0
 80097ca:	4313      	orrs	r3, r2
 80097cc:	3401      	adds	r4, #1
 80097ce:	9304      	str	r3, [sp, #16]
 80097d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d4:	4825      	ldr	r0, [pc, #148]	; (800986c <_svfiprintf_r+0x1ec>)
 80097d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097da:	2206      	movs	r2, #6
 80097dc:	f7f6 fd00 	bl	80001e0 <memchr>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d038      	beq.n	8009856 <_svfiprintf_r+0x1d6>
 80097e4:	4b22      	ldr	r3, [pc, #136]	; (8009870 <_svfiprintf_r+0x1f0>)
 80097e6:	bb1b      	cbnz	r3, 8009830 <_svfiprintf_r+0x1b0>
 80097e8:	9b03      	ldr	r3, [sp, #12]
 80097ea:	3307      	adds	r3, #7
 80097ec:	f023 0307 	bic.w	r3, r3, #7
 80097f0:	3308      	adds	r3, #8
 80097f2:	9303      	str	r3, [sp, #12]
 80097f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097f6:	4433      	add	r3, r6
 80097f8:	9309      	str	r3, [sp, #36]	; 0x24
 80097fa:	e768      	b.n	80096ce <_svfiprintf_r+0x4e>
 80097fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009800:	460c      	mov	r4, r1
 8009802:	2001      	movs	r0, #1
 8009804:	e7a6      	b.n	8009754 <_svfiprintf_r+0xd4>
 8009806:	2300      	movs	r3, #0
 8009808:	3401      	adds	r4, #1
 800980a:	9305      	str	r3, [sp, #20]
 800980c:	4619      	mov	r1, r3
 800980e:	f04f 0c0a 	mov.w	ip, #10
 8009812:	4620      	mov	r0, r4
 8009814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009818:	3a30      	subs	r2, #48	; 0x30
 800981a:	2a09      	cmp	r2, #9
 800981c:	d903      	bls.n	8009826 <_svfiprintf_r+0x1a6>
 800981e:	2b00      	cmp	r3, #0
 8009820:	d0c6      	beq.n	80097b0 <_svfiprintf_r+0x130>
 8009822:	9105      	str	r1, [sp, #20]
 8009824:	e7c4      	b.n	80097b0 <_svfiprintf_r+0x130>
 8009826:	fb0c 2101 	mla	r1, ip, r1, r2
 800982a:	4604      	mov	r4, r0
 800982c:	2301      	movs	r3, #1
 800982e:	e7f0      	b.n	8009812 <_svfiprintf_r+0x192>
 8009830:	ab03      	add	r3, sp, #12
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	462a      	mov	r2, r5
 8009836:	4b0f      	ldr	r3, [pc, #60]	; (8009874 <_svfiprintf_r+0x1f4>)
 8009838:	a904      	add	r1, sp, #16
 800983a:	4638      	mov	r0, r7
 800983c:	f7fd fe4e 	bl	80074dc <_printf_float>
 8009840:	1c42      	adds	r2, r0, #1
 8009842:	4606      	mov	r6, r0
 8009844:	d1d6      	bne.n	80097f4 <_svfiprintf_r+0x174>
 8009846:	89ab      	ldrh	r3, [r5, #12]
 8009848:	065b      	lsls	r3, r3, #25
 800984a:	f53f af2d 	bmi.w	80096a8 <_svfiprintf_r+0x28>
 800984e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009850:	b01d      	add	sp, #116	; 0x74
 8009852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009856:	ab03      	add	r3, sp, #12
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	462a      	mov	r2, r5
 800985c:	4b05      	ldr	r3, [pc, #20]	; (8009874 <_svfiprintf_r+0x1f4>)
 800985e:	a904      	add	r1, sp, #16
 8009860:	4638      	mov	r0, r7
 8009862:	f7fe f8df 	bl	8007a24 <_printf_i>
 8009866:	e7eb      	b.n	8009840 <_svfiprintf_r+0x1c0>
 8009868:	0800a34c 	.word	0x0800a34c
 800986c:	0800a356 	.word	0x0800a356
 8009870:	080074dd 	.word	0x080074dd
 8009874:	080095cd 	.word	0x080095cd
 8009878:	0800a352 	.word	0x0800a352

0800987c <__sflush_r>:
 800987c:	898a      	ldrh	r2, [r1, #12]
 800987e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009882:	4605      	mov	r5, r0
 8009884:	0710      	lsls	r0, r2, #28
 8009886:	460c      	mov	r4, r1
 8009888:	d458      	bmi.n	800993c <__sflush_r+0xc0>
 800988a:	684b      	ldr	r3, [r1, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	dc05      	bgt.n	800989c <__sflush_r+0x20>
 8009890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009892:	2b00      	cmp	r3, #0
 8009894:	dc02      	bgt.n	800989c <__sflush_r+0x20>
 8009896:	2000      	movs	r0, #0
 8009898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800989c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800989e:	2e00      	cmp	r6, #0
 80098a0:	d0f9      	beq.n	8009896 <__sflush_r+0x1a>
 80098a2:	2300      	movs	r3, #0
 80098a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098a8:	682f      	ldr	r7, [r5, #0]
 80098aa:	6a21      	ldr	r1, [r4, #32]
 80098ac:	602b      	str	r3, [r5, #0]
 80098ae:	d032      	beq.n	8009916 <__sflush_r+0x9a>
 80098b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	075a      	lsls	r2, r3, #29
 80098b6:	d505      	bpl.n	80098c4 <__sflush_r+0x48>
 80098b8:	6863      	ldr	r3, [r4, #4]
 80098ba:	1ac0      	subs	r0, r0, r3
 80098bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098be:	b10b      	cbz	r3, 80098c4 <__sflush_r+0x48>
 80098c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098c2:	1ac0      	subs	r0, r0, r3
 80098c4:	2300      	movs	r3, #0
 80098c6:	4602      	mov	r2, r0
 80098c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098ca:	6a21      	ldr	r1, [r4, #32]
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b0      	blx	r6
 80098d0:	1c43      	adds	r3, r0, #1
 80098d2:	89a3      	ldrh	r3, [r4, #12]
 80098d4:	d106      	bne.n	80098e4 <__sflush_r+0x68>
 80098d6:	6829      	ldr	r1, [r5, #0]
 80098d8:	291d      	cmp	r1, #29
 80098da:	d82b      	bhi.n	8009934 <__sflush_r+0xb8>
 80098dc:	4a29      	ldr	r2, [pc, #164]	; (8009984 <__sflush_r+0x108>)
 80098de:	410a      	asrs	r2, r1
 80098e0:	07d6      	lsls	r6, r2, #31
 80098e2:	d427      	bmi.n	8009934 <__sflush_r+0xb8>
 80098e4:	2200      	movs	r2, #0
 80098e6:	6062      	str	r2, [r4, #4]
 80098e8:	04d9      	lsls	r1, r3, #19
 80098ea:	6922      	ldr	r2, [r4, #16]
 80098ec:	6022      	str	r2, [r4, #0]
 80098ee:	d504      	bpl.n	80098fa <__sflush_r+0x7e>
 80098f0:	1c42      	adds	r2, r0, #1
 80098f2:	d101      	bne.n	80098f8 <__sflush_r+0x7c>
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	b903      	cbnz	r3, 80098fa <__sflush_r+0x7e>
 80098f8:	6560      	str	r0, [r4, #84]	; 0x54
 80098fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098fc:	602f      	str	r7, [r5, #0]
 80098fe:	2900      	cmp	r1, #0
 8009900:	d0c9      	beq.n	8009896 <__sflush_r+0x1a>
 8009902:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009906:	4299      	cmp	r1, r3
 8009908:	d002      	beq.n	8009910 <__sflush_r+0x94>
 800990a:	4628      	mov	r0, r5
 800990c:	f7ff f9e2 	bl	8008cd4 <_free_r>
 8009910:	2000      	movs	r0, #0
 8009912:	6360      	str	r0, [r4, #52]	; 0x34
 8009914:	e7c0      	b.n	8009898 <__sflush_r+0x1c>
 8009916:	2301      	movs	r3, #1
 8009918:	4628      	mov	r0, r5
 800991a:	47b0      	blx	r6
 800991c:	1c41      	adds	r1, r0, #1
 800991e:	d1c8      	bne.n	80098b2 <__sflush_r+0x36>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0c5      	beq.n	80098b2 <__sflush_r+0x36>
 8009926:	2b1d      	cmp	r3, #29
 8009928:	d001      	beq.n	800992e <__sflush_r+0xb2>
 800992a:	2b16      	cmp	r3, #22
 800992c:	d101      	bne.n	8009932 <__sflush_r+0xb6>
 800992e:	602f      	str	r7, [r5, #0]
 8009930:	e7b1      	b.n	8009896 <__sflush_r+0x1a>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009938:	81a3      	strh	r3, [r4, #12]
 800993a:	e7ad      	b.n	8009898 <__sflush_r+0x1c>
 800993c:	690f      	ldr	r7, [r1, #16]
 800993e:	2f00      	cmp	r7, #0
 8009940:	d0a9      	beq.n	8009896 <__sflush_r+0x1a>
 8009942:	0793      	lsls	r3, r2, #30
 8009944:	680e      	ldr	r6, [r1, #0]
 8009946:	bf08      	it	eq
 8009948:	694b      	ldreq	r3, [r1, #20]
 800994a:	600f      	str	r7, [r1, #0]
 800994c:	bf18      	it	ne
 800994e:	2300      	movne	r3, #0
 8009950:	eba6 0807 	sub.w	r8, r6, r7
 8009954:	608b      	str	r3, [r1, #8]
 8009956:	f1b8 0f00 	cmp.w	r8, #0
 800995a:	dd9c      	ble.n	8009896 <__sflush_r+0x1a>
 800995c:	6a21      	ldr	r1, [r4, #32]
 800995e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009960:	4643      	mov	r3, r8
 8009962:	463a      	mov	r2, r7
 8009964:	4628      	mov	r0, r5
 8009966:	47b0      	blx	r6
 8009968:	2800      	cmp	r0, #0
 800996a:	dc06      	bgt.n	800997a <__sflush_r+0xfe>
 800996c:	89a3      	ldrh	r3, [r4, #12]
 800996e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009972:	81a3      	strh	r3, [r4, #12]
 8009974:	f04f 30ff 	mov.w	r0, #4294967295
 8009978:	e78e      	b.n	8009898 <__sflush_r+0x1c>
 800997a:	4407      	add	r7, r0
 800997c:	eba8 0800 	sub.w	r8, r8, r0
 8009980:	e7e9      	b.n	8009956 <__sflush_r+0xda>
 8009982:	bf00      	nop
 8009984:	dfbffffe 	.word	0xdfbffffe

08009988 <_fflush_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	690b      	ldr	r3, [r1, #16]
 800998c:	4605      	mov	r5, r0
 800998e:	460c      	mov	r4, r1
 8009990:	b913      	cbnz	r3, 8009998 <_fflush_r+0x10>
 8009992:	2500      	movs	r5, #0
 8009994:	4628      	mov	r0, r5
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	b118      	cbz	r0, 80099a2 <_fflush_r+0x1a>
 800999a:	6a03      	ldr	r3, [r0, #32]
 800999c:	b90b      	cbnz	r3, 80099a2 <_fflush_r+0x1a>
 800999e:	f7fe f9ef 	bl	8007d80 <__sinit>
 80099a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d0f3      	beq.n	8009992 <_fflush_r+0xa>
 80099aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099ac:	07d0      	lsls	r0, r2, #31
 80099ae:	d404      	bmi.n	80099ba <_fflush_r+0x32>
 80099b0:	0599      	lsls	r1, r3, #22
 80099b2:	d402      	bmi.n	80099ba <_fflush_r+0x32>
 80099b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099b6:	f7fe fb0e 	bl	8007fd6 <__retarget_lock_acquire_recursive>
 80099ba:	4628      	mov	r0, r5
 80099bc:	4621      	mov	r1, r4
 80099be:	f7ff ff5d 	bl	800987c <__sflush_r>
 80099c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099c4:	07da      	lsls	r2, r3, #31
 80099c6:	4605      	mov	r5, r0
 80099c8:	d4e4      	bmi.n	8009994 <_fflush_r+0xc>
 80099ca:	89a3      	ldrh	r3, [r4, #12]
 80099cc:	059b      	lsls	r3, r3, #22
 80099ce:	d4e1      	bmi.n	8009994 <_fflush_r+0xc>
 80099d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099d2:	f7fe fb01 	bl	8007fd8 <__retarget_lock_release_recursive>
 80099d6:	e7dd      	b.n	8009994 <_fflush_r+0xc>

080099d8 <memmove>:
 80099d8:	4288      	cmp	r0, r1
 80099da:	b510      	push	{r4, lr}
 80099dc:	eb01 0402 	add.w	r4, r1, r2
 80099e0:	d902      	bls.n	80099e8 <memmove+0x10>
 80099e2:	4284      	cmp	r4, r0
 80099e4:	4623      	mov	r3, r4
 80099e6:	d807      	bhi.n	80099f8 <memmove+0x20>
 80099e8:	1e43      	subs	r3, r0, #1
 80099ea:	42a1      	cmp	r1, r4
 80099ec:	d008      	beq.n	8009a00 <memmove+0x28>
 80099ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099f6:	e7f8      	b.n	80099ea <memmove+0x12>
 80099f8:	4402      	add	r2, r0
 80099fa:	4601      	mov	r1, r0
 80099fc:	428a      	cmp	r2, r1
 80099fe:	d100      	bne.n	8009a02 <memmove+0x2a>
 8009a00:	bd10      	pop	{r4, pc}
 8009a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a0a:	e7f7      	b.n	80099fc <memmove+0x24>

08009a0c <_sbrk_r>:
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	4d06      	ldr	r5, [pc, #24]	; (8009a28 <_sbrk_r+0x1c>)
 8009a10:	2300      	movs	r3, #0
 8009a12:	4604      	mov	r4, r0
 8009a14:	4608      	mov	r0, r1
 8009a16:	602b      	str	r3, [r5, #0]
 8009a18:	f7f7 ff7a 	bl	8001910 <_sbrk>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d102      	bne.n	8009a26 <_sbrk_r+0x1a>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	b103      	cbz	r3, 8009a26 <_sbrk_r+0x1a>
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
 8009a28:	20000540 	.word	0x20000540

08009a2c <memcpy>:
 8009a2c:	440a      	add	r2, r1
 8009a2e:	4291      	cmp	r1, r2
 8009a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a34:	d100      	bne.n	8009a38 <memcpy+0xc>
 8009a36:	4770      	bx	lr
 8009a38:	b510      	push	{r4, lr}
 8009a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a42:	4291      	cmp	r1, r2
 8009a44:	d1f9      	bne.n	8009a3a <memcpy+0xe>
 8009a46:	bd10      	pop	{r4, pc}

08009a48 <__assert_func>:
 8009a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a4a:	4614      	mov	r4, r2
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	4b09      	ldr	r3, [pc, #36]	; (8009a74 <__assert_func+0x2c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4605      	mov	r5, r0
 8009a54:	68d8      	ldr	r0, [r3, #12]
 8009a56:	b14c      	cbz	r4, 8009a6c <__assert_func+0x24>
 8009a58:	4b07      	ldr	r3, [pc, #28]	; (8009a78 <__assert_func+0x30>)
 8009a5a:	9100      	str	r1, [sp, #0]
 8009a5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a60:	4906      	ldr	r1, [pc, #24]	; (8009a7c <__assert_func+0x34>)
 8009a62:	462b      	mov	r3, r5
 8009a64:	f000 f872 	bl	8009b4c <fiprintf>
 8009a68:	f000 f882 	bl	8009b70 <abort>
 8009a6c:	4b04      	ldr	r3, [pc, #16]	; (8009a80 <__assert_func+0x38>)
 8009a6e:	461c      	mov	r4, r3
 8009a70:	e7f3      	b.n	8009a5a <__assert_func+0x12>
 8009a72:	bf00      	nop
 8009a74:	20000068 	.word	0x20000068
 8009a78:	0800a367 	.word	0x0800a367
 8009a7c:	0800a374 	.word	0x0800a374
 8009a80:	0800a3a2 	.word	0x0800a3a2

08009a84 <_calloc_r>:
 8009a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a86:	fba1 2402 	umull	r2, r4, r1, r2
 8009a8a:	b94c      	cbnz	r4, 8009aa0 <_calloc_r+0x1c>
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	9201      	str	r2, [sp, #4]
 8009a90:	f7ff f994 	bl	8008dbc <_malloc_r>
 8009a94:	9a01      	ldr	r2, [sp, #4]
 8009a96:	4605      	mov	r5, r0
 8009a98:	b930      	cbnz	r0, 8009aa8 <_calloc_r+0x24>
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	b003      	add	sp, #12
 8009a9e:	bd30      	pop	{r4, r5, pc}
 8009aa0:	220c      	movs	r2, #12
 8009aa2:	6002      	str	r2, [r0, #0]
 8009aa4:	2500      	movs	r5, #0
 8009aa6:	e7f8      	b.n	8009a9a <_calloc_r+0x16>
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	f7fe fa16 	bl	8007eda <memset>
 8009aae:	e7f4      	b.n	8009a9a <_calloc_r+0x16>

08009ab0 <__ascii_mbtowc>:
 8009ab0:	b082      	sub	sp, #8
 8009ab2:	b901      	cbnz	r1, 8009ab6 <__ascii_mbtowc+0x6>
 8009ab4:	a901      	add	r1, sp, #4
 8009ab6:	b142      	cbz	r2, 8009aca <__ascii_mbtowc+0x1a>
 8009ab8:	b14b      	cbz	r3, 8009ace <__ascii_mbtowc+0x1e>
 8009aba:	7813      	ldrb	r3, [r2, #0]
 8009abc:	600b      	str	r3, [r1, #0]
 8009abe:	7812      	ldrb	r2, [r2, #0]
 8009ac0:	1e10      	subs	r0, r2, #0
 8009ac2:	bf18      	it	ne
 8009ac4:	2001      	movne	r0, #1
 8009ac6:	b002      	add	sp, #8
 8009ac8:	4770      	bx	lr
 8009aca:	4610      	mov	r0, r2
 8009acc:	e7fb      	b.n	8009ac6 <__ascii_mbtowc+0x16>
 8009ace:	f06f 0001 	mvn.w	r0, #1
 8009ad2:	e7f8      	b.n	8009ac6 <__ascii_mbtowc+0x16>

08009ad4 <_realloc_r>:
 8009ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad8:	4680      	mov	r8, r0
 8009ada:	4614      	mov	r4, r2
 8009adc:	460e      	mov	r6, r1
 8009ade:	b921      	cbnz	r1, 8009aea <_realloc_r+0x16>
 8009ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	f7ff b969 	b.w	8008dbc <_malloc_r>
 8009aea:	b92a      	cbnz	r2, 8009af8 <_realloc_r+0x24>
 8009aec:	f7ff f8f2 	bl	8008cd4 <_free_r>
 8009af0:	4625      	mov	r5, r4
 8009af2:	4628      	mov	r0, r5
 8009af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af8:	f000 f841 	bl	8009b7e <_malloc_usable_size_r>
 8009afc:	4284      	cmp	r4, r0
 8009afe:	4607      	mov	r7, r0
 8009b00:	d802      	bhi.n	8009b08 <_realloc_r+0x34>
 8009b02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b06:	d812      	bhi.n	8009b2e <_realloc_r+0x5a>
 8009b08:	4621      	mov	r1, r4
 8009b0a:	4640      	mov	r0, r8
 8009b0c:	f7ff f956 	bl	8008dbc <_malloc_r>
 8009b10:	4605      	mov	r5, r0
 8009b12:	2800      	cmp	r0, #0
 8009b14:	d0ed      	beq.n	8009af2 <_realloc_r+0x1e>
 8009b16:	42bc      	cmp	r4, r7
 8009b18:	4622      	mov	r2, r4
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	bf28      	it	cs
 8009b1e:	463a      	movcs	r2, r7
 8009b20:	f7ff ff84 	bl	8009a2c <memcpy>
 8009b24:	4631      	mov	r1, r6
 8009b26:	4640      	mov	r0, r8
 8009b28:	f7ff f8d4 	bl	8008cd4 <_free_r>
 8009b2c:	e7e1      	b.n	8009af2 <_realloc_r+0x1e>
 8009b2e:	4635      	mov	r5, r6
 8009b30:	e7df      	b.n	8009af2 <_realloc_r+0x1e>

08009b32 <__ascii_wctomb>:
 8009b32:	b149      	cbz	r1, 8009b48 <__ascii_wctomb+0x16>
 8009b34:	2aff      	cmp	r2, #255	; 0xff
 8009b36:	bf85      	ittet	hi
 8009b38:	238a      	movhi	r3, #138	; 0x8a
 8009b3a:	6003      	strhi	r3, [r0, #0]
 8009b3c:	700a      	strbls	r2, [r1, #0]
 8009b3e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b42:	bf98      	it	ls
 8009b44:	2001      	movls	r0, #1
 8009b46:	4770      	bx	lr
 8009b48:	4608      	mov	r0, r1
 8009b4a:	4770      	bx	lr

08009b4c <fiprintf>:
 8009b4c:	b40e      	push	{r1, r2, r3}
 8009b4e:	b503      	push	{r0, r1, lr}
 8009b50:	4601      	mov	r1, r0
 8009b52:	ab03      	add	r3, sp, #12
 8009b54:	4805      	ldr	r0, [pc, #20]	; (8009b6c <fiprintf+0x20>)
 8009b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b5a:	6800      	ldr	r0, [r0, #0]
 8009b5c:	9301      	str	r3, [sp, #4]
 8009b5e:	f000 f83f 	bl	8009be0 <_vfiprintf_r>
 8009b62:	b002      	add	sp, #8
 8009b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b68:	b003      	add	sp, #12
 8009b6a:	4770      	bx	lr
 8009b6c:	20000068 	.word	0x20000068

08009b70 <abort>:
 8009b70:	b508      	push	{r3, lr}
 8009b72:	2006      	movs	r0, #6
 8009b74:	f000 fa0c 	bl	8009f90 <raise>
 8009b78:	2001      	movs	r0, #1
 8009b7a:	f7f7 fe51 	bl	8001820 <_exit>

08009b7e <_malloc_usable_size_r>:
 8009b7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b82:	1f18      	subs	r0, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	bfbc      	itt	lt
 8009b88:	580b      	ldrlt	r3, [r1, r0]
 8009b8a:	18c0      	addlt	r0, r0, r3
 8009b8c:	4770      	bx	lr

08009b8e <__sfputc_r>:
 8009b8e:	6893      	ldr	r3, [r2, #8]
 8009b90:	3b01      	subs	r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	b410      	push	{r4}
 8009b96:	6093      	str	r3, [r2, #8]
 8009b98:	da08      	bge.n	8009bac <__sfputc_r+0x1e>
 8009b9a:	6994      	ldr	r4, [r2, #24]
 8009b9c:	42a3      	cmp	r3, r4
 8009b9e:	db01      	blt.n	8009ba4 <__sfputc_r+0x16>
 8009ba0:	290a      	cmp	r1, #10
 8009ba2:	d103      	bne.n	8009bac <__sfputc_r+0x1e>
 8009ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ba8:	f000 b934 	b.w	8009e14 <__swbuf_r>
 8009bac:	6813      	ldr	r3, [r2, #0]
 8009bae:	1c58      	adds	r0, r3, #1
 8009bb0:	6010      	str	r0, [r2, #0]
 8009bb2:	7019      	strb	r1, [r3, #0]
 8009bb4:	4608      	mov	r0, r1
 8009bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <__sfputs_r>:
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	460f      	mov	r7, r1
 8009bc2:	4614      	mov	r4, r2
 8009bc4:	18d5      	adds	r5, r2, r3
 8009bc6:	42ac      	cmp	r4, r5
 8009bc8:	d101      	bne.n	8009bce <__sfputs_r+0x12>
 8009bca:	2000      	movs	r0, #0
 8009bcc:	e007      	b.n	8009bde <__sfputs_r+0x22>
 8009bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd2:	463a      	mov	r2, r7
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	f7ff ffda 	bl	8009b8e <__sfputc_r>
 8009bda:	1c43      	adds	r3, r0, #1
 8009bdc:	d1f3      	bne.n	8009bc6 <__sfputs_r+0xa>
 8009bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009be0 <_vfiprintf_r>:
 8009be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	460d      	mov	r5, r1
 8009be6:	b09d      	sub	sp, #116	; 0x74
 8009be8:	4614      	mov	r4, r2
 8009bea:	4698      	mov	r8, r3
 8009bec:	4606      	mov	r6, r0
 8009bee:	b118      	cbz	r0, 8009bf8 <_vfiprintf_r+0x18>
 8009bf0:	6a03      	ldr	r3, [r0, #32]
 8009bf2:	b90b      	cbnz	r3, 8009bf8 <_vfiprintf_r+0x18>
 8009bf4:	f7fe f8c4 	bl	8007d80 <__sinit>
 8009bf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bfa:	07d9      	lsls	r1, r3, #31
 8009bfc:	d405      	bmi.n	8009c0a <_vfiprintf_r+0x2a>
 8009bfe:	89ab      	ldrh	r3, [r5, #12]
 8009c00:	059a      	lsls	r2, r3, #22
 8009c02:	d402      	bmi.n	8009c0a <_vfiprintf_r+0x2a>
 8009c04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c06:	f7fe f9e6 	bl	8007fd6 <__retarget_lock_acquire_recursive>
 8009c0a:	89ab      	ldrh	r3, [r5, #12]
 8009c0c:	071b      	lsls	r3, r3, #28
 8009c0e:	d501      	bpl.n	8009c14 <_vfiprintf_r+0x34>
 8009c10:	692b      	ldr	r3, [r5, #16]
 8009c12:	b99b      	cbnz	r3, 8009c3c <_vfiprintf_r+0x5c>
 8009c14:	4629      	mov	r1, r5
 8009c16:	4630      	mov	r0, r6
 8009c18:	f000 f93a 	bl	8009e90 <__swsetup_r>
 8009c1c:	b170      	cbz	r0, 8009c3c <_vfiprintf_r+0x5c>
 8009c1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c20:	07dc      	lsls	r4, r3, #31
 8009c22:	d504      	bpl.n	8009c2e <_vfiprintf_r+0x4e>
 8009c24:	f04f 30ff 	mov.w	r0, #4294967295
 8009c28:	b01d      	add	sp, #116	; 0x74
 8009c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c2e:	89ab      	ldrh	r3, [r5, #12]
 8009c30:	0598      	lsls	r0, r3, #22
 8009c32:	d4f7      	bmi.n	8009c24 <_vfiprintf_r+0x44>
 8009c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c36:	f7fe f9cf 	bl	8007fd8 <__retarget_lock_release_recursive>
 8009c3a:	e7f3      	b.n	8009c24 <_vfiprintf_r+0x44>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c40:	2320      	movs	r3, #32
 8009c42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c46:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c4a:	2330      	movs	r3, #48	; 0x30
 8009c4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009e00 <_vfiprintf_r+0x220>
 8009c50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c54:	f04f 0901 	mov.w	r9, #1
 8009c58:	4623      	mov	r3, r4
 8009c5a:	469a      	mov	sl, r3
 8009c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c60:	b10a      	cbz	r2, 8009c66 <_vfiprintf_r+0x86>
 8009c62:	2a25      	cmp	r2, #37	; 0x25
 8009c64:	d1f9      	bne.n	8009c5a <_vfiprintf_r+0x7a>
 8009c66:	ebba 0b04 	subs.w	fp, sl, r4
 8009c6a:	d00b      	beq.n	8009c84 <_vfiprintf_r+0xa4>
 8009c6c:	465b      	mov	r3, fp
 8009c6e:	4622      	mov	r2, r4
 8009c70:	4629      	mov	r1, r5
 8009c72:	4630      	mov	r0, r6
 8009c74:	f7ff ffa2 	bl	8009bbc <__sfputs_r>
 8009c78:	3001      	adds	r0, #1
 8009c7a:	f000 80a9 	beq.w	8009dd0 <_vfiprintf_r+0x1f0>
 8009c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c80:	445a      	add	r2, fp
 8009c82:	9209      	str	r2, [sp, #36]	; 0x24
 8009c84:	f89a 3000 	ldrb.w	r3, [sl]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f000 80a1 	beq.w	8009dd0 <_vfiprintf_r+0x1f0>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	f04f 32ff 	mov.w	r2, #4294967295
 8009c94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c98:	f10a 0a01 	add.w	sl, sl, #1
 8009c9c:	9304      	str	r3, [sp, #16]
 8009c9e:	9307      	str	r3, [sp, #28]
 8009ca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ca4:	931a      	str	r3, [sp, #104]	; 0x68
 8009ca6:	4654      	mov	r4, sl
 8009ca8:	2205      	movs	r2, #5
 8009caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cae:	4854      	ldr	r0, [pc, #336]	; (8009e00 <_vfiprintf_r+0x220>)
 8009cb0:	f7f6 fa96 	bl	80001e0 <memchr>
 8009cb4:	9a04      	ldr	r2, [sp, #16]
 8009cb6:	b9d8      	cbnz	r0, 8009cf0 <_vfiprintf_r+0x110>
 8009cb8:	06d1      	lsls	r1, r2, #27
 8009cba:	bf44      	itt	mi
 8009cbc:	2320      	movmi	r3, #32
 8009cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cc2:	0713      	lsls	r3, r2, #28
 8009cc4:	bf44      	itt	mi
 8009cc6:	232b      	movmi	r3, #43	; 0x2b
 8009cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8009cd2:	d015      	beq.n	8009d00 <_vfiprintf_r+0x120>
 8009cd4:	9a07      	ldr	r2, [sp, #28]
 8009cd6:	4654      	mov	r4, sl
 8009cd8:	2000      	movs	r0, #0
 8009cda:	f04f 0c0a 	mov.w	ip, #10
 8009cde:	4621      	mov	r1, r4
 8009ce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ce4:	3b30      	subs	r3, #48	; 0x30
 8009ce6:	2b09      	cmp	r3, #9
 8009ce8:	d94d      	bls.n	8009d86 <_vfiprintf_r+0x1a6>
 8009cea:	b1b0      	cbz	r0, 8009d1a <_vfiprintf_r+0x13a>
 8009cec:	9207      	str	r2, [sp, #28]
 8009cee:	e014      	b.n	8009d1a <_vfiprintf_r+0x13a>
 8009cf0:	eba0 0308 	sub.w	r3, r0, r8
 8009cf4:	fa09 f303 	lsl.w	r3, r9, r3
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	46a2      	mov	sl, r4
 8009cfe:	e7d2      	b.n	8009ca6 <_vfiprintf_r+0xc6>
 8009d00:	9b03      	ldr	r3, [sp, #12]
 8009d02:	1d19      	adds	r1, r3, #4
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	9103      	str	r1, [sp, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	bfbb      	ittet	lt
 8009d0c:	425b      	neglt	r3, r3
 8009d0e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d12:	9307      	strge	r3, [sp, #28]
 8009d14:	9307      	strlt	r3, [sp, #28]
 8009d16:	bfb8      	it	lt
 8009d18:	9204      	strlt	r2, [sp, #16]
 8009d1a:	7823      	ldrb	r3, [r4, #0]
 8009d1c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d1e:	d10c      	bne.n	8009d3a <_vfiprintf_r+0x15a>
 8009d20:	7863      	ldrb	r3, [r4, #1]
 8009d22:	2b2a      	cmp	r3, #42	; 0x2a
 8009d24:	d134      	bne.n	8009d90 <_vfiprintf_r+0x1b0>
 8009d26:	9b03      	ldr	r3, [sp, #12]
 8009d28:	1d1a      	adds	r2, r3, #4
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	9203      	str	r2, [sp, #12]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	bfb8      	it	lt
 8009d32:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d36:	3402      	adds	r4, #2
 8009d38:	9305      	str	r3, [sp, #20]
 8009d3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009e10 <_vfiprintf_r+0x230>
 8009d3e:	7821      	ldrb	r1, [r4, #0]
 8009d40:	2203      	movs	r2, #3
 8009d42:	4650      	mov	r0, sl
 8009d44:	f7f6 fa4c 	bl	80001e0 <memchr>
 8009d48:	b138      	cbz	r0, 8009d5a <_vfiprintf_r+0x17a>
 8009d4a:	9b04      	ldr	r3, [sp, #16]
 8009d4c:	eba0 000a 	sub.w	r0, r0, sl
 8009d50:	2240      	movs	r2, #64	; 0x40
 8009d52:	4082      	lsls	r2, r0
 8009d54:	4313      	orrs	r3, r2
 8009d56:	3401      	adds	r4, #1
 8009d58:	9304      	str	r3, [sp, #16]
 8009d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d5e:	4829      	ldr	r0, [pc, #164]	; (8009e04 <_vfiprintf_r+0x224>)
 8009d60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d64:	2206      	movs	r2, #6
 8009d66:	f7f6 fa3b 	bl	80001e0 <memchr>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d03f      	beq.n	8009dee <_vfiprintf_r+0x20e>
 8009d6e:	4b26      	ldr	r3, [pc, #152]	; (8009e08 <_vfiprintf_r+0x228>)
 8009d70:	bb1b      	cbnz	r3, 8009dba <_vfiprintf_r+0x1da>
 8009d72:	9b03      	ldr	r3, [sp, #12]
 8009d74:	3307      	adds	r3, #7
 8009d76:	f023 0307 	bic.w	r3, r3, #7
 8009d7a:	3308      	adds	r3, #8
 8009d7c:	9303      	str	r3, [sp, #12]
 8009d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d80:	443b      	add	r3, r7
 8009d82:	9309      	str	r3, [sp, #36]	; 0x24
 8009d84:	e768      	b.n	8009c58 <_vfiprintf_r+0x78>
 8009d86:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	2001      	movs	r0, #1
 8009d8e:	e7a6      	b.n	8009cde <_vfiprintf_r+0xfe>
 8009d90:	2300      	movs	r3, #0
 8009d92:	3401      	adds	r4, #1
 8009d94:	9305      	str	r3, [sp, #20]
 8009d96:	4619      	mov	r1, r3
 8009d98:	f04f 0c0a 	mov.w	ip, #10
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009da2:	3a30      	subs	r2, #48	; 0x30
 8009da4:	2a09      	cmp	r2, #9
 8009da6:	d903      	bls.n	8009db0 <_vfiprintf_r+0x1d0>
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d0c6      	beq.n	8009d3a <_vfiprintf_r+0x15a>
 8009dac:	9105      	str	r1, [sp, #20]
 8009dae:	e7c4      	b.n	8009d3a <_vfiprintf_r+0x15a>
 8009db0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009db4:	4604      	mov	r4, r0
 8009db6:	2301      	movs	r3, #1
 8009db8:	e7f0      	b.n	8009d9c <_vfiprintf_r+0x1bc>
 8009dba:	ab03      	add	r3, sp, #12
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	462a      	mov	r2, r5
 8009dc0:	4b12      	ldr	r3, [pc, #72]	; (8009e0c <_vfiprintf_r+0x22c>)
 8009dc2:	a904      	add	r1, sp, #16
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f7fd fb89 	bl	80074dc <_printf_float>
 8009dca:	4607      	mov	r7, r0
 8009dcc:	1c78      	adds	r0, r7, #1
 8009dce:	d1d6      	bne.n	8009d7e <_vfiprintf_r+0x19e>
 8009dd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dd2:	07d9      	lsls	r1, r3, #31
 8009dd4:	d405      	bmi.n	8009de2 <_vfiprintf_r+0x202>
 8009dd6:	89ab      	ldrh	r3, [r5, #12]
 8009dd8:	059a      	lsls	r2, r3, #22
 8009dda:	d402      	bmi.n	8009de2 <_vfiprintf_r+0x202>
 8009ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dde:	f7fe f8fb 	bl	8007fd8 <__retarget_lock_release_recursive>
 8009de2:	89ab      	ldrh	r3, [r5, #12]
 8009de4:	065b      	lsls	r3, r3, #25
 8009de6:	f53f af1d 	bmi.w	8009c24 <_vfiprintf_r+0x44>
 8009dea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dec:	e71c      	b.n	8009c28 <_vfiprintf_r+0x48>
 8009dee:	ab03      	add	r3, sp, #12
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	462a      	mov	r2, r5
 8009df4:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <_vfiprintf_r+0x22c>)
 8009df6:	a904      	add	r1, sp, #16
 8009df8:	4630      	mov	r0, r6
 8009dfa:	f7fd fe13 	bl	8007a24 <_printf_i>
 8009dfe:	e7e4      	b.n	8009dca <_vfiprintf_r+0x1ea>
 8009e00:	0800a34c 	.word	0x0800a34c
 8009e04:	0800a356 	.word	0x0800a356
 8009e08:	080074dd 	.word	0x080074dd
 8009e0c:	08009bbd 	.word	0x08009bbd
 8009e10:	0800a352 	.word	0x0800a352

08009e14 <__swbuf_r>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	460e      	mov	r6, r1
 8009e18:	4614      	mov	r4, r2
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	b118      	cbz	r0, 8009e26 <__swbuf_r+0x12>
 8009e1e:	6a03      	ldr	r3, [r0, #32]
 8009e20:	b90b      	cbnz	r3, 8009e26 <__swbuf_r+0x12>
 8009e22:	f7fd ffad 	bl	8007d80 <__sinit>
 8009e26:	69a3      	ldr	r3, [r4, #24]
 8009e28:	60a3      	str	r3, [r4, #8]
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	071a      	lsls	r2, r3, #28
 8009e2e:	d525      	bpl.n	8009e7c <__swbuf_r+0x68>
 8009e30:	6923      	ldr	r3, [r4, #16]
 8009e32:	b31b      	cbz	r3, 8009e7c <__swbuf_r+0x68>
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	6922      	ldr	r2, [r4, #16]
 8009e38:	1a98      	subs	r0, r3, r2
 8009e3a:	6963      	ldr	r3, [r4, #20]
 8009e3c:	b2f6      	uxtb	r6, r6
 8009e3e:	4283      	cmp	r3, r0
 8009e40:	4637      	mov	r7, r6
 8009e42:	dc04      	bgt.n	8009e4e <__swbuf_r+0x3a>
 8009e44:	4621      	mov	r1, r4
 8009e46:	4628      	mov	r0, r5
 8009e48:	f7ff fd9e 	bl	8009988 <_fflush_r>
 8009e4c:	b9e0      	cbnz	r0, 8009e88 <__swbuf_r+0x74>
 8009e4e:	68a3      	ldr	r3, [r4, #8]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	60a3      	str	r3, [r4, #8]
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	6022      	str	r2, [r4, #0]
 8009e5a:	701e      	strb	r6, [r3, #0]
 8009e5c:	6962      	ldr	r2, [r4, #20]
 8009e5e:	1c43      	adds	r3, r0, #1
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d004      	beq.n	8009e6e <__swbuf_r+0x5a>
 8009e64:	89a3      	ldrh	r3, [r4, #12]
 8009e66:	07db      	lsls	r3, r3, #31
 8009e68:	d506      	bpl.n	8009e78 <__swbuf_r+0x64>
 8009e6a:	2e0a      	cmp	r6, #10
 8009e6c:	d104      	bne.n	8009e78 <__swbuf_r+0x64>
 8009e6e:	4621      	mov	r1, r4
 8009e70:	4628      	mov	r0, r5
 8009e72:	f7ff fd89 	bl	8009988 <_fflush_r>
 8009e76:	b938      	cbnz	r0, 8009e88 <__swbuf_r+0x74>
 8009e78:	4638      	mov	r0, r7
 8009e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	4628      	mov	r0, r5
 8009e80:	f000 f806 	bl	8009e90 <__swsetup_r>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d0d5      	beq.n	8009e34 <__swbuf_r+0x20>
 8009e88:	f04f 37ff 	mov.w	r7, #4294967295
 8009e8c:	e7f4      	b.n	8009e78 <__swbuf_r+0x64>
	...

08009e90 <__swsetup_r>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	4b2a      	ldr	r3, [pc, #168]	; (8009f3c <__swsetup_r+0xac>)
 8009e94:	4605      	mov	r5, r0
 8009e96:	6818      	ldr	r0, [r3, #0]
 8009e98:	460c      	mov	r4, r1
 8009e9a:	b118      	cbz	r0, 8009ea4 <__swsetup_r+0x14>
 8009e9c:	6a03      	ldr	r3, [r0, #32]
 8009e9e:	b90b      	cbnz	r3, 8009ea4 <__swsetup_r+0x14>
 8009ea0:	f7fd ff6e 	bl	8007d80 <__sinit>
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eaa:	0718      	lsls	r0, r3, #28
 8009eac:	d422      	bmi.n	8009ef4 <__swsetup_r+0x64>
 8009eae:	06d9      	lsls	r1, r3, #27
 8009eb0:	d407      	bmi.n	8009ec2 <__swsetup_r+0x32>
 8009eb2:	2309      	movs	r3, #9
 8009eb4:	602b      	str	r3, [r5, #0]
 8009eb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009eba:	81a3      	strh	r3, [r4, #12]
 8009ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec0:	e034      	b.n	8009f2c <__swsetup_r+0x9c>
 8009ec2:	0758      	lsls	r0, r3, #29
 8009ec4:	d512      	bpl.n	8009eec <__swsetup_r+0x5c>
 8009ec6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ec8:	b141      	cbz	r1, 8009edc <__swsetup_r+0x4c>
 8009eca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ece:	4299      	cmp	r1, r3
 8009ed0:	d002      	beq.n	8009ed8 <__swsetup_r+0x48>
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	f7fe fefe 	bl	8008cd4 <_free_r>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	6363      	str	r3, [r4, #52]	; 0x34
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ee2:	81a3      	strh	r3, [r4, #12]
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	6063      	str	r3, [r4, #4]
 8009ee8:	6923      	ldr	r3, [r4, #16]
 8009eea:	6023      	str	r3, [r4, #0]
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	f043 0308 	orr.w	r3, r3, #8
 8009ef2:	81a3      	strh	r3, [r4, #12]
 8009ef4:	6923      	ldr	r3, [r4, #16]
 8009ef6:	b94b      	cbnz	r3, 8009f0c <__swsetup_r+0x7c>
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f02:	d003      	beq.n	8009f0c <__swsetup_r+0x7c>
 8009f04:	4621      	mov	r1, r4
 8009f06:	4628      	mov	r0, r5
 8009f08:	f000 f884 	bl	800a014 <__smakebuf_r>
 8009f0c:	89a0      	ldrh	r0, [r4, #12]
 8009f0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f12:	f010 0301 	ands.w	r3, r0, #1
 8009f16:	d00a      	beq.n	8009f2e <__swsetup_r+0x9e>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60a3      	str	r3, [r4, #8]
 8009f1c:	6963      	ldr	r3, [r4, #20]
 8009f1e:	425b      	negs	r3, r3
 8009f20:	61a3      	str	r3, [r4, #24]
 8009f22:	6923      	ldr	r3, [r4, #16]
 8009f24:	b943      	cbnz	r3, 8009f38 <__swsetup_r+0xa8>
 8009f26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f2a:	d1c4      	bne.n	8009eb6 <__swsetup_r+0x26>
 8009f2c:	bd38      	pop	{r3, r4, r5, pc}
 8009f2e:	0781      	lsls	r1, r0, #30
 8009f30:	bf58      	it	pl
 8009f32:	6963      	ldrpl	r3, [r4, #20]
 8009f34:	60a3      	str	r3, [r4, #8]
 8009f36:	e7f4      	b.n	8009f22 <__swsetup_r+0x92>
 8009f38:	2000      	movs	r0, #0
 8009f3a:	e7f7      	b.n	8009f2c <__swsetup_r+0x9c>
 8009f3c:	20000068 	.word	0x20000068

08009f40 <_raise_r>:
 8009f40:	291f      	cmp	r1, #31
 8009f42:	b538      	push	{r3, r4, r5, lr}
 8009f44:	4604      	mov	r4, r0
 8009f46:	460d      	mov	r5, r1
 8009f48:	d904      	bls.n	8009f54 <_raise_r+0x14>
 8009f4a:	2316      	movs	r3, #22
 8009f4c:	6003      	str	r3, [r0, #0]
 8009f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f52:	bd38      	pop	{r3, r4, r5, pc}
 8009f54:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009f56:	b112      	cbz	r2, 8009f5e <_raise_r+0x1e>
 8009f58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f5c:	b94b      	cbnz	r3, 8009f72 <_raise_r+0x32>
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f000 f830 	bl	8009fc4 <_getpid_r>
 8009f64:	462a      	mov	r2, r5
 8009f66:	4601      	mov	r1, r0
 8009f68:	4620      	mov	r0, r4
 8009f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f6e:	f000 b817 	b.w	8009fa0 <_kill_r>
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d00a      	beq.n	8009f8c <_raise_r+0x4c>
 8009f76:	1c59      	adds	r1, r3, #1
 8009f78:	d103      	bne.n	8009f82 <_raise_r+0x42>
 8009f7a:	2316      	movs	r3, #22
 8009f7c:	6003      	str	r3, [r0, #0]
 8009f7e:	2001      	movs	r0, #1
 8009f80:	e7e7      	b.n	8009f52 <_raise_r+0x12>
 8009f82:	2400      	movs	r4, #0
 8009f84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f88:	4628      	mov	r0, r5
 8009f8a:	4798      	blx	r3
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	e7e0      	b.n	8009f52 <_raise_r+0x12>

08009f90 <raise>:
 8009f90:	4b02      	ldr	r3, [pc, #8]	; (8009f9c <raise+0xc>)
 8009f92:	4601      	mov	r1, r0
 8009f94:	6818      	ldr	r0, [r3, #0]
 8009f96:	f7ff bfd3 	b.w	8009f40 <_raise_r>
 8009f9a:	bf00      	nop
 8009f9c:	20000068 	.word	0x20000068

08009fa0 <_kill_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	4d07      	ldr	r5, [pc, #28]	; (8009fc0 <_kill_r+0x20>)
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	4608      	mov	r0, r1
 8009faa:	4611      	mov	r1, r2
 8009fac:	602b      	str	r3, [r5, #0]
 8009fae:	f7f7 fc27 	bl	8001800 <_kill>
 8009fb2:	1c43      	adds	r3, r0, #1
 8009fb4:	d102      	bne.n	8009fbc <_kill_r+0x1c>
 8009fb6:	682b      	ldr	r3, [r5, #0]
 8009fb8:	b103      	cbz	r3, 8009fbc <_kill_r+0x1c>
 8009fba:	6023      	str	r3, [r4, #0]
 8009fbc:	bd38      	pop	{r3, r4, r5, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20000540 	.word	0x20000540

08009fc4 <_getpid_r>:
 8009fc4:	f7f7 bc14 	b.w	80017f0 <_getpid>

08009fc8 <__swhatbuf_r>:
 8009fc8:	b570      	push	{r4, r5, r6, lr}
 8009fca:	460c      	mov	r4, r1
 8009fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd0:	2900      	cmp	r1, #0
 8009fd2:	b096      	sub	sp, #88	; 0x58
 8009fd4:	4615      	mov	r5, r2
 8009fd6:	461e      	mov	r6, r3
 8009fd8:	da0d      	bge.n	8009ff6 <__swhatbuf_r+0x2e>
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009fe0:	f04f 0100 	mov.w	r1, #0
 8009fe4:	bf0c      	ite	eq
 8009fe6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009fea:	2340      	movne	r3, #64	; 0x40
 8009fec:	2000      	movs	r0, #0
 8009fee:	6031      	str	r1, [r6, #0]
 8009ff0:	602b      	str	r3, [r5, #0]
 8009ff2:	b016      	add	sp, #88	; 0x58
 8009ff4:	bd70      	pop	{r4, r5, r6, pc}
 8009ff6:	466a      	mov	r2, sp
 8009ff8:	f000 f848 	bl	800a08c <_fstat_r>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	dbec      	blt.n	8009fda <__swhatbuf_r+0x12>
 800a000:	9901      	ldr	r1, [sp, #4]
 800a002:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a006:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a00a:	4259      	negs	r1, r3
 800a00c:	4159      	adcs	r1, r3
 800a00e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a012:	e7eb      	b.n	8009fec <__swhatbuf_r+0x24>

0800a014 <__smakebuf_r>:
 800a014:	898b      	ldrh	r3, [r1, #12]
 800a016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a018:	079d      	lsls	r5, r3, #30
 800a01a:	4606      	mov	r6, r0
 800a01c:	460c      	mov	r4, r1
 800a01e:	d507      	bpl.n	800a030 <__smakebuf_r+0x1c>
 800a020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a024:	6023      	str	r3, [r4, #0]
 800a026:	6123      	str	r3, [r4, #16]
 800a028:	2301      	movs	r3, #1
 800a02a:	6163      	str	r3, [r4, #20]
 800a02c:	b002      	add	sp, #8
 800a02e:	bd70      	pop	{r4, r5, r6, pc}
 800a030:	ab01      	add	r3, sp, #4
 800a032:	466a      	mov	r2, sp
 800a034:	f7ff ffc8 	bl	8009fc8 <__swhatbuf_r>
 800a038:	9900      	ldr	r1, [sp, #0]
 800a03a:	4605      	mov	r5, r0
 800a03c:	4630      	mov	r0, r6
 800a03e:	f7fe febd 	bl	8008dbc <_malloc_r>
 800a042:	b948      	cbnz	r0, 800a058 <__smakebuf_r+0x44>
 800a044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a048:	059a      	lsls	r2, r3, #22
 800a04a:	d4ef      	bmi.n	800a02c <__smakebuf_r+0x18>
 800a04c:	f023 0303 	bic.w	r3, r3, #3
 800a050:	f043 0302 	orr.w	r3, r3, #2
 800a054:	81a3      	strh	r3, [r4, #12]
 800a056:	e7e3      	b.n	800a020 <__smakebuf_r+0xc>
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	6020      	str	r0, [r4, #0]
 800a05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a060:	81a3      	strh	r3, [r4, #12]
 800a062:	9b00      	ldr	r3, [sp, #0]
 800a064:	6163      	str	r3, [r4, #20]
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	6120      	str	r0, [r4, #16]
 800a06a:	b15b      	cbz	r3, 800a084 <__smakebuf_r+0x70>
 800a06c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a070:	4630      	mov	r0, r6
 800a072:	f000 f81d 	bl	800a0b0 <_isatty_r>
 800a076:	b128      	cbz	r0, 800a084 <__smakebuf_r+0x70>
 800a078:	89a3      	ldrh	r3, [r4, #12]
 800a07a:	f023 0303 	bic.w	r3, r3, #3
 800a07e:	f043 0301 	orr.w	r3, r3, #1
 800a082:	81a3      	strh	r3, [r4, #12]
 800a084:	89a3      	ldrh	r3, [r4, #12]
 800a086:	431d      	orrs	r5, r3
 800a088:	81a5      	strh	r5, [r4, #12]
 800a08a:	e7cf      	b.n	800a02c <__smakebuf_r+0x18>

0800a08c <_fstat_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4d07      	ldr	r5, [pc, #28]	; (800a0ac <_fstat_r+0x20>)
 800a090:	2300      	movs	r3, #0
 800a092:	4604      	mov	r4, r0
 800a094:	4608      	mov	r0, r1
 800a096:	4611      	mov	r1, r2
 800a098:	602b      	str	r3, [r5, #0]
 800a09a:	f7f7 fc10 	bl	80018be <_fstat>
 800a09e:	1c43      	adds	r3, r0, #1
 800a0a0:	d102      	bne.n	800a0a8 <_fstat_r+0x1c>
 800a0a2:	682b      	ldr	r3, [r5, #0]
 800a0a4:	b103      	cbz	r3, 800a0a8 <_fstat_r+0x1c>
 800a0a6:	6023      	str	r3, [r4, #0]
 800a0a8:	bd38      	pop	{r3, r4, r5, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20000540 	.word	0x20000540

0800a0b0 <_isatty_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d06      	ldr	r5, [pc, #24]	; (800a0cc <_isatty_r+0x1c>)
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	602b      	str	r3, [r5, #0]
 800a0bc:	f7f7 fc0f 	bl	80018de <_isatty>
 800a0c0:	1c43      	adds	r3, r0, #1
 800a0c2:	d102      	bne.n	800a0ca <_isatty_r+0x1a>
 800a0c4:	682b      	ldr	r3, [r5, #0]
 800a0c6:	b103      	cbz	r3, 800a0ca <_isatty_r+0x1a>
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	bd38      	pop	{r3, r4, r5, pc}
 800a0cc:	20000540 	.word	0x20000540

0800a0d0 <_init>:
 800a0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d2:	bf00      	nop
 800a0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0d6:	bc08      	pop	{r3}
 800a0d8:	469e      	mov	lr, r3
 800a0da:	4770      	bx	lr

0800a0dc <_fini>:
 800a0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0de:	bf00      	nop
 800a0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0e2:	bc08      	pop	{r3}
 800a0e4:	469e      	mov	lr, r3
 800a0e6:	4770      	bx	lr
