
Lab 7 I2C-IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a070  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  0800a210  0800a210  0001a210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5cc  0800a5cc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5cc  0800a5cc  0001a5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5d4  0800a5d4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5d4  0800a5d4  0001a5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5d8  0800a5d8  0001a5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001d8  0800a7b4  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  0800a7b4  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010372  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021bd  00000000  00000000  000305bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00032780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c5e  00000000  00000000  00033720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000176d9  00000000  00000000  0003437e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012799  00000000  00000000  0004ba57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000916e3  00000000  00000000  0005e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005470  00000000  00000000  000ef8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f4d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a1f8 	.word	0x0800a1f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800a1f8 	.word	0x0800a1f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t device_addr = 0b01010000;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000eb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000eb8:	b0ae      	sub	sp, #184	; 0xb8
 8000eba:	af06      	add	r7, sp, #24
 8000ebc:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec6:	f040 809e 	bne.w	8001006 <HAL_TIM_PeriodElapsedCallback+0x152>
		// This code is executed when TIM2 period is elapsed
		char string[128];
		const uint8_t X_pin = 0x29;
 8000eca:	2329      	movs	r3, #41	; 0x29
 8000ecc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		const uint8_t Y_pin = 0x2B;
 8000ed0:	232b      	movs	r3, #43	; 0x2b
 8000ed2:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		const uint8_t Z_pin = 0x2D;
 8000ed6:	232d      	movs	r3, #45	; 0x2d
 8000ed8:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

		int8_t x_int, y_int, z_int;

		HAL_I2C_Master_Transmit(&hi2c1, device_addr, &X_pin, 1, 50); //telling which variable i want to read
 8000edc:	4b4c      	ldr	r3, [pc, #304]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b299      	uxth	r1, r3
 8000ee2:	f107 028f 	add.w	r2, r7, #143	; 0x8f
 8000ee6:	2332      	movs	r3, #50	; 0x32
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2301      	movs	r3, #1
 8000eec:	4849      	ldr	r0, [pc, #292]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000eee:	f001 fd9f 	bl	8002a30 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, device_addr + 1, &x_int, 1, 50);
 8000ef2:	4b47      	ldr	r3, [pc, #284]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	3301      	adds	r3, #1
 8000efa:	b299      	uxth	r1, r3
 8000efc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000f00:	2332      	movs	r3, #50	; 0x32
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	4843      	ldr	r0, [pc, #268]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000f08:	f001 fe90 	bl	8002c2c <HAL_I2C_Master_Receive>

		HAL_I2C_Master_Transmit(&hi2c1, device_addr, &Y_pin, 1, 50); //telling which variable i want to read
 8000f0c:	4b40      	ldr	r3, [pc, #256]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b299      	uxth	r1, r3
 8000f12:	f107 028e 	add.w	r2, r7, #142	; 0x8e
 8000f16:	2332      	movs	r3, #50	; 0x32
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	483d      	ldr	r0, [pc, #244]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000f1e:	f001 fd87 	bl	8002a30 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, device_addr + 1, &y_int, 1, 50);
 8000f22:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	3301      	adds	r3, #1
 8000f2a:	b299      	uxth	r1, r3
 8000f2c:	f107 028b 	add.w	r2, r7, #139	; 0x8b
 8000f30:	2332      	movs	r3, #50	; 0x32
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2301      	movs	r3, #1
 8000f36:	4837      	ldr	r0, [pc, #220]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000f38:	f001 fe78 	bl	8002c2c <HAL_I2C_Master_Receive>

		HAL_I2C_Master_Transmit(&hi2c1, device_addr, &Z_pin, 1, 50); //telling which variable i want to read
 8000f3c:	4b34      	ldr	r3, [pc, #208]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b299      	uxth	r1, r3
 8000f42:	f107 028d 	add.w	r2, r7, #141	; 0x8d
 8000f46:	2332      	movs	r3, #50	; 0x32
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	4831      	ldr	r0, [pc, #196]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000f4e:	f001 fd6f 	bl	8002a30 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, device_addr + 1, &z_int, 1, 50);
 8000f52:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	3301      	adds	r3, #1
 8000f5a:	b299      	uxth	r1, r3
 8000f5c:	f107 028a 	add.w	r2, r7, #138	; 0x8a
 8000f60:	2332      	movs	r3, #50	; 0x32
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2301      	movs	r3, #1
 8000f66:	482b      	ldr	r0, [pc, #172]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000f68:	f001 fe60 	bl	8002c2c <HAL_I2C_Master_Receive>

		float x = (float) x_int / 64.0;
 8000f6c:	f997 308c 	ldrsb.w	r3, [r7, #140]	; 0x8c
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f78:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001018 <HAL_TIM_PeriodElapsedCallback+0x164>
 8000f7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f80:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		float y = (float) y_int / 64.0;
 8000f84:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f90:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001018 <HAL_TIM_PeriodElapsedCallback+0x164>
 8000f94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f98:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		float z = (float) z_int / 64.0;
 8000f9c:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa8:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001018 <HAL_TIM_PeriodElapsedCallback+0x164>
 8000fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

		int len = snprintf(string, sizeof(string), "X: %.3fg\r\nY: %.3fg\r\nZ: %.3fg\r\n", x, y, z);
 8000fb4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000fb8:	f7ff face 	bl	8000558 <__aeabi_f2d>
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	460d      	mov	r5, r1
 8000fc0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000fc4:	f7ff fac8 	bl	8000558 <__aeabi_f2d>
 8000fc8:	4680      	mov	r8, r0
 8000fca:	4689      	mov	r9, r1
 8000fcc:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8000fd0:	f7ff fac2 	bl	8000558 <__aeabi_f2d>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	f107 0008 	add.w	r0, r7, #8
 8000fdc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000fe0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000fe4:	e9cd 4500 	strd	r4, r5, [sp]
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000fea:	2180      	movs	r1, #128	; 0x80
 8000fec:	f006 ff94 	bl	8007f18 <sniprintf>
 8000ff0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		HAL_UART_Transmit_DMA(&huart2, string, len);
 8000ff4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	4619      	mov	r1, r3
 8001000:	4807      	ldr	r0, [pc, #28]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001002:	f005 f9d7 	bl	80063b4 <HAL_UART_Transmit_DMA>
	}
}
 8001006:	bf00      	nop
 8001008:	37a0      	adds	r7, #160	; 0xa0
 800100a:	46bd      	mov	sp, r7
 800100c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001010:	20000000 	.word	0x20000000
 8001014:	200001f4 	.word	0x200001f4
 8001018:	42800000 	.word	0x42800000
 800101c:	0800a210 	.word	0x0800a210
 8001020:	20000290 	.word	0x20000290

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102a:	f000 fc8b 	bl	8001944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102e:	f000 f85d 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001032:	f000 f98d 	bl	8001350 <MX_GPIO_Init>
  MX_DMA_Init();
 8001036:	f000 f96b 	bl	8001310 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800103a:	f000 f93f 	bl	80012bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800103e:	f000 f8c1 	bl	80011c4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001042:	f000 f8ed 	bl	8001220 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	const uint8_t CTRL_REG1_data[2] = { 0b0100000, 0b00010111 };
 8001046:	f44f 53b9 	mov.w	r3, #5920	; 0x1720
 800104a:	81bb      	strh	r3, [r7, #12]
	const uint8_t CTRL_REG2_data[2] = { 0b0100001, 0b00000000 };
 800104c:	2321      	movs	r3, #33	; 0x21
 800104e:	813b      	strh	r3, [r7, #8]
	const uint8_t CTRL_REG4_data[2] = { 0b0100011, 0b00000000 };
 8001050:	2323      	movs	r3, #35	; 0x23
 8001052:	80bb      	strh	r3, [r7, #4]

	HAL_TIM_Base_Start_IT(&htim2);
 8001054:	4820      	ldr	r0, [pc, #128]	; (80010d8 <main+0xb4>)
 8001056:	f004 fcd7 	bl	8005a08 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//define which sensor is the one on the board and define correct parameters
	if (HAL_I2C_Master_Transmit(&hi2c1, device_addr, CTRL_REG1_data, sizeof(CTRL_REG1_data), 1000) != HAL_OK) {
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <main+0xb8>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b299      	uxth	r1, r3
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2302      	movs	r3, #2
 800106c:	481c      	ldr	r0, [pc, #112]	; (80010e0 <main+0xbc>)
 800106e:	f001 fcdf 	bl	8002a30 <HAL_I2C_Master_Transmit>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d019      	beq.n	80010ac <main+0x88>
		device_addr = 0b00110000;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <main+0xb8>)
 800107a:	2230      	movs	r2, #48	; 0x30
 800107c:	701a      	strb	r2, [r3, #0]
		if (HAL_I2C_Master_Transmit(&hi2c1, device_addr, CTRL_REG1_data, sizeof(CTRL_REG1_data), 1000) != HAL_OK) {
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <main+0xb8>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b299      	uxth	r1, r3
 8001084:	f107 020c 	add.w	r2, r7, #12
 8001088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2302      	movs	r3, #2
 8001090:	4813      	ldr	r0, [pc, #76]	; (80010e0 <main+0xbc>)
 8001092:	f001 fccd 	bl	8002a30 <HAL_I2C_Master_Transmit>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d007      	beq.n	80010ac <main+0x88>
			HAL_UART_Transmit(&huart2, (uint8_t*) "ERROR\n", 7, 100);
 800109c:	2364      	movs	r3, #100	; 0x64
 800109e:	2207      	movs	r2, #7
 80010a0:	4910      	ldr	r1, [pc, #64]	; (80010e4 <main+0xc0>)
 80010a2:	4811      	ldr	r0, [pc, #68]	; (80010e8 <main+0xc4>)
 80010a4:	f005 f8f3 	bl	800628e <HAL_UART_Transmit>

			Error_Handler();
 80010a8:	f000 f9c0 	bl	800142c <Error_Handler>
		}
	}

	HAL_I2C_Master_Transmit(&hi2c1, device_addr, CTRL_REG2_data, sizeof(CTRL_REG2_data), 50);
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <main+0xb8>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b299      	uxth	r1, r3
 80010b2:	f107 0208 	add.w	r2, r7, #8
 80010b6:	2332      	movs	r3, #50	; 0x32
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2302      	movs	r3, #2
 80010bc:	4808      	ldr	r0, [pc, #32]	; (80010e0 <main+0xbc>)
 80010be:	f001 fcb7 	bl	8002a30 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, device_addr, CTRL_REG4_data, sizeof(CTRL_REG4_data), 50);
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <main+0xb8>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b299      	uxth	r1, r3
 80010c8:	1d3a      	adds	r2, r7, #4
 80010ca:	2332      	movs	r3, #50	; 0x32
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2302      	movs	r3, #2
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <main+0xbc>)
 80010d2:	f001 fcad 	bl	8002a30 <HAL_I2C_Master_Transmit>

	while (1) {
 80010d6:	e7fe      	b.n	80010d6 <main+0xb2>
 80010d8:	20000248 	.word	0x20000248
 80010dc:	20000000 	.word	0x20000000
 80010e0:	200001f4 	.word	0x200001f4
 80010e4:	0800a230 	.word	0x0800a230
 80010e8:	20000290 	.word	0x20000290

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2230      	movs	r2, #48	; 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f006 ff83 	bl	8008006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	4b29      	ldr	r3, [pc, #164]	; (80011bc <SystemClock_Config+0xd0>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a28      	ldr	r2, [pc, #160]	; (80011bc <SystemClock_Config+0xd0>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <SystemClock_Config+0xd0>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <SystemClock_Config+0xd4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001138:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <SystemClock_Config+0xd4>)
 800113a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <SystemClock_Config+0xd4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114c:	2302      	movs	r3, #2
 800114e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001150:	2301      	movs	r3, #1
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001154:	2310      	movs	r3, #16
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001158:	2302      	movs	r3, #2
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115c:	2300      	movs	r3, #0
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001160:	2310      	movs	r3, #16
 8001162:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001164:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001168:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800116a:	2304      	movs	r3, #4
 800116c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800116e:	2307      	movs	r3, #7
 8001170:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	4618      	mov	r0, r3
 8001178:	f003 ff5e 	bl	8005038 <HAL_RCC_OscConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001182:	f000 f953 	bl	800142c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001186:	230f      	movs	r3, #15
 8001188:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118a:	2302      	movs	r3, #2
 800118c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2102      	movs	r1, #2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f004 f9c0 	bl	8005528 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011ae:	f000 f93d 	bl	800142c <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3750      	adds	r7, #80	; 0x50
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40007000 	.word	0x40007000

080011c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_I2C1_Init+0x50>)
 80011ca:	4a13      	ldr	r2, [pc, #76]	; (8001218 <MX_I2C1_Init+0x54>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_I2C1_Init+0x50>)
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_I2C1_Init+0x58>)
 80011d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_I2C1_Init+0x50>)
 80011e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <MX_I2C1_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_I2C1_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <MX_I2C1_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_I2C1_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_I2C1_Init+0x50>)
 8001202:	f001 fad1 	bl	80027a8 <HAL_I2C_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800120c:	f000 f90e 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200001f4 	.word	0x200001f4
 8001218:	40005400 	.word	0x40005400
 800121c:	000186a0 	.word	0x000186a0

08001220 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_TIM2_Init+0x98>)
 800123e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001242:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_TIM2_Init+0x98>)
 8001246:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800124a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_TIM2_Init+0x98>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_TIM2_Init+0x98>)
 8001254:	f242 720f 	movw	r2, #9999	; 0x270f
 8001258:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_TIM2_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_TIM2_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001266:	4814      	ldr	r0, [pc, #80]	; (80012b8 <MX_TIM2_Init+0x98>)
 8001268:	f004 fb7e 	bl	8005968 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001272:	f000 f8db 	bl	800142c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	4619      	mov	r1, r3
 8001282:	480d      	ldr	r0, [pc, #52]	; (80012b8 <MX_TIM2_Init+0x98>)
 8001284:	f004 fd2a 	bl	8005cdc <HAL_TIM_ConfigClockSource>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800128e:	f000 f8cd 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	; (80012b8 <MX_TIM2_Init+0x98>)
 80012a0:	f004 ff26 	bl	80060f0 <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012aa:	f000 f8bf 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000248 	.word	0x20000248

080012bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <MX_USART2_UART_Init+0x50>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_USART2_UART_Init+0x4c>)
 80012f4:	f004 ff7e 	bl	80061f4 <HAL_UART_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012fe:	f000 f895 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000290 	.word	0x20000290
 800130c:	40004400 	.word	0x40004400

08001310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_DMA_Init+0x3c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <MX_DMA_Init+0x3c>)
 8001320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_DMA_Init+0x3c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	2011      	movs	r0, #17
 8001338:	f000 fc51 	bl	8001bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800133c:	2011      	movs	r0, #17
 800133e:	f000 fc6a 	bl	8001c16 <HAL_NVIC_EnableIRQ>

}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <MX_GPIO_Init+0xd0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a2c      	ldr	r2, [pc, #176]	; (8001420 <MX_GPIO_Init+0xd0>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <MX_GPIO_Init+0xd0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <MX_GPIO_Init+0xd0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a25      	ldr	r2, [pc, #148]	; (8001420 <MX_GPIO_Init+0xd0>)
 800138c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <MX_GPIO_Init+0xd0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_GPIO_Init+0xd0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <MX_GPIO_Init+0xd0>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_GPIO_Init+0xd0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_GPIO_Init+0xd0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a17      	ldr	r2, [pc, #92]	; (8001420 <MX_GPIO_Init+0xd0>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_GPIO_Init+0xd0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2120      	movs	r1, #32
 80013da:	4812      	ldr	r0, [pc, #72]	; (8001424 <MX_GPIO_Init+0xd4>)
 80013dc:	f001 f9ca 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_GPIO_Init+0xd8>)
 80013f8:	f001 f838 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013fc:	2320      	movs	r3, #32
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	4804      	ldr	r0, [pc, #16]	; (8001424 <MX_GPIO_Init+0xd4>)
 8001414:	f001 f82a 	bl	800246c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40020000 	.word	0x40020000
 8001428:	40020800 	.word	0x40020800

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_MspInit+0x4c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_MspInit+0x4c>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_MspInit+0x4c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_MspInit+0x4c>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_MspInit+0x4c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001476:	2006      	movs	r0, #6
 8001478:	f000 fba6 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800

08001488 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a21      	ldr	r2, [pc, #132]	; (800152c <HAL_I2C_MspInit+0xa4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d13c      	bne.n	8001524 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <HAL_I2C_MspInit+0xa8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a1f      	ldr	r2, [pc, #124]	; (8001530 <HAL_I2C_MspInit+0xa8>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_I2C_MspInit+0xa8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014cc:	2312      	movs	r3, #18
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d8:	2304      	movs	r3, #4
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4814      	ldr	r0, [pc, #80]	; (8001534 <HAL_I2C_MspInit+0xac>)
 80014e4:	f000 ffc2 	bl	800246c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_I2C_MspInit+0xa8>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <HAL_I2C_MspInit+0xa8>)
 80014f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_I2C_MspInit+0xa8>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	201f      	movs	r0, #31
 800150a:	f000 fb68 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800150e:	201f      	movs	r0, #31
 8001510:	f000 fb81 	bl	8001c16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	2020      	movs	r0, #32
 800151a:	f000 fb60 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800151e:	2020      	movs	r0, #32
 8001520:	f000 fb79 	bl	8001c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	; 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40005400 	.word	0x40005400
 8001530:	40023800 	.word	0x40023800
 8001534:	40020400 	.word	0x40020400

08001538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001548:	d115      	bne.n	8001576 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_TIM_Base_MspInit+0x48>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <HAL_TIM_Base_MspInit+0x48>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_TIM_Base_MspInit+0x48>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	201c      	movs	r0, #28
 800156c:	f000 fb37 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001570:	201c      	movs	r0, #28
 8001572:	f000 fb50 	bl	8001c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a34      	ldr	r2, [pc, #208]	; (8001674 <HAL_UART_MspInit+0xf0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d161      	bne.n	800166a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b33      	ldr	r3, [pc, #204]	; (8001678 <HAL_UART_MspInit+0xf4>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a32      	ldr	r2, [pc, #200]	; (8001678 <HAL_UART_MspInit+0xf4>)
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b30      	ldr	r3, [pc, #192]	; (8001678 <HAL_UART_MspInit+0xf4>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <HAL_UART_MspInit+0xf4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a2b      	ldr	r2, [pc, #172]	; (8001678 <HAL_UART_MspInit+0xf4>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_UART_MspInit+0xf4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015de:	230c      	movs	r3, #12
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ee:	2307      	movs	r3, #7
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4820      	ldr	r0, [pc, #128]	; (800167c <HAL_UART_MspInit+0xf8>)
 80015fa:	f000 ff37 	bl	800246c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_UART_MspInit+0xfc>)
 8001600:	4a20      	ldr	r2, [pc, #128]	; (8001684 <HAL_UART_MspInit+0x100>)
 8001602:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_UART_MspInit+0xfc>)
 8001606:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800160a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800160c:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_UART_MspInit+0xfc>)
 800160e:	2240      	movs	r2, #64	; 0x40
 8001610:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_UART_MspInit+0xfc>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_UART_MspInit+0xfc>)
 800161a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800161e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_UART_MspInit+0xfc>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_UART_MspInit+0xfc>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_UART_MspInit+0xfc>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_UART_MspInit+0xfc>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_UART_MspInit+0xfc>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800163e:	4810      	ldr	r0, [pc, #64]	; (8001680 <HAL_UART_MspInit+0xfc>)
 8001640:	f000 fb04 	bl	8001c4c <HAL_DMA_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800164a:	f7ff feef 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <HAL_UART_MspInit+0xfc>)
 8001652:	635a      	str	r2, [r3, #52]	; 0x34
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_UART_MspInit+0xfc>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2101      	movs	r1, #1
 800165e:	2026      	movs	r0, #38	; 0x26
 8001660:	f000 fabd 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001664:	2026      	movs	r0, #38	; 0x26
 8001666:	f000 fad6 	bl	8001c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	; 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40004400 	.word	0x40004400
 8001678:	40023800 	.word	0x40023800
 800167c:	40020000 	.word	0x40020000
 8001680:	200002d4 	.word	0x200002d4
 8001684:	400260a0 	.word	0x400260a0

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800168c:	e7fe      	b.n	800168c <NMI_Handler+0x4>

0800168e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <MemManage_Handler+0x4>

0800169a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d4:	f000 f988 	bl	80019e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <DMA1_Stream6_IRQHandler+0x10>)
 80016e2:	f000 fc4b 	bl	8001f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200002d4 	.word	0x200002d4

080016f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <TIM2_IRQHandler+0x10>)
 80016f6:	f004 f9e9 	bl	8005acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000248 	.word	0x20000248

08001704 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <I2C1_EV_IRQHandler+0x10>)
 800170a:	f001 fcb5 	bl	8003078 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200001f4 	.word	0x200001f4

08001718 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <I2C1_ER_IRQHandler+0x10>)
 800171e:	f001 fdfe 	bl	800331e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200001f4 	.word	0x200001f4

0800172c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <USART2_IRQHandler+0x10>)
 8001732:	f004 febd 	bl	80064b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000290 	.word	0x20000290

08001740 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return 1;
 8001744:	2301      	movs	r3, #1
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_kill>:

int _kill(int pid, int sig)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800175a:	f006 fca7 	bl	80080ac <__errno>
 800175e:	4603      	mov	r3, r0
 8001760:	2216      	movs	r2, #22
 8001762:	601a      	str	r2, [r3, #0]
  return -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_exit>:

void _exit (int status)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ffe7 	bl	8001750 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001782:	e7fe      	b.n	8001782 <_exit+0x12>

08001784 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e00a      	b.n	80017ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001796:	f3af 8000 	nop.w
 800179a:	4601      	mov	r1, r0
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60ba      	str	r2, [r7, #8]
 80017a2:	b2ca      	uxtb	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbf0      	blt.n	8001796 <_read+0x12>
  }

  return len;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e009      	b.n	80017e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbf1      	blt.n	80017d0 <_write+0x12>
  }
  return len;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_close>:

int _close(int file)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800181e:	605a      	str	r2, [r3, #4]
  return 0;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_isatty>:

int _isatty(int file)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001868:	4a14      	ldr	r2, [pc, #80]	; (80018bc <_sbrk+0x5c>)
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <_sbrk+0x60>)
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <_sbrk+0x64>)
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <_sbrk+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	429a      	cmp	r2, r3
 800188e:	d207      	bcs.n	80018a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001890:	f006 fc0c 	bl	80080ac <__errno>
 8001894:	4603      	mov	r3, r0
 8001896:	220c      	movs	r2, #12
 8001898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	e009      	b.n	80018b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <_sbrk+0x64>)
 80018b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20018000 	.word	0x20018000
 80018c0:	00000400 	.word	0x00000400
 80018c4:	20000334 	.word	0x20000334
 80018c8:	20000488 	.word	0x20000488

080018cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <SystemInit+0x20>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d6:	4a05      	ldr	r2, [pc, #20]	; (80018ec <SystemInit+0x20>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001928 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f4:	480d      	ldr	r0, [pc, #52]	; (800192c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018f6:	490e      	ldr	r1, [pc, #56]	; (8001930 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018f8:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018fc:	e002      	b.n	8001904 <LoopCopyDataInit>

080018fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001902:	3304      	adds	r3, #4

08001904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001908:	d3f9      	bcc.n	80018fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190a:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800190c:	4c0b      	ldr	r4, [pc, #44]	; (800193c <LoopFillZerobss+0x26>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001910:	e001      	b.n	8001916 <LoopFillZerobss>

08001912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001914:	3204      	adds	r2, #4

08001916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001918:	d3fb      	bcc.n	8001912 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800191a:	f7ff ffd7 	bl	80018cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800191e:	f006 fbcb 	bl	80080b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001922:	f7ff fb7f 	bl	8001024 <main>
  bx  lr    
 8001926:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001928:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800192c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001930:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001934:	0800a5dc 	.word	0x0800a5dc
  ldr r2, =_sbss
 8001938:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800193c:	20000488 	.word	0x20000488

08001940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC_IRQHandler>
	...

08001944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001948:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <HAL_Init+0x40>)
 800194e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <HAL_Init+0x40>)
 800195a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <HAL_Init+0x40>)
 8001966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196c:	2003      	movs	r0, #3
 800196e:	f000 f92b 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001972:	2000      	movs	r0, #0
 8001974:	f000 f808 	bl	8001988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001978:	f7ff fd5e 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023c00 	.word	0x40023c00

08001988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_InitTick+0x54>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_InitTick+0x58>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199e:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f943 	bl	8001c32 <HAL_SYSTICK_Config>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00e      	b.n	80019d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d80a      	bhi.n	80019d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019bc:	2200      	movs	r2, #0
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f000 f90b 	bl	8001bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c8:	4a06      	ldr	r2, [pc, #24]	; (80019e4 <HAL_InitTick+0x5c>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e000      	b.n	80019d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000004 	.word	0x20000004
 80019e0:	2000000c 	.word	0x2000000c
 80019e4:	20000008 	.word	0x20000008

080019e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_IncTick+0x20>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_IncTick+0x24>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_IncTick+0x24>)
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	2000000c 	.word	0x2000000c
 8001a0c:	20000338 	.word	0x20000338

08001a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_GetTick+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000338 	.word	0x20000338

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <__NVIC_GetPriorityGrouping+0x18>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 0307 	and.w	r3, r3, #7
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db0b      	blt.n	8001ab6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	4907      	ldr	r1, [pc, #28]	; (8001ac4 <__NVIC_EnableIRQ+0x38>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	2001      	movs	r0, #1
 8001aae:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	; (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	; (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f7ff ff8e 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff29 	bl	8001a28 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf0:	f7ff ff3e 	bl	8001a70 <__NVIC_GetPriorityGrouping>
 8001bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	6978      	ldr	r0, [r7, #20]
 8001bfc:	f7ff ff8e 	bl	8001b1c <NVIC_EncodePriority>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff5d 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff31 	bl	8001a8c <__NVIC_EnableIRQ>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffa2 	bl	8001b84 <SysTick_Config>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff feda 	bl	8001a10 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e099      	b.n	8001d9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0201 	bic.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c88:	e00f      	b.n	8001caa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c8a:	f7ff fec1 	bl	8001a10 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b05      	cmp	r3, #5
 8001c96:	d908      	bls.n	8001caa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e078      	b.n	8001d9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1e8      	bne.n	8001c8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	4b38      	ldr	r3, [pc, #224]	; (8001da4 <HAL_DMA_Init+0x158>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d107      	bne.n	8001d14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f023 0307 	bic.w	r3, r3, #7
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d117      	bne.n	8001d6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00e      	beq.n	8001d6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fb0f 	bl	8002374 <DMA_CheckFifoParam>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2240      	movs	r2, #64	; 0x40
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e016      	b.n	8001d9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fac6 	bl	8002308 <DMA_CalcBaseAndBitshift>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d84:	223f      	movs	r2, #63	; 0x3f
 8001d86:	409a      	lsls	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	f010803f 	.word	0xf010803f

08001da8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_DMA_Start_IT+0x26>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e040      	b.n	8001e50 <HAL_DMA_Start_IT+0xa8>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d12f      	bne.n	8001e42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2202      	movs	r2, #2
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 fa58 	bl	80022ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	223f      	movs	r2, #63	; 0x3f
 8001e02:	409a      	lsls	r2, r3
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0216 	orr.w	r2, r2, #22
 8001e16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0208 	orr.w	r2, r2, #8
 8001e2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e005      	b.n	8001e4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e66:	f7ff fdd3 	bl	8001a10 <HAL_GetTick>
 8001e6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d008      	beq.n	8001e8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2280      	movs	r2, #128	; 0x80
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e052      	b.n	8001f30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0216 	bic.w	r2, r2, #22
 8001e98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ea8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d103      	bne.n	8001eba <HAL_DMA_Abort+0x62>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0208 	bic.w	r2, r2, #8
 8001ec8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eda:	e013      	b.n	8001f04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001edc:	f7ff fd98 	bl	8001a10 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b05      	cmp	r3, #5
 8001ee8:	d90c      	bls.n	8001f04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2220      	movs	r2, #32
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e015      	b.n	8001f30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1e4      	bne.n	8001edc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	223f      	movs	r2, #63	; 0x3f
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d004      	beq.n	8001f56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2280      	movs	r2, #128	; 0x80
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00c      	b.n	8001f70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2205      	movs	r2, #5
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f88:	4b8e      	ldr	r3, [pc, #568]	; (80021c4 <HAL_DMA_IRQHandler+0x248>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a8e      	ldr	r2, [pc, #568]	; (80021c8 <HAL_DMA_IRQHandler+0x24c>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	0a9b      	lsrs	r3, r3, #10
 8001f94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d01a      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0204 	bic.w	r2, r2, #4
 8001fce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe0:	f043 0201 	orr.w	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fec:	2201      	movs	r2, #1
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d012      	beq.n	800201e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	2201      	movs	r2, #1
 800200c:	409a      	lsls	r2, r3
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002016:	f043 0202 	orr.w	r2, r3, #2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	2204      	movs	r2, #4
 8002024:	409a      	lsls	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d012      	beq.n	8002054 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00b      	beq.n	8002054 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	2204      	movs	r2, #4
 8002042:	409a      	lsls	r2, r3
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204c:	f043 0204 	orr.w	r2, r3, #4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2210      	movs	r2, #16
 800205a:	409a      	lsls	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d043      	beq.n	80020ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d03c      	beq.n	80020ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	2210      	movs	r2, #16
 8002078:	409a      	lsls	r2, r3
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d018      	beq.n	80020be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d108      	bne.n	80020ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d024      	beq.n	80020ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	4798      	blx	r3
 80020aa:	e01f      	b.n	80020ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01b      	beq.n	80020ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	4798      	blx	r3
 80020bc:	e016      	b.n	80020ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d107      	bne.n	80020dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0208 	bic.w	r2, r2, #8
 80020da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	2220      	movs	r2, #32
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 808f 	beq.w	800221c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8087 	beq.w	800221c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	2220      	movs	r2, #32
 8002114:	409a      	lsls	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b05      	cmp	r3, #5
 8002124:	d136      	bne.n	8002194 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0216 	bic.w	r2, r2, #22
 8002134:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002144:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <HAL_DMA_IRQHandler+0x1da>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0208 	bic.w	r2, r2, #8
 8002164:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	223f      	movs	r2, #63	; 0x3f
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002186:	2b00      	cmp	r3, #0
 8002188:	d07e      	beq.n	8002288 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	4798      	blx	r3
        }
        return;
 8002192:	e079      	b.n	8002288 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d01d      	beq.n	80021de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10d      	bne.n	80021cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d031      	beq.n	800221c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
 80021c0:	e02c      	b.n	800221c <HAL_DMA_IRQHandler+0x2a0>
 80021c2:	bf00      	nop
 80021c4:	20000004 	.word	0x20000004
 80021c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d023      	beq.n	800221c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
 80021dc:	e01e      	b.n	800221c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10f      	bne.n	800220c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0210 	bic.w	r2, r2, #16
 80021fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002220:	2b00      	cmp	r3, #0
 8002222:	d032      	beq.n	800228a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d022      	beq.n	8002276 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2205      	movs	r2, #5
 8002234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	3301      	adds	r3, #1
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	429a      	cmp	r2, r3
 8002252:	d307      	bcc.n	8002264 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f2      	bne.n	8002248 <HAL_DMA_IRQHandler+0x2cc>
 8002262:	e000      	b.n	8002266 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002264:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
 8002286:	e000      	b.n	800228a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002288:	bf00      	nop
    }
  }
}
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800229e:	b2db      	uxtb	r3, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b40      	cmp	r3, #64	; 0x40
 80022d8:	d108      	bne.n	80022ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022ea:	e007      	b.n	80022fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	60da      	str	r2, [r3, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	3b10      	subs	r3, #16
 8002318:	4a14      	ldr	r2, [pc, #80]	; (800236c <DMA_CalcBaseAndBitshift+0x64>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002322:	4a13      	ldr	r2, [pc, #76]	; (8002370 <DMA_CalcBaseAndBitshift+0x68>)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b03      	cmp	r3, #3
 8002334:	d909      	bls.n	800234a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800233e:	f023 0303 	bic.w	r3, r3, #3
 8002342:	1d1a      	adds	r2, r3, #4
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	659a      	str	r2, [r3, #88]	; 0x58
 8002348:	e007      	b.n	800235a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	aaaaaaab 	.word	0xaaaaaaab
 8002370:	0800a250 	.word	0x0800a250

08002374 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d11f      	bne.n	80023ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b03      	cmp	r3, #3
 8002392:	d856      	bhi.n	8002442 <DMA_CheckFifoParam+0xce>
 8002394:	a201      	add	r2, pc, #4	; (adr r2, 800239c <DMA_CheckFifoParam+0x28>)
 8002396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239a:	bf00      	nop
 800239c:	080023ad 	.word	0x080023ad
 80023a0:	080023bf 	.word	0x080023bf
 80023a4:	080023ad 	.word	0x080023ad
 80023a8:	08002443 	.word	0x08002443
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d046      	beq.n	8002446 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023bc:	e043      	b.n	8002446 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023c6:	d140      	bne.n	800244a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023cc:	e03d      	b.n	800244a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d6:	d121      	bne.n	800241c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d837      	bhi.n	800244e <DMA_CheckFifoParam+0xda>
 80023de:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <DMA_CheckFifoParam+0x70>)
 80023e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e4:	080023f5 	.word	0x080023f5
 80023e8:	080023fb 	.word	0x080023fb
 80023ec:	080023f5 	.word	0x080023f5
 80023f0:	0800240d 	.word	0x0800240d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
      break;
 80023f8:	e030      	b.n	800245c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d025      	beq.n	8002452 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800240a:	e022      	b.n	8002452 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002414:	d11f      	bne.n	8002456 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800241a:	e01c      	b.n	8002456 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d903      	bls.n	800242a <DMA_CheckFifoParam+0xb6>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d003      	beq.n	8002430 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002428:	e018      	b.n	800245c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
      break;
 800242e:	e015      	b.n	800245c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00e      	beq.n	800245a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
      break;
 8002440:	e00b      	b.n	800245a <DMA_CheckFifoParam+0xe6>
      break;
 8002442:	bf00      	nop
 8002444:	e00a      	b.n	800245c <DMA_CheckFifoParam+0xe8>
      break;
 8002446:	bf00      	nop
 8002448:	e008      	b.n	800245c <DMA_CheckFifoParam+0xe8>
      break;
 800244a:	bf00      	nop
 800244c:	e006      	b.n	800245c <DMA_CheckFifoParam+0xe8>
      break;
 800244e:	bf00      	nop
 8002450:	e004      	b.n	800245c <DMA_CheckFifoParam+0xe8>
      break;
 8002452:	bf00      	nop
 8002454:	e002      	b.n	800245c <DMA_CheckFifoParam+0xe8>
      break;   
 8002456:	bf00      	nop
 8002458:	e000      	b.n	800245c <DMA_CheckFifoParam+0xe8>
      break;
 800245a:	bf00      	nop
    }
  } 
  
  return status; 
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop

0800246c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	e159      	b.n	800273c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002488:	2201      	movs	r2, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	f040 8148 	bne.w	8002736 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d005      	beq.n	80024be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d130      	bne.n	8002520 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	2203      	movs	r2, #3
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f4:	2201      	movs	r2, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 0201 	and.w	r2, r3, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b03      	cmp	r3, #3
 800252a:	d017      	beq.n	800255c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d123      	bne.n	80025b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	08da      	lsrs	r2, r3, #3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3208      	adds	r2, #8
 8002570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	220f      	movs	r2, #15
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	08da      	lsrs	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3208      	adds	r2, #8
 80025aa:	69b9      	ldr	r1, [r7, #24]
 80025ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0203 	and.w	r2, r3, #3
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80a2 	beq.w	8002736 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b57      	ldr	r3, [pc, #348]	; (8002754 <HAL_GPIO_Init+0x2e8>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	4a56      	ldr	r2, [pc, #344]	; (8002754 <HAL_GPIO_Init+0x2e8>)
 80025fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002600:	6453      	str	r3, [r2, #68]	; 0x44
 8002602:	4b54      	ldr	r3, [pc, #336]	; (8002754 <HAL_GPIO_Init+0x2e8>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800260e:	4a52      	ldr	r2, [pc, #328]	; (8002758 <HAL_GPIO_Init+0x2ec>)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	3302      	adds	r3, #2
 8002616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	220f      	movs	r2, #15
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a49      	ldr	r2, [pc, #292]	; (800275c <HAL_GPIO_Init+0x2f0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d019      	beq.n	800266e <HAL_GPIO_Init+0x202>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a48      	ldr	r2, [pc, #288]	; (8002760 <HAL_GPIO_Init+0x2f4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <HAL_GPIO_Init+0x1fe>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a47      	ldr	r2, [pc, #284]	; (8002764 <HAL_GPIO_Init+0x2f8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00d      	beq.n	8002666 <HAL_GPIO_Init+0x1fa>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a46      	ldr	r2, [pc, #280]	; (8002768 <HAL_GPIO_Init+0x2fc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d007      	beq.n	8002662 <HAL_GPIO_Init+0x1f6>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a45      	ldr	r2, [pc, #276]	; (800276c <HAL_GPIO_Init+0x300>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <HAL_GPIO_Init+0x1f2>
 800265a:	2304      	movs	r3, #4
 800265c:	e008      	b.n	8002670 <HAL_GPIO_Init+0x204>
 800265e:	2307      	movs	r3, #7
 8002660:	e006      	b.n	8002670 <HAL_GPIO_Init+0x204>
 8002662:	2303      	movs	r3, #3
 8002664:	e004      	b.n	8002670 <HAL_GPIO_Init+0x204>
 8002666:	2302      	movs	r3, #2
 8002668:	e002      	b.n	8002670 <HAL_GPIO_Init+0x204>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_GPIO_Init+0x204>
 800266e:	2300      	movs	r3, #0
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	f002 0203 	and.w	r2, r2, #3
 8002676:	0092      	lsls	r2, r2, #2
 8002678:	4093      	lsls	r3, r2
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002680:	4935      	ldr	r1, [pc, #212]	; (8002758 <HAL_GPIO_Init+0x2ec>)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	3302      	adds	r3, #2
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268e:	4b38      	ldr	r3, [pc, #224]	; (8002770 <HAL_GPIO_Init+0x304>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026b2:	4a2f      	ldr	r2, [pc, #188]	; (8002770 <HAL_GPIO_Init+0x304>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b8:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <HAL_GPIO_Init+0x304>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026dc:	4a24      	ldr	r2, [pc, #144]	; (8002770 <HAL_GPIO_Init+0x304>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026e2:	4b23      	ldr	r3, [pc, #140]	; (8002770 <HAL_GPIO_Init+0x304>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002706:	4a1a      	ldr	r2, [pc, #104]	; (8002770 <HAL_GPIO_Init+0x304>)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <HAL_GPIO_Init+0x304>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002730:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <HAL_GPIO_Init+0x304>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3301      	adds	r3, #1
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b0f      	cmp	r3, #15
 8002740:	f67f aea2 	bls.w	8002488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3724      	adds	r7, #36	; 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	40013800 	.word	0x40013800
 800275c:	40020000 	.word	0x40020000
 8002760:	40020400 	.word	0x40020400
 8002764:	40020800 	.word	0x40020800
 8002768:	40020c00 	.word	0x40020c00
 800276c:	40021000 	.word	0x40021000
 8002770:	40013c00 	.word	0x40013c00

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002790:	e003      	b.n	800279a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	041a      	lsls	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e12b      	b.n	8002a12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe fe5a 	bl	8001488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	; 0x24
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800280a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800280c:	f003 f884 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 8002810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a81      	ldr	r2, [pc, #516]	; (8002a1c <HAL_I2C_Init+0x274>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d807      	bhi.n	800282c <HAL_I2C_Init+0x84>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4a80      	ldr	r2, [pc, #512]	; (8002a20 <HAL_I2C_Init+0x278>)
 8002820:	4293      	cmp	r3, r2
 8002822:	bf94      	ite	ls
 8002824:	2301      	movls	r3, #1
 8002826:	2300      	movhi	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e006      	b.n	800283a <HAL_I2C_Init+0x92>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a7d      	ldr	r2, [pc, #500]	; (8002a24 <HAL_I2C_Init+0x27c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	bf94      	ite	ls
 8002834:	2301      	movls	r3, #1
 8002836:	2300      	movhi	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0e7      	b.n	8002a12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a78      	ldr	r2, [pc, #480]	; (8002a28 <HAL_I2C_Init+0x280>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0c9b      	lsrs	r3, r3, #18
 800284c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a6a      	ldr	r2, [pc, #424]	; (8002a1c <HAL_I2C_Init+0x274>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d802      	bhi.n	800287c <HAL_I2C_Init+0xd4>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	3301      	adds	r3, #1
 800287a:	e009      	b.n	8002890 <HAL_I2C_Init+0xe8>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	4a69      	ldr	r2, [pc, #420]	; (8002a2c <HAL_I2C_Init+0x284>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	099b      	lsrs	r3, r3, #6
 800288e:	3301      	adds	r3, #1
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	430b      	orrs	r3, r1
 8002896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	495c      	ldr	r1, [pc, #368]	; (8002a1c <HAL_I2C_Init+0x274>)
 80028ac:	428b      	cmp	r3, r1
 80028ae:	d819      	bhi.n	80028e4 <HAL_I2C_Init+0x13c>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1e59      	subs	r1, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80028be:	1c59      	adds	r1, r3, #1
 80028c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028c4:	400b      	ands	r3, r1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_I2C_Init+0x138>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1e59      	subs	r1, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028d8:	3301      	adds	r3, #1
 80028da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028de:	e051      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 80028e0:	2304      	movs	r3, #4
 80028e2:	e04f      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d111      	bne.n	8002910 <HAL_I2C_Init+0x168>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1e58      	subs	r0, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	440b      	add	r3, r1
 80028fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fe:	3301      	adds	r3, #1
 8002900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e012      	b.n	8002936 <HAL_I2C_Init+0x18e>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1e58      	subs	r0, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	0099      	lsls	r1, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	fbb0 f3f3 	udiv	r3, r0, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Init+0x196>
 800293a:	2301      	movs	r3, #1
 800293c:	e022      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10e      	bne.n	8002964 <HAL_I2C_Init+0x1bc>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1e58      	subs	r0, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	440b      	add	r3, r1
 8002954:	fbb0 f3f3 	udiv	r3, r0, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002962:	e00f      	b.n	8002984 <HAL_I2C_Init+0x1dc>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1e58      	subs	r0, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	0099      	lsls	r1, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	fbb0 f3f3 	udiv	r3, r0, r3
 800297a:	3301      	adds	r3, #1
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	6809      	ldr	r1, [r1, #0]
 8002988:	4313      	orrs	r3, r2
 800298a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6911      	ldr	r1, [r2, #16]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68d2      	ldr	r2, [r2, #12]
 80029be:	4311      	orrs	r1, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	000186a0 	.word	0x000186a0
 8002a20:	001e847f 	.word	0x001e847f
 8002a24:	003d08ff 	.word	0x003d08ff
 8002a28:	431bde83 	.word	0x431bde83
 8002a2c:	10624dd3 	.word	0x10624dd3

08002a30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	817b      	strh	r3, [r7, #10]
 8002a40:	4613      	mov	r3, r2
 8002a42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7fe ffe4 	bl	8001a10 <HAL_GetTick>
 8002a48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	f040 80e0 	bne.w	8002c18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2319      	movs	r3, #25
 8002a5e:	2201      	movs	r2, #1
 8002a60:	4970      	ldr	r1, [pc, #448]	; (8002c24 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f002 f8be 	bl	8004be4 <I2C_WaitOnFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e0d3      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_I2C_Master_Transmit+0x50>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e0cc      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d007      	beq.n	8002aa6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2221      	movs	r2, #33	; 0x21
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	893a      	ldrh	r2, [r7, #8]
 8002ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4a50      	ldr	r2, [pc, #320]	; (8002c28 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ae6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ae8:	8979      	ldrh	r1, [r7, #10]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	6a3a      	ldr	r2, [r7, #32]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f001 fe80 	bl	80047f4 <I2C_MasterRequestWrite>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e08d      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b14:	e066      	b.n	8002be4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	6a39      	ldr	r1, [r7, #32]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f002 f938 	bl	8004d90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d107      	bne.n	8002b3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e06b      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	781a      	ldrb	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_I2C_Master_Transmit+0x188>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d017      	beq.n	8002bb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	6a39      	ldr	r1, [r7, #32]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f002 f928 	bl	8004e12 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d107      	bne.n	8002be0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e01a      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d194      	bne.n	8002b16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e000      	b.n	8002c1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c18:	2302      	movs	r3, #2
  }
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	00100002 	.word	0x00100002
 8002c28:	ffff0000 	.word	0xffff0000

08002c2c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08c      	sub	sp, #48	; 0x30
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	461a      	mov	r2, r3
 8002c38:	460b      	mov	r3, r1
 8002c3a:	817b      	strh	r3, [r7, #10]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7fe fee6 	bl	8001a10 <HAL_GetTick>
 8002c44:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	f040 820b 	bne.w	800306a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2319      	movs	r3, #25
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	497c      	ldr	r1, [pc, #496]	; (8002e50 <HAL_I2C_Master_Receive+0x224>)
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f001 ffc0 	bl	8004be4 <I2C_WaitOnFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e1fe      	b.n	800306c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_I2C_Master_Receive+0x50>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e1f7      	b.n	800306c <HAL_I2C_Master_Receive+0x440>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d007      	beq.n	8002ca2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2222      	movs	r2, #34	; 0x22
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	893a      	ldrh	r2, [r7, #8]
 8002cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4a5c      	ldr	r2, [pc, #368]	; (8002e54 <HAL_I2C_Master_Receive+0x228>)
 8002ce2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ce4:	8979      	ldrh	r1, [r7, #10]
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f001 fe04 	bl	80048f8 <I2C_MasterRequestRead>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e1b8      	b.n	800306c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d113      	bne.n	8002d2a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d02:	2300      	movs	r3, #0
 8002d04:	623b      	str	r3, [r7, #32]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	623b      	str	r3, [r7, #32]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	623b      	str	r3, [r7, #32]
 8002d16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e18c      	b.n	8003044 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d11b      	bne.n	8002d6a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	e16c      	b.n	8003044 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d11b      	bne.n	8002daa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	e14c      	b.n	8003044 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002db8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002dd0:	e138      	b.n	8003044 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	f200 80f1 	bhi.w	8002fbe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d123      	bne.n	8002e2c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f002 f885 	bl	8004ef8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e139      	b.n	800306c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e2a:	e10b      	b.n	8003044 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d14e      	bne.n	8002ed2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	4906      	ldr	r1, [pc, #24]	; (8002e58 <HAL_I2C_Master_Receive+0x22c>)
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f001 fed0 	bl	8004be4 <I2C_WaitOnFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e10e      	b.n	800306c <HAL_I2C_Master_Receive+0x440>
 8002e4e:	bf00      	nop
 8002e50:	00100002 	.word	0x00100002
 8002e54:	ffff0000 	.word	0xffff0000
 8002e58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ed0:	e0b8      	b.n	8003044 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	2200      	movs	r2, #0
 8002eda:	4966      	ldr	r1, [pc, #408]	; (8003074 <HAL_I2C_Master_Receive+0x448>)
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f001 fe81 	bl	8004be4 <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0bf      	b.n	800306c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	2200      	movs	r2, #0
 8002f36:	494f      	ldr	r1, [pc, #316]	; (8003074 <HAL_I2C_Master_Receive+0x448>)
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f001 fe53 	bl	8004be4 <I2C_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e091      	b.n	800306c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fbc:	e042      	b.n	8003044 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f001 ff98 	bl	8004ef8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e04c      	b.n	800306c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d118      	bne.n	8003044 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	f47f aec2 	bne.w	8002dd2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	e000      	b.n	800306c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800306a:	2302      	movs	r3, #2
  }
}
 800306c:	4618      	mov	r0, r3
 800306e:	3728      	adds	r7, #40	; 0x28
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	00010004 	.word	0x00010004

08003078 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003098:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d003      	beq.n	80030b0 <HAL_I2C_EV_IRQHandler+0x38>
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b40      	cmp	r3, #64	; 0x40
 80030ac:	f040 80b1 	bne.w	8003212 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10d      	bne.n	80030e6 <HAL_I2C_EV_IRQHandler+0x6e>
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80030d0:	d003      	beq.n	80030da <HAL_I2C_EV_IRQHandler+0x62>
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80030d8:	d101      	bne.n	80030de <HAL_I2C_EV_IRQHandler+0x66>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <HAL_I2C_EV_IRQHandler+0x68>
 80030de:	2300      	movs	r3, #0
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	f000 8114 	beq.w	800330e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00b      	beq.n	8003108 <HAL_I2C_EV_IRQHandler+0x90>
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f001 ff81 	bl	8005002 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fd5e 	bl	8003bc2 <I2C_Master_SB>
 8003106:	e083      	b.n	8003210 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_I2C_EV_IRQHandler+0xac>
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fdd6 	bl	8003cce <I2C_Master_ADD10>
 8003122:	e075      	b.n	8003210 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_I2C_EV_IRQHandler+0xc8>
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fdf2 	bl	8003d22 <I2C_Master_ADDR>
 800313e:	e067      	b.n	8003210 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d036      	beq.n	80031b8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003158:	f000 80db 	beq.w	8003312 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <HAL_I2C_EV_IRQHandler+0x10a>
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_I2C_EV_IRQHandler+0x10a>
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9d6 	bl	800352c <I2C_MasterTransmit_TXE>
 8003180:	e046      	b.n	8003210 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80c2 	beq.w	8003312 <HAL_I2C_EV_IRQHandler+0x29a>
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80bc 	beq.w	8003312 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800319a:	7bbb      	ldrb	r3, [r7, #14]
 800319c:	2b21      	cmp	r3, #33	; 0x21
 800319e:	d103      	bne.n	80031a8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fa5f 	bl	8003664 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031a6:	e0b4      	b.n	8003312 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	2b40      	cmp	r3, #64	; 0x40
 80031ac:	f040 80b1 	bne.w	8003312 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 facd 	bl	8003750 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031b6:	e0ac      	b.n	8003312 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c6:	f000 80a4 	beq.w	8003312 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00d      	beq.n	80031f0 <HAL_I2C_EV_IRQHandler+0x178>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_I2C_EV_IRQHandler+0x178>
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d103      	bne.n	80031f0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fb45 	bl	8003878 <I2C_MasterReceive_RXNE>
 80031ee:	e00f      	b.n	8003210 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 808b 	beq.w	8003312 <HAL_I2C_EV_IRQHandler+0x29a>
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8085 	beq.w	8003312 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fbf0 	bl	80039ee <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800320e:	e080      	b.n	8003312 <HAL_I2C_EV_IRQHandler+0x29a>
 8003210:	e07f      	b.n	8003312 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d004      	beq.n	8003224 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	e007      	b.n	8003234 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d011      	beq.n	8003262 <HAL_I2C_EV_IRQHandler+0x1ea>
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00c      	beq.n	8003262 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003258:	69b9      	ldr	r1, [r7, #24]
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 ffb0 	bl	80041c0 <I2C_Slave_ADDR>
 8003260:	e05a      	b.n	8003318 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_I2C_EV_IRQHandler+0x206>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 ffea 	bl	8004250 <I2C_Slave_STOPF>
 800327c:	e04c      	b.n	8003318 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800327e:	7bbb      	ldrb	r3, [r7, #14]
 8003280:	2b21      	cmp	r3, #33	; 0x21
 8003282:	d002      	beq.n	800328a <HAL_I2C_EV_IRQHandler+0x212>
 8003284:	7bbb      	ldrb	r3, [r7, #14]
 8003286:	2b29      	cmp	r3, #41	; 0x29
 8003288:	d120      	bne.n	80032cc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00d      	beq.n	80032b0 <HAL_I2C_EV_IRQHandler+0x238>
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329a:	2b00      	cmp	r3, #0
 800329c:	d008      	beq.n	80032b0 <HAL_I2C_EV_IRQHandler+0x238>
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d103      	bne.n	80032b0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fecb 	bl	8004044 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ae:	e032      	b.n	8003316 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d02d      	beq.n	8003316 <HAL_I2C_EV_IRQHandler+0x29e>
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d028      	beq.n	8003316 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fefa 	bl	80040be <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ca:	e024      	b.n	8003316 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <HAL_I2C_EV_IRQHandler+0x27a>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_I2C_EV_IRQHandler+0x27a>
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d103      	bne.n	80032f2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 ff08 	bl	8004100 <I2C_SlaveReceive_RXNE>
 80032f0:	e012      	b.n	8003318 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <HAL_I2C_EV_IRQHandler+0x2a0>
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 ff38 	bl	800417c <I2C_SlaveReceive_BTF>
 800330c:	e004      	b.n	8003318 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800330e:	bf00      	nop
 8003310:	e002      	b.n	8003318 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003316:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b08a      	sub	sp, #40	; 0x28
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003340:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00d      	beq.n	8003368 <HAL_I2C_ER_IRQHandler+0x4a>
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003366:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00d      	beq.n	800338e <HAL_I2C_ER_IRQHandler+0x70>
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	f043 0302 	orr.w	r3, r3, #2
 8003382:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800338c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003394:	2b00      	cmp	r3, #0
 8003396:	d03e      	beq.n	8003416 <HAL_I2C_ER_IRQHandler+0xf8>
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d039      	beq.n	8003416 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80033a2:	7efb      	ldrb	r3, [r7, #27]
 80033a4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80033bc:	7ebb      	ldrb	r3, [r7, #26]
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d112      	bne.n	80033e8 <HAL_I2C_ER_IRQHandler+0xca>
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10f      	bne.n	80033e8 <HAL_I2C_ER_IRQHandler+0xca>
 80033c8:	7cfb      	ldrb	r3, [r7, #19]
 80033ca:	2b21      	cmp	r3, #33	; 0x21
 80033cc:	d008      	beq.n	80033e0 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80033ce:	7cfb      	ldrb	r3, [r7, #19]
 80033d0:	2b29      	cmp	r3, #41	; 0x29
 80033d2:	d005      	beq.n	80033e0 <HAL_I2C_ER_IRQHandler+0xc2>
 80033d4:	7cfb      	ldrb	r3, [r7, #19]
 80033d6:	2b28      	cmp	r3, #40	; 0x28
 80033d8:	d106      	bne.n	80033e8 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b21      	cmp	r3, #33	; 0x21
 80033de:	d103      	bne.n	80033e8 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f001 f865 	bl	80044b0 <I2C_Slave_AF>
 80033e6:	e016      	b.n	8003416 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033f0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033fa:	7efb      	ldrb	r3, [r7, #27]
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d002      	beq.n	8003406 <HAL_I2C_ER_IRQHandler+0xe8>
 8003400:	7efb      	ldrb	r3, [r7, #27]
 8003402:	2b40      	cmp	r3, #64	; 0x40
 8003404:	d107      	bne.n	8003416 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003414:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00d      	beq.n	800343c <HAL_I2C_ER_IRQHandler+0x11e>
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	f043 0308 	orr.w	r3, r3, #8
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800343a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f001 f89e 	bl	8004590 <I2C_ITError>
  }
}
 8003454:	bf00      	nop
 8003456:	3728      	adds	r7, #40	; 0x28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	70fb      	strb	r3, [r7, #3]
 80034b8:	4613      	mov	r3, r2
 80034ba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003542:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	2b00      	cmp	r3, #0
 8003550:	d150      	bne.n	80035f4 <I2C_MasterTransmit_TXE+0xc8>
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b21      	cmp	r3, #33	; 0x21
 8003556:	d14d      	bne.n	80035f4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b08      	cmp	r3, #8
 800355c:	d01d      	beq.n	800359a <I2C_MasterTransmit_TXE+0x6e>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b20      	cmp	r3, #32
 8003562:	d01a      	beq.n	800359a <I2C_MasterTransmit_TXE+0x6e>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800356a:	d016      	beq.n	800359a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800357a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2211      	movs	r2, #17
 8003580:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ff62 	bl	800345c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003598:	e060      	b.n	800365c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035a8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b40      	cmp	r3, #64	; 0x40
 80035d2:	d107      	bne.n	80035e4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff7d 	bl	80034dc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035e2:	e03b      	b.n	800365c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff ff35 	bl	800345c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035f2:	e033      	b.n	800365c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	2b21      	cmp	r3, #33	; 0x21
 80035f8:	d005      	beq.n	8003606 <I2C_MasterTransmit_TXE+0xda>
 80035fa:	7bbb      	ldrb	r3, [r7, #14]
 80035fc:	2b40      	cmp	r3, #64	; 0x40
 80035fe:	d12d      	bne.n	800365c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b22      	cmp	r3, #34	; 0x22
 8003604:	d12a      	bne.n	800365c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d108      	bne.n	8003622 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003620:	e01c      	b.n	800365c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d103      	bne.n	8003636 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f88e 	bl	8003750 <I2C_MemoryTransmit_TXE_BTF>
}
 8003634:	e012      	b.n	800365c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	781a      	ldrb	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800365a:	e7ff      	b.n	800365c <I2C_MasterTransmit_TXE+0x130>
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b21      	cmp	r3, #33	; 0x21
 800367c:	d164      	bne.n	8003748 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d012      	beq.n	80036ae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80036ac:	e04c      	b.n	8003748 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d01d      	beq.n	80036f0 <I2C_MasterTransmit_BTF+0x8c>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d01a      	beq.n	80036f0 <I2C_MasterTransmit_BTF+0x8c>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036c0:	d016      	beq.n	80036f0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036d0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2211      	movs	r2, #17
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff feb7 	bl	800345c <HAL_I2C_MasterTxCpltCallback>
}
 80036ee:	e02b      	b.n	8003748 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036fe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800370e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d107      	bne.n	800373a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fed2 	bl	80034dc <HAL_I2C_MemTxCpltCallback>
}
 8003738:	e006      	b.n	8003748 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff fe8a 	bl	800345c <HAL_I2C_MasterTxCpltCallback>
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003764:	2b00      	cmp	r3, #0
 8003766:	d11d      	bne.n	80037a4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d10b      	bne.n	8003788 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003774:	b2da      	uxtb	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003780:	1c9a      	adds	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003786:	e073      	b.n	8003870 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378c:	b29b      	uxth	r3, r3
 800378e:	121b      	asrs	r3, r3, #8
 8003790:	b2da      	uxtb	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037a2:	e065      	b.n	8003870 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d10b      	bne.n	80037c4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037c2:	e055      	b.n	8003870 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d151      	bne.n	8003870 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b22      	cmp	r3, #34	; 0x22
 80037d0:	d10d      	bne.n	80037ee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037ec:	e040      	b.n	8003870 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d015      	beq.n	8003824 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	2b21      	cmp	r3, #33	; 0x21
 80037fc:	d112      	bne.n	8003824 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003822:	e025      	b.n	8003870 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d120      	bne.n	8003870 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	2b21      	cmp	r3, #33	; 0x21
 8003832:	d11d      	bne.n	8003870 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003842:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003852:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff fe36 	bl	80034dc <HAL_I2C_MemTxCpltCallback>
}
 8003870:	bf00      	nop
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b22      	cmp	r3, #34	; 0x22
 800388a:	f040 80ac 	bne.w	80039e6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b03      	cmp	r3, #3
 800389a:	d921      	bls.n	80038e0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	f040 808c 	bne.w	80039e6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038dc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80038de:	e082      	b.n	80039e6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d075      	beq.n	80039d4 <I2C_MasterReceive_RXNE+0x15c>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d002      	beq.n	80038f4 <I2C_MasterReceive_RXNE+0x7c>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d16f      	bne.n	80039d4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f001 facd 	bl	8004e94 <I2C_WaitOnSTOPRequestThroughIT>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d142      	bne.n	8003986 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800391e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d10a      	bne.n	8003970 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff fdc1 	bl	80034f0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800396e:	e03a      	b.n	80039e6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2212      	movs	r2, #18
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff fd76 	bl	8003470 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003984:	e02f      	b.n	80039e6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003994:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff fd99 	bl	8003504 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039d2:	e008      	b.n	80039e6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e2:	605a      	str	r2, [r3, #4]
}
 80039e4:	e7ff      	b.n	80039e6 <I2C_MasterReceive_RXNE+0x16e>
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d11b      	bne.n	8003a3e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a14:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003a3c:	e0bd      	b.n	8003bba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d129      	bne.n	8003a9c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a56:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d00a      	beq.n	8003a74 <I2C_MasterReceive_BTF+0x86>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d007      	beq.n	8003a74 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a72:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a9a:	e08e      	b.n	8003bba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d176      	bne.n	8003b94 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d002      	beq.n	8003ab2 <I2C_MasterReceive_BTF+0xc4>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d108      	bne.n	8003ac4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e019      	b.n	8003af8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d002      	beq.n	8003ad0 <I2C_MasterReceive_BTF+0xe2>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d108      	bne.n	8003ae2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e00a      	b.n	8003af8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d007      	beq.n	8003af8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b52:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b40      	cmp	r3, #64	; 0x40
 8003b66:	d10a      	bne.n	8003b7e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fcba 	bl	80034f0 <HAL_I2C_MemRxCpltCallback>
}
 8003b7c:	e01d      	b.n	8003bba <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2212      	movs	r2, #18
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff fc6f 	bl	8003470 <HAL_I2C_MasterRxCpltCallback>
}
 8003b92:	e012      	b.n	8003bba <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b40      	cmp	r3, #64	; 0x40
 8003bd4:	d117      	bne.n	8003c06 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	461a      	mov	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bee:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003bf0:	e067      	b.n	8003cc2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	611a      	str	r2, [r3, #16]
}
 8003c04:	e05d      	b.n	8003cc2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0e:	d133      	bne.n	8003c78 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b21      	cmp	r3, #33	; 0x21
 8003c1a:	d109      	bne.n	8003c30 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c2c:	611a      	str	r2, [r3, #16]
 8003c2e:	e008      	b.n	8003c42 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d004      	beq.n	8003c54 <I2C_Master_SB+0x92>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d108      	bne.n	8003c66 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d032      	beq.n	8003cc2 <I2C_Master_SB+0x100>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d02d      	beq.n	8003cc2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c74:	605a      	str	r2, [r3, #4]
}
 8003c76:	e024      	b.n	8003cc2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10e      	bne.n	8003c9e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	11db      	asrs	r3, r3, #7
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f003 0306 	and.w	r3, r3, #6
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f063 030f 	orn	r3, r3, #15
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	611a      	str	r2, [r3, #16]
}
 8003c9c:	e011      	b.n	8003cc2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d10d      	bne.n	8003cc2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	11db      	asrs	r3, r3, #7
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f003 0306 	and.w	r3, r3, #6
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f063 030e 	orn	r3, r3, #14
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	611a      	str	r2, [r3, #16]
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d004      	beq.n	8003cf4 <I2C_Master_ADD10+0x26>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d108      	bne.n	8003d06 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00c      	beq.n	8003d16 <I2C_Master_ADD10+0x48>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d14:	605a      	str	r2, [r3, #4]
  }
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b091      	sub	sp, #68	; 0x44
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b22      	cmp	r3, #34	; 0x22
 8003d4a:	f040 8169 	bne.w	8004020 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <I2C_Master_ADDR+0x54>
 8003d56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d5a:	2b40      	cmp	r3, #64	; 0x40
 8003d5c:	d10b      	bne.n	8003d76 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	633b      	str	r3, [r7, #48]	; 0x30
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	633b      	str	r3, [r7, #48]	; 0x30
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	633b      	str	r3, [r7, #48]	; 0x30
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	e160      	b.n	8004038 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11d      	bne.n	8003dba <I2C_Master_ADDR+0x98>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d86:	d118      	bne.n	8003dba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d88:	2300      	movs	r3, #0
 8003d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	651a      	str	r2, [r3, #80]	; 0x50
 8003db8:	e13e      	b.n	8004038 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d113      	bne.n	8003dec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e115      	b.n	8004018 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	f040 808a 	bne.w	8003f0c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dfe:	d137      	bne.n	8003e70 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1e:	d113      	bne.n	8003e48 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e2e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e30:	2300      	movs	r3, #0
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	e0e7      	b.n	8004018 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	623b      	str	r3, [r7, #32]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	623b      	str	r3, [r7, #32]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	623b      	str	r3, [r7, #32]
 8003e5c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e0d3      	b.n	8004018 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d02e      	beq.n	8003ed4 <I2C_Master_ADDR+0x1b2>
 8003e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d02b      	beq.n	8003ed4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7e:	2b12      	cmp	r3, #18
 8003e80:	d102      	bne.n	8003e88 <I2C_Master_ADDR+0x166>
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d125      	bne.n	8003ed4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d00e      	beq.n	8003eac <I2C_Master_ADDR+0x18a>
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d00b      	beq.n	8003eac <I2C_Master_ADDR+0x18a>
 8003e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e96:	2b10      	cmp	r3, #16
 8003e98:	d008      	beq.n	8003eac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e007      	b.n	8003ebc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	61fb      	str	r3, [r7, #28]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	e0a1      	b.n	8004018 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61bb      	str	r3, [r7, #24]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	61bb      	str	r3, [r7, #24]
 8003ef8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	e085      	b.n	8004018 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d14d      	bne.n	8003fb2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d016      	beq.n	8003f4a <I2C_Master_ADDR+0x228>
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d013      	beq.n	8003f4a <I2C_Master_ADDR+0x228>
 8003f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d010      	beq.n	8003f4a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f36:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	e007      	b.n	8003f5a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f58:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f68:	d117      	bne.n	8003f9a <I2C_Master_ADDR+0x278>
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f70:	d00b      	beq.n	8003f8a <I2C_Master_ADDR+0x268>
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d008      	beq.n	8003f8a <I2C_Master_ADDR+0x268>
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d005      	beq.n	8003f8a <I2C_Master_ADDR+0x268>
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	2b10      	cmp	r3, #16
 8003f82:	d002      	beq.n	8003f8a <I2C_Master_ADDR+0x268>
 8003f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d107      	bne.n	8003f9a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f98:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	e032      	b.n	8004018 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fc0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd0:	d117      	bne.n	8004002 <I2C_Master_ADDR+0x2e0>
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fd8:	d00b      	beq.n	8003ff2 <I2C_Master_ADDR+0x2d0>
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d008      	beq.n	8003ff2 <I2C_Master_ADDR+0x2d0>
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d005      	beq.n	8003ff2 <I2C_Master_ADDR+0x2d0>
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d002      	beq.n	8003ff2 <I2C_Master_ADDR+0x2d0>
 8003fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d107      	bne.n	8004002 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004000:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004002:	2300      	movs	r3, #0
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	613b      	str	r3, [r7, #16]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800401e:	e00b      	b.n	8004038 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
}
 8004036:	e7ff      	b.n	8004038 <I2C_Master_ADDR+0x316>
 8004038:	bf00      	nop
 800403a:	3744      	adds	r7, #68	; 0x44
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004052:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d02b      	beq.n	80040b6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	781a      	ldrb	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d114      	bne.n	80040b6 <I2C_SlaveTransmit_TXE+0x72>
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	2b29      	cmp	r3, #41	; 0x29
 8004090:	d111      	bne.n	80040b6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2221      	movs	r2, #33	; 0x21
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2228      	movs	r2, #40	; 0x28
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff f9e7 	bl	8003484 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040b6:	bf00      	nop
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d011      	beq.n	80040f4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	781a      	ldrb	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d02c      	beq.n	8004174 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d114      	bne.n	8004174 <I2C_SlaveReceive_RXNE+0x74>
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	2b2a      	cmp	r3, #42	; 0x2a
 800414e:	d111      	bne.n	8004174 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2222      	movs	r2, #34	; 0x22
 8004164:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2228      	movs	r2, #40	; 0x28
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff f992 	bl	8003498 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d012      	beq.n	80041b4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041da:	2b28      	cmp	r3, #40	; 0x28
 80041dc:	d125      	bne.n	800422a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ec:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	81bb      	strh	r3, [r7, #12]
 800420c:	e002      	b.n	8004214 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800421c:	89ba      	ldrh	r2, [r7, #12]
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	4619      	mov	r1, r3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff f942 	bl	80034ac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004228:	e00e      	b.n	8004248 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800426e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004270:	2300      	movs	r3, #0
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800429c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ac:	d172      	bne.n	8004394 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b22      	cmp	r3, #34	; 0x22
 80042b2:	d002      	beq.n	80042ba <I2C_Slave_STOPF+0x6a>
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b2a      	cmp	r3, #42	; 0x2a
 80042b8:	d135      	bne.n	8004326 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f043 0204 	orr.w	r2, r3, #4
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fd ffcc 	bl	8002290 <HAL_DMA_GetState>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d049      	beq.n	8004392 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	4a69      	ldr	r2, [pc, #420]	; (80044a8 <I2C_Slave_STOPF+0x258>)
 8004304:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430a:	4618      	mov	r0, r3
 800430c:	f7fd fe14 	bl	8001f38 <HAL_DMA_Abort_IT>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d03d      	beq.n	8004392 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004320:	4610      	mov	r0, r2
 8004322:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004324:	e035      	b.n	8004392 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	b29a      	uxth	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0204 	orr.w	r2, r3, #4
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004358:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435e:	4618      	mov	r0, r3
 8004360:	f7fd ff96 	bl	8002290 <HAL_DMA_GetState>
 8004364:	4603      	mov	r3, r0
 8004366:	2b01      	cmp	r3, #1
 8004368:	d014      	beq.n	8004394 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436e:	4a4e      	ldr	r2, [pc, #312]	; (80044a8 <I2C_Slave_STOPF+0x258>)
 8004370:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004376:	4618      	mov	r0, r3
 8004378:	f7fd fdde 	bl	8001f38 <HAL_DMA_Abort_IT>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800438c:	4610      	mov	r0, r2
 800438e:	4798      	blx	r3
 8004390:	e000      	b.n	8004394 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004392:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d03e      	beq.n	800441c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d112      	bne.n	80043d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d112      	bne.n	8004406 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f043 0204 	orr.w	r2, r3, #4
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f8b3 	bl	8004590 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800442a:	e039      	b.n	80044a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b2a      	cmp	r3, #42	; 0x2a
 8004430:	d109      	bne.n	8004446 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2228      	movs	r2, #40	; 0x28
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff f829 	bl	8003498 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b28      	cmp	r3, #40	; 0x28
 8004450:	d111      	bne.n	8004476 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <I2C_Slave_STOPF+0x25c>)
 8004456:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff f82a 	bl	80034c8 <HAL_I2C_ListenCpltCallback>
}
 8004474:	e014      	b.n	80044a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	2b22      	cmp	r3, #34	; 0x22
 800447c:	d002      	beq.n	8004484 <I2C_Slave_STOPF+0x234>
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	2b22      	cmp	r3, #34	; 0x22
 8004482:	d10d      	bne.n	80044a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fe fffc 	bl	8003498 <HAL_I2C_SlaveRxCpltCallback>
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	08004a95 	.word	0x08004a95
 80044ac:	ffff0000 	.word	0xffff0000

080044b0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044be:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d002      	beq.n	80044d2 <I2C_Slave_AF+0x22>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d129      	bne.n	8004526 <I2C_Slave_AF+0x76>
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b28      	cmp	r3, #40	; 0x28
 80044d6:	d126      	bne.n	8004526 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a2c      	ldr	r2, [pc, #176]	; (800458c <I2C_Slave_AF+0xdc>)
 80044dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044ec:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044f6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004506:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fe ffd2 	bl	80034c8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004524:	e02e      	b.n	8004584 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	2b21      	cmp	r3, #33	; 0x21
 800452a:	d126      	bne.n	800457a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a17      	ldr	r2, [pc, #92]	; (800458c <I2C_Slave_AF+0xdc>)
 8004530:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2221      	movs	r2, #33	; 0x21
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004556:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004560:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004570:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fe ff86 	bl	8003484 <HAL_I2C_SlaveTxCpltCallback>
}
 8004578:	e004      	b.n	8004584 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004582:	615a      	str	r2, [r3, #20]
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	ffff0000 	.word	0xffff0000

08004590 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045a8:	7bbb      	ldrb	r3, [r7, #14]
 80045aa:	2b10      	cmp	r3, #16
 80045ac:	d002      	beq.n	80045b4 <I2C_ITError+0x24>
 80045ae:	7bbb      	ldrb	r3, [r7, #14]
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d10a      	bne.n	80045ca <I2C_ITError+0x3a>
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b22      	cmp	r3, #34	; 0x22
 80045b8:	d107      	bne.n	80045ca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045d0:	2b28      	cmp	r3, #40	; 0x28
 80045d2:	d107      	bne.n	80045e4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2228      	movs	r2, #40	; 0x28
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045e2:	e015      	b.n	8004610 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f2:	d00a      	beq.n	800460a <I2C_ITError+0x7a>
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b60      	cmp	r3, #96	; 0x60
 80045f8:	d007      	beq.n	800460a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800461a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461e:	d162      	bne.n	80046e6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800462e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b01      	cmp	r3, #1
 800463c:	d020      	beq.n	8004680 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004642:	4a6a      	ldr	r2, [pc, #424]	; (80047ec <I2C_ITError+0x25c>)
 8004644:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464a:	4618      	mov	r0, r3
 800464c:	f7fd fc74 	bl	8001f38 <HAL_DMA_Abort_IT>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 8089 	beq.w	800476a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800467a:	4610      	mov	r0, r2
 800467c:	4798      	blx	r3
 800467e:	e074      	b.n	800476a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	4a59      	ldr	r2, [pc, #356]	; (80047ec <I2C_ITError+0x25c>)
 8004686:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	4618      	mov	r0, r3
 800468e:	f7fd fc53 	bl	8001f38 <HAL_DMA_Abort_IT>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d068      	beq.n	800476a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a2:	2b40      	cmp	r3, #64	; 0x40
 80046a4:	d10b      	bne.n	80046be <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046e0:	4610      	mov	r0, r2
 80046e2:	4798      	blx	r3
 80046e4:	e041      	b.n	800476a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b60      	cmp	r3, #96	; 0x60
 80046f0:	d125      	bne.n	800473e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d10b      	bne.n	8004726 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0201 	bic.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fe feee 	bl	8003518 <HAL_I2C_AbortCpltCallback>
 800473c:	e015      	b.n	800476a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b40      	cmp	r3, #64	; 0x40
 800474a:	d10b      	bne.n	8004764 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7fe fecd 	bl	8003504 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10e      	bne.n	8004798 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004780:	2b00      	cmp	r3, #0
 8004782:	d109      	bne.n	8004798 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800478a:	2b00      	cmp	r3, #0
 800478c:	d104      	bne.n	8004798 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047a6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d113      	bne.n	80047e4 <I2C_ITError+0x254>
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b28      	cmp	r3, #40	; 0x28
 80047c0:	d110      	bne.n	80047e4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a0a      	ldr	r2, [pc, #40]	; (80047f0 <I2C_ITError+0x260>)
 80047c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fe fe72 	bl	80034c8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	08004a95 	.word	0x08004a95
 80047f0:	ffff0000 	.word	0xffff0000

080047f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	460b      	mov	r3, r1
 8004802:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d006      	beq.n	800481e <I2C_MasterRequestWrite+0x2a>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d003      	beq.n	800481e <I2C_MasterRequestWrite+0x2a>
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800481c:	d108      	bne.n	8004830 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	e00b      	b.n	8004848 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	2b12      	cmp	r3, #18
 8004836:	d107      	bne.n	8004848 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004846:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f9c5 	bl	8004be4 <I2C_WaitOnFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00d      	beq.n	800487c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486e:	d103      	bne.n	8004878 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004876:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e035      	b.n	80048e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004884:	d108      	bne.n	8004898 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004886:	897b      	ldrh	r3, [r7, #10]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004894:	611a      	str	r2, [r3, #16]
 8004896:	e01b      	b.n	80048d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004898:	897b      	ldrh	r3, [r7, #10]
 800489a:	11db      	asrs	r3, r3, #7
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f003 0306 	and.w	r3, r3, #6
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	f063 030f 	orn	r3, r3, #15
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	490e      	ldr	r1, [pc, #56]	; (80048f0 <I2C_MasterRequestWrite+0xfc>)
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f9eb 	bl	8004c92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e010      	b.n	80048e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048c6:	897b      	ldrh	r3, [r7, #10]
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4907      	ldr	r1, [pc, #28]	; (80048f4 <I2C_MasterRequestWrite+0x100>)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f9db 	bl	8004c92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	00010008 	.word	0x00010008
 80048f4:	00010002 	.word	0x00010002

080048f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	607a      	str	r2, [r7, #4]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	460b      	mov	r3, r1
 8004906:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800491c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b08      	cmp	r3, #8
 8004922:	d006      	beq.n	8004932 <I2C_MasterRequestRead+0x3a>
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d003      	beq.n	8004932 <I2C_MasterRequestRead+0x3a>
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004930:	d108      	bne.n	8004944 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	e00b      	b.n	800495c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	2b11      	cmp	r3, #17
 800494a:	d107      	bne.n	800495c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800495a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f93b 	bl	8004be4 <I2C_WaitOnFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00d      	beq.n	8004990 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004982:	d103      	bne.n	800498c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800498a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e079      	b.n	8004a84 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004998:	d108      	bne.n	80049ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800499a:	897b      	ldrh	r3, [r7, #10]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	f043 0301 	orr.w	r3, r3, #1
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	611a      	str	r2, [r3, #16]
 80049aa:	e05f      	b.n	8004a6c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049ac:	897b      	ldrh	r3, [r7, #10]
 80049ae:	11db      	asrs	r3, r3, #7
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	f003 0306 	and.w	r3, r3, #6
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f063 030f 	orn	r3, r3, #15
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4930      	ldr	r1, [pc, #192]	; (8004a8c <I2C_MasterRequestRead+0x194>)
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f961 	bl	8004c92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e054      	b.n	8004a84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049da:	897b      	ldrh	r3, [r7, #10]
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	4929      	ldr	r1, [pc, #164]	; (8004a90 <I2C_MasterRequestRead+0x198>)
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f951 	bl	8004c92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e044      	b.n	8004a84 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fa:	2300      	movs	r3, #0
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a1e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f8d9 	bl	8004be4 <I2C_WaitOnFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00d      	beq.n	8004a54 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a46:	d103      	bne.n	8004a50 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e017      	b.n	8004a84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a54:	897b      	ldrh	r3, [r7, #10]
 8004a56:	11db      	asrs	r3, r3, #7
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f003 0306 	and.w	r3, r3, #6
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f063 030e 	orn	r3, r3, #14
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4907      	ldr	r1, [pc, #28]	; (8004a90 <I2C_MasterRequestRead+0x198>)
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f90d 	bl	8004c92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	00010008 	.word	0x00010008
 8004a90:	00010002 	.word	0x00010002

08004a94 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004aae:	4b4b      	ldr	r3, [pc, #300]	; (8004bdc <I2C_DMAAbort+0x148>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	08db      	lsrs	r3, r3, #3
 8004ab4:	4a4a      	ldr	r2, [pc, #296]	; (8004be0 <I2C_DMAAbort+0x14c>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	0a1a      	lsrs	r2, r3, #8
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	00da      	lsls	r2, r3, #3
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004ada:	e00a      	b.n	8004af2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af0:	d0ea      	beq.n	8004ac8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afe:	2200      	movs	r2, #0
 8004b00:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	2200      	movs	r2, #0
 8004b10:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b20:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2200      	movs	r2, #0
 8004b26:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b34:	2200      	movs	r2, #0
 8004b36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	2200      	movs	r2, #0
 8004b46:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0201 	bic.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b60      	cmp	r3, #96	; 0x60
 8004b62:	d10e      	bne.n	8004b82 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2200      	movs	r2, #0
 8004b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b7a:	6978      	ldr	r0, [r7, #20]
 8004b7c:	f7fe fccc 	bl	8003518 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b80:	e027      	b.n	8004bd2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b82:	7cfb      	ldrb	r3, [r7, #19]
 8004b84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b88:	2b28      	cmp	r3, #40	; 0x28
 8004b8a:	d117      	bne.n	8004bbc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004baa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2228      	movs	r2, #40	; 0x28
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bba:	e007      	b.n	8004bcc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004bcc:	6978      	ldr	r0, [r7, #20]
 8004bce:	f7fe fc99 	bl	8003504 <HAL_I2C_ErrorCallback>
}
 8004bd2:	bf00      	nop
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000004 	.word	0x20000004
 8004be0:	14f8b589 	.word	0x14f8b589

08004be4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf4:	e025      	b.n	8004c42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d021      	beq.n	8004c42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfe:	f7fc ff07 	bl	8001a10 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d302      	bcc.n	8004c14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d116      	bne.n	8004c42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e023      	b.n	8004c8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	0c1b      	lsrs	r3, r3, #16
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d10d      	bne.n	8004c68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	43da      	mvns	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4013      	ands	r3, r2
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bf0c      	ite	eq
 8004c5e:	2301      	moveq	r3, #1
 8004c60:	2300      	movne	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	461a      	mov	r2, r3
 8004c66:	e00c      	b.n	8004c82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4013      	ands	r3, r2
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bf0c      	ite	eq
 8004c7a:	2301      	moveq	r3, #1
 8004c7c:	2300      	movne	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d0b6      	beq.n	8004bf6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b084      	sub	sp, #16
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
 8004c9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ca0:	e051      	b.n	8004d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb0:	d123      	bne.n	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f043 0204 	orr.w	r2, r3, #4
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e046      	b.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d00:	d021      	beq.n	8004d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d02:	f7fc fe85 	bl	8001a10 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d302      	bcc.n	8004d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d116      	bne.n	8004d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f043 0220 	orr.w	r2, r3, #32
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e020      	b.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	0c1b      	lsrs	r3, r3, #16
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d10c      	bne.n	8004d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	43da      	mvns	r2, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bf14      	ite	ne
 8004d62:	2301      	movne	r3, #1
 8004d64:	2300      	moveq	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	e00b      	b.n	8004d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	43da      	mvns	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4013      	ands	r3, r2
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf14      	ite	ne
 8004d7c:	2301      	movne	r3, #1
 8004d7e:	2300      	moveq	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d18d      	bne.n	8004ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d9c:	e02d      	b.n	8004dfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f900 	bl	8004fa4 <I2C_IsAcknowledgeFailed>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e02d      	b.n	8004e0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	d021      	beq.n	8004dfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db6:	f7fc fe2b 	bl	8001a10 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d302      	bcc.n	8004dcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d116      	bne.n	8004dfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f043 0220 	orr.w	r2, r3, #32
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e007      	b.n	8004e0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e04:	2b80      	cmp	r3, #128	; 0x80
 8004e06:	d1ca      	bne.n	8004d9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e1e:	e02d      	b.n	8004e7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 f8bf 	bl	8004fa4 <I2C_IsAcknowledgeFailed>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e02d      	b.n	8004e8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e36:	d021      	beq.n	8004e7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e38:	f7fc fdea 	bl	8001a10 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d302      	bcc.n	8004e4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d116      	bne.n	8004e7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	f043 0220 	orr.w	r2, r3, #32
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e007      	b.n	8004e8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d1ca      	bne.n	8004e20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ea0:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	08db      	lsrs	r3, r3, #3
 8004ea6:	4a13      	ldr	r2, [pc, #76]	; (8004ef4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eac:	0a1a      	lsrs	r2, r3, #8
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d107      	bne.n	8004ed2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f043 0220 	orr.w	r2, r3, #32
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e008      	b.n	8004ee4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee0:	d0e9      	beq.n	8004eb6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	20000004 	.word	0x20000004
 8004ef4:	14f8b589 	.word	0x14f8b589

08004ef8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f04:	e042      	b.n	8004f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d119      	bne.n	8004f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0210 	mvn.w	r2, #16
 8004f1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e029      	b.n	8004f9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f48:	f7fc fd62 	bl	8001a10 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d302      	bcc.n	8004f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d116      	bne.n	8004f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	f043 0220 	orr.w	r2, r3, #32
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e007      	b.n	8004f9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d1b5      	bne.n	8004f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fba:	d11b      	bne.n	8004ff4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	f043 0204 	orr.w	r2, r3, #4
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005012:	d103      	bne.n	800501c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800501a:	e007      	b.n	800502c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005024:	d102      	bne.n	800502c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2208      	movs	r2, #8
 800502a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e267      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d075      	beq.n	8005142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005056:	4b88      	ldr	r3, [pc, #544]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
 800505e:	2b04      	cmp	r3, #4
 8005060:	d00c      	beq.n	800507c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005062:	4b85      	ldr	r3, [pc, #532]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800506a:	2b08      	cmp	r3, #8
 800506c:	d112      	bne.n	8005094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800506e:	4b82      	ldr	r3, [pc, #520]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800507a:	d10b      	bne.n	8005094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800507c:	4b7e      	ldr	r3, [pc, #504]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d05b      	beq.n	8005140 <HAL_RCC_OscConfig+0x108>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d157      	bne.n	8005140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e242      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800509c:	d106      	bne.n	80050ac <HAL_RCC_OscConfig+0x74>
 800509e:	4b76      	ldr	r3, [pc, #472]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a75      	ldr	r2, [pc, #468]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e01d      	b.n	80050e8 <HAL_RCC_OscConfig+0xb0>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x98>
 80050b6:	4b70      	ldr	r3, [pc, #448]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a6f      	ldr	r2, [pc, #444]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	4b6d      	ldr	r3, [pc, #436]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a6c      	ldr	r2, [pc, #432]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e00b      	b.n	80050e8 <HAL_RCC_OscConfig+0xb0>
 80050d0:	4b69      	ldr	r3, [pc, #420]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a68      	ldr	r2, [pc, #416]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	4b66      	ldr	r3, [pc, #408]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a65      	ldr	r2, [pc, #404]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d013      	beq.n	8005118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f0:	f7fc fc8e 	bl	8001a10 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050f8:	f7fc fc8a 	bl	8001a10 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b64      	cmp	r3, #100	; 0x64
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e207      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510a:	4b5b      	ldr	r3, [pc, #364]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0xc0>
 8005116:	e014      	b.n	8005142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005118:	f7fc fc7a 	bl	8001a10 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005120:	f7fc fc76 	bl	8001a10 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b64      	cmp	r3, #100	; 0x64
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e1f3      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005132:	4b51      	ldr	r3, [pc, #324]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0xe8>
 800513e:	e000      	b.n	8005142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d063      	beq.n	8005216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800514e:	4b4a      	ldr	r3, [pc, #296]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00b      	beq.n	8005172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800515a:	4b47      	ldr	r3, [pc, #284]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005162:	2b08      	cmp	r3, #8
 8005164:	d11c      	bne.n	80051a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005166:	4b44      	ldr	r3, [pc, #272]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d116      	bne.n	80051a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005172:	4b41      	ldr	r3, [pc, #260]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <HAL_RCC_OscConfig+0x152>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d001      	beq.n	800518a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e1c7      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518a:	4b3b      	ldr	r3, [pc, #236]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4937      	ldr	r1, [pc, #220]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 800519a:	4313      	orrs	r3, r2
 800519c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800519e:	e03a      	b.n	8005216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d020      	beq.n	80051ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051a8:	4b34      	ldr	r3, [pc, #208]	; (800527c <HAL_RCC_OscConfig+0x244>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ae:	f7fc fc2f 	bl	8001a10 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051b6:	f7fc fc2b 	bl	8001a10 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e1a8      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c8:	4b2b      	ldr	r3, [pc, #172]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d4:	4b28      	ldr	r3, [pc, #160]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4925      	ldr	r1, [pc, #148]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	600b      	str	r3, [r1, #0]
 80051e8:	e015      	b.n	8005216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ea:	4b24      	ldr	r3, [pc, #144]	; (800527c <HAL_RCC_OscConfig+0x244>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fc fc0e 	bl	8001a10 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051f8:	f7fc fc0a 	bl	8001a10 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e187      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520a:	4b1b      	ldr	r3, [pc, #108]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d036      	beq.n	8005290 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d016      	beq.n	8005258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800522a:	4b15      	ldr	r3, [pc, #84]	; (8005280 <HAL_RCC_OscConfig+0x248>)
 800522c:	2201      	movs	r2, #1
 800522e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005230:	f7fc fbee 	bl	8001a10 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005238:	f7fc fbea 	bl	8001a10 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e167      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800524a:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 800524c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <HAL_RCC_OscConfig+0x200>
 8005256:	e01b      	b.n	8005290 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005258:	4b09      	ldr	r3, [pc, #36]	; (8005280 <HAL_RCC_OscConfig+0x248>)
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800525e:	f7fc fbd7 	bl	8001a10 <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005264:	e00e      	b.n	8005284 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005266:	f7fc fbd3 	bl	8001a10 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d907      	bls.n	8005284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e150      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
 8005278:	40023800 	.word	0x40023800
 800527c:	42470000 	.word	0x42470000
 8005280:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005284:	4b88      	ldr	r3, [pc, #544]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1ea      	bne.n	8005266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 8097 	beq.w	80053cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800529e:	2300      	movs	r3, #0
 80052a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a2:	4b81      	ldr	r3, [pc, #516]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10f      	bne.n	80052ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	4b7d      	ldr	r3, [pc, #500]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	4a7c      	ldr	r2, [pc, #496]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80052b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052bc:	6413      	str	r3, [r2, #64]	; 0x40
 80052be:	4b7a      	ldr	r3, [pc, #488]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c6:	60bb      	str	r3, [r7, #8]
 80052c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ca:	2301      	movs	r3, #1
 80052cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ce:	4b77      	ldr	r3, [pc, #476]	; (80054ac <HAL_RCC_OscConfig+0x474>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d118      	bne.n	800530c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052da:	4b74      	ldr	r3, [pc, #464]	; (80054ac <HAL_RCC_OscConfig+0x474>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a73      	ldr	r2, [pc, #460]	; (80054ac <HAL_RCC_OscConfig+0x474>)
 80052e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052e6:	f7fc fb93 	bl	8001a10 <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ec:	e008      	b.n	8005300 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ee:	f7fc fb8f 	bl	8001a10 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e10c      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005300:	4b6a      	ldr	r3, [pc, #424]	; (80054ac <HAL_RCC_OscConfig+0x474>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0f0      	beq.n	80052ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d106      	bne.n	8005322 <HAL_RCC_OscConfig+0x2ea>
 8005314:	4b64      	ldr	r3, [pc, #400]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005318:	4a63      	ldr	r2, [pc, #396]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	6713      	str	r3, [r2, #112]	; 0x70
 8005320:	e01c      	b.n	800535c <HAL_RCC_OscConfig+0x324>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b05      	cmp	r3, #5
 8005328:	d10c      	bne.n	8005344 <HAL_RCC_OscConfig+0x30c>
 800532a:	4b5f      	ldr	r3, [pc, #380]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 800532c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532e:	4a5e      	ldr	r2, [pc, #376]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005330:	f043 0304 	orr.w	r3, r3, #4
 8005334:	6713      	str	r3, [r2, #112]	; 0x70
 8005336:	4b5c      	ldr	r3, [pc, #368]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533a:	4a5b      	ldr	r2, [pc, #364]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	6713      	str	r3, [r2, #112]	; 0x70
 8005342:	e00b      	b.n	800535c <HAL_RCC_OscConfig+0x324>
 8005344:	4b58      	ldr	r3, [pc, #352]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005348:	4a57      	ldr	r2, [pc, #348]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 800534a:	f023 0301 	bic.w	r3, r3, #1
 800534e:	6713      	str	r3, [r2, #112]	; 0x70
 8005350:	4b55      	ldr	r3, [pc, #340]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005354:	4a54      	ldr	r2, [pc, #336]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005356:	f023 0304 	bic.w	r3, r3, #4
 800535a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d015      	beq.n	8005390 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005364:	f7fc fb54 	bl	8001a10 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536a:	e00a      	b.n	8005382 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800536c:	f7fc fb50 	bl	8001a10 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	f241 3288 	movw	r2, #5000	; 0x1388
 800537a:	4293      	cmp	r3, r2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e0cb      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005382:	4b49      	ldr	r3, [pc, #292]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0ee      	beq.n	800536c <HAL_RCC_OscConfig+0x334>
 800538e:	e014      	b.n	80053ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005390:	f7fc fb3e 	bl	8001a10 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005396:	e00a      	b.n	80053ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005398:	f7fc fb3a 	bl	8001a10 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e0b5      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ae:	4b3e      	ldr	r3, [pc, #248]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1ee      	bne.n	8005398 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d105      	bne.n	80053cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c0:	4b39      	ldr	r3, [pc, #228]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	4a38      	ldr	r2, [pc, #224]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80053c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 80a1 	beq.w	8005518 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053d6:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
 80053de:	2b08      	cmp	r3, #8
 80053e0:	d05c      	beq.n	800549c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d141      	bne.n	800546e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ea:	4b31      	ldr	r3, [pc, #196]	; (80054b0 <HAL_RCC_OscConfig+0x478>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f0:	f7fc fb0e 	bl	8001a10 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f8:	f7fc fb0a 	bl	8001a10 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e087      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800540a:	4b27      	ldr	r3, [pc, #156]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f0      	bne.n	80053f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69da      	ldr	r2, [r3, #28]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	019b      	lsls	r3, r3, #6
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	085b      	lsrs	r3, r3, #1
 800542e:	3b01      	subs	r3, #1
 8005430:	041b      	lsls	r3, r3, #16
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	061b      	lsls	r3, r3, #24
 800543a:	491b      	ldr	r1, [pc, #108]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 800543c:	4313      	orrs	r3, r2
 800543e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005440:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <HAL_RCC_OscConfig+0x478>)
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005446:	f7fc fae3 	bl	8001a10 <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800544e:	f7fc fadf 	bl	8001a10 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e05c      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005460:	4b11      	ldr	r3, [pc, #68]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f0      	beq.n	800544e <HAL_RCC_OscConfig+0x416>
 800546c:	e054      	b.n	8005518 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546e:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <HAL_RCC_OscConfig+0x478>)
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005474:	f7fc facc 	bl	8001a10 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800547c:	f7fc fac8 	bl	8001a10 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e045      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548e:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0x444>
 800549a:	e03d      	b.n	8005518 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d107      	bne.n	80054b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e038      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
 80054a8:	40023800 	.word	0x40023800
 80054ac:	40007000 	.word	0x40007000
 80054b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054b4:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <HAL_RCC_OscConfig+0x4ec>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d028      	beq.n	8005514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d121      	bne.n	8005514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054da:	429a      	cmp	r2, r3
 80054dc:	d11a      	bne.n	8005514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054e4:	4013      	ands	r3, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d111      	bne.n	8005514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fa:	085b      	lsrs	r3, r3, #1
 80054fc:	3b01      	subs	r3, #1
 80054fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005500:	429a      	cmp	r2, r3
 8005502:	d107      	bne.n	8005514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005510:	429a      	cmp	r2, r3
 8005512:	d001      	beq.n	8005518 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40023800 	.word	0x40023800

08005528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0cc      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800553c:	4b68      	ldr	r3, [pc, #416]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d90c      	bls.n	8005564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800554a:	4b65      	ldr	r3, [pc, #404]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005552:	4b63      	ldr	r3, [pc, #396]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d001      	beq.n	8005564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0b8      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d020      	beq.n	80055b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800557c:	4b59      	ldr	r3, [pc, #356]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	4a58      	ldr	r2, [pc, #352]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005594:	4b53      	ldr	r3, [pc, #332]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	4a52      	ldr	r2, [pc, #328]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800559e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055a0:	4b50      	ldr	r3, [pc, #320]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	494d      	ldr	r1, [pc, #308]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d044      	beq.n	8005648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d107      	bne.n	80055d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c6:	4b47      	ldr	r3, [pc, #284]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d119      	bne.n	8005606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e07f      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d003      	beq.n	80055e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d107      	bne.n	80055f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055e6:	4b3f      	ldr	r3, [pc, #252]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e06f      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f6:	4b3b      	ldr	r3, [pc, #236]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e067      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005606:	4b37      	ldr	r3, [pc, #220]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f023 0203 	bic.w	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	4934      	ldr	r1, [pc, #208]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	4313      	orrs	r3, r2
 8005616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005618:	f7fc f9fa 	bl	8001a10 <HAL_GetTick>
 800561c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561e:	e00a      	b.n	8005636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005620:	f7fc f9f6 	bl	8001a10 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	f241 3288 	movw	r2, #5000	; 0x1388
 800562e:	4293      	cmp	r3, r2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e04f      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005636:	4b2b      	ldr	r3, [pc, #172]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 020c 	and.w	r2, r3, #12
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	429a      	cmp	r2, r3
 8005646:	d1eb      	bne.n	8005620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005648:	4b25      	ldr	r3, [pc, #148]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d20c      	bcs.n	8005670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005656:	4b22      	ldr	r3, [pc, #136]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800565e:	4b20      	ldr	r3, [pc, #128]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d001      	beq.n	8005670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e032      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800567c:	4b19      	ldr	r3, [pc, #100]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4916      	ldr	r1, [pc, #88]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	4313      	orrs	r3, r2
 800568c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800569a:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	490e      	ldr	r1, [pc, #56]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056ae:	f000 f821 	bl	80056f4 <HAL_RCC_GetSysClockFreq>
 80056b2:	4602      	mov	r2, r0
 80056b4:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	091b      	lsrs	r3, r3, #4
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	490a      	ldr	r1, [pc, #40]	; (80056e8 <HAL_RCC_ClockConfig+0x1c0>)
 80056c0:	5ccb      	ldrb	r3, [r1, r3]
 80056c2:	fa22 f303 	lsr.w	r3, r2, r3
 80056c6:	4a09      	ldr	r2, [pc, #36]	; (80056ec <HAL_RCC_ClockConfig+0x1c4>)
 80056c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056ca:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <HAL_RCC_ClockConfig+0x1c8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fc f95a 	bl	8001988 <HAL_InitTick>

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40023c00 	.word	0x40023c00
 80056e4:	40023800 	.word	0x40023800
 80056e8:	0800a238 	.word	0x0800a238
 80056ec:	20000004 	.word	0x20000004
 80056f0:	20000008 	.word	0x20000008

080056f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056f8:	b094      	sub	sp, #80	; 0x50
 80056fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005700:	2300      	movs	r3, #0
 8005702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005704:	2300      	movs	r3, #0
 8005706:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800570c:	4b79      	ldr	r3, [pc, #484]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 030c 	and.w	r3, r3, #12
 8005714:	2b08      	cmp	r3, #8
 8005716:	d00d      	beq.n	8005734 <HAL_RCC_GetSysClockFreq+0x40>
 8005718:	2b08      	cmp	r3, #8
 800571a:	f200 80e1 	bhi.w	80058e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_RCC_GetSysClockFreq+0x34>
 8005722:	2b04      	cmp	r3, #4
 8005724:	d003      	beq.n	800572e <HAL_RCC_GetSysClockFreq+0x3a>
 8005726:	e0db      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005728:	4b73      	ldr	r3, [pc, #460]	; (80058f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800572a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800572c:	e0db      	b.n	80058e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800572e:	4b73      	ldr	r3, [pc, #460]	; (80058fc <HAL_RCC_GetSysClockFreq+0x208>)
 8005730:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005732:	e0d8      	b.n	80058e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005734:	4b6f      	ldr	r3, [pc, #444]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800573c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800573e:	4b6d      	ldr	r3, [pc, #436]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d063      	beq.n	8005812 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800574a:	4b6a      	ldr	r3, [pc, #424]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	099b      	lsrs	r3, r3, #6
 8005750:	2200      	movs	r2, #0
 8005752:	63bb      	str	r3, [r7, #56]	; 0x38
 8005754:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575c:	633b      	str	r3, [r7, #48]	; 0x30
 800575e:	2300      	movs	r3, #0
 8005760:	637b      	str	r3, [r7, #52]	; 0x34
 8005762:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005766:	4622      	mov	r2, r4
 8005768:	462b      	mov	r3, r5
 800576a:	f04f 0000 	mov.w	r0, #0
 800576e:	f04f 0100 	mov.w	r1, #0
 8005772:	0159      	lsls	r1, r3, #5
 8005774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005778:	0150      	lsls	r0, r2, #5
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	4621      	mov	r1, r4
 8005780:	1a51      	subs	r1, r2, r1
 8005782:	6139      	str	r1, [r7, #16]
 8005784:	4629      	mov	r1, r5
 8005786:	eb63 0301 	sbc.w	r3, r3, r1
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005798:	4659      	mov	r1, fp
 800579a:	018b      	lsls	r3, r1, #6
 800579c:	4651      	mov	r1, sl
 800579e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057a2:	4651      	mov	r1, sl
 80057a4:	018a      	lsls	r2, r1, #6
 80057a6:	4651      	mov	r1, sl
 80057a8:	ebb2 0801 	subs.w	r8, r2, r1
 80057ac:	4659      	mov	r1, fp
 80057ae:	eb63 0901 	sbc.w	r9, r3, r1
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	f04f 0300 	mov.w	r3, #0
 80057ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057c6:	4690      	mov	r8, r2
 80057c8:	4699      	mov	r9, r3
 80057ca:	4623      	mov	r3, r4
 80057cc:	eb18 0303 	adds.w	r3, r8, r3
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	462b      	mov	r3, r5
 80057d4:	eb49 0303 	adc.w	r3, r9, r3
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	f04f 0200 	mov.w	r2, #0
 80057de:	f04f 0300 	mov.w	r3, #0
 80057e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057e6:	4629      	mov	r1, r5
 80057e8:	024b      	lsls	r3, r1, #9
 80057ea:	4621      	mov	r1, r4
 80057ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057f0:	4621      	mov	r1, r4
 80057f2:	024a      	lsls	r2, r1, #9
 80057f4:	4610      	mov	r0, r2
 80057f6:	4619      	mov	r1, r3
 80057f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057fa:	2200      	movs	r2, #0
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80057fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005800:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005804:	f7fb f9d8 	bl	8000bb8 <__aeabi_uldivmod>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4613      	mov	r3, r2
 800580e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005810:	e058      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005812:	4b38      	ldr	r3, [pc, #224]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	099b      	lsrs	r3, r3, #6
 8005818:	2200      	movs	r2, #0
 800581a:	4618      	mov	r0, r3
 800581c:	4611      	mov	r1, r2
 800581e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005822:	623b      	str	r3, [r7, #32]
 8005824:	2300      	movs	r3, #0
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
 8005828:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800582c:	4642      	mov	r2, r8
 800582e:	464b      	mov	r3, r9
 8005830:	f04f 0000 	mov.w	r0, #0
 8005834:	f04f 0100 	mov.w	r1, #0
 8005838:	0159      	lsls	r1, r3, #5
 800583a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800583e:	0150      	lsls	r0, r2, #5
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4641      	mov	r1, r8
 8005846:	ebb2 0a01 	subs.w	sl, r2, r1
 800584a:	4649      	mov	r1, r9
 800584c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800585c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005860:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005864:	ebb2 040a 	subs.w	r4, r2, sl
 8005868:	eb63 050b 	sbc.w	r5, r3, fp
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	00eb      	lsls	r3, r5, #3
 8005876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800587a:	00e2      	lsls	r2, r4, #3
 800587c:	4614      	mov	r4, r2
 800587e:	461d      	mov	r5, r3
 8005880:	4643      	mov	r3, r8
 8005882:	18e3      	adds	r3, r4, r3
 8005884:	603b      	str	r3, [r7, #0]
 8005886:	464b      	mov	r3, r9
 8005888:	eb45 0303 	adc.w	r3, r5, r3
 800588c:	607b      	str	r3, [r7, #4]
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	e9d7 4500 	ldrd	r4, r5, [r7]
 800589a:	4629      	mov	r1, r5
 800589c:	028b      	lsls	r3, r1, #10
 800589e:	4621      	mov	r1, r4
 80058a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058a4:	4621      	mov	r1, r4
 80058a6:	028a      	lsls	r2, r1, #10
 80058a8:	4610      	mov	r0, r2
 80058aa:	4619      	mov	r1, r3
 80058ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ae:	2200      	movs	r2, #0
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	61fa      	str	r2, [r7, #28]
 80058b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058b8:	f7fb f97e 	bl	8000bb8 <__aeabi_uldivmod>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4613      	mov	r3, r2
 80058c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058c4:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	0c1b      	lsrs	r3, r3, #16
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	3301      	adds	r3, #1
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80058d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058de:	e002      	b.n	80058e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058e0:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80058e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3750      	adds	r7, #80	; 0x50
 80058ec:	46bd      	mov	sp, r7
 80058ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058f2:	bf00      	nop
 80058f4:	40023800 	.word	0x40023800
 80058f8:	00f42400 	.word	0x00f42400
 80058fc:	007a1200 	.word	0x007a1200

08005900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005904:	4b03      	ldr	r3, [pc, #12]	; (8005914 <HAL_RCC_GetHCLKFreq+0x14>)
 8005906:	681b      	ldr	r3, [r3, #0]
}
 8005908:	4618      	mov	r0, r3
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20000004 	.word	0x20000004

08005918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800591c:	f7ff fff0 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 8005920:	4602      	mov	r2, r0
 8005922:	4b05      	ldr	r3, [pc, #20]	; (8005938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	0a9b      	lsrs	r3, r3, #10
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	4903      	ldr	r1, [pc, #12]	; (800593c <HAL_RCC_GetPCLK1Freq+0x24>)
 800592e:	5ccb      	ldrb	r3, [r1, r3]
 8005930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005934:	4618      	mov	r0, r3
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40023800 	.word	0x40023800
 800593c:	0800a248 	.word	0x0800a248

08005940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005944:	f7ff ffdc 	bl	8005900 <HAL_RCC_GetHCLKFreq>
 8005948:	4602      	mov	r2, r0
 800594a:	4b05      	ldr	r3, [pc, #20]	; (8005960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	0b5b      	lsrs	r3, r3, #13
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	4903      	ldr	r1, [pc, #12]	; (8005964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005956:	5ccb      	ldrb	r3, [r1, r3]
 8005958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800595c:	4618      	mov	r0, r3
 800595e:	bd80      	pop	{r7, pc}
 8005960:	40023800 	.word	0x40023800
 8005964:	0800a248 	.word	0x0800a248

08005968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e041      	b.n	80059fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fb fdd2 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3304      	adds	r3, #4
 80059a4:	4619      	mov	r1, r3
 80059a6:	4610      	mov	r0, r2
 80059a8:	f000 fa88 	bl	8005ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d001      	beq.n	8005a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e044      	b.n	8005aaa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1e      	ldr	r2, [pc, #120]	; (8005ab8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d018      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x6c>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4a:	d013      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x6c>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1a      	ldr	r2, [pc, #104]	; (8005abc <HAL_TIM_Base_Start_IT+0xb4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00e      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x6c>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a19      	ldr	r2, [pc, #100]	; (8005ac0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d009      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x6c>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a17      	ldr	r2, [pc, #92]	; (8005ac4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x6c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a16      	ldr	r2, [pc, #88]	; (8005ac8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d111      	bne.n	8005a98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b06      	cmp	r3, #6
 8005a84:	d010      	beq.n	8005aa8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f042 0201 	orr.w	r2, r2, #1
 8005a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a96:	e007      	b.n	8005aa8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40014000 	.word	0x40014000

08005acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d122      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d11b      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f06f 0202 	mvn.w	r2, #2
 8005af8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f9b5 	bl	8005e7e <HAL_TIM_IC_CaptureCallback>
 8005b14:	e005      	b.n	8005b22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f9a7 	bl	8005e6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f9b8 	bl	8005e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d122      	bne.n	8005b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d11b      	bne.n	8005b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0204 	mvn.w	r2, #4
 8005b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f98b 	bl	8005e7e <HAL_TIM_IC_CaptureCallback>
 8005b68:	e005      	b.n	8005b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f97d 	bl	8005e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f98e 	bl	8005e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d122      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d11b      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0208 	mvn.w	r2, #8
 8005ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2204      	movs	r2, #4
 8005ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f961 	bl	8005e7e <HAL_TIM_IC_CaptureCallback>
 8005bbc:	e005      	b.n	8005bca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f953 	bl	8005e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f964 	bl	8005e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f003 0310 	and.w	r3, r3, #16
 8005bda:	2b10      	cmp	r3, #16
 8005bdc:	d122      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	2b10      	cmp	r3, #16
 8005bea:	d11b      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0210 	mvn.w	r2, #16
 8005bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2208      	movs	r2, #8
 8005bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f937 	bl	8005e7e <HAL_TIM_IC_CaptureCallback>
 8005c10:	e005      	b.n	8005c1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f929 	bl	8005e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f93a 	bl	8005e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d10e      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d107      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0201 	mvn.w	r2, #1
 8005c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fb f932 	bl	8000eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5a:	2b80      	cmp	r3, #128	; 0x80
 8005c5c:	d10e      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c68:	2b80      	cmp	r3, #128	; 0x80
 8005c6a:	d107      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fab2 	bl	80061e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c86:	2b40      	cmp	r3, #64	; 0x40
 8005c88:	d10e      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c94:	2b40      	cmp	r3, #64	; 0x40
 8005c96:	d107      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f8ff 	bl	8005ea6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	d10e      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f003 0320 	and.w	r3, r3, #32
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	d107      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0220 	mvn.w	r2, #32
 8005ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fa7c 	bl	80061cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cd4:	bf00      	nop
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_TIM_ConfigClockSource+0x1c>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e0b4      	b.n	8005e62 <HAL_TIM_ConfigClockSource+0x186>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d30:	d03e      	beq.n	8005db0 <HAL_TIM_ConfigClockSource+0xd4>
 8005d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d36:	f200 8087 	bhi.w	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3e:	f000 8086 	beq.w	8005e4e <HAL_TIM_ConfigClockSource+0x172>
 8005d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d46:	d87f      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d48:	2b70      	cmp	r3, #112	; 0x70
 8005d4a:	d01a      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0xa6>
 8005d4c:	2b70      	cmp	r3, #112	; 0x70
 8005d4e:	d87b      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d50:	2b60      	cmp	r3, #96	; 0x60
 8005d52:	d050      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x11a>
 8005d54:	2b60      	cmp	r3, #96	; 0x60
 8005d56:	d877      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d58:	2b50      	cmp	r3, #80	; 0x50
 8005d5a:	d03c      	beq.n	8005dd6 <HAL_TIM_ConfigClockSource+0xfa>
 8005d5c:	2b50      	cmp	r3, #80	; 0x50
 8005d5e:	d873      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d60:	2b40      	cmp	r3, #64	; 0x40
 8005d62:	d058      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0x13a>
 8005d64:	2b40      	cmp	r3, #64	; 0x40
 8005d66:	d86f      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d68:	2b30      	cmp	r3, #48	; 0x30
 8005d6a:	d064      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x15a>
 8005d6c:	2b30      	cmp	r3, #48	; 0x30
 8005d6e:	d86b      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d060      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x15a>
 8005d74:	2b20      	cmp	r3, #32
 8005d76:	d867      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d05c      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x15a>
 8005d7c:	2b10      	cmp	r3, #16
 8005d7e:	d05a      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x15a>
 8005d80:	e062      	b.n	8005e48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6899      	ldr	r1, [r3, #8]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f000 f98d 	bl	80060b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005da4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	609a      	str	r2, [r3, #8]
      break;
 8005dae:	e04f      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6818      	ldr	r0, [r3, #0]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	6899      	ldr	r1, [r3, #8]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f000 f976 	bl	80060b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dd2:	609a      	str	r2, [r3, #8]
      break;
 8005dd4:	e03c      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	6859      	ldr	r1, [r3, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f000 f8ea 	bl	8005fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2150      	movs	r1, #80	; 0x50
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 f943 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005df4:	e02c      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6859      	ldr	r1, [r3, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f000 f909 	bl	800601a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2160      	movs	r1, #96	; 0x60
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 f933 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005e14:	e01c      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6859      	ldr	r1, [r3, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f000 f8ca 	bl	8005fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2140      	movs	r1, #64	; 0x40
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f923 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005e34:	e00c      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4610      	mov	r0, r2
 8005e42:	f000 f91a 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005e46:	e003      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e4c:	e000      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b083      	sub	sp, #12
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a34      	ldr	r2, [pc, #208]	; (8005fa0 <TIM_Base_SetConfig+0xe4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00f      	beq.n	8005ef4 <TIM_Base_SetConfig+0x38>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eda:	d00b      	beq.n	8005ef4 <TIM_Base_SetConfig+0x38>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a31      	ldr	r2, [pc, #196]	; (8005fa4 <TIM_Base_SetConfig+0xe8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d007      	beq.n	8005ef4 <TIM_Base_SetConfig+0x38>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a30      	ldr	r2, [pc, #192]	; (8005fa8 <TIM_Base_SetConfig+0xec>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d003      	beq.n	8005ef4 <TIM_Base_SetConfig+0x38>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a2f      	ldr	r2, [pc, #188]	; (8005fac <TIM_Base_SetConfig+0xf0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d108      	bne.n	8005f06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a25      	ldr	r2, [pc, #148]	; (8005fa0 <TIM_Base_SetConfig+0xe4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d01b      	beq.n	8005f46 <TIM_Base_SetConfig+0x8a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f14:	d017      	beq.n	8005f46 <TIM_Base_SetConfig+0x8a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a22      	ldr	r2, [pc, #136]	; (8005fa4 <TIM_Base_SetConfig+0xe8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d013      	beq.n	8005f46 <TIM_Base_SetConfig+0x8a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a21      	ldr	r2, [pc, #132]	; (8005fa8 <TIM_Base_SetConfig+0xec>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00f      	beq.n	8005f46 <TIM_Base_SetConfig+0x8a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a20      	ldr	r2, [pc, #128]	; (8005fac <TIM_Base_SetConfig+0xf0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00b      	beq.n	8005f46 <TIM_Base_SetConfig+0x8a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a1f      	ldr	r2, [pc, #124]	; (8005fb0 <TIM_Base_SetConfig+0xf4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d007      	beq.n	8005f46 <TIM_Base_SetConfig+0x8a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a1e      	ldr	r2, [pc, #120]	; (8005fb4 <TIM_Base_SetConfig+0xf8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d003      	beq.n	8005f46 <TIM_Base_SetConfig+0x8a>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a1d      	ldr	r2, [pc, #116]	; (8005fb8 <TIM_Base_SetConfig+0xfc>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d108      	bne.n	8005f58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a08      	ldr	r2, [pc, #32]	; (8005fa0 <TIM_Base_SetConfig+0xe4>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d103      	bne.n	8005f8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	615a      	str	r2, [r3, #20]
}
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40010000 	.word	0x40010000
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800
 8005fac:	40000c00 	.word	0x40000c00
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800

08005fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f023 030a 	bic.w	r3, r3, #10
 8005ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	621a      	str	r2, [r3, #32]
}
 800600e:	bf00      	nop
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800601a:	b480      	push	{r7}
 800601c:	b087      	sub	sp, #28
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f023 0210 	bic.w	r2, r3, #16
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	031b      	lsls	r3, r3, #12
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006056:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	621a      	str	r2, [r3, #32]
}
 800606e:	bf00      	nop
 8006070:	371c      	adds	r7, #28
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006090:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	f043 0307 	orr.w	r3, r3, #7
 800609c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	021a      	lsls	r2, r3, #8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	4313      	orrs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	609a      	str	r2, [r3, #8]
}
 80060e4:	bf00      	nop
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006104:	2302      	movs	r3, #2
 8006106:	e050      	b.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a1c      	ldr	r2, [pc, #112]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d018      	beq.n	800617e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006154:	d013      	beq.n	800617e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a18      	ldr	r2, [pc, #96]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00e      	beq.n	800617e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a16      	ldr	r2, [pc, #88]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d009      	beq.n	800617e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a15      	ldr	r2, [pc, #84]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d004      	beq.n	800617e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a13      	ldr	r2, [pc, #76]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d10c      	bne.n	8006198 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006184:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	4313      	orrs	r3, r2
 800618e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	40010000 	.word	0x40010000
 80061bc:	40000400 	.word	0x40000400
 80061c0:	40000800 	.word	0x40000800
 80061c4:	40000c00 	.word	0x40000c00
 80061c8:	40014000 	.word	0x40014000

080061cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e03f      	b.n	8006286 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fb f9b2 	bl	8001584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2224      	movs	r2, #36	; 0x24
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fed1 	bl	8006fe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800624c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800625c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800626c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b08a      	sub	sp, #40	; 0x28
 8006292:	af02      	add	r7, sp, #8
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	603b      	str	r3, [r7, #0]
 800629a:	4613      	mov	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	d17c      	bne.n	80063a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <HAL_UART_Transmit+0x2c>
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e075      	b.n	80063aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_UART_Transmit+0x3e>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e06e      	b.n	80063aa <HAL_UART_Transmit+0x11c>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2221      	movs	r2, #33	; 0x21
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062e2:	f7fb fb95 	bl	8001a10 <HAL_GetTick>
 80062e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	88fa      	ldrh	r2, [r7, #6]
 80062ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	88fa      	ldrh	r2, [r7, #6]
 80062f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fc:	d108      	bne.n	8006310 <HAL_UART_Transmit+0x82>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d104      	bne.n	8006310 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	e003      	b.n	8006318 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006314:	2300      	movs	r3, #0
 8006316:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006320:	e02a      	b.n	8006378 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2200      	movs	r2, #0
 800632a:	2180      	movs	r1, #128	; 0x80
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fc26 	bl	8006b7e <UART_WaitOnFlagUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e036      	b.n	80063aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10b      	bne.n	800635a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006350:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	3302      	adds	r3, #2
 8006356:	61bb      	str	r3, [r7, #24]
 8006358:	e007      	b.n	800636a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	781a      	ldrb	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	3301      	adds	r3, #1
 8006368:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1cf      	bne.n	8006322 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2200      	movs	r2, #0
 800638a:	2140      	movs	r1, #64	; 0x40
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 fbf6 	bl	8006b7e <UART_WaitOnFlagUntilTimeout>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e006      	b.n	80063aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2220      	movs	r2, #32
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	e000      	b.n	80063aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063a8:	2302      	movs	r3, #2
  }
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3720      	adds	r7, #32
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08c      	sub	sp, #48	; 0x30
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	4613      	mov	r3, r2
 80063c0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	d165      	bne.n	800649a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_UART_Transmit_DMA+0x26>
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e05e      	b.n	800649c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_UART_Transmit_DMA+0x38>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e057      	b.n	800649c <HAL_UART_Transmit_DMA+0xe8>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	88fa      	ldrh	r2, [r7, #6]
 80063fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	88fa      	ldrh	r2, [r7, #6]
 8006404:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2221      	movs	r2, #33	; 0x21
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006418:	4a22      	ldr	r2, [pc, #136]	; (80064a4 <HAL_UART_Transmit_DMA+0xf0>)
 800641a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006420:	4a21      	ldr	r2, [pc, #132]	; (80064a8 <HAL_UART_Transmit_DMA+0xf4>)
 8006422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006428:	4a20      	ldr	r2, [pc, #128]	; (80064ac <HAL_UART_Transmit_DMA+0xf8>)
 800642a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006430:	2200      	movs	r2, #0
 8006432:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006434:	f107 0308 	add.w	r3, r7, #8
 8006438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	6819      	ldr	r1, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3304      	adds	r3, #4
 8006448:	461a      	mov	r2, r3
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	f7fb fcac 	bl	8001da8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006458:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3314      	adds	r3, #20
 8006468:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	617b      	str	r3, [r7, #20]
   return(result);
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3314      	adds	r3, #20
 8006480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006482:	627a      	str	r2, [r7, #36]	; 0x24
 8006484:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6a39      	ldr	r1, [r7, #32]
 8006488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e5      	bne.n	8006462 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	e000      	b.n	800649c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800649a:	2302      	movs	r3, #2
  }
}
 800649c:	4618      	mov	r0, r3
 800649e:	3730      	adds	r7, #48	; 0x30
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	08006a35 	.word	0x08006a35
 80064a8:	08006acf 	.word	0x08006acf
 80064ac:	08006aeb 	.word	0x08006aeb

080064b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b0ba      	sub	sp, #232	; 0xe8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80064dc:	2300      	movs	r3, #0
 80064de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80064ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10f      	bne.n	8006516 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d009      	beq.n	8006516 <HAL_UART_IRQHandler+0x66>
 8006502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fcaa 	bl	8006e68 <UART_Receive_IT>
      return;
 8006514:	e256      	b.n	80069c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 80de 	beq.w	80066dc <HAL_UART_IRQHandler+0x22c>
 8006520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d106      	bne.n	800653a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800652c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006530:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 80d1 	beq.w	80066dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <HAL_UART_IRQHandler+0xae>
 8006546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654e:	2b00      	cmp	r3, #0
 8006550:	d005      	beq.n	800655e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f043 0201 	orr.w	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800655e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00b      	beq.n	8006582 <HAL_UART_IRQHandler+0xd2>
 800656a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d005      	beq.n	8006582 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	f043 0202 	orr.w	r2, r3, #2
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00b      	beq.n	80065a6 <HAL_UART_IRQHandler+0xf6>
 800658e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	f043 0204 	orr.w	r2, r3, #4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065aa:	f003 0308 	and.w	r3, r3, #8
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d011      	beq.n	80065d6 <HAL_UART_IRQHandler+0x126>
 80065b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d105      	bne.n	80065ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d005      	beq.n	80065d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	f043 0208 	orr.w	r2, r3, #8
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 81ed 	beq.w	80069ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <HAL_UART_IRQHandler+0x14e>
 80065ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fc35 	bl	8006e68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006608:	2b40      	cmp	r3, #64	; 0x40
 800660a:	bf0c      	ite	eq
 800660c:	2301      	moveq	r3, #1
 800660e:	2300      	movne	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b00      	cmp	r3, #0
 8006620:	d103      	bne.n	800662a <HAL_UART_IRQHandler+0x17a>
 8006622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006626:	2b00      	cmp	r3, #0
 8006628:	d04f      	beq.n	80066ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fb3d 	bl	8006caa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	d141      	bne.n	80066c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3314      	adds	r3, #20
 8006644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006654:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800665c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3314      	adds	r3, #20
 8006666:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800666a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800666e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006676:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1d9      	bne.n	800663e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	2b00      	cmp	r3, #0
 8006690:	d013      	beq.n	80066ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	4a7d      	ldr	r2, [pc, #500]	; (800688c <HAL_UART_IRQHandler+0x3dc>)
 8006698:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fb fc4a 	bl	8001f38 <HAL_DMA_Abort_IT>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d016      	beq.n	80066d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066b4:	4610      	mov	r0, r2
 80066b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b8:	e00e      	b.n	80066d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f9a4 	bl	8006a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c0:	e00a      	b.n	80066d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f9a0 	bl	8006a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c8:	e006      	b.n	80066d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f99c 	bl	8006a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80066d6:	e170      	b.n	80069ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d8:	bf00      	nop
    return;
 80066da:	e16e      	b.n	80069ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	f040 814a 	bne.w	800697a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80066e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ea:	f003 0310 	and.w	r3, r3, #16
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 8143 	beq.w	800697a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f8:	f003 0310 	and.w	r3, r3, #16
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 813c 	beq.w	800697a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006702:	2300      	movs	r3, #0
 8006704:	60bb      	str	r3, [r7, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	60bb      	str	r3, [r7, #8]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	60bb      	str	r3, [r7, #8]
 8006716:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006722:	2b40      	cmp	r3, #64	; 0x40
 8006724:	f040 80b4 	bne.w	8006890 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006734:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 8140 	beq.w	80069be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006746:	429a      	cmp	r2, r3
 8006748:	f080 8139 	bcs.w	80069be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006752:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800675e:	f000 8088 	beq.w	8006872 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	330c      	adds	r3, #12
 8006768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006778:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800677c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	330c      	adds	r3, #12
 800678a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800678e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800679a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1d9      	bne.n	8006762 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3314      	adds	r3, #20
 80067b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067b8:	e853 3f00 	ldrex	r3, [r3]
 80067bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067c0:	f023 0301 	bic.w	r3, r3, #1
 80067c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3314      	adds	r3, #20
 80067ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e1      	bne.n	80067ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3314      	adds	r3, #20
 80067f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3314      	adds	r3, #20
 800680a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800680e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006810:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006814:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800681c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e3      	bne.n	80067ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	330c      	adds	r3, #12
 8006836:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006842:	f023 0310 	bic.w	r3, r3, #16
 8006846:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	330c      	adds	r3, #12
 8006850:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006854:	65ba      	str	r2, [r7, #88]	; 0x58
 8006856:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800685a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e3      	bne.n	8006830 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686c:	4618      	mov	r0, r3
 800686e:	f7fb faf3 	bl	8001e58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800687a:	b29b      	uxth	r3, r3
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	b29b      	uxth	r3, r3
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f8ca 	bl	8006a1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006888:	e099      	b.n	80069be <HAL_UART_IRQHandler+0x50e>
 800688a:	bf00      	nop
 800688c:	08006d71 	.word	0x08006d71
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006898:	b29b      	uxth	r3, r3
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 808b 	beq.w	80069c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80068ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 8086 	beq.w	80069c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	330c      	adds	r3, #12
 80068bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	330c      	adds	r3, #12
 80068d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80068da:	647a      	str	r2, [r7, #68]	; 0x44
 80068dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1e3      	bne.n	80068b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3314      	adds	r3, #20
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	623b      	str	r3, [r7, #32]
   return(result);
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	f023 0301 	bic.w	r3, r3, #1
 8006904:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3314      	adds	r3, #20
 800690e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006912:	633a      	str	r2, [r7, #48]	; 0x30
 8006914:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e3      	bne.n	80068ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2220      	movs	r2, #32
 800692a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	330c      	adds	r3, #12
 800693a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	60fb      	str	r3, [r7, #12]
   return(result);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0310 	bic.w	r3, r3, #16
 800694a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	330c      	adds	r3, #12
 8006954:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006958:	61fa      	str	r2, [r7, #28]
 800695a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695c:	69b9      	ldr	r1, [r7, #24]
 800695e:	69fa      	ldr	r2, [r7, #28]
 8006960:	e841 2300 	strex	r3, r2, [r1]
 8006964:	617b      	str	r3, [r7, #20]
   return(result);
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1e3      	bne.n	8006934 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800696c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f852 	bl	8006a1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006978:	e023      	b.n	80069c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800697a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b00      	cmp	r3, #0
 8006984:	d009      	beq.n	800699a <HAL_UART_IRQHandler+0x4ea>
 8006986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800698a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fa00 	bl	8006d98 <UART_Transmit_IT>
    return;
 8006998:	e014      	b.n	80069c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800699a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00e      	beq.n	80069c4 <HAL_UART_IRQHandler+0x514>
 80069a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d008      	beq.n	80069c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa40 	bl	8006e38 <UART_EndTransmit_IT>
    return;
 80069b8:	e004      	b.n	80069c4 <HAL_UART_IRQHandler+0x514>
    return;
 80069ba:	bf00      	nop
 80069bc:	e002      	b.n	80069c4 <HAL_UART_IRQHandler+0x514>
      return;
 80069be:	bf00      	nop
 80069c0:	e000      	b.n	80069c4 <HAL_UART_IRQHandler+0x514>
      return;
 80069c2:	bf00      	nop
  }
}
 80069c4:	37e8      	adds	r7, #232	; 0xe8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop

080069cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b090      	sub	sp, #64	; 0x40
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d137      	bne.n	8006ac0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a52:	2200      	movs	r2, #0
 8006a54:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3314      	adds	r3, #20
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	623b      	str	r3, [r7, #32]
   return(result);
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3314      	adds	r3, #20
 8006a74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a76:	633a      	str	r2, [r7, #48]	; 0x30
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e5      	bne.n	8006a56 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	330c      	adds	r3, #12
 8006a90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	330c      	adds	r3, #12
 8006aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aaa:	61fa      	str	r2, [r7, #28]
 8006aac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	69b9      	ldr	r1, [r7, #24]
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e5      	bne.n	8006a8a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006abe:	e002      	b.n	8006ac6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006ac0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006ac2:	f7ff ff83 	bl	80069cc <HAL_UART_TxCpltCallback>
}
 8006ac6:	bf00      	nop
 8006ac8:	3740      	adds	r7, #64	; 0x40
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f7ff ff7f 	bl	80069e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ae2:	bf00      	nop
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b084      	sub	sp, #16
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b06:	2b80      	cmp	r3, #128	; 0x80
 8006b08:	bf0c      	ite	eq
 8006b0a:	2301      	moveq	r3, #1
 8006b0c:	2300      	movne	r3, #0
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b21      	cmp	r3, #33	; 0x21
 8006b1c:	d108      	bne.n	8006b30 <UART_DMAError+0x46>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2200      	movs	r2, #0
 8006b28:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006b2a:	68b8      	ldr	r0, [r7, #8]
 8006b2c:	f000 f895 	bl	8006c5a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3a:	2b40      	cmp	r3, #64	; 0x40
 8006b3c:	bf0c      	ite	eq
 8006b3e:	2301      	moveq	r3, #1
 8006b40:	2300      	movne	r3, #0
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b22      	cmp	r3, #34	; 0x22
 8006b50:	d108      	bne.n	8006b64 <UART_DMAError+0x7a>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006b5e:	68b8      	ldr	r0, [r7, #8]
 8006b60:	f000 f8a3 	bl	8006caa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b68:	f043 0210 	orr.w	r2, r3, #16
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b70:	68b8      	ldr	r0, [r7, #8]
 8006b72:	f7ff ff49 	bl	8006a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b76:	bf00      	nop
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b090      	sub	sp, #64	; 0x40
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	603b      	str	r3, [r7, #0]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b8e:	e050      	b.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b96:	d04c      	beq.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d007      	beq.n	8006bae <UART_WaitOnFlagUntilTimeout+0x30>
 8006b9e:	f7fa ff37 	bl	8001a10 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d241      	bcs.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	330c      	adds	r3, #12
 8006bb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	330c      	adds	r3, #12
 8006bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bce:	637a      	str	r2, [r7, #52]	; 0x34
 8006bd0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e5      	bne.n	8006bae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3314      	adds	r3, #20
 8006be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f023 0301 	bic.w	r3, r3, #1
 8006bf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3314      	adds	r3, #20
 8006c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c02:	623a      	str	r2, [r7, #32]
 8006c04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	69f9      	ldr	r1, [r7, #28]
 8006c08:	6a3a      	ldr	r2, [r7, #32]
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e5      	bne.n	8006be2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2220      	movs	r2, #32
 8006c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e00f      	b.n	8006c52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	bf0c      	ite	eq
 8006c42:	2301      	moveq	r3, #1
 8006c44:	2300      	movne	r3, #0
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d09f      	beq.n	8006b90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3740      	adds	r7, #64	; 0x40
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b089      	sub	sp, #36	; 0x24
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	330c      	adds	r3, #12
 8006c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c78:	61fb      	str	r3, [r7, #28]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	330c      	adds	r3, #12
 8006c80:	69fa      	ldr	r2, [r7, #28]
 8006c82:	61ba      	str	r2, [r7, #24]
 8006c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6979      	ldr	r1, [r7, #20]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e5      	bne.n	8006c62 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006c9e:	bf00      	nop
 8006ca0:	3724      	adds	r7, #36	; 0x24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b095      	sub	sp, #84	; 0x54
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	330c      	adds	r3, #12
 8006cb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cd2:	643a      	str	r2, [r7, #64]	; 0x40
 8006cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e5      	bne.n	8006cb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3314      	adds	r3, #20
 8006cec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	f023 0301 	bic.w	r3, r3, #1
 8006cfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3314      	adds	r3, #20
 8006d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e5      	bne.n	8006ce6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d119      	bne.n	8006d56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f023 0310 	bic.w	r3, r3, #16
 8006d38:	647b      	str	r3, [r7, #68]	; 0x44
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	330c      	adds	r3, #12
 8006d40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d42:	61ba      	str	r2, [r7, #24]
 8006d44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6979      	ldr	r1, [r7, #20]
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e5      	bne.n	8006d22 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d64:	bf00      	nop
 8006d66:	3754      	adds	r7, #84	; 0x54
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f7ff fe3c 	bl	8006a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d90:	bf00      	nop
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b21      	cmp	r3, #33	; 0x21
 8006daa:	d13e      	bne.n	8006e2a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db4:	d114      	bne.n	8006de0 <UART_Transmit_IT+0x48>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d110      	bne.n	8006de0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dd2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	1c9a      	adds	r2, r3, #2
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	621a      	str	r2, [r3, #32]
 8006dde:	e008      	b.n	8006df2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	1c59      	adds	r1, r3, #1
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6211      	str	r1, [r2, #32]
 8006dea:	781a      	ldrb	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10f      	bne.n	8006e26 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e000      	b.n	8006e2c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e2a:	2302      	movs	r3, #2
  }
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f7ff fdb7 	bl	80069cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08c      	sub	sp, #48	; 0x30
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b22      	cmp	r3, #34	; 0x22
 8006e7a:	f040 80ab 	bne.w	8006fd4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e86:	d117      	bne.n	8006eb8 <UART_Receive_IT+0x50>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d113      	bne.n	8006eb8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e98:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eaa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb0:	1c9a      	adds	r2, r3, #2
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	629a      	str	r2, [r3, #40]	; 0x28
 8006eb6:	e026      	b.n	8006f06 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eca:	d007      	beq.n	8006edc <UART_Receive_IT+0x74>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <UART_Receive_IT+0x82>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d106      	bne.n	8006eea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	e008      	b.n	8006efc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	4619      	mov	r1, r3
 8006f14:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d15a      	bne.n	8006fd0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68da      	ldr	r2, [r3, #12]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0220 	bic.w	r2, r2, #32
 8006f28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	695a      	ldr	r2, [r3, #20]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0201 	bic.w	r2, r2, #1
 8006f48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d135      	bne.n	8006fc6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	330c      	adds	r3, #12
 8006f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f023 0310 	bic.w	r3, r3, #16
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f80:	623a      	str	r2, [r7, #32]
 8006f82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	69f9      	ldr	r1, [r7, #28]
 8006f86:	6a3a      	ldr	r2, [r7, #32]
 8006f88:	e841 2300 	strex	r3, r2, [r1]
 8006f8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e5      	bne.n	8006f60 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0310 	and.w	r3, r3, #16
 8006f9e:	2b10      	cmp	r3, #16
 8006fa0:	d10a      	bne.n	8006fb8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff fd2c 	bl	8006a1c <HAL_UARTEx_RxEventCallback>
 8006fc4:	e002      	b.n	8006fcc <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff fd14 	bl	80069f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e002      	b.n	8006fd6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e000      	b.n	8006fd6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006fd4:	2302      	movs	r3, #2
  }
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3730      	adds	r7, #48	; 0x30
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fe4:	b0c0      	sub	sp, #256	; 0x100
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ffc:	68d9      	ldr	r1, [r3, #12]
 8006ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	ea40 0301 	orr.w	r3, r0, r1
 8007008:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800700a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	431a      	orrs	r2, r3
 8007018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	431a      	orrs	r2, r3
 8007020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	4313      	orrs	r3, r2
 8007028:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007038:	f021 010c 	bic.w	r1, r1, #12
 800703c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007046:	430b      	orrs	r3, r1
 8007048:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800704a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705a:	6999      	ldr	r1, [r3, #24]
 800705c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	ea40 0301 	orr.w	r3, r0, r1
 8007066:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	4b8f      	ldr	r3, [pc, #572]	; (80072ac <UART_SetConfig+0x2cc>)
 8007070:	429a      	cmp	r2, r3
 8007072:	d005      	beq.n	8007080 <UART_SetConfig+0xa0>
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	4b8d      	ldr	r3, [pc, #564]	; (80072b0 <UART_SetConfig+0x2d0>)
 800707c:	429a      	cmp	r2, r3
 800707e:	d104      	bne.n	800708a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007080:	f7fe fc5e 	bl	8005940 <HAL_RCC_GetPCLK2Freq>
 8007084:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007088:	e003      	b.n	8007092 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800708a:	f7fe fc45 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 800708e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800709c:	f040 810c 	bne.w	80072b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80070ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80070b2:	4622      	mov	r2, r4
 80070b4:	462b      	mov	r3, r5
 80070b6:	1891      	adds	r1, r2, r2
 80070b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80070ba:	415b      	adcs	r3, r3
 80070bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80070c2:	4621      	mov	r1, r4
 80070c4:	eb12 0801 	adds.w	r8, r2, r1
 80070c8:	4629      	mov	r1, r5
 80070ca:	eb43 0901 	adc.w	r9, r3, r1
 80070ce:	f04f 0200 	mov.w	r2, #0
 80070d2:	f04f 0300 	mov.w	r3, #0
 80070d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070e2:	4690      	mov	r8, r2
 80070e4:	4699      	mov	r9, r3
 80070e6:	4623      	mov	r3, r4
 80070e8:	eb18 0303 	adds.w	r3, r8, r3
 80070ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070f0:	462b      	mov	r3, r5
 80070f2:	eb49 0303 	adc.w	r3, r9, r3
 80070f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007106:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800710a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800710e:	460b      	mov	r3, r1
 8007110:	18db      	adds	r3, r3, r3
 8007112:	653b      	str	r3, [r7, #80]	; 0x50
 8007114:	4613      	mov	r3, r2
 8007116:	eb42 0303 	adc.w	r3, r2, r3
 800711a:	657b      	str	r3, [r7, #84]	; 0x54
 800711c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007120:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007124:	f7f9 fd48 	bl	8000bb8 <__aeabi_uldivmod>
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	4b61      	ldr	r3, [pc, #388]	; (80072b4 <UART_SetConfig+0x2d4>)
 800712e:	fba3 2302 	umull	r2, r3, r3, r2
 8007132:	095b      	lsrs	r3, r3, #5
 8007134:	011c      	lsls	r4, r3, #4
 8007136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800713a:	2200      	movs	r2, #0
 800713c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007140:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007144:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007148:	4642      	mov	r2, r8
 800714a:	464b      	mov	r3, r9
 800714c:	1891      	adds	r1, r2, r2
 800714e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007150:	415b      	adcs	r3, r3
 8007152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007154:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007158:	4641      	mov	r1, r8
 800715a:	eb12 0a01 	adds.w	sl, r2, r1
 800715e:	4649      	mov	r1, r9
 8007160:	eb43 0b01 	adc.w	fp, r3, r1
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	f04f 0300 	mov.w	r3, #0
 800716c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007170:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007174:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007178:	4692      	mov	sl, r2
 800717a:	469b      	mov	fp, r3
 800717c:	4643      	mov	r3, r8
 800717e:	eb1a 0303 	adds.w	r3, sl, r3
 8007182:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007186:	464b      	mov	r3, r9
 8007188:	eb4b 0303 	adc.w	r3, fp, r3
 800718c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800719c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80071a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80071a4:	460b      	mov	r3, r1
 80071a6:	18db      	adds	r3, r3, r3
 80071a8:	643b      	str	r3, [r7, #64]	; 0x40
 80071aa:	4613      	mov	r3, r2
 80071ac:	eb42 0303 	adc.w	r3, r2, r3
 80071b0:	647b      	str	r3, [r7, #68]	; 0x44
 80071b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80071b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80071ba:	f7f9 fcfd 	bl	8000bb8 <__aeabi_uldivmod>
 80071be:	4602      	mov	r2, r0
 80071c0:	460b      	mov	r3, r1
 80071c2:	4611      	mov	r1, r2
 80071c4:	4b3b      	ldr	r3, [pc, #236]	; (80072b4 <UART_SetConfig+0x2d4>)
 80071c6:	fba3 2301 	umull	r2, r3, r3, r1
 80071ca:	095b      	lsrs	r3, r3, #5
 80071cc:	2264      	movs	r2, #100	; 0x64
 80071ce:	fb02 f303 	mul.w	r3, r2, r3
 80071d2:	1acb      	subs	r3, r1, r3
 80071d4:	00db      	lsls	r3, r3, #3
 80071d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80071da:	4b36      	ldr	r3, [pc, #216]	; (80072b4 <UART_SetConfig+0x2d4>)
 80071dc:	fba3 2302 	umull	r2, r3, r3, r2
 80071e0:	095b      	lsrs	r3, r3, #5
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071e8:	441c      	add	r4, r3
 80071ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80071f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80071fc:	4642      	mov	r2, r8
 80071fe:	464b      	mov	r3, r9
 8007200:	1891      	adds	r1, r2, r2
 8007202:	63b9      	str	r1, [r7, #56]	; 0x38
 8007204:	415b      	adcs	r3, r3
 8007206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007208:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800720c:	4641      	mov	r1, r8
 800720e:	1851      	adds	r1, r2, r1
 8007210:	6339      	str	r1, [r7, #48]	; 0x30
 8007212:	4649      	mov	r1, r9
 8007214:	414b      	adcs	r3, r1
 8007216:	637b      	str	r3, [r7, #52]	; 0x34
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	f04f 0300 	mov.w	r3, #0
 8007220:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007224:	4659      	mov	r1, fp
 8007226:	00cb      	lsls	r3, r1, #3
 8007228:	4651      	mov	r1, sl
 800722a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800722e:	4651      	mov	r1, sl
 8007230:	00ca      	lsls	r2, r1, #3
 8007232:	4610      	mov	r0, r2
 8007234:	4619      	mov	r1, r3
 8007236:	4603      	mov	r3, r0
 8007238:	4642      	mov	r2, r8
 800723a:	189b      	adds	r3, r3, r2
 800723c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007240:	464b      	mov	r3, r9
 8007242:	460a      	mov	r2, r1
 8007244:	eb42 0303 	adc.w	r3, r2, r3
 8007248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800724c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007258:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800725c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007260:	460b      	mov	r3, r1
 8007262:	18db      	adds	r3, r3, r3
 8007264:	62bb      	str	r3, [r7, #40]	; 0x28
 8007266:	4613      	mov	r3, r2
 8007268:	eb42 0303 	adc.w	r3, r2, r3
 800726c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800726e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007272:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007276:	f7f9 fc9f 	bl	8000bb8 <__aeabi_uldivmod>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	4b0d      	ldr	r3, [pc, #52]	; (80072b4 <UART_SetConfig+0x2d4>)
 8007280:	fba3 1302 	umull	r1, r3, r3, r2
 8007284:	095b      	lsrs	r3, r3, #5
 8007286:	2164      	movs	r1, #100	; 0x64
 8007288:	fb01 f303 	mul.w	r3, r1, r3
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	00db      	lsls	r3, r3, #3
 8007290:	3332      	adds	r3, #50	; 0x32
 8007292:	4a08      	ldr	r2, [pc, #32]	; (80072b4 <UART_SetConfig+0x2d4>)
 8007294:	fba2 2303 	umull	r2, r3, r2, r3
 8007298:	095b      	lsrs	r3, r3, #5
 800729a:	f003 0207 	and.w	r2, r3, #7
 800729e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4422      	add	r2, r4
 80072a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072a8:	e106      	b.n	80074b8 <UART_SetConfig+0x4d8>
 80072aa:	bf00      	nop
 80072ac:	40011000 	.word	0x40011000
 80072b0:	40011400 	.word	0x40011400
 80072b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80072c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80072c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80072ca:	4642      	mov	r2, r8
 80072cc:	464b      	mov	r3, r9
 80072ce:	1891      	adds	r1, r2, r2
 80072d0:	6239      	str	r1, [r7, #32]
 80072d2:	415b      	adcs	r3, r3
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
 80072d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072da:	4641      	mov	r1, r8
 80072dc:	1854      	adds	r4, r2, r1
 80072de:	4649      	mov	r1, r9
 80072e0:	eb43 0501 	adc.w	r5, r3, r1
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	f04f 0300 	mov.w	r3, #0
 80072ec:	00eb      	lsls	r3, r5, #3
 80072ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072f2:	00e2      	lsls	r2, r4, #3
 80072f4:	4614      	mov	r4, r2
 80072f6:	461d      	mov	r5, r3
 80072f8:	4643      	mov	r3, r8
 80072fa:	18e3      	adds	r3, r4, r3
 80072fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007300:	464b      	mov	r3, r9
 8007302:	eb45 0303 	adc.w	r3, r5, r3
 8007306:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800730a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007316:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800731a:	f04f 0200 	mov.w	r2, #0
 800731e:	f04f 0300 	mov.w	r3, #0
 8007322:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007326:	4629      	mov	r1, r5
 8007328:	008b      	lsls	r3, r1, #2
 800732a:	4621      	mov	r1, r4
 800732c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007330:	4621      	mov	r1, r4
 8007332:	008a      	lsls	r2, r1, #2
 8007334:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007338:	f7f9 fc3e 	bl	8000bb8 <__aeabi_uldivmod>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	4b60      	ldr	r3, [pc, #384]	; (80074c4 <UART_SetConfig+0x4e4>)
 8007342:	fba3 2302 	umull	r2, r3, r3, r2
 8007346:	095b      	lsrs	r3, r3, #5
 8007348:	011c      	lsls	r4, r3, #4
 800734a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800734e:	2200      	movs	r2, #0
 8007350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007354:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007358:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800735c:	4642      	mov	r2, r8
 800735e:	464b      	mov	r3, r9
 8007360:	1891      	adds	r1, r2, r2
 8007362:	61b9      	str	r1, [r7, #24]
 8007364:	415b      	adcs	r3, r3
 8007366:	61fb      	str	r3, [r7, #28]
 8007368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800736c:	4641      	mov	r1, r8
 800736e:	1851      	adds	r1, r2, r1
 8007370:	6139      	str	r1, [r7, #16]
 8007372:	4649      	mov	r1, r9
 8007374:	414b      	adcs	r3, r1
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	f04f 0200 	mov.w	r2, #0
 800737c:	f04f 0300 	mov.w	r3, #0
 8007380:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007384:	4659      	mov	r1, fp
 8007386:	00cb      	lsls	r3, r1, #3
 8007388:	4651      	mov	r1, sl
 800738a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800738e:	4651      	mov	r1, sl
 8007390:	00ca      	lsls	r2, r1, #3
 8007392:	4610      	mov	r0, r2
 8007394:	4619      	mov	r1, r3
 8007396:	4603      	mov	r3, r0
 8007398:	4642      	mov	r2, r8
 800739a:	189b      	adds	r3, r3, r2
 800739c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073a0:	464b      	mov	r3, r9
 80073a2:	460a      	mov	r2, r1
 80073a4:	eb42 0303 	adc.w	r3, r2, r3
 80073a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80073b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80073b8:	f04f 0200 	mov.w	r2, #0
 80073bc:	f04f 0300 	mov.w	r3, #0
 80073c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80073c4:	4649      	mov	r1, r9
 80073c6:	008b      	lsls	r3, r1, #2
 80073c8:	4641      	mov	r1, r8
 80073ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073ce:	4641      	mov	r1, r8
 80073d0:	008a      	lsls	r2, r1, #2
 80073d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80073d6:	f7f9 fbef 	bl	8000bb8 <__aeabi_uldivmod>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4611      	mov	r1, r2
 80073e0:	4b38      	ldr	r3, [pc, #224]	; (80074c4 <UART_SetConfig+0x4e4>)
 80073e2:	fba3 2301 	umull	r2, r3, r3, r1
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	2264      	movs	r2, #100	; 0x64
 80073ea:	fb02 f303 	mul.w	r3, r2, r3
 80073ee:	1acb      	subs	r3, r1, r3
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	3332      	adds	r3, #50	; 0x32
 80073f4:	4a33      	ldr	r2, [pc, #204]	; (80074c4 <UART_SetConfig+0x4e4>)
 80073f6:	fba2 2303 	umull	r2, r3, r2, r3
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007400:	441c      	add	r4, r3
 8007402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007406:	2200      	movs	r2, #0
 8007408:	673b      	str	r3, [r7, #112]	; 0x70
 800740a:	677a      	str	r2, [r7, #116]	; 0x74
 800740c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007410:	4642      	mov	r2, r8
 8007412:	464b      	mov	r3, r9
 8007414:	1891      	adds	r1, r2, r2
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	415b      	adcs	r3, r3
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007420:	4641      	mov	r1, r8
 8007422:	1851      	adds	r1, r2, r1
 8007424:	6039      	str	r1, [r7, #0]
 8007426:	4649      	mov	r1, r9
 8007428:	414b      	adcs	r3, r1
 800742a:	607b      	str	r3, [r7, #4]
 800742c:	f04f 0200 	mov.w	r2, #0
 8007430:	f04f 0300 	mov.w	r3, #0
 8007434:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007438:	4659      	mov	r1, fp
 800743a:	00cb      	lsls	r3, r1, #3
 800743c:	4651      	mov	r1, sl
 800743e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007442:	4651      	mov	r1, sl
 8007444:	00ca      	lsls	r2, r1, #3
 8007446:	4610      	mov	r0, r2
 8007448:	4619      	mov	r1, r3
 800744a:	4603      	mov	r3, r0
 800744c:	4642      	mov	r2, r8
 800744e:	189b      	adds	r3, r3, r2
 8007450:	66bb      	str	r3, [r7, #104]	; 0x68
 8007452:	464b      	mov	r3, r9
 8007454:	460a      	mov	r2, r1
 8007456:	eb42 0303 	adc.w	r3, r2, r3
 800745a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800745c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	663b      	str	r3, [r7, #96]	; 0x60
 8007466:	667a      	str	r2, [r7, #100]	; 0x64
 8007468:	f04f 0200 	mov.w	r2, #0
 800746c:	f04f 0300 	mov.w	r3, #0
 8007470:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007474:	4649      	mov	r1, r9
 8007476:	008b      	lsls	r3, r1, #2
 8007478:	4641      	mov	r1, r8
 800747a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800747e:	4641      	mov	r1, r8
 8007480:	008a      	lsls	r2, r1, #2
 8007482:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007486:	f7f9 fb97 	bl	8000bb8 <__aeabi_uldivmod>
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	4b0d      	ldr	r3, [pc, #52]	; (80074c4 <UART_SetConfig+0x4e4>)
 8007490:	fba3 1302 	umull	r1, r3, r3, r2
 8007494:	095b      	lsrs	r3, r3, #5
 8007496:	2164      	movs	r1, #100	; 0x64
 8007498:	fb01 f303 	mul.w	r3, r1, r3
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	3332      	adds	r3, #50	; 0x32
 80074a2:	4a08      	ldr	r2, [pc, #32]	; (80074c4 <UART_SetConfig+0x4e4>)
 80074a4:	fba2 2303 	umull	r2, r3, r2, r3
 80074a8:	095b      	lsrs	r3, r3, #5
 80074aa:	f003 020f 	and.w	r2, r3, #15
 80074ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4422      	add	r2, r4
 80074b6:	609a      	str	r2, [r3, #8]
}
 80074b8:	bf00      	nop
 80074ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80074be:	46bd      	mov	sp, r7
 80074c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074c4:	51eb851f 	.word	0x51eb851f

080074c8 <__cvt>:
 80074c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	ec55 4b10 	vmov	r4, r5, d0
 80074d0:	2d00      	cmp	r5, #0
 80074d2:	460e      	mov	r6, r1
 80074d4:	4619      	mov	r1, r3
 80074d6:	462b      	mov	r3, r5
 80074d8:	bfbb      	ittet	lt
 80074da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80074de:	461d      	movlt	r5, r3
 80074e0:	2300      	movge	r3, #0
 80074e2:	232d      	movlt	r3, #45	; 0x2d
 80074e4:	700b      	strb	r3, [r1, #0]
 80074e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80074ec:	4691      	mov	r9, r2
 80074ee:	f023 0820 	bic.w	r8, r3, #32
 80074f2:	bfbc      	itt	lt
 80074f4:	4622      	movlt	r2, r4
 80074f6:	4614      	movlt	r4, r2
 80074f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074fc:	d005      	beq.n	800750a <__cvt+0x42>
 80074fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007502:	d100      	bne.n	8007506 <__cvt+0x3e>
 8007504:	3601      	adds	r6, #1
 8007506:	2102      	movs	r1, #2
 8007508:	e000      	b.n	800750c <__cvt+0x44>
 800750a:	2103      	movs	r1, #3
 800750c:	ab03      	add	r3, sp, #12
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	ab02      	add	r3, sp, #8
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	ec45 4b10 	vmov	d0, r4, r5
 8007518:	4653      	mov	r3, sl
 800751a:	4632      	mov	r2, r6
 800751c:	f000 fe7c 	bl	8008218 <_dtoa_r>
 8007520:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007524:	4607      	mov	r7, r0
 8007526:	d102      	bne.n	800752e <__cvt+0x66>
 8007528:	f019 0f01 	tst.w	r9, #1
 800752c:	d022      	beq.n	8007574 <__cvt+0xac>
 800752e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007532:	eb07 0906 	add.w	r9, r7, r6
 8007536:	d110      	bne.n	800755a <__cvt+0x92>
 8007538:	783b      	ldrb	r3, [r7, #0]
 800753a:	2b30      	cmp	r3, #48	; 0x30
 800753c:	d10a      	bne.n	8007554 <__cvt+0x8c>
 800753e:	2200      	movs	r2, #0
 8007540:	2300      	movs	r3, #0
 8007542:	4620      	mov	r0, r4
 8007544:	4629      	mov	r1, r5
 8007546:	f7f9 fac7 	bl	8000ad8 <__aeabi_dcmpeq>
 800754a:	b918      	cbnz	r0, 8007554 <__cvt+0x8c>
 800754c:	f1c6 0601 	rsb	r6, r6, #1
 8007550:	f8ca 6000 	str.w	r6, [sl]
 8007554:	f8da 3000 	ldr.w	r3, [sl]
 8007558:	4499      	add	r9, r3
 800755a:	2200      	movs	r2, #0
 800755c:	2300      	movs	r3, #0
 800755e:	4620      	mov	r0, r4
 8007560:	4629      	mov	r1, r5
 8007562:	f7f9 fab9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007566:	b108      	cbz	r0, 800756c <__cvt+0xa4>
 8007568:	f8cd 900c 	str.w	r9, [sp, #12]
 800756c:	2230      	movs	r2, #48	; 0x30
 800756e:	9b03      	ldr	r3, [sp, #12]
 8007570:	454b      	cmp	r3, r9
 8007572:	d307      	bcc.n	8007584 <__cvt+0xbc>
 8007574:	9b03      	ldr	r3, [sp, #12]
 8007576:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007578:	1bdb      	subs	r3, r3, r7
 800757a:	4638      	mov	r0, r7
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	b004      	add	sp, #16
 8007580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007584:	1c59      	adds	r1, r3, #1
 8007586:	9103      	str	r1, [sp, #12]
 8007588:	701a      	strb	r2, [r3, #0]
 800758a:	e7f0      	b.n	800756e <__cvt+0xa6>

0800758c <__exponent>:
 800758c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800758e:	4603      	mov	r3, r0
 8007590:	2900      	cmp	r1, #0
 8007592:	bfb8      	it	lt
 8007594:	4249      	neglt	r1, r1
 8007596:	f803 2b02 	strb.w	r2, [r3], #2
 800759a:	bfb4      	ite	lt
 800759c:	222d      	movlt	r2, #45	; 0x2d
 800759e:	222b      	movge	r2, #43	; 0x2b
 80075a0:	2909      	cmp	r1, #9
 80075a2:	7042      	strb	r2, [r0, #1]
 80075a4:	dd2a      	ble.n	80075fc <__exponent+0x70>
 80075a6:	f10d 0207 	add.w	r2, sp, #7
 80075aa:	4617      	mov	r7, r2
 80075ac:	260a      	movs	r6, #10
 80075ae:	4694      	mov	ip, r2
 80075b0:	fb91 f5f6 	sdiv	r5, r1, r6
 80075b4:	fb06 1415 	mls	r4, r6, r5, r1
 80075b8:	3430      	adds	r4, #48	; 0x30
 80075ba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80075be:	460c      	mov	r4, r1
 80075c0:	2c63      	cmp	r4, #99	; 0x63
 80075c2:	f102 32ff 	add.w	r2, r2, #4294967295
 80075c6:	4629      	mov	r1, r5
 80075c8:	dcf1      	bgt.n	80075ae <__exponent+0x22>
 80075ca:	3130      	adds	r1, #48	; 0x30
 80075cc:	f1ac 0402 	sub.w	r4, ip, #2
 80075d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80075d4:	1c41      	adds	r1, r0, #1
 80075d6:	4622      	mov	r2, r4
 80075d8:	42ba      	cmp	r2, r7
 80075da:	d30a      	bcc.n	80075f2 <__exponent+0x66>
 80075dc:	f10d 0209 	add.w	r2, sp, #9
 80075e0:	eba2 020c 	sub.w	r2, r2, ip
 80075e4:	42bc      	cmp	r4, r7
 80075e6:	bf88      	it	hi
 80075e8:	2200      	movhi	r2, #0
 80075ea:	4413      	add	r3, r2
 80075ec:	1a18      	subs	r0, r3, r0
 80075ee:	b003      	add	sp, #12
 80075f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075f2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80075f6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80075fa:	e7ed      	b.n	80075d8 <__exponent+0x4c>
 80075fc:	2330      	movs	r3, #48	; 0x30
 80075fe:	3130      	adds	r1, #48	; 0x30
 8007600:	7083      	strb	r3, [r0, #2]
 8007602:	70c1      	strb	r1, [r0, #3]
 8007604:	1d03      	adds	r3, r0, #4
 8007606:	e7f1      	b.n	80075ec <__exponent+0x60>

08007608 <_printf_float>:
 8007608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	ed2d 8b02 	vpush	{d8}
 8007610:	b08d      	sub	sp, #52	; 0x34
 8007612:	460c      	mov	r4, r1
 8007614:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007618:	4616      	mov	r6, r2
 800761a:	461f      	mov	r7, r3
 800761c:	4605      	mov	r5, r0
 800761e:	f000 fcfb 	bl	8008018 <_localeconv_r>
 8007622:	f8d0 a000 	ldr.w	sl, [r0]
 8007626:	4650      	mov	r0, sl
 8007628:	f7f8 fe2a 	bl	8000280 <strlen>
 800762c:	2300      	movs	r3, #0
 800762e:	930a      	str	r3, [sp, #40]	; 0x28
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	9305      	str	r3, [sp, #20]
 8007634:	f8d8 3000 	ldr.w	r3, [r8]
 8007638:	f894 b018 	ldrb.w	fp, [r4, #24]
 800763c:	3307      	adds	r3, #7
 800763e:	f023 0307 	bic.w	r3, r3, #7
 8007642:	f103 0208 	add.w	r2, r3, #8
 8007646:	f8c8 2000 	str.w	r2, [r8]
 800764a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800764e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007652:	9307      	str	r3, [sp, #28]
 8007654:	f8cd 8018 	str.w	r8, [sp, #24]
 8007658:	ee08 0a10 	vmov	s16, r0
 800765c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007660:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007664:	4b9e      	ldr	r3, [pc, #632]	; (80078e0 <_printf_float+0x2d8>)
 8007666:	f04f 32ff 	mov.w	r2, #4294967295
 800766a:	f7f9 fa67 	bl	8000b3c <__aeabi_dcmpun>
 800766e:	bb88      	cbnz	r0, 80076d4 <_printf_float+0xcc>
 8007670:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007674:	4b9a      	ldr	r3, [pc, #616]	; (80078e0 <_printf_float+0x2d8>)
 8007676:	f04f 32ff 	mov.w	r2, #4294967295
 800767a:	f7f9 fa41 	bl	8000b00 <__aeabi_dcmple>
 800767e:	bb48      	cbnz	r0, 80076d4 <_printf_float+0xcc>
 8007680:	2200      	movs	r2, #0
 8007682:	2300      	movs	r3, #0
 8007684:	4640      	mov	r0, r8
 8007686:	4649      	mov	r1, r9
 8007688:	f7f9 fa30 	bl	8000aec <__aeabi_dcmplt>
 800768c:	b110      	cbz	r0, 8007694 <_printf_float+0x8c>
 800768e:	232d      	movs	r3, #45	; 0x2d
 8007690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007694:	4a93      	ldr	r2, [pc, #588]	; (80078e4 <_printf_float+0x2dc>)
 8007696:	4b94      	ldr	r3, [pc, #592]	; (80078e8 <_printf_float+0x2e0>)
 8007698:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800769c:	bf94      	ite	ls
 800769e:	4690      	movls	r8, r2
 80076a0:	4698      	movhi	r8, r3
 80076a2:	2303      	movs	r3, #3
 80076a4:	6123      	str	r3, [r4, #16]
 80076a6:	9b05      	ldr	r3, [sp, #20]
 80076a8:	f023 0304 	bic.w	r3, r3, #4
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	f04f 0900 	mov.w	r9, #0
 80076b2:	9700      	str	r7, [sp, #0]
 80076b4:	4633      	mov	r3, r6
 80076b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80076b8:	4621      	mov	r1, r4
 80076ba:	4628      	mov	r0, r5
 80076bc:	f000 f9da 	bl	8007a74 <_printf_common>
 80076c0:	3001      	adds	r0, #1
 80076c2:	f040 8090 	bne.w	80077e6 <_printf_float+0x1de>
 80076c6:	f04f 30ff 	mov.w	r0, #4294967295
 80076ca:	b00d      	add	sp, #52	; 0x34
 80076cc:	ecbd 8b02 	vpop	{d8}
 80076d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d4:	4642      	mov	r2, r8
 80076d6:	464b      	mov	r3, r9
 80076d8:	4640      	mov	r0, r8
 80076da:	4649      	mov	r1, r9
 80076dc:	f7f9 fa2e 	bl	8000b3c <__aeabi_dcmpun>
 80076e0:	b140      	cbz	r0, 80076f4 <_printf_float+0xec>
 80076e2:	464b      	mov	r3, r9
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	bfbc      	itt	lt
 80076e8:	232d      	movlt	r3, #45	; 0x2d
 80076ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076ee:	4a7f      	ldr	r2, [pc, #508]	; (80078ec <_printf_float+0x2e4>)
 80076f0:	4b7f      	ldr	r3, [pc, #508]	; (80078f0 <_printf_float+0x2e8>)
 80076f2:	e7d1      	b.n	8007698 <_printf_float+0x90>
 80076f4:	6863      	ldr	r3, [r4, #4]
 80076f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80076fa:	9206      	str	r2, [sp, #24]
 80076fc:	1c5a      	adds	r2, r3, #1
 80076fe:	d13f      	bne.n	8007780 <_printf_float+0x178>
 8007700:	2306      	movs	r3, #6
 8007702:	6063      	str	r3, [r4, #4]
 8007704:	9b05      	ldr	r3, [sp, #20]
 8007706:	6861      	ldr	r1, [r4, #4]
 8007708:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800770c:	2300      	movs	r3, #0
 800770e:	9303      	str	r3, [sp, #12]
 8007710:	ab0a      	add	r3, sp, #40	; 0x28
 8007712:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007716:	ab09      	add	r3, sp, #36	; 0x24
 8007718:	ec49 8b10 	vmov	d0, r8, r9
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	6022      	str	r2, [r4, #0]
 8007720:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007724:	4628      	mov	r0, r5
 8007726:	f7ff fecf 	bl	80074c8 <__cvt>
 800772a:	9b06      	ldr	r3, [sp, #24]
 800772c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800772e:	2b47      	cmp	r3, #71	; 0x47
 8007730:	4680      	mov	r8, r0
 8007732:	d108      	bne.n	8007746 <_printf_float+0x13e>
 8007734:	1cc8      	adds	r0, r1, #3
 8007736:	db02      	blt.n	800773e <_printf_float+0x136>
 8007738:	6863      	ldr	r3, [r4, #4]
 800773a:	4299      	cmp	r1, r3
 800773c:	dd41      	ble.n	80077c2 <_printf_float+0x1ba>
 800773e:	f1ab 0302 	sub.w	r3, fp, #2
 8007742:	fa5f fb83 	uxtb.w	fp, r3
 8007746:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800774a:	d820      	bhi.n	800778e <_printf_float+0x186>
 800774c:	3901      	subs	r1, #1
 800774e:	465a      	mov	r2, fp
 8007750:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007754:	9109      	str	r1, [sp, #36]	; 0x24
 8007756:	f7ff ff19 	bl	800758c <__exponent>
 800775a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800775c:	1813      	adds	r3, r2, r0
 800775e:	2a01      	cmp	r2, #1
 8007760:	4681      	mov	r9, r0
 8007762:	6123      	str	r3, [r4, #16]
 8007764:	dc02      	bgt.n	800776c <_printf_float+0x164>
 8007766:	6822      	ldr	r2, [r4, #0]
 8007768:	07d2      	lsls	r2, r2, #31
 800776a:	d501      	bpl.n	8007770 <_printf_float+0x168>
 800776c:	3301      	adds	r3, #1
 800776e:	6123      	str	r3, [r4, #16]
 8007770:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007774:	2b00      	cmp	r3, #0
 8007776:	d09c      	beq.n	80076b2 <_printf_float+0xaa>
 8007778:	232d      	movs	r3, #45	; 0x2d
 800777a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800777e:	e798      	b.n	80076b2 <_printf_float+0xaa>
 8007780:	9a06      	ldr	r2, [sp, #24]
 8007782:	2a47      	cmp	r2, #71	; 0x47
 8007784:	d1be      	bne.n	8007704 <_printf_float+0xfc>
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1bc      	bne.n	8007704 <_printf_float+0xfc>
 800778a:	2301      	movs	r3, #1
 800778c:	e7b9      	b.n	8007702 <_printf_float+0xfa>
 800778e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007792:	d118      	bne.n	80077c6 <_printf_float+0x1be>
 8007794:	2900      	cmp	r1, #0
 8007796:	6863      	ldr	r3, [r4, #4]
 8007798:	dd0b      	ble.n	80077b2 <_printf_float+0x1aa>
 800779a:	6121      	str	r1, [r4, #16]
 800779c:	b913      	cbnz	r3, 80077a4 <_printf_float+0x19c>
 800779e:	6822      	ldr	r2, [r4, #0]
 80077a0:	07d0      	lsls	r0, r2, #31
 80077a2:	d502      	bpl.n	80077aa <_printf_float+0x1a2>
 80077a4:	3301      	adds	r3, #1
 80077a6:	440b      	add	r3, r1
 80077a8:	6123      	str	r3, [r4, #16]
 80077aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80077ac:	f04f 0900 	mov.w	r9, #0
 80077b0:	e7de      	b.n	8007770 <_printf_float+0x168>
 80077b2:	b913      	cbnz	r3, 80077ba <_printf_float+0x1b2>
 80077b4:	6822      	ldr	r2, [r4, #0]
 80077b6:	07d2      	lsls	r2, r2, #31
 80077b8:	d501      	bpl.n	80077be <_printf_float+0x1b6>
 80077ba:	3302      	adds	r3, #2
 80077bc:	e7f4      	b.n	80077a8 <_printf_float+0x1a0>
 80077be:	2301      	movs	r3, #1
 80077c0:	e7f2      	b.n	80077a8 <_printf_float+0x1a0>
 80077c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80077c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c8:	4299      	cmp	r1, r3
 80077ca:	db05      	blt.n	80077d8 <_printf_float+0x1d0>
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	6121      	str	r1, [r4, #16]
 80077d0:	07d8      	lsls	r0, r3, #31
 80077d2:	d5ea      	bpl.n	80077aa <_printf_float+0x1a2>
 80077d4:	1c4b      	adds	r3, r1, #1
 80077d6:	e7e7      	b.n	80077a8 <_printf_float+0x1a0>
 80077d8:	2900      	cmp	r1, #0
 80077da:	bfd4      	ite	le
 80077dc:	f1c1 0202 	rsble	r2, r1, #2
 80077e0:	2201      	movgt	r2, #1
 80077e2:	4413      	add	r3, r2
 80077e4:	e7e0      	b.n	80077a8 <_printf_float+0x1a0>
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	055a      	lsls	r2, r3, #21
 80077ea:	d407      	bmi.n	80077fc <_printf_float+0x1f4>
 80077ec:	6923      	ldr	r3, [r4, #16]
 80077ee:	4642      	mov	r2, r8
 80077f0:	4631      	mov	r1, r6
 80077f2:	4628      	mov	r0, r5
 80077f4:	47b8      	blx	r7
 80077f6:	3001      	adds	r0, #1
 80077f8:	d12c      	bne.n	8007854 <_printf_float+0x24c>
 80077fa:	e764      	b.n	80076c6 <_printf_float+0xbe>
 80077fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007800:	f240 80e0 	bls.w	80079c4 <_printf_float+0x3bc>
 8007804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007808:	2200      	movs	r2, #0
 800780a:	2300      	movs	r3, #0
 800780c:	f7f9 f964 	bl	8000ad8 <__aeabi_dcmpeq>
 8007810:	2800      	cmp	r0, #0
 8007812:	d034      	beq.n	800787e <_printf_float+0x276>
 8007814:	4a37      	ldr	r2, [pc, #220]	; (80078f4 <_printf_float+0x2ec>)
 8007816:	2301      	movs	r3, #1
 8007818:	4631      	mov	r1, r6
 800781a:	4628      	mov	r0, r5
 800781c:	47b8      	blx	r7
 800781e:	3001      	adds	r0, #1
 8007820:	f43f af51 	beq.w	80076c6 <_printf_float+0xbe>
 8007824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007828:	429a      	cmp	r2, r3
 800782a:	db02      	blt.n	8007832 <_printf_float+0x22a>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	07d8      	lsls	r0, r3, #31
 8007830:	d510      	bpl.n	8007854 <_printf_float+0x24c>
 8007832:	ee18 3a10 	vmov	r3, s16
 8007836:	4652      	mov	r2, sl
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	47b8      	blx	r7
 800783e:	3001      	adds	r0, #1
 8007840:	f43f af41 	beq.w	80076c6 <_printf_float+0xbe>
 8007844:	f04f 0800 	mov.w	r8, #0
 8007848:	f104 091a 	add.w	r9, r4, #26
 800784c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800784e:	3b01      	subs	r3, #1
 8007850:	4543      	cmp	r3, r8
 8007852:	dc09      	bgt.n	8007868 <_printf_float+0x260>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	079b      	lsls	r3, r3, #30
 8007858:	f100 8107 	bmi.w	8007a6a <_printf_float+0x462>
 800785c:	68e0      	ldr	r0, [r4, #12]
 800785e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007860:	4298      	cmp	r0, r3
 8007862:	bfb8      	it	lt
 8007864:	4618      	movlt	r0, r3
 8007866:	e730      	b.n	80076ca <_printf_float+0xc2>
 8007868:	2301      	movs	r3, #1
 800786a:	464a      	mov	r2, r9
 800786c:	4631      	mov	r1, r6
 800786e:	4628      	mov	r0, r5
 8007870:	47b8      	blx	r7
 8007872:	3001      	adds	r0, #1
 8007874:	f43f af27 	beq.w	80076c6 <_printf_float+0xbe>
 8007878:	f108 0801 	add.w	r8, r8, #1
 800787c:	e7e6      	b.n	800784c <_printf_float+0x244>
 800787e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007880:	2b00      	cmp	r3, #0
 8007882:	dc39      	bgt.n	80078f8 <_printf_float+0x2f0>
 8007884:	4a1b      	ldr	r2, [pc, #108]	; (80078f4 <_printf_float+0x2ec>)
 8007886:	2301      	movs	r3, #1
 8007888:	4631      	mov	r1, r6
 800788a:	4628      	mov	r0, r5
 800788c:	47b8      	blx	r7
 800788e:	3001      	adds	r0, #1
 8007890:	f43f af19 	beq.w	80076c6 <_printf_float+0xbe>
 8007894:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007898:	4313      	orrs	r3, r2
 800789a:	d102      	bne.n	80078a2 <_printf_float+0x29a>
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	07d9      	lsls	r1, r3, #31
 80078a0:	d5d8      	bpl.n	8007854 <_printf_float+0x24c>
 80078a2:	ee18 3a10 	vmov	r3, s16
 80078a6:	4652      	mov	r2, sl
 80078a8:	4631      	mov	r1, r6
 80078aa:	4628      	mov	r0, r5
 80078ac:	47b8      	blx	r7
 80078ae:	3001      	adds	r0, #1
 80078b0:	f43f af09 	beq.w	80076c6 <_printf_float+0xbe>
 80078b4:	f04f 0900 	mov.w	r9, #0
 80078b8:	f104 0a1a 	add.w	sl, r4, #26
 80078bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078be:	425b      	negs	r3, r3
 80078c0:	454b      	cmp	r3, r9
 80078c2:	dc01      	bgt.n	80078c8 <_printf_float+0x2c0>
 80078c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c6:	e792      	b.n	80077ee <_printf_float+0x1e6>
 80078c8:	2301      	movs	r3, #1
 80078ca:	4652      	mov	r2, sl
 80078cc:	4631      	mov	r1, r6
 80078ce:	4628      	mov	r0, r5
 80078d0:	47b8      	blx	r7
 80078d2:	3001      	adds	r0, #1
 80078d4:	f43f aef7 	beq.w	80076c6 <_printf_float+0xbe>
 80078d8:	f109 0901 	add.w	r9, r9, #1
 80078dc:	e7ee      	b.n	80078bc <_printf_float+0x2b4>
 80078de:	bf00      	nop
 80078e0:	7fefffff 	.word	0x7fefffff
 80078e4:	0800a258 	.word	0x0800a258
 80078e8:	0800a25c 	.word	0x0800a25c
 80078ec:	0800a260 	.word	0x0800a260
 80078f0:	0800a264 	.word	0x0800a264
 80078f4:	0800a268 	.word	0x0800a268
 80078f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078fc:	429a      	cmp	r2, r3
 80078fe:	bfa8      	it	ge
 8007900:	461a      	movge	r2, r3
 8007902:	2a00      	cmp	r2, #0
 8007904:	4691      	mov	r9, r2
 8007906:	dc37      	bgt.n	8007978 <_printf_float+0x370>
 8007908:	f04f 0b00 	mov.w	fp, #0
 800790c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007910:	f104 021a 	add.w	r2, r4, #26
 8007914:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007916:	9305      	str	r3, [sp, #20]
 8007918:	eba3 0309 	sub.w	r3, r3, r9
 800791c:	455b      	cmp	r3, fp
 800791e:	dc33      	bgt.n	8007988 <_printf_float+0x380>
 8007920:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007924:	429a      	cmp	r2, r3
 8007926:	db3b      	blt.n	80079a0 <_printf_float+0x398>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	07da      	lsls	r2, r3, #31
 800792c:	d438      	bmi.n	80079a0 <_printf_float+0x398>
 800792e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007932:	eba2 0903 	sub.w	r9, r2, r3
 8007936:	9b05      	ldr	r3, [sp, #20]
 8007938:	1ad2      	subs	r2, r2, r3
 800793a:	4591      	cmp	r9, r2
 800793c:	bfa8      	it	ge
 800793e:	4691      	movge	r9, r2
 8007940:	f1b9 0f00 	cmp.w	r9, #0
 8007944:	dc35      	bgt.n	80079b2 <_printf_float+0x3aa>
 8007946:	f04f 0800 	mov.w	r8, #0
 800794a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800794e:	f104 0a1a 	add.w	sl, r4, #26
 8007952:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007956:	1a9b      	subs	r3, r3, r2
 8007958:	eba3 0309 	sub.w	r3, r3, r9
 800795c:	4543      	cmp	r3, r8
 800795e:	f77f af79 	ble.w	8007854 <_printf_float+0x24c>
 8007962:	2301      	movs	r3, #1
 8007964:	4652      	mov	r2, sl
 8007966:	4631      	mov	r1, r6
 8007968:	4628      	mov	r0, r5
 800796a:	47b8      	blx	r7
 800796c:	3001      	adds	r0, #1
 800796e:	f43f aeaa 	beq.w	80076c6 <_printf_float+0xbe>
 8007972:	f108 0801 	add.w	r8, r8, #1
 8007976:	e7ec      	b.n	8007952 <_printf_float+0x34a>
 8007978:	4613      	mov	r3, r2
 800797a:	4631      	mov	r1, r6
 800797c:	4642      	mov	r2, r8
 800797e:	4628      	mov	r0, r5
 8007980:	47b8      	blx	r7
 8007982:	3001      	adds	r0, #1
 8007984:	d1c0      	bne.n	8007908 <_printf_float+0x300>
 8007986:	e69e      	b.n	80076c6 <_printf_float+0xbe>
 8007988:	2301      	movs	r3, #1
 800798a:	4631      	mov	r1, r6
 800798c:	4628      	mov	r0, r5
 800798e:	9205      	str	r2, [sp, #20]
 8007990:	47b8      	blx	r7
 8007992:	3001      	adds	r0, #1
 8007994:	f43f ae97 	beq.w	80076c6 <_printf_float+0xbe>
 8007998:	9a05      	ldr	r2, [sp, #20]
 800799a:	f10b 0b01 	add.w	fp, fp, #1
 800799e:	e7b9      	b.n	8007914 <_printf_float+0x30c>
 80079a0:	ee18 3a10 	vmov	r3, s16
 80079a4:	4652      	mov	r2, sl
 80079a6:	4631      	mov	r1, r6
 80079a8:	4628      	mov	r0, r5
 80079aa:	47b8      	blx	r7
 80079ac:	3001      	adds	r0, #1
 80079ae:	d1be      	bne.n	800792e <_printf_float+0x326>
 80079b0:	e689      	b.n	80076c6 <_printf_float+0xbe>
 80079b2:	9a05      	ldr	r2, [sp, #20]
 80079b4:	464b      	mov	r3, r9
 80079b6:	4442      	add	r2, r8
 80079b8:	4631      	mov	r1, r6
 80079ba:	4628      	mov	r0, r5
 80079bc:	47b8      	blx	r7
 80079be:	3001      	adds	r0, #1
 80079c0:	d1c1      	bne.n	8007946 <_printf_float+0x33e>
 80079c2:	e680      	b.n	80076c6 <_printf_float+0xbe>
 80079c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079c6:	2a01      	cmp	r2, #1
 80079c8:	dc01      	bgt.n	80079ce <_printf_float+0x3c6>
 80079ca:	07db      	lsls	r3, r3, #31
 80079cc:	d53a      	bpl.n	8007a44 <_printf_float+0x43c>
 80079ce:	2301      	movs	r3, #1
 80079d0:	4642      	mov	r2, r8
 80079d2:	4631      	mov	r1, r6
 80079d4:	4628      	mov	r0, r5
 80079d6:	47b8      	blx	r7
 80079d8:	3001      	adds	r0, #1
 80079da:	f43f ae74 	beq.w	80076c6 <_printf_float+0xbe>
 80079de:	ee18 3a10 	vmov	r3, s16
 80079e2:	4652      	mov	r2, sl
 80079e4:	4631      	mov	r1, r6
 80079e6:	4628      	mov	r0, r5
 80079e8:	47b8      	blx	r7
 80079ea:	3001      	adds	r0, #1
 80079ec:	f43f ae6b 	beq.w	80076c6 <_printf_float+0xbe>
 80079f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079f4:	2200      	movs	r2, #0
 80079f6:	2300      	movs	r3, #0
 80079f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80079fc:	f7f9 f86c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a00:	b9d8      	cbnz	r0, 8007a3a <_printf_float+0x432>
 8007a02:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007a06:	f108 0201 	add.w	r2, r8, #1
 8007a0a:	4631      	mov	r1, r6
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	47b8      	blx	r7
 8007a10:	3001      	adds	r0, #1
 8007a12:	d10e      	bne.n	8007a32 <_printf_float+0x42a>
 8007a14:	e657      	b.n	80076c6 <_printf_float+0xbe>
 8007a16:	2301      	movs	r3, #1
 8007a18:	4652      	mov	r2, sl
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	47b8      	blx	r7
 8007a20:	3001      	adds	r0, #1
 8007a22:	f43f ae50 	beq.w	80076c6 <_printf_float+0xbe>
 8007a26:	f108 0801 	add.w	r8, r8, #1
 8007a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	4543      	cmp	r3, r8
 8007a30:	dcf1      	bgt.n	8007a16 <_printf_float+0x40e>
 8007a32:	464b      	mov	r3, r9
 8007a34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a38:	e6da      	b.n	80077f0 <_printf_float+0x1e8>
 8007a3a:	f04f 0800 	mov.w	r8, #0
 8007a3e:	f104 0a1a 	add.w	sl, r4, #26
 8007a42:	e7f2      	b.n	8007a2a <_printf_float+0x422>
 8007a44:	2301      	movs	r3, #1
 8007a46:	4642      	mov	r2, r8
 8007a48:	e7df      	b.n	8007a0a <_printf_float+0x402>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	464a      	mov	r2, r9
 8007a4e:	4631      	mov	r1, r6
 8007a50:	4628      	mov	r0, r5
 8007a52:	47b8      	blx	r7
 8007a54:	3001      	adds	r0, #1
 8007a56:	f43f ae36 	beq.w	80076c6 <_printf_float+0xbe>
 8007a5a:	f108 0801 	add.w	r8, r8, #1
 8007a5e:	68e3      	ldr	r3, [r4, #12]
 8007a60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a62:	1a5b      	subs	r3, r3, r1
 8007a64:	4543      	cmp	r3, r8
 8007a66:	dcf0      	bgt.n	8007a4a <_printf_float+0x442>
 8007a68:	e6f8      	b.n	800785c <_printf_float+0x254>
 8007a6a:	f04f 0800 	mov.w	r8, #0
 8007a6e:	f104 0919 	add.w	r9, r4, #25
 8007a72:	e7f4      	b.n	8007a5e <_printf_float+0x456>

08007a74 <_printf_common>:
 8007a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a78:	4616      	mov	r6, r2
 8007a7a:	4699      	mov	r9, r3
 8007a7c:	688a      	ldr	r2, [r1, #8]
 8007a7e:	690b      	ldr	r3, [r1, #16]
 8007a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a84:	4293      	cmp	r3, r2
 8007a86:	bfb8      	it	lt
 8007a88:	4613      	movlt	r3, r2
 8007a8a:	6033      	str	r3, [r6, #0]
 8007a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a90:	4607      	mov	r7, r0
 8007a92:	460c      	mov	r4, r1
 8007a94:	b10a      	cbz	r2, 8007a9a <_printf_common+0x26>
 8007a96:	3301      	adds	r3, #1
 8007a98:	6033      	str	r3, [r6, #0]
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	0699      	lsls	r1, r3, #26
 8007a9e:	bf42      	ittt	mi
 8007aa0:	6833      	ldrmi	r3, [r6, #0]
 8007aa2:	3302      	addmi	r3, #2
 8007aa4:	6033      	strmi	r3, [r6, #0]
 8007aa6:	6825      	ldr	r5, [r4, #0]
 8007aa8:	f015 0506 	ands.w	r5, r5, #6
 8007aac:	d106      	bne.n	8007abc <_printf_common+0x48>
 8007aae:	f104 0a19 	add.w	sl, r4, #25
 8007ab2:	68e3      	ldr	r3, [r4, #12]
 8007ab4:	6832      	ldr	r2, [r6, #0]
 8007ab6:	1a9b      	subs	r3, r3, r2
 8007ab8:	42ab      	cmp	r3, r5
 8007aba:	dc26      	bgt.n	8007b0a <_printf_common+0x96>
 8007abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ac0:	1e13      	subs	r3, r2, #0
 8007ac2:	6822      	ldr	r2, [r4, #0]
 8007ac4:	bf18      	it	ne
 8007ac6:	2301      	movne	r3, #1
 8007ac8:	0692      	lsls	r2, r2, #26
 8007aca:	d42b      	bmi.n	8007b24 <_printf_common+0xb0>
 8007acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	47c0      	blx	r8
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	d01e      	beq.n	8007b18 <_printf_common+0xa4>
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	6922      	ldr	r2, [r4, #16]
 8007ade:	f003 0306 	and.w	r3, r3, #6
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	bf02      	ittt	eq
 8007ae6:	68e5      	ldreq	r5, [r4, #12]
 8007ae8:	6833      	ldreq	r3, [r6, #0]
 8007aea:	1aed      	subeq	r5, r5, r3
 8007aec:	68a3      	ldr	r3, [r4, #8]
 8007aee:	bf0c      	ite	eq
 8007af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007af4:	2500      	movne	r5, #0
 8007af6:	4293      	cmp	r3, r2
 8007af8:	bfc4      	itt	gt
 8007afa:	1a9b      	subgt	r3, r3, r2
 8007afc:	18ed      	addgt	r5, r5, r3
 8007afe:	2600      	movs	r6, #0
 8007b00:	341a      	adds	r4, #26
 8007b02:	42b5      	cmp	r5, r6
 8007b04:	d11a      	bne.n	8007b3c <_printf_common+0xc8>
 8007b06:	2000      	movs	r0, #0
 8007b08:	e008      	b.n	8007b1c <_printf_common+0xa8>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	4652      	mov	r2, sl
 8007b0e:	4649      	mov	r1, r9
 8007b10:	4638      	mov	r0, r7
 8007b12:	47c0      	blx	r8
 8007b14:	3001      	adds	r0, #1
 8007b16:	d103      	bne.n	8007b20 <_printf_common+0xac>
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b20:	3501      	adds	r5, #1
 8007b22:	e7c6      	b.n	8007ab2 <_printf_common+0x3e>
 8007b24:	18e1      	adds	r1, r4, r3
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	2030      	movs	r0, #48	; 0x30
 8007b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b2e:	4422      	add	r2, r4
 8007b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b38:	3302      	adds	r3, #2
 8007b3a:	e7c7      	b.n	8007acc <_printf_common+0x58>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	4622      	mov	r2, r4
 8007b40:	4649      	mov	r1, r9
 8007b42:	4638      	mov	r0, r7
 8007b44:	47c0      	blx	r8
 8007b46:	3001      	adds	r0, #1
 8007b48:	d0e6      	beq.n	8007b18 <_printf_common+0xa4>
 8007b4a:	3601      	adds	r6, #1
 8007b4c:	e7d9      	b.n	8007b02 <_printf_common+0x8e>
	...

08007b50 <_printf_i>:
 8007b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b54:	7e0f      	ldrb	r7, [r1, #24]
 8007b56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b58:	2f78      	cmp	r7, #120	; 0x78
 8007b5a:	4691      	mov	r9, r2
 8007b5c:	4680      	mov	r8, r0
 8007b5e:	460c      	mov	r4, r1
 8007b60:	469a      	mov	sl, r3
 8007b62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b66:	d807      	bhi.n	8007b78 <_printf_i+0x28>
 8007b68:	2f62      	cmp	r7, #98	; 0x62
 8007b6a:	d80a      	bhi.n	8007b82 <_printf_i+0x32>
 8007b6c:	2f00      	cmp	r7, #0
 8007b6e:	f000 80d4 	beq.w	8007d1a <_printf_i+0x1ca>
 8007b72:	2f58      	cmp	r7, #88	; 0x58
 8007b74:	f000 80c0 	beq.w	8007cf8 <_printf_i+0x1a8>
 8007b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b80:	e03a      	b.n	8007bf8 <_printf_i+0xa8>
 8007b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b86:	2b15      	cmp	r3, #21
 8007b88:	d8f6      	bhi.n	8007b78 <_printf_i+0x28>
 8007b8a:	a101      	add	r1, pc, #4	; (adr r1, 8007b90 <_printf_i+0x40>)
 8007b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b90:	08007be9 	.word	0x08007be9
 8007b94:	08007bfd 	.word	0x08007bfd
 8007b98:	08007b79 	.word	0x08007b79
 8007b9c:	08007b79 	.word	0x08007b79
 8007ba0:	08007b79 	.word	0x08007b79
 8007ba4:	08007b79 	.word	0x08007b79
 8007ba8:	08007bfd 	.word	0x08007bfd
 8007bac:	08007b79 	.word	0x08007b79
 8007bb0:	08007b79 	.word	0x08007b79
 8007bb4:	08007b79 	.word	0x08007b79
 8007bb8:	08007b79 	.word	0x08007b79
 8007bbc:	08007d01 	.word	0x08007d01
 8007bc0:	08007c29 	.word	0x08007c29
 8007bc4:	08007cbb 	.word	0x08007cbb
 8007bc8:	08007b79 	.word	0x08007b79
 8007bcc:	08007b79 	.word	0x08007b79
 8007bd0:	08007d23 	.word	0x08007d23
 8007bd4:	08007b79 	.word	0x08007b79
 8007bd8:	08007c29 	.word	0x08007c29
 8007bdc:	08007b79 	.word	0x08007b79
 8007be0:	08007b79 	.word	0x08007b79
 8007be4:	08007cc3 	.word	0x08007cc3
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	1d1a      	adds	r2, r3, #4
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	602a      	str	r2, [r5, #0]
 8007bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e09f      	b.n	8007d3c <_printf_i+0x1ec>
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	682b      	ldr	r3, [r5, #0]
 8007c00:	0607      	lsls	r7, r0, #24
 8007c02:	f103 0104 	add.w	r1, r3, #4
 8007c06:	6029      	str	r1, [r5, #0]
 8007c08:	d501      	bpl.n	8007c0e <_printf_i+0xbe>
 8007c0a:	681e      	ldr	r6, [r3, #0]
 8007c0c:	e003      	b.n	8007c16 <_printf_i+0xc6>
 8007c0e:	0646      	lsls	r6, r0, #25
 8007c10:	d5fb      	bpl.n	8007c0a <_printf_i+0xba>
 8007c12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c16:	2e00      	cmp	r6, #0
 8007c18:	da03      	bge.n	8007c22 <_printf_i+0xd2>
 8007c1a:	232d      	movs	r3, #45	; 0x2d
 8007c1c:	4276      	negs	r6, r6
 8007c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c22:	485a      	ldr	r0, [pc, #360]	; (8007d8c <_printf_i+0x23c>)
 8007c24:	230a      	movs	r3, #10
 8007c26:	e012      	b.n	8007c4e <_printf_i+0xfe>
 8007c28:	682b      	ldr	r3, [r5, #0]
 8007c2a:	6820      	ldr	r0, [r4, #0]
 8007c2c:	1d19      	adds	r1, r3, #4
 8007c2e:	6029      	str	r1, [r5, #0]
 8007c30:	0605      	lsls	r5, r0, #24
 8007c32:	d501      	bpl.n	8007c38 <_printf_i+0xe8>
 8007c34:	681e      	ldr	r6, [r3, #0]
 8007c36:	e002      	b.n	8007c3e <_printf_i+0xee>
 8007c38:	0641      	lsls	r1, r0, #25
 8007c3a:	d5fb      	bpl.n	8007c34 <_printf_i+0xe4>
 8007c3c:	881e      	ldrh	r6, [r3, #0]
 8007c3e:	4853      	ldr	r0, [pc, #332]	; (8007d8c <_printf_i+0x23c>)
 8007c40:	2f6f      	cmp	r7, #111	; 0x6f
 8007c42:	bf0c      	ite	eq
 8007c44:	2308      	moveq	r3, #8
 8007c46:	230a      	movne	r3, #10
 8007c48:	2100      	movs	r1, #0
 8007c4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c4e:	6865      	ldr	r5, [r4, #4]
 8007c50:	60a5      	str	r5, [r4, #8]
 8007c52:	2d00      	cmp	r5, #0
 8007c54:	bfa2      	ittt	ge
 8007c56:	6821      	ldrge	r1, [r4, #0]
 8007c58:	f021 0104 	bicge.w	r1, r1, #4
 8007c5c:	6021      	strge	r1, [r4, #0]
 8007c5e:	b90e      	cbnz	r6, 8007c64 <_printf_i+0x114>
 8007c60:	2d00      	cmp	r5, #0
 8007c62:	d04b      	beq.n	8007cfc <_printf_i+0x1ac>
 8007c64:	4615      	mov	r5, r2
 8007c66:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c6a:	fb03 6711 	mls	r7, r3, r1, r6
 8007c6e:	5dc7      	ldrb	r7, [r0, r7]
 8007c70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c74:	4637      	mov	r7, r6
 8007c76:	42bb      	cmp	r3, r7
 8007c78:	460e      	mov	r6, r1
 8007c7a:	d9f4      	bls.n	8007c66 <_printf_i+0x116>
 8007c7c:	2b08      	cmp	r3, #8
 8007c7e:	d10b      	bne.n	8007c98 <_printf_i+0x148>
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	07de      	lsls	r6, r3, #31
 8007c84:	d508      	bpl.n	8007c98 <_printf_i+0x148>
 8007c86:	6923      	ldr	r3, [r4, #16]
 8007c88:	6861      	ldr	r1, [r4, #4]
 8007c8a:	4299      	cmp	r1, r3
 8007c8c:	bfde      	ittt	le
 8007c8e:	2330      	movle	r3, #48	; 0x30
 8007c90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c98:	1b52      	subs	r2, r2, r5
 8007c9a:	6122      	str	r2, [r4, #16]
 8007c9c:	f8cd a000 	str.w	sl, [sp]
 8007ca0:	464b      	mov	r3, r9
 8007ca2:	aa03      	add	r2, sp, #12
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4640      	mov	r0, r8
 8007ca8:	f7ff fee4 	bl	8007a74 <_printf_common>
 8007cac:	3001      	adds	r0, #1
 8007cae:	d14a      	bne.n	8007d46 <_printf_i+0x1f6>
 8007cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb4:	b004      	add	sp, #16
 8007cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	f043 0320 	orr.w	r3, r3, #32
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	4833      	ldr	r0, [pc, #204]	; (8007d90 <_printf_i+0x240>)
 8007cc4:	2778      	movs	r7, #120	; 0x78
 8007cc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	6829      	ldr	r1, [r5, #0]
 8007cce:	061f      	lsls	r7, r3, #24
 8007cd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cd4:	d402      	bmi.n	8007cdc <_printf_i+0x18c>
 8007cd6:	065f      	lsls	r7, r3, #25
 8007cd8:	bf48      	it	mi
 8007cda:	b2b6      	uxthmi	r6, r6
 8007cdc:	07df      	lsls	r7, r3, #31
 8007cde:	bf48      	it	mi
 8007ce0:	f043 0320 	orrmi.w	r3, r3, #32
 8007ce4:	6029      	str	r1, [r5, #0]
 8007ce6:	bf48      	it	mi
 8007ce8:	6023      	strmi	r3, [r4, #0]
 8007cea:	b91e      	cbnz	r6, 8007cf4 <_printf_i+0x1a4>
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	f023 0320 	bic.w	r3, r3, #32
 8007cf2:	6023      	str	r3, [r4, #0]
 8007cf4:	2310      	movs	r3, #16
 8007cf6:	e7a7      	b.n	8007c48 <_printf_i+0xf8>
 8007cf8:	4824      	ldr	r0, [pc, #144]	; (8007d8c <_printf_i+0x23c>)
 8007cfa:	e7e4      	b.n	8007cc6 <_printf_i+0x176>
 8007cfc:	4615      	mov	r5, r2
 8007cfe:	e7bd      	b.n	8007c7c <_printf_i+0x12c>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	6826      	ldr	r6, [r4, #0]
 8007d04:	6961      	ldr	r1, [r4, #20]
 8007d06:	1d18      	adds	r0, r3, #4
 8007d08:	6028      	str	r0, [r5, #0]
 8007d0a:	0635      	lsls	r5, r6, #24
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	d501      	bpl.n	8007d14 <_printf_i+0x1c4>
 8007d10:	6019      	str	r1, [r3, #0]
 8007d12:	e002      	b.n	8007d1a <_printf_i+0x1ca>
 8007d14:	0670      	lsls	r0, r6, #25
 8007d16:	d5fb      	bpl.n	8007d10 <_printf_i+0x1c0>
 8007d18:	8019      	strh	r1, [r3, #0]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	6123      	str	r3, [r4, #16]
 8007d1e:	4615      	mov	r5, r2
 8007d20:	e7bc      	b.n	8007c9c <_printf_i+0x14c>
 8007d22:	682b      	ldr	r3, [r5, #0]
 8007d24:	1d1a      	adds	r2, r3, #4
 8007d26:	602a      	str	r2, [r5, #0]
 8007d28:	681d      	ldr	r5, [r3, #0]
 8007d2a:	6862      	ldr	r2, [r4, #4]
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	4628      	mov	r0, r5
 8007d30:	f7f8 fa56 	bl	80001e0 <memchr>
 8007d34:	b108      	cbz	r0, 8007d3a <_printf_i+0x1ea>
 8007d36:	1b40      	subs	r0, r0, r5
 8007d38:	6060      	str	r0, [r4, #4]
 8007d3a:	6863      	ldr	r3, [r4, #4]
 8007d3c:	6123      	str	r3, [r4, #16]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d44:	e7aa      	b.n	8007c9c <_printf_i+0x14c>
 8007d46:	6923      	ldr	r3, [r4, #16]
 8007d48:	462a      	mov	r2, r5
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	47d0      	blx	sl
 8007d50:	3001      	adds	r0, #1
 8007d52:	d0ad      	beq.n	8007cb0 <_printf_i+0x160>
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	079b      	lsls	r3, r3, #30
 8007d58:	d413      	bmi.n	8007d82 <_printf_i+0x232>
 8007d5a:	68e0      	ldr	r0, [r4, #12]
 8007d5c:	9b03      	ldr	r3, [sp, #12]
 8007d5e:	4298      	cmp	r0, r3
 8007d60:	bfb8      	it	lt
 8007d62:	4618      	movlt	r0, r3
 8007d64:	e7a6      	b.n	8007cb4 <_printf_i+0x164>
 8007d66:	2301      	movs	r3, #1
 8007d68:	4632      	mov	r2, r6
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	47d0      	blx	sl
 8007d70:	3001      	adds	r0, #1
 8007d72:	d09d      	beq.n	8007cb0 <_printf_i+0x160>
 8007d74:	3501      	adds	r5, #1
 8007d76:	68e3      	ldr	r3, [r4, #12]
 8007d78:	9903      	ldr	r1, [sp, #12]
 8007d7a:	1a5b      	subs	r3, r3, r1
 8007d7c:	42ab      	cmp	r3, r5
 8007d7e:	dcf2      	bgt.n	8007d66 <_printf_i+0x216>
 8007d80:	e7eb      	b.n	8007d5a <_printf_i+0x20a>
 8007d82:	2500      	movs	r5, #0
 8007d84:	f104 0619 	add.w	r6, r4, #25
 8007d88:	e7f5      	b.n	8007d76 <_printf_i+0x226>
 8007d8a:	bf00      	nop
 8007d8c:	0800a26a 	.word	0x0800a26a
 8007d90:	0800a27b 	.word	0x0800a27b

08007d94 <std>:
 8007d94:	2300      	movs	r3, #0
 8007d96:	b510      	push	{r4, lr}
 8007d98:	4604      	mov	r4, r0
 8007d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007da2:	6083      	str	r3, [r0, #8]
 8007da4:	8181      	strh	r1, [r0, #12]
 8007da6:	6643      	str	r3, [r0, #100]	; 0x64
 8007da8:	81c2      	strh	r2, [r0, #14]
 8007daa:	6183      	str	r3, [r0, #24]
 8007dac:	4619      	mov	r1, r3
 8007dae:	2208      	movs	r2, #8
 8007db0:	305c      	adds	r0, #92	; 0x5c
 8007db2:	f000 f928 	bl	8008006 <memset>
 8007db6:	4b0d      	ldr	r3, [pc, #52]	; (8007dec <std+0x58>)
 8007db8:	6263      	str	r3, [r4, #36]	; 0x24
 8007dba:	4b0d      	ldr	r3, [pc, #52]	; (8007df0 <std+0x5c>)
 8007dbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dbe:	4b0d      	ldr	r3, [pc, #52]	; (8007df4 <std+0x60>)
 8007dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dc2:	4b0d      	ldr	r3, [pc, #52]	; (8007df8 <std+0x64>)
 8007dc4:	6323      	str	r3, [r4, #48]	; 0x30
 8007dc6:	4b0d      	ldr	r3, [pc, #52]	; (8007dfc <std+0x68>)
 8007dc8:	6224      	str	r4, [r4, #32]
 8007dca:	429c      	cmp	r4, r3
 8007dcc:	d006      	beq.n	8007ddc <std+0x48>
 8007dce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007dd2:	4294      	cmp	r4, r2
 8007dd4:	d002      	beq.n	8007ddc <std+0x48>
 8007dd6:	33d0      	adds	r3, #208	; 0xd0
 8007dd8:	429c      	cmp	r4, r3
 8007dda:	d105      	bne.n	8007de8 <std+0x54>
 8007ddc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007de4:	f000 b98c 	b.w	8008100 <__retarget_lock_init_recursive>
 8007de8:	bd10      	pop	{r4, pc}
 8007dea:	bf00      	nop
 8007dec:	08007f81 	.word	0x08007f81
 8007df0:	08007fa3 	.word	0x08007fa3
 8007df4:	08007fdb 	.word	0x08007fdb
 8007df8:	08007fff 	.word	0x08007fff
 8007dfc:	2000033c 	.word	0x2000033c

08007e00 <stdio_exit_handler>:
 8007e00:	4a02      	ldr	r2, [pc, #8]	; (8007e0c <stdio_exit_handler+0xc>)
 8007e02:	4903      	ldr	r1, [pc, #12]	; (8007e10 <stdio_exit_handler+0x10>)
 8007e04:	4803      	ldr	r0, [pc, #12]	; (8007e14 <stdio_exit_handler+0x14>)
 8007e06:	f000 b869 	b.w	8007edc <_fwalk_sglue>
 8007e0a:	bf00      	nop
 8007e0c:	20000010 	.word	0x20000010
 8007e10:	08009ab1 	.word	0x08009ab1
 8007e14:	2000001c 	.word	0x2000001c

08007e18 <cleanup_stdio>:
 8007e18:	6841      	ldr	r1, [r0, #4]
 8007e1a:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <cleanup_stdio+0x34>)
 8007e1c:	4299      	cmp	r1, r3
 8007e1e:	b510      	push	{r4, lr}
 8007e20:	4604      	mov	r4, r0
 8007e22:	d001      	beq.n	8007e28 <cleanup_stdio+0x10>
 8007e24:	f001 fe44 	bl	8009ab0 <_fflush_r>
 8007e28:	68a1      	ldr	r1, [r4, #8]
 8007e2a:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <cleanup_stdio+0x38>)
 8007e2c:	4299      	cmp	r1, r3
 8007e2e:	d002      	beq.n	8007e36 <cleanup_stdio+0x1e>
 8007e30:	4620      	mov	r0, r4
 8007e32:	f001 fe3d 	bl	8009ab0 <_fflush_r>
 8007e36:	68e1      	ldr	r1, [r4, #12]
 8007e38:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <cleanup_stdio+0x3c>)
 8007e3a:	4299      	cmp	r1, r3
 8007e3c:	d004      	beq.n	8007e48 <cleanup_stdio+0x30>
 8007e3e:	4620      	mov	r0, r4
 8007e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e44:	f001 be34 	b.w	8009ab0 <_fflush_r>
 8007e48:	bd10      	pop	{r4, pc}
 8007e4a:	bf00      	nop
 8007e4c:	2000033c 	.word	0x2000033c
 8007e50:	200003a4 	.word	0x200003a4
 8007e54:	2000040c 	.word	0x2000040c

08007e58 <global_stdio_init.part.0>:
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <global_stdio_init.part.0+0x30>)
 8007e5c:	4c0b      	ldr	r4, [pc, #44]	; (8007e8c <global_stdio_init.part.0+0x34>)
 8007e5e:	4a0c      	ldr	r2, [pc, #48]	; (8007e90 <global_stdio_init.part.0+0x38>)
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	4620      	mov	r0, r4
 8007e64:	2200      	movs	r2, #0
 8007e66:	2104      	movs	r1, #4
 8007e68:	f7ff ff94 	bl	8007d94 <std>
 8007e6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007e70:	2201      	movs	r2, #1
 8007e72:	2109      	movs	r1, #9
 8007e74:	f7ff ff8e 	bl	8007d94 <std>
 8007e78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e82:	2112      	movs	r1, #18
 8007e84:	f7ff bf86 	b.w	8007d94 <std>
 8007e88:	20000474 	.word	0x20000474
 8007e8c:	2000033c 	.word	0x2000033c
 8007e90:	08007e01 	.word	0x08007e01

08007e94 <__sfp_lock_acquire>:
 8007e94:	4801      	ldr	r0, [pc, #4]	; (8007e9c <__sfp_lock_acquire+0x8>)
 8007e96:	f000 b934 	b.w	8008102 <__retarget_lock_acquire_recursive>
 8007e9a:	bf00      	nop
 8007e9c:	2000047d 	.word	0x2000047d

08007ea0 <__sfp_lock_release>:
 8007ea0:	4801      	ldr	r0, [pc, #4]	; (8007ea8 <__sfp_lock_release+0x8>)
 8007ea2:	f000 b92f 	b.w	8008104 <__retarget_lock_release_recursive>
 8007ea6:	bf00      	nop
 8007ea8:	2000047d 	.word	0x2000047d

08007eac <__sinit>:
 8007eac:	b510      	push	{r4, lr}
 8007eae:	4604      	mov	r4, r0
 8007eb0:	f7ff fff0 	bl	8007e94 <__sfp_lock_acquire>
 8007eb4:	6a23      	ldr	r3, [r4, #32]
 8007eb6:	b11b      	cbz	r3, 8007ec0 <__sinit+0x14>
 8007eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ebc:	f7ff bff0 	b.w	8007ea0 <__sfp_lock_release>
 8007ec0:	4b04      	ldr	r3, [pc, #16]	; (8007ed4 <__sinit+0x28>)
 8007ec2:	6223      	str	r3, [r4, #32]
 8007ec4:	4b04      	ldr	r3, [pc, #16]	; (8007ed8 <__sinit+0x2c>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1f5      	bne.n	8007eb8 <__sinit+0xc>
 8007ecc:	f7ff ffc4 	bl	8007e58 <global_stdio_init.part.0>
 8007ed0:	e7f2      	b.n	8007eb8 <__sinit+0xc>
 8007ed2:	bf00      	nop
 8007ed4:	08007e19 	.word	0x08007e19
 8007ed8:	20000474 	.word	0x20000474

08007edc <_fwalk_sglue>:
 8007edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ee0:	4607      	mov	r7, r0
 8007ee2:	4688      	mov	r8, r1
 8007ee4:	4614      	mov	r4, r2
 8007ee6:	2600      	movs	r6, #0
 8007ee8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007eec:	f1b9 0901 	subs.w	r9, r9, #1
 8007ef0:	d505      	bpl.n	8007efe <_fwalk_sglue+0x22>
 8007ef2:	6824      	ldr	r4, [r4, #0]
 8007ef4:	2c00      	cmp	r4, #0
 8007ef6:	d1f7      	bne.n	8007ee8 <_fwalk_sglue+0xc>
 8007ef8:	4630      	mov	r0, r6
 8007efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007efe:	89ab      	ldrh	r3, [r5, #12]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d907      	bls.n	8007f14 <_fwalk_sglue+0x38>
 8007f04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	d003      	beq.n	8007f14 <_fwalk_sglue+0x38>
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	4638      	mov	r0, r7
 8007f10:	47c0      	blx	r8
 8007f12:	4306      	orrs	r6, r0
 8007f14:	3568      	adds	r5, #104	; 0x68
 8007f16:	e7e9      	b.n	8007eec <_fwalk_sglue+0x10>

08007f18 <sniprintf>:
 8007f18:	b40c      	push	{r2, r3}
 8007f1a:	b530      	push	{r4, r5, lr}
 8007f1c:	4b17      	ldr	r3, [pc, #92]	; (8007f7c <sniprintf+0x64>)
 8007f1e:	1e0c      	subs	r4, r1, #0
 8007f20:	681d      	ldr	r5, [r3, #0]
 8007f22:	b09d      	sub	sp, #116	; 0x74
 8007f24:	da08      	bge.n	8007f38 <sniprintf+0x20>
 8007f26:	238b      	movs	r3, #139	; 0x8b
 8007f28:	602b      	str	r3, [r5, #0]
 8007f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2e:	b01d      	add	sp, #116	; 0x74
 8007f30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f34:	b002      	add	sp, #8
 8007f36:	4770      	bx	lr
 8007f38:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007f3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f40:	bf14      	ite	ne
 8007f42:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f46:	4623      	moveq	r3, r4
 8007f48:	9304      	str	r3, [sp, #16]
 8007f4a:	9307      	str	r3, [sp, #28]
 8007f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f50:	9002      	str	r0, [sp, #8]
 8007f52:	9006      	str	r0, [sp, #24]
 8007f54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f5a:	ab21      	add	r3, sp, #132	; 0x84
 8007f5c:	a902      	add	r1, sp, #8
 8007f5e:	4628      	mov	r0, r5
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	f001 fc21 	bl	80097a8 <_svfiprintf_r>
 8007f66:	1c43      	adds	r3, r0, #1
 8007f68:	bfbc      	itt	lt
 8007f6a:	238b      	movlt	r3, #139	; 0x8b
 8007f6c:	602b      	strlt	r3, [r5, #0]
 8007f6e:	2c00      	cmp	r4, #0
 8007f70:	d0dd      	beq.n	8007f2e <sniprintf+0x16>
 8007f72:	9b02      	ldr	r3, [sp, #8]
 8007f74:	2200      	movs	r2, #0
 8007f76:	701a      	strb	r2, [r3, #0]
 8007f78:	e7d9      	b.n	8007f2e <sniprintf+0x16>
 8007f7a:	bf00      	nop
 8007f7c:	20000068 	.word	0x20000068

08007f80 <__sread>:
 8007f80:	b510      	push	{r4, lr}
 8007f82:	460c      	mov	r4, r1
 8007f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f88:	f000 f86c 	bl	8008064 <_read_r>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	bfab      	itete	ge
 8007f90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f92:	89a3      	ldrhlt	r3, [r4, #12]
 8007f94:	181b      	addge	r3, r3, r0
 8007f96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f9a:	bfac      	ite	ge
 8007f9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f9e:	81a3      	strhlt	r3, [r4, #12]
 8007fa0:	bd10      	pop	{r4, pc}

08007fa2 <__swrite>:
 8007fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa6:	461f      	mov	r7, r3
 8007fa8:	898b      	ldrh	r3, [r1, #12]
 8007faa:	05db      	lsls	r3, r3, #23
 8007fac:	4605      	mov	r5, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	4616      	mov	r6, r2
 8007fb2:	d505      	bpl.n	8007fc0 <__swrite+0x1e>
 8007fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb8:	2302      	movs	r3, #2
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f000 f840 	bl	8008040 <_lseek_r>
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	4632      	mov	r2, r6
 8007fce:	463b      	mov	r3, r7
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd6:	f000 b857 	b.w	8008088 <_write_r>

08007fda <__sseek>:
 8007fda:	b510      	push	{r4, lr}
 8007fdc:	460c      	mov	r4, r1
 8007fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe2:	f000 f82d 	bl	8008040 <_lseek_r>
 8007fe6:	1c43      	adds	r3, r0, #1
 8007fe8:	89a3      	ldrh	r3, [r4, #12]
 8007fea:	bf15      	itete	ne
 8007fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ff6:	81a3      	strheq	r3, [r4, #12]
 8007ff8:	bf18      	it	ne
 8007ffa:	81a3      	strhne	r3, [r4, #12]
 8007ffc:	bd10      	pop	{r4, pc}

08007ffe <__sclose>:
 8007ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008002:	f000 b80d 	b.w	8008020 <_close_r>

08008006 <memset>:
 8008006:	4402      	add	r2, r0
 8008008:	4603      	mov	r3, r0
 800800a:	4293      	cmp	r3, r2
 800800c:	d100      	bne.n	8008010 <memset+0xa>
 800800e:	4770      	bx	lr
 8008010:	f803 1b01 	strb.w	r1, [r3], #1
 8008014:	e7f9      	b.n	800800a <memset+0x4>
	...

08008018 <_localeconv_r>:
 8008018:	4800      	ldr	r0, [pc, #0]	; (800801c <_localeconv_r+0x4>)
 800801a:	4770      	bx	lr
 800801c:	2000015c 	.word	0x2000015c

08008020 <_close_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4d06      	ldr	r5, [pc, #24]	; (800803c <_close_r+0x1c>)
 8008024:	2300      	movs	r3, #0
 8008026:	4604      	mov	r4, r0
 8008028:	4608      	mov	r0, r1
 800802a:	602b      	str	r3, [r5, #0]
 800802c:	f7f9 fbe3 	bl	80017f6 <_close>
 8008030:	1c43      	adds	r3, r0, #1
 8008032:	d102      	bne.n	800803a <_close_r+0x1a>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	b103      	cbz	r3, 800803a <_close_r+0x1a>
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	bd38      	pop	{r3, r4, r5, pc}
 800803c:	20000478 	.word	0x20000478

08008040 <_lseek_r>:
 8008040:	b538      	push	{r3, r4, r5, lr}
 8008042:	4d07      	ldr	r5, [pc, #28]	; (8008060 <_lseek_r+0x20>)
 8008044:	4604      	mov	r4, r0
 8008046:	4608      	mov	r0, r1
 8008048:	4611      	mov	r1, r2
 800804a:	2200      	movs	r2, #0
 800804c:	602a      	str	r2, [r5, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	f7f9 fbf8 	bl	8001844 <_lseek>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d102      	bne.n	800805e <_lseek_r+0x1e>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	b103      	cbz	r3, 800805e <_lseek_r+0x1e>
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	20000478 	.word	0x20000478

08008064 <_read_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4d07      	ldr	r5, [pc, #28]	; (8008084 <_read_r+0x20>)
 8008068:	4604      	mov	r4, r0
 800806a:	4608      	mov	r0, r1
 800806c:	4611      	mov	r1, r2
 800806e:	2200      	movs	r2, #0
 8008070:	602a      	str	r2, [r5, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	f7f9 fb86 	bl	8001784 <_read>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d102      	bne.n	8008082 <_read_r+0x1e>
 800807c:	682b      	ldr	r3, [r5, #0]
 800807e:	b103      	cbz	r3, 8008082 <_read_r+0x1e>
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	20000478 	.word	0x20000478

08008088 <_write_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4d07      	ldr	r5, [pc, #28]	; (80080a8 <_write_r+0x20>)
 800808c:	4604      	mov	r4, r0
 800808e:	4608      	mov	r0, r1
 8008090:	4611      	mov	r1, r2
 8008092:	2200      	movs	r2, #0
 8008094:	602a      	str	r2, [r5, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	f7f9 fb91 	bl	80017be <_write>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_write_r+0x1e>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_write_r+0x1e>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	20000478 	.word	0x20000478

080080ac <__errno>:
 80080ac:	4b01      	ldr	r3, [pc, #4]	; (80080b4 <__errno+0x8>)
 80080ae:	6818      	ldr	r0, [r3, #0]
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	20000068 	.word	0x20000068

080080b8 <__libc_init_array>:
 80080b8:	b570      	push	{r4, r5, r6, lr}
 80080ba:	4d0d      	ldr	r5, [pc, #52]	; (80080f0 <__libc_init_array+0x38>)
 80080bc:	4c0d      	ldr	r4, [pc, #52]	; (80080f4 <__libc_init_array+0x3c>)
 80080be:	1b64      	subs	r4, r4, r5
 80080c0:	10a4      	asrs	r4, r4, #2
 80080c2:	2600      	movs	r6, #0
 80080c4:	42a6      	cmp	r6, r4
 80080c6:	d109      	bne.n	80080dc <__libc_init_array+0x24>
 80080c8:	4d0b      	ldr	r5, [pc, #44]	; (80080f8 <__libc_init_array+0x40>)
 80080ca:	4c0c      	ldr	r4, [pc, #48]	; (80080fc <__libc_init_array+0x44>)
 80080cc:	f002 f894 	bl	800a1f8 <_init>
 80080d0:	1b64      	subs	r4, r4, r5
 80080d2:	10a4      	asrs	r4, r4, #2
 80080d4:	2600      	movs	r6, #0
 80080d6:	42a6      	cmp	r6, r4
 80080d8:	d105      	bne.n	80080e6 <__libc_init_array+0x2e>
 80080da:	bd70      	pop	{r4, r5, r6, pc}
 80080dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e0:	4798      	blx	r3
 80080e2:	3601      	adds	r6, #1
 80080e4:	e7ee      	b.n	80080c4 <__libc_init_array+0xc>
 80080e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ea:	4798      	blx	r3
 80080ec:	3601      	adds	r6, #1
 80080ee:	e7f2      	b.n	80080d6 <__libc_init_array+0x1e>
 80080f0:	0800a5d4 	.word	0x0800a5d4
 80080f4:	0800a5d4 	.word	0x0800a5d4
 80080f8:	0800a5d4 	.word	0x0800a5d4
 80080fc:	0800a5d8 	.word	0x0800a5d8

08008100 <__retarget_lock_init_recursive>:
 8008100:	4770      	bx	lr

08008102 <__retarget_lock_acquire_recursive>:
 8008102:	4770      	bx	lr

08008104 <__retarget_lock_release_recursive>:
 8008104:	4770      	bx	lr

08008106 <quorem>:
 8008106:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810a:	6903      	ldr	r3, [r0, #16]
 800810c:	690c      	ldr	r4, [r1, #16]
 800810e:	42a3      	cmp	r3, r4
 8008110:	4607      	mov	r7, r0
 8008112:	db7e      	blt.n	8008212 <quorem+0x10c>
 8008114:	3c01      	subs	r4, #1
 8008116:	f101 0814 	add.w	r8, r1, #20
 800811a:	f100 0514 	add.w	r5, r0, #20
 800811e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008122:	9301      	str	r3, [sp, #4]
 8008124:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800812c:	3301      	adds	r3, #1
 800812e:	429a      	cmp	r2, r3
 8008130:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008134:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008138:	fbb2 f6f3 	udiv	r6, r2, r3
 800813c:	d331      	bcc.n	80081a2 <quorem+0x9c>
 800813e:	f04f 0e00 	mov.w	lr, #0
 8008142:	4640      	mov	r0, r8
 8008144:	46ac      	mov	ip, r5
 8008146:	46f2      	mov	sl, lr
 8008148:	f850 2b04 	ldr.w	r2, [r0], #4
 800814c:	b293      	uxth	r3, r2
 800814e:	fb06 e303 	mla	r3, r6, r3, lr
 8008152:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008156:	0c1a      	lsrs	r2, r3, #16
 8008158:	b29b      	uxth	r3, r3
 800815a:	ebaa 0303 	sub.w	r3, sl, r3
 800815e:	f8dc a000 	ldr.w	sl, [ip]
 8008162:	fa13 f38a 	uxtah	r3, r3, sl
 8008166:	fb06 220e 	mla	r2, r6, lr, r2
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	9b00      	ldr	r3, [sp, #0]
 800816e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008172:	b292      	uxth	r2, r2
 8008174:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008178:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800817c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008180:	4581      	cmp	r9, r0
 8008182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008186:	f84c 3b04 	str.w	r3, [ip], #4
 800818a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800818e:	d2db      	bcs.n	8008148 <quorem+0x42>
 8008190:	f855 300b 	ldr.w	r3, [r5, fp]
 8008194:	b92b      	cbnz	r3, 80081a2 <quorem+0x9c>
 8008196:	9b01      	ldr	r3, [sp, #4]
 8008198:	3b04      	subs	r3, #4
 800819a:	429d      	cmp	r5, r3
 800819c:	461a      	mov	r2, r3
 800819e:	d32c      	bcc.n	80081fa <quorem+0xf4>
 80081a0:	613c      	str	r4, [r7, #16]
 80081a2:	4638      	mov	r0, r7
 80081a4:	f001 f9a6 	bl	80094f4 <__mcmp>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	db22      	blt.n	80081f2 <quorem+0xec>
 80081ac:	3601      	adds	r6, #1
 80081ae:	4629      	mov	r1, r5
 80081b0:	2000      	movs	r0, #0
 80081b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80081b6:	f8d1 c000 	ldr.w	ip, [r1]
 80081ba:	b293      	uxth	r3, r2
 80081bc:	1ac3      	subs	r3, r0, r3
 80081be:	0c12      	lsrs	r2, r2, #16
 80081c0:	fa13 f38c 	uxtah	r3, r3, ip
 80081c4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80081c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081d2:	45c1      	cmp	r9, r8
 80081d4:	f841 3b04 	str.w	r3, [r1], #4
 80081d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081dc:	d2e9      	bcs.n	80081b2 <quorem+0xac>
 80081de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081e6:	b922      	cbnz	r2, 80081f2 <quorem+0xec>
 80081e8:	3b04      	subs	r3, #4
 80081ea:	429d      	cmp	r5, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	d30a      	bcc.n	8008206 <quorem+0x100>
 80081f0:	613c      	str	r4, [r7, #16]
 80081f2:	4630      	mov	r0, r6
 80081f4:	b003      	add	sp, #12
 80081f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fa:	6812      	ldr	r2, [r2, #0]
 80081fc:	3b04      	subs	r3, #4
 80081fe:	2a00      	cmp	r2, #0
 8008200:	d1ce      	bne.n	80081a0 <quorem+0x9a>
 8008202:	3c01      	subs	r4, #1
 8008204:	e7c9      	b.n	800819a <quorem+0x94>
 8008206:	6812      	ldr	r2, [r2, #0]
 8008208:	3b04      	subs	r3, #4
 800820a:	2a00      	cmp	r2, #0
 800820c:	d1f0      	bne.n	80081f0 <quorem+0xea>
 800820e:	3c01      	subs	r4, #1
 8008210:	e7eb      	b.n	80081ea <quorem+0xe4>
 8008212:	2000      	movs	r0, #0
 8008214:	e7ee      	b.n	80081f4 <quorem+0xee>
	...

08008218 <_dtoa_r>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	ed2d 8b04 	vpush	{d8-d9}
 8008220:	69c5      	ldr	r5, [r0, #28]
 8008222:	b093      	sub	sp, #76	; 0x4c
 8008224:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008228:	ec57 6b10 	vmov	r6, r7, d0
 800822c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008230:	9107      	str	r1, [sp, #28]
 8008232:	4604      	mov	r4, r0
 8008234:	920a      	str	r2, [sp, #40]	; 0x28
 8008236:	930d      	str	r3, [sp, #52]	; 0x34
 8008238:	b975      	cbnz	r5, 8008258 <_dtoa_r+0x40>
 800823a:	2010      	movs	r0, #16
 800823c:	f000 fe2a 	bl	8008e94 <malloc>
 8008240:	4602      	mov	r2, r0
 8008242:	61e0      	str	r0, [r4, #28]
 8008244:	b920      	cbnz	r0, 8008250 <_dtoa_r+0x38>
 8008246:	4bae      	ldr	r3, [pc, #696]	; (8008500 <_dtoa_r+0x2e8>)
 8008248:	21ef      	movs	r1, #239	; 0xef
 800824a:	48ae      	ldr	r0, [pc, #696]	; (8008504 <_dtoa_r+0x2ec>)
 800824c:	f001 fc90 	bl	8009b70 <__assert_func>
 8008250:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008254:	6005      	str	r5, [r0, #0]
 8008256:	60c5      	str	r5, [r0, #12]
 8008258:	69e3      	ldr	r3, [r4, #28]
 800825a:	6819      	ldr	r1, [r3, #0]
 800825c:	b151      	cbz	r1, 8008274 <_dtoa_r+0x5c>
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	604a      	str	r2, [r1, #4]
 8008262:	2301      	movs	r3, #1
 8008264:	4093      	lsls	r3, r2
 8008266:	608b      	str	r3, [r1, #8]
 8008268:	4620      	mov	r0, r4
 800826a:	f000 ff07 	bl	800907c <_Bfree>
 800826e:	69e3      	ldr	r3, [r4, #28]
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	1e3b      	subs	r3, r7, #0
 8008276:	bfbb      	ittet	lt
 8008278:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800827c:	9303      	strlt	r3, [sp, #12]
 800827e:	2300      	movge	r3, #0
 8008280:	2201      	movlt	r2, #1
 8008282:	bfac      	ite	ge
 8008284:	f8c8 3000 	strge.w	r3, [r8]
 8008288:	f8c8 2000 	strlt.w	r2, [r8]
 800828c:	4b9e      	ldr	r3, [pc, #632]	; (8008508 <_dtoa_r+0x2f0>)
 800828e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008292:	ea33 0308 	bics.w	r3, r3, r8
 8008296:	d11b      	bne.n	80082d0 <_dtoa_r+0xb8>
 8008298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800829a:	f242 730f 	movw	r3, #9999	; 0x270f
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80082a4:	4333      	orrs	r3, r6
 80082a6:	f000 8593 	beq.w	8008dd0 <_dtoa_r+0xbb8>
 80082aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082ac:	b963      	cbnz	r3, 80082c8 <_dtoa_r+0xb0>
 80082ae:	4b97      	ldr	r3, [pc, #604]	; (800850c <_dtoa_r+0x2f4>)
 80082b0:	e027      	b.n	8008302 <_dtoa_r+0xea>
 80082b2:	4b97      	ldr	r3, [pc, #604]	; (8008510 <_dtoa_r+0x2f8>)
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	3308      	adds	r3, #8
 80082b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	9800      	ldr	r0, [sp, #0]
 80082be:	b013      	add	sp, #76	; 0x4c
 80082c0:	ecbd 8b04 	vpop	{d8-d9}
 80082c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c8:	4b90      	ldr	r3, [pc, #576]	; (800850c <_dtoa_r+0x2f4>)
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	3303      	adds	r3, #3
 80082ce:	e7f3      	b.n	80082b8 <_dtoa_r+0xa0>
 80082d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082d4:	2200      	movs	r2, #0
 80082d6:	ec51 0b17 	vmov	r0, r1, d7
 80082da:	eeb0 8a47 	vmov.f32	s16, s14
 80082de:	eef0 8a67 	vmov.f32	s17, s15
 80082e2:	2300      	movs	r3, #0
 80082e4:	f7f8 fbf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80082e8:	4681      	mov	r9, r0
 80082ea:	b160      	cbz	r0, 8008306 <_dtoa_r+0xee>
 80082ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082ee:	2301      	movs	r3, #1
 80082f0:	6013      	str	r3, [r2, #0]
 80082f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 8568 	beq.w	8008dca <_dtoa_r+0xbb2>
 80082fa:	4b86      	ldr	r3, [pc, #536]	; (8008514 <_dtoa_r+0x2fc>)
 80082fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	3b01      	subs	r3, #1
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	e7da      	b.n	80082bc <_dtoa_r+0xa4>
 8008306:	aa10      	add	r2, sp, #64	; 0x40
 8008308:	a911      	add	r1, sp, #68	; 0x44
 800830a:	4620      	mov	r0, r4
 800830c:	eeb0 0a48 	vmov.f32	s0, s16
 8008310:	eef0 0a68 	vmov.f32	s1, s17
 8008314:	f001 f994 	bl	8009640 <__d2b>
 8008318:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800831c:	4682      	mov	sl, r0
 800831e:	2d00      	cmp	r5, #0
 8008320:	d07f      	beq.n	8008422 <_dtoa_r+0x20a>
 8008322:	ee18 3a90 	vmov	r3, s17
 8008326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800832a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800832e:	ec51 0b18 	vmov	r0, r1, d8
 8008332:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008336:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800833a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800833e:	4619      	mov	r1, r3
 8008340:	2200      	movs	r2, #0
 8008342:	4b75      	ldr	r3, [pc, #468]	; (8008518 <_dtoa_r+0x300>)
 8008344:	f7f7 ffa8 	bl	8000298 <__aeabi_dsub>
 8008348:	a367      	add	r3, pc, #412	; (adr r3, 80084e8 <_dtoa_r+0x2d0>)
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	f7f8 f95b 	bl	8000608 <__aeabi_dmul>
 8008352:	a367      	add	r3, pc, #412	; (adr r3, 80084f0 <_dtoa_r+0x2d8>)
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	f7f7 ffa0 	bl	800029c <__adddf3>
 800835c:	4606      	mov	r6, r0
 800835e:	4628      	mov	r0, r5
 8008360:	460f      	mov	r7, r1
 8008362:	f7f8 f8e7 	bl	8000534 <__aeabi_i2d>
 8008366:	a364      	add	r3, pc, #400	; (adr r3, 80084f8 <_dtoa_r+0x2e0>)
 8008368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836c:	f7f8 f94c 	bl	8000608 <__aeabi_dmul>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	4630      	mov	r0, r6
 8008376:	4639      	mov	r1, r7
 8008378:	f7f7 ff90 	bl	800029c <__adddf3>
 800837c:	4606      	mov	r6, r0
 800837e:	460f      	mov	r7, r1
 8008380:	f7f8 fbf2 	bl	8000b68 <__aeabi_d2iz>
 8008384:	2200      	movs	r2, #0
 8008386:	4683      	mov	fp, r0
 8008388:	2300      	movs	r3, #0
 800838a:	4630      	mov	r0, r6
 800838c:	4639      	mov	r1, r7
 800838e:	f7f8 fbad 	bl	8000aec <__aeabi_dcmplt>
 8008392:	b148      	cbz	r0, 80083a8 <_dtoa_r+0x190>
 8008394:	4658      	mov	r0, fp
 8008396:	f7f8 f8cd 	bl	8000534 <__aeabi_i2d>
 800839a:	4632      	mov	r2, r6
 800839c:	463b      	mov	r3, r7
 800839e:	f7f8 fb9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80083a2:	b908      	cbnz	r0, 80083a8 <_dtoa_r+0x190>
 80083a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083a8:	f1bb 0f16 	cmp.w	fp, #22
 80083ac:	d857      	bhi.n	800845e <_dtoa_r+0x246>
 80083ae:	4b5b      	ldr	r3, [pc, #364]	; (800851c <_dtoa_r+0x304>)
 80083b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	ec51 0b18 	vmov	r0, r1, d8
 80083bc:	f7f8 fb96 	bl	8000aec <__aeabi_dcmplt>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d04e      	beq.n	8008462 <_dtoa_r+0x24a>
 80083c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083c8:	2300      	movs	r3, #0
 80083ca:	930c      	str	r3, [sp, #48]	; 0x30
 80083cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083ce:	1b5b      	subs	r3, r3, r5
 80083d0:	1e5a      	subs	r2, r3, #1
 80083d2:	bf45      	ittet	mi
 80083d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80083d8:	9305      	strmi	r3, [sp, #20]
 80083da:	2300      	movpl	r3, #0
 80083dc:	2300      	movmi	r3, #0
 80083de:	9206      	str	r2, [sp, #24]
 80083e0:	bf54      	ite	pl
 80083e2:	9305      	strpl	r3, [sp, #20]
 80083e4:	9306      	strmi	r3, [sp, #24]
 80083e6:	f1bb 0f00 	cmp.w	fp, #0
 80083ea:	db3c      	blt.n	8008466 <_dtoa_r+0x24e>
 80083ec:	9b06      	ldr	r3, [sp, #24]
 80083ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80083f2:	445b      	add	r3, fp
 80083f4:	9306      	str	r3, [sp, #24]
 80083f6:	2300      	movs	r3, #0
 80083f8:	9308      	str	r3, [sp, #32]
 80083fa:	9b07      	ldr	r3, [sp, #28]
 80083fc:	2b09      	cmp	r3, #9
 80083fe:	d868      	bhi.n	80084d2 <_dtoa_r+0x2ba>
 8008400:	2b05      	cmp	r3, #5
 8008402:	bfc4      	itt	gt
 8008404:	3b04      	subgt	r3, #4
 8008406:	9307      	strgt	r3, [sp, #28]
 8008408:	9b07      	ldr	r3, [sp, #28]
 800840a:	f1a3 0302 	sub.w	r3, r3, #2
 800840e:	bfcc      	ite	gt
 8008410:	2500      	movgt	r5, #0
 8008412:	2501      	movle	r5, #1
 8008414:	2b03      	cmp	r3, #3
 8008416:	f200 8085 	bhi.w	8008524 <_dtoa_r+0x30c>
 800841a:	e8df f003 	tbb	[pc, r3]
 800841e:	3b2e      	.short	0x3b2e
 8008420:	5839      	.short	0x5839
 8008422:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008426:	441d      	add	r5, r3
 8008428:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800842c:	2b20      	cmp	r3, #32
 800842e:	bfc1      	itttt	gt
 8008430:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008434:	fa08 f803 	lslgt.w	r8, r8, r3
 8008438:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800843c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008440:	bfd6      	itet	le
 8008442:	f1c3 0320 	rsble	r3, r3, #32
 8008446:	ea48 0003 	orrgt.w	r0, r8, r3
 800844a:	fa06 f003 	lslle.w	r0, r6, r3
 800844e:	f7f8 f861 	bl	8000514 <__aeabi_ui2d>
 8008452:	2201      	movs	r2, #1
 8008454:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008458:	3d01      	subs	r5, #1
 800845a:	920e      	str	r2, [sp, #56]	; 0x38
 800845c:	e76f      	b.n	800833e <_dtoa_r+0x126>
 800845e:	2301      	movs	r3, #1
 8008460:	e7b3      	b.n	80083ca <_dtoa_r+0x1b2>
 8008462:	900c      	str	r0, [sp, #48]	; 0x30
 8008464:	e7b2      	b.n	80083cc <_dtoa_r+0x1b4>
 8008466:	9b05      	ldr	r3, [sp, #20]
 8008468:	eba3 030b 	sub.w	r3, r3, fp
 800846c:	9305      	str	r3, [sp, #20]
 800846e:	f1cb 0300 	rsb	r3, fp, #0
 8008472:	9308      	str	r3, [sp, #32]
 8008474:	2300      	movs	r3, #0
 8008476:	930b      	str	r3, [sp, #44]	; 0x2c
 8008478:	e7bf      	b.n	80083fa <_dtoa_r+0x1e2>
 800847a:	2300      	movs	r3, #0
 800847c:	9309      	str	r3, [sp, #36]	; 0x24
 800847e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008480:	2b00      	cmp	r3, #0
 8008482:	dc52      	bgt.n	800852a <_dtoa_r+0x312>
 8008484:	2301      	movs	r3, #1
 8008486:	9301      	str	r3, [sp, #4]
 8008488:	9304      	str	r3, [sp, #16]
 800848a:	461a      	mov	r2, r3
 800848c:	920a      	str	r2, [sp, #40]	; 0x28
 800848e:	e00b      	b.n	80084a8 <_dtoa_r+0x290>
 8008490:	2301      	movs	r3, #1
 8008492:	e7f3      	b.n	800847c <_dtoa_r+0x264>
 8008494:	2300      	movs	r3, #0
 8008496:	9309      	str	r3, [sp, #36]	; 0x24
 8008498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800849a:	445b      	add	r3, fp
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	3301      	adds	r3, #1
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	9304      	str	r3, [sp, #16]
 80084a4:	bfb8      	it	lt
 80084a6:	2301      	movlt	r3, #1
 80084a8:	69e0      	ldr	r0, [r4, #28]
 80084aa:	2100      	movs	r1, #0
 80084ac:	2204      	movs	r2, #4
 80084ae:	f102 0614 	add.w	r6, r2, #20
 80084b2:	429e      	cmp	r6, r3
 80084b4:	d93d      	bls.n	8008532 <_dtoa_r+0x31a>
 80084b6:	6041      	str	r1, [r0, #4]
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 fd9f 	bl	8008ffc <_Balloc>
 80084be:	9000      	str	r0, [sp, #0]
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d139      	bne.n	8008538 <_dtoa_r+0x320>
 80084c4:	4b16      	ldr	r3, [pc, #88]	; (8008520 <_dtoa_r+0x308>)
 80084c6:	4602      	mov	r2, r0
 80084c8:	f240 11af 	movw	r1, #431	; 0x1af
 80084cc:	e6bd      	b.n	800824a <_dtoa_r+0x32>
 80084ce:	2301      	movs	r3, #1
 80084d0:	e7e1      	b.n	8008496 <_dtoa_r+0x27e>
 80084d2:	2501      	movs	r5, #1
 80084d4:	2300      	movs	r3, #0
 80084d6:	9307      	str	r3, [sp, #28]
 80084d8:	9509      	str	r5, [sp, #36]	; 0x24
 80084da:	f04f 33ff 	mov.w	r3, #4294967295
 80084de:	9301      	str	r3, [sp, #4]
 80084e0:	9304      	str	r3, [sp, #16]
 80084e2:	2200      	movs	r2, #0
 80084e4:	2312      	movs	r3, #18
 80084e6:	e7d1      	b.n	800848c <_dtoa_r+0x274>
 80084e8:	636f4361 	.word	0x636f4361
 80084ec:	3fd287a7 	.word	0x3fd287a7
 80084f0:	8b60c8b3 	.word	0x8b60c8b3
 80084f4:	3fc68a28 	.word	0x3fc68a28
 80084f8:	509f79fb 	.word	0x509f79fb
 80084fc:	3fd34413 	.word	0x3fd34413
 8008500:	0800a299 	.word	0x0800a299
 8008504:	0800a2b0 	.word	0x0800a2b0
 8008508:	7ff00000 	.word	0x7ff00000
 800850c:	0800a295 	.word	0x0800a295
 8008510:	0800a28c 	.word	0x0800a28c
 8008514:	0800a269 	.word	0x0800a269
 8008518:	3ff80000 	.word	0x3ff80000
 800851c:	0800a3a0 	.word	0x0800a3a0
 8008520:	0800a308 	.word	0x0800a308
 8008524:	2301      	movs	r3, #1
 8008526:	9309      	str	r3, [sp, #36]	; 0x24
 8008528:	e7d7      	b.n	80084da <_dtoa_r+0x2c2>
 800852a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	9304      	str	r3, [sp, #16]
 8008530:	e7ba      	b.n	80084a8 <_dtoa_r+0x290>
 8008532:	3101      	adds	r1, #1
 8008534:	0052      	lsls	r2, r2, #1
 8008536:	e7ba      	b.n	80084ae <_dtoa_r+0x296>
 8008538:	69e3      	ldr	r3, [r4, #28]
 800853a:	9a00      	ldr	r2, [sp, #0]
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	9b04      	ldr	r3, [sp, #16]
 8008540:	2b0e      	cmp	r3, #14
 8008542:	f200 80a8 	bhi.w	8008696 <_dtoa_r+0x47e>
 8008546:	2d00      	cmp	r5, #0
 8008548:	f000 80a5 	beq.w	8008696 <_dtoa_r+0x47e>
 800854c:	f1bb 0f00 	cmp.w	fp, #0
 8008550:	dd38      	ble.n	80085c4 <_dtoa_r+0x3ac>
 8008552:	4bc0      	ldr	r3, [pc, #768]	; (8008854 <_dtoa_r+0x63c>)
 8008554:	f00b 020f 	and.w	r2, fp, #15
 8008558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800855c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008560:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008564:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008568:	d019      	beq.n	800859e <_dtoa_r+0x386>
 800856a:	4bbb      	ldr	r3, [pc, #748]	; (8008858 <_dtoa_r+0x640>)
 800856c:	ec51 0b18 	vmov	r0, r1, d8
 8008570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008574:	f7f8 f972 	bl	800085c <__aeabi_ddiv>
 8008578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800857c:	f008 080f 	and.w	r8, r8, #15
 8008580:	2503      	movs	r5, #3
 8008582:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008858 <_dtoa_r+0x640>
 8008586:	f1b8 0f00 	cmp.w	r8, #0
 800858a:	d10a      	bne.n	80085a2 <_dtoa_r+0x38a>
 800858c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008590:	4632      	mov	r2, r6
 8008592:	463b      	mov	r3, r7
 8008594:	f7f8 f962 	bl	800085c <__aeabi_ddiv>
 8008598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800859c:	e02b      	b.n	80085f6 <_dtoa_r+0x3de>
 800859e:	2502      	movs	r5, #2
 80085a0:	e7ef      	b.n	8008582 <_dtoa_r+0x36a>
 80085a2:	f018 0f01 	tst.w	r8, #1
 80085a6:	d008      	beq.n	80085ba <_dtoa_r+0x3a2>
 80085a8:	4630      	mov	r0, r6
 80085aa:	4639      	mov	r1, r7
 80085ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80085b0:	f7f8 f82a 	bl	8000608 <__aeabi_dmul>
 80085b4:	3501      	adds	r5, #1
 80085b6:	4606      	mov	r6, r0
 80085b8:	460f      	mov	r7, r1
 80085ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80085be:	f109 0908 	add.w	r9, r9, #8
 80085c2:	e7e0      	b.n	8008586 <_dtoa_r+0x36e>
 80085c4:	f000 809f 	beq.w	8008706 <_dtoa_r+0x4ee>
 80085c8:	f1cb 0600 	rsb	r6, fp, #0
 80085cc:	4ba1      	ldr	r3, [pc, #644]	; (8008854 <_dtoa_r+0x63c>)
 80085ce:	4fa2      	ldr	r7, [pc, #648]	; (8008858 <_dtoa_r+0x640>)
 80085d0:	f006 020f 	and.w	r2, r6, #15
 80085d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	ec51 0b18 	vmov	r0, r1, d8
 80085e0:	f7f8 f812 	bl	8000608 <__aeabi_dmul>
 80085e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085e8:	1136      	asrs	r6, r6, #4
 80085ea:	2300      	movs	r3, #0
 80085ec:	2502      	movs	r5, #2
 80085ee:	2e00      	cmp	r6, #0
 80085f0:	d17e      	bne.n	80086f0 <_dtoa_r+0x4d8>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1d0      	bne.n	8008598 <_dtoa_r+0x380>
 80085f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 8084 	beq.w	800870a <_dtoa_r+0x4f2>
 8008602:	4b96      	ldr	r3, [pc, #600]	; (800885c <_dtoa_r+0x644>)
 8008604:	2200      	movs	r2, #0
 8008606:	4640      	mov	r0, r8
 8008608:	4649      	mov	r1, r9
 800860a:	f7f8 fa6f 	bl	8000aec <__aeabi_dcmplt>
 800860e:	2800      	cmp	r0, #0
 8008610:	d07b      	beq.n	800870a <_dtoa_r+0x4f2>
 8008612:	9b04      	ldr	r3, [sp, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d078      	beq.n	800870a <_dtoa_r+0x4f2>
 8008618:	9b01      	ldr	r3, [sp, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	dd39      	ble.n	8008692 <_dtoa_r+0x47a>
 800861e:	4b90      	ldr	r3, [pc, #576]	; (8008860 <_dtoa_r+0x648>)
 8008620:	2200      	movs	r2, #0
 8008622:	4640      	mov	r0, r8
 8008624:	4649      	mov	r1, r9
 8008626:	f7f7 ffef 	bl	8000608 <__aeabi_dmul>
 800862a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800862e:	9e01      	ldr	r6, [sp, #4]
 8008630:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008634:	3501      	adds	r5, #1
 8008636:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800863a:	4628      	mov	r0, r5
 800863c:	f7f7 ff7a 	bl	8000534 <__aeabi_i2d>
 8008640:	4642      	mov	r2, r8
 8008642:	464b      	mov	r3, r9
 8008644:	f7f7 ffe0 	bl	8000608 <__aeabi_dmul>
 8008648:	4b86      	ldr	r3, [pc, #536]	; (8008864 <_dtoa_r+0x64c>)
 800864a:	2200      	movs	r2, #0
 800864c:	f7f7 fe26 	bl	800029c <__adddf3>
 8008650:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008658:	9303      	str	r3, [sp, #12]
 800865a:	2e00      	cmp	r6, #0
 800865c:	d158      	bne.n	8008710 <_dtoa_r+0x4f8>
 800865e:	4b82      	ldr	r3, [pc, #520]	; (8008868 <_dtoa_r+0x650>)
 8008660:	2200      	movs	r2, #0
 8008662:	4640      	mov	r0, r8
 8008664:	4649      	mov	r1, r9
 8008666:	f7f7 fe17 	bl	8000298 <__aeabi_dsub>
 800866a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800866e:	4680      	mov	r8, r0
 8008670:	4689      	mov	r9, r1
 8008672:	f7f8 fa59 	bl	8000b28 <__aeabi_dcmpgt>
 8008676:	2800      	cmp	r0, #0
 8008678:	f040 8296 	bne.w	8008ba8 <_dtoa_r+0x990>
 800867c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008680:	4640      	mov	r0, r8
 8008682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008686:	4649      	mov	r1, r9
 8008688:	f7f8 fa30 	bl	8000aec <__aeabi_dcmplt>
 800868c:	2800      	cmp	r0, #0
 800868e:	f040 8289 	bne.w	8008ba4 <_dtoa_r+0x98c>
 8008692:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008698:	2b00      	cmp	r3, #0
 800869a:	f2c0 814e 	blt.w	800893a <_dtoa_r+0x722>
 800869e:	f1bb 0f0e 	cmp.w	fp, #14
 80086a2:	f300 814a 	bgt.w	800893a <_dtoa_r+0x722>
 80086a6:	4b6b      	ldr	r3, [pc, #428]	; (8008854 <_dtoa_r+0x63c>)
 80086a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80086ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f280 80dc 	bge.w	8008870 <_dtoa_r+0x658>
 80086b8:	9b04      	ldr	r3, [sp, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f300 80d8 	bgt.w	8008870 <_dtoa_r+0x658>
 80086c0:	f040 826f 	bne.w	8008ba2 <_dtoa_r+0x98a>
 80086c4:	4b68      	ldr	r3, [pc, #416]	; (8008868 <_dtoa_r+0x650>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	4640      	mov	r0, r8
 80086ca:	4649      	mov	r1, r9
 80086cc:	f7f7 ff9c 	bl	8000608 <__aeabi_dmul>
 80086d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086d4:	f7f8 fa1e 	bl	8000b14 <__aeabi_dcmpge>
 80086d8:	9e04      	ldr	r6, [sp, #16]
 80086da:	4637      	mov	r7, r6
 80086dc:	2800      	cmp	r0, #0
 80086de:	f040 8245 	bne.w	8008b6c <_dtoa_r+0x954>
 80086e2:	9d00      	ldr	r5, [sp, #0]
 80086e4:	2331      	movs	r3, #49	; 0x31
 80086e6:	f805 3b01 	strb.w	r3, [r5], #1
 80086ea:	f10b 0b01 	add.w	fp, fp, #1
 80086ee:	e241      	b.n	8008b74 <_dtoa_r+0x95c>
 80086f0:	07f2      	lsls	r2, r6, #31
 80086f2:	d505      	bpl.n	8008700 <_dtoa_r+0x4e8>
 80086f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086f8:	f7f7 ff86 	bl	8000608 <__aeabi_dmul>
 80086fc:	3501      	adds	r5, #1
 80086fe:	2301      	movs	r3, #1
 8008700:	1076      	asrs	r6, r6, #1
 8008702:	3708      	adds	r7, #8
 8008704:	e773      	b.n	80085ee <_dtoa_r+0x3d6>
 8008706:	2502      	movs	r5, #2
 8008708:	e775      	b.n	80085f6 <_dtoa_r+0x3de>
 800870a:	9e04      	ldr	r6, [sp, #16]
 800870c:	465f      	mov	r7, fp
 800870e:	e792      	b.n	8008636 <_dtoa_r+0x41e>
 8008710:	9900      	ldr	r1, [sp, #0]
 8008712:	4b50      	ldr	r3, [pc, #320]	; (8008854 <_dtoa_r+0x63c>)
 8008714:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008718:	4431      	add	r1, r6
 800871a:	9102      	str	r1, [sp, #8]
 800871c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800871e:	eeb0 9a47 	vmov.f32	s18, s14
 8008722:	eef0 9a67 	vmov.f32	s19, s15
 8008726:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800872a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800872e:	2900      	cmp	r1, #0
 8008730:	d044      	beq.n	80087bc <_dtoa_r+0x5a4>
 8008732:	494e      	ldr	r1, [pc, #312]	; (800886c <_dtoa_r+0x654>)
 8008734:	2000      	movs	r0, #0
 8008736:	f7f8 f891 	bl	800085c <__aeabi_ddiv>
 800873a:	ec53 2b19 	vmov	r2, r3, d9
 800873e:	f7f7 fdab 	bl	8000298 <__aeabi_dsub>
 8008742:	9d00      	ldr	r5, [sp, #0]
 8008744:	ec41 0b19 	vmov	d9, r0, r1
 8008748:	4649      	mov	r1, r9
 800874a:	4640      	mov	r0, r8
 800874c:	f7f8 fa0c 	bl	8000b68 <__aeabi_d2iz>
 8008750:	4606      	mov	r6, r0
 8008752:	f7f7 feef 	bl	8000534 <__aeabi_i2d>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	4640      	mov	r0, r8
 800875c:	4649      	mov	r1, r9
 800875e:	f7f7 fd9b 	bl	8000298 <__aeabi_dsub>
 8008762:	3630      	adds	r6, #48	; 0x30
 8008764:	f805 6b01 	strb.w	r6, [r5], #1
 8008768:	ec53 2b19 	vmov	r2, r3, d9
 800876c:	4680      	mov	r8, r0
 800876e:	4689      	mov	r9, r1
 8008770:	f7f8 f9bc 	bl	8000aec <__aeabi_dcmplt>
 8008774:	2800      	cmp	r0, #0
 8008776:	d164      	bne.n	8008842 <_dtoa_r+0x62a>
 8008778:	4642      	mov	r2, r8
 800877a:	464b      	mov	r3, r9
 800877c:	4937      	ldr	r1, [pc, #220]	; (800885c <_dtoa_r+0x644>)
 800877e:	2000      	movs	r0, #0
 8008780:	f7f7 fd8a 	bl	8000298 <__aeabi_dsub>
 8008784:	ec53 2b19 	vmov	r2, r3, d9
 8008788:	f7f8 f9b0 	bl	8000aec <__aeabi_dcmplt>
 800878c:	2800      	cmp	r0, #0
 800878e:	f040 80b6 	bne.w	80088fe <_dtoa_r+0x6e6>
 8008792:	9b02      	ldr	r3, [sp, #8]
 8008794:	429d      	cmp	r5, r3
 8008796:	f43f af7c 	beq.w	8008692 <_dtoa_r+0x47a>
 800879a:	4b31      	ldr	r3, [pc, #196]	; (8008860 <_dtoa_r+0x648>)
 800879c:	ec51 0b19 	vmov	r0, r1, d9
 80087a0:	2200      	movs	r2, #0
 80087a2:	f7f7 ff31 	bl	8000608 <__aeabi_dmul>
 80087a6:	4b2e      	ldr	r3, [pc, #184]	; (8008860 <_dtoa_r+0x648>)
 80087a8:	ec41 0b19 	vmov	d9, r0, r1
 80087ac:	2200      	movs	r2, #0
 80087ae:	4640      	mov	r0, r8
 80087b0:	4649      	mov	r1, r9
 80087b2:	f7f7 ff29 	bl	8000608 <__aeabi_dmul>
 80087b6:	4680      	mov	r8, r0
 80087b8:	4689      	mov	r9, r1
 80087ba:	e7c5      	b.n	8008748 <_dtoa_r+0x530>
 80087bc:	ec51 0b17 	vmov	r0, r1, d7
 80087c0:	f7f7 ff22 	bl	8000608 <__aeabi_dmul>
 80087c4:	9b02      	ldr	r3, [sp, #8]
 80087c6:	9d00      	ldr	r5, [sp, #0]
 80087c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80087ca:	ec41 0b19 	vmov	d9, r0, r1
 80087ce:	4649      	mov	r1, r9
 80087d0:	4640      	mov	r0, r8
 80087d2:	f7f8 f9c9 	bl	8000b68 <__aeabi_d2iz>
 80087d6:	4606      	mov	r6, r0
 80087d8:	f7f7 feac 	bl	8000534 <__aeabi_i2d>
 80087dc:	3630      	adds	r6, #48	; 0x30
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	4640      	mov	r0, r8
 80087e4:	4649      	mov	r1, r9
 80087e6:	f7f7 fd57 	bl	8000298 <__aeabi_dsub>
 80087ea:	f805 6b01 	strb.w	r6, [r5], #1
 80087ee:	9b02      	ldr	r3, [sp, #8]
 80087f0:	429d      	cmp	r5, r3
 80087f2:	4680      	mov	r8, r0
 80087f4:	4689      	mov	r9, r1
 80087f6:	f04f 0200 	mov.w	r2, #0
 80087fa:	d124      	bne.n	8008846 <_dtoa_r+0x62e>
 80087fc:	4b1b      	ldr	r3, [pc, #108]	; (800886c <_dtoa_r+0x654>)
 80087fe:	ec51 0b19 	vmov	r0, r1, d9
 8008802:	f7f7 fd4b 	bl	800029c <__adddf3>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4640      	mov	r0, r8
 800880c:	4649      	mov	r1, r9
 800880e:	f7f8 f98b 	bl	8000b28 <__aeabi_dcmpgt>
 8008812:	2800      	cmp	r0, #0
 8008814:	d173      	bne.n	80088fe <_dtoa_r+0x6e6>
 8008816:	ec53 2b19 	vmov	r2, r3, d9
 800881a:	4914      	ldr	r1, [pc, #80]	; (800886c <_dtoa_r+0x654>)
 800881c:	2000      	movs	r0, #0
 800881e:	f7f7 fd3b 	bl	8000298 <__aeabi_dsub>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	4640      	mov	r0, r8
 8008828:	4649      	mov	r1, r9
 800882a:	f7f8 f95f 	bl	8000aec <__aeabi_dcmplt>
 800882e:	2800      	cmp	r0, #0
 8008830:	f43f af2f 	beq.w	8008692 <_dtoa_r+0x47a>
 8008834:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008836:	1e6b      	subs	r3, r5, #1
 8008838:	930f      	str	r3, [sp, #60]	; 0x3c
 800883a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800883e:	2b30      	cmp	r3, #48	; 0x30
 8008840:	d0f8      	beq.n	8008834 <_dtoa_r+0x61c>
 8008842:	46bb      	mov	fp, r7
 8008844:	e04a      	b.n	80088dc <_dtoa_r+0x6c4>
 8008846:	4b06      	ldr	r3, [pc, #24]	; (8008860 <_dtoa_r+0x648>)
 8008848:	f7f7 fede 	bl	8000608 <__aeabi_dmul>
 800884c:	4680      	mov	r8, r0
 800884e:	4689      	mov	r9, r1
 8008850:	e7bd      	b.n	80087ce <_dtoa_r+0x5b6>
 8008852:	bf00      	nop
 8008854:	0800a3a0 	.word	0x0800a3a0
 8008858:	0800a378 	.word	0x0800a378
 800885c:	3ff00000 	.word	0x3ff00000
 8008860:	40240000 	.word	0x40240000
 8008864:	401c0000 	.word	0x401c0000
 8008868:	40140000 	.word	0x40140000
 800886c:	3fe00000 	.word	0x3fe00000
 8008870:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008874:	9d00      	ldr	r5, [sp, #0]
 8008876:	4642      	mov	r2, r8
 8008878:	464b      	mov	r3, r9
 800887a:	4630      	mov	r0, r6
 800887c:	4639      	mov	r1, r7
 800887e:	f7f7 ffed 	bl	800085c <__aeabi_ddiv>
 8008882:	f7f8 f971 	bl	8000b68 <__aeabi_d2iz>
 8008886:	9001      	str	r0, [sp, #4]
 8008888:	f7f7 fe54 	bl	8000534 <__aeabi_i2d>
 800888c:	4642      	mov	r2, r8
 800888e:	464b      	mov	r3, r9
 8008890:	f7f7 feba 	bl	8000608 <__aeabi_dmul>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4630      	mov	r0, r6
 800889a:	4639      	mov	r1, r7
 800889c:	f7f7 fcfc 	bl	8000298 <__aeabi_dsub>
 80088a0:	9e01      	ldr	r6, [sp, #4]
 80088a2:	9f04      	ldr	r7, [sp, #16]
 80088a4:	3630      	adds	r6, #48	; 0x30
 80088a6:	f805 6b01 	strb.w	r6, [r5], #1
 80088aa:	9e00      	ldr	r6, [sp, #0]
 80088ac:	1bae      	subs	r6, r5, r6
 80088ae:	42b7      	cmp	r7, r6
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	d134      	bne.n	8008920 <_dtoa_r+0x708>
 80088b6:	f7f7 fcf1 	bl	800029c <__adddf3>
 80088ba:	4642      	mov	r2, r8
 80088bc:	464b      	mov	r3, r9
 80088be:	4606      	mov	r6, r0
 80088c0:	460f      	mov	r7, r1
 80088c2:	f7f8 f931 	bl	8000b28 <__aeabi_dcmpgt>
 80088c6:	b9c8      	cbnz	r0, 80088fc <_dtoa_r+0x6e4>
 80088c8:	4642      	mov	r2, r8
 80088ca:	464b      	mov	r3, r9
 80088cc:	4630      	mov	r0, r6
 80088ce:	4639      	mov	r1, r7
 80088d0:	f7f8 f902 	bl	8000ad8 <__aeabi_dcmpeq>
 80088d4:	b110      	cbz	r0, 80088dc <_dtoa_r+0x6c4>
 80088d6:	9b01      	ldr	r3, [sp, #4]
 80088d8:	07db      	lsls	r3, r3, #31
 80088da:	d40f      	bmi.n	80088fc <_dtoa_r+0x6e4>
 80088dc:	4651      	mov	r1, sl
 80088de:	4620      	mov	r0, r4
 80088e0:	f000 fbcc 	bl	800907c <_Bfree>
 80088e4:	2300      	movs	r3, #0
 80088e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088e8:	702b      	strb	r3, [r5, #0]
 80088ea:	f10b 0301 	add.w	r3, fp, #1
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f43f ace2 	beq.w	80082bc <_dtoa_r+0xa4>
 80088f8:	601d      	str	r5, [r3, #0]
 80088fa:	e4df      	b.n	80082bc <_dtoa_r+0xa4>
 80088fc:	465f      	mov	r7, fp
 80088fe:	462b      	mov	r3, r5
 8008900:	461d      	mov	r5, r3
 8008902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008906:	2a39      	cmp	r2, #57	; 0x39
 8008908:	d106      	bne.n	8008918 <_dtoa_r+0x700>
 800890a:	9a00      	ldr	r2, [sp, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d1f7      	bne.n	8008900 <_dtoa_r+0x6e8>
 8008910:	9900      	ldr	r1, [sp, #0]
 8008912:	2230      	movs	r2, #48	; 0x30
 8008914:	3701      	adds	r7, #1
 8008916:	700a      	strb	r2, [r1, #0]
 8008918:	781a      	ldrb	r2, [r3, #0]
 800891a:	3201      	adds	r2, #1
 800891c:	701a      	strb	r2, [r3, #0]
 800891e:	e790      	b.n	8008842 <_dtoa_r+0x62a>
 8008920:	4ba3      	ldr	r3, [pc, #652]	; (8008bb0 <_dtoa_r+0x998>)
 8008922:	2200      	movs	r2, #0
 8008924:	f7f7 fe70 	bl	8000608 <__aeabi_dmul>
 8008928:	2200      	movs	r2, #0
 800892a:	2300      	movs	r3, #0
 800892c:	4606      	mov	r6, r0
 800892e:	460f      	mov	r7, r1
 8008930:	f7f8 f8d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008934:	2800      	cmp	r0, #0
 8008936:	d09e      	beq.n	8008876 <_dtoa_r+0x65e>
 8008938:	e7d0      	b.n	80088dc <_dtoa_r+0x6c4>
 800893a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800893c:	2a00      	cmp	r2, #0
 800893e:	f000 80ca 	beq.w	8008ad6 <_dtoa_r+0x8be>
 8008942:	9a07      	ldr	r2, [sp, #28]
 8008944:	2a01      	cmp	r2, #1
 8008946:	f300 80ad 	bgt.w	8008aa4 <_dtoa_r+0x88c>
 800894a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800894c:	2a00      	cmp	r2, #0
 800894e:	f000 80a5 	beq.w	8008a9c <_dtoa_r+0x884>
 8008952:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008956:	9e08      	ldr	r6, [sp, #32]
 8008958:	9d05      	ldr	r5, [sp, #20]
 800895a:	9a05      	ldr	r2, [sp, #20]
 800895c:	441a      	add	r2, r3
 800895e:	9205      	str	r2, [sp, #20]
 8008960:	9a06      	ldr	r2, [sp, #24]
 8008962:	2101      	movs	r1, #1
 8008964:	441a      	add	r2, r3
 8008966:	4620      	mov	r0, r4
 8008968:	9206      	str	r2, [sp, #24]
 800896a:	f000 fc3d 	bl	80091e8 <__i2b>
 800896e:	4607      	mov	r7, r0
 8008970:	b165      	cbz	r5, 800898c <_dtoa_r+0x774>
 8008972:	9b06      	ldr	r3, [sp, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	dd09      	ble.n	800898c <_dtoa_r+0x774>
 8008978:	42ab      	cmp	r3, r5
 800897a:	9a05      	ldr	r2, [sp, #20]
 800897c:	bfa8      	it	ge
 800897e:	462b      	movge	r3, r5
 8008980:	1ad2      	subs	r2, r2, r3
 8008982:	9205      	str	r2, [sp, #20]
 8008984:	9a06      	ldr	r2, [sp, #24]
 8008986:	1aed      	subs	r5, r5, r3
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	9306      	str	r3, [sp, #24]
 800898c:	9b08      	ldr	r3, [sp, #32]
 800898e:	b1f3      	cbz	r3, 80089ce <_dtoa_r+0x7b6>
 8008990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 80a3 	beq.w	8008ade <_dtoa_r+0x8c6>
 8008998:	2e00      	cmp	r6, #0
 800899a:	dd10      	ble.n	80089be <_dtoa_r+0x7a6>
 800899c:	4639      	mov	r1, r7
 800899e:	4632      	mov	r2, r6
 80089a0:	4620      	mov	r0, r4
 80089a2:	f000 fce1 	bl	8009368 <__pow5mult>
 80089a6:	4652      	mov	r2, sl
 80089a8:	4601      	mov	r1, r0
 80089aa:	4607      	mov	r7, r0
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fc31 	bl	8009214 <__multiply>
 80089b2:	4651      	mov	r1, sl
 80089b4:	4680      	mov	r8, r0
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 fb60 	bl	800907c <_Bfree>
 80089bc:	46c2      	mov	sl, r8
 80089be:	9b08      	ldr	r3, [sp, #32]
 80089c0:	1b9a      	subs	r2, r3, r6
 80089c2:	d004      	beq.n	80089ce <_dtoa_r+0x7b6>
 80089c4:	4651      	mov	r1, sl
 80089c6:	4620      	mov	r0, r4
 80089c8:	f000 fcce 	bl	8009368 <__pow5mult>
 80089cc:	4682      	mov	sl, r0
 80089ce:	2101      	movs	r1, #1
 80089d0:	4620      	mov	r0, r4
 80089d2:	f000 fc09 	bl	80091e8 <__i2b>
 80089d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	4606      	mov	r6, r0
 80089dc:	f340 8081 	ble.w	8008ae2 <_dtoa_r+0x8ca>
 80089e0:	461a      	mov	r2, r3
 80089e2:	4601      	mov	r1, r0
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 fcbf 	bl	8009368 <__pow5mult>
 80089ea:	9b07      	ldr	r3, [sp, #28]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	4606      	mov	r6, r0
 80089f0:	dd7a      	ble.n	8008ae8 <_dtoa_r+0x8d0>
 80089f2:	f04f 0800 	mov.w	r8, #0
 80089f6:	6933      	ldr	r3, [r6, #16]
 80089f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089fc:	6918      	ldr	r0, [r3, #16]
 80089fe:	f000 fba5 	bl	800914c <__hi0bits>
 8008a02:	f1c0 0020 	rsb	r0, r0, #32
 8008a06:	9b06      	ldr	r3, [sp, #24]
 8008a08:	4418      	add	r0, r3
 8008a0a:	f010 001f 	ands.w	r0, r0, #31
 8008a0e:	f000 8094 	beq.w	8008b3a <_dtoa_r+0x922>
 8008a12:	f1c0 0320 	rsb	r3, r0, #32
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	f340 8085 	ble.w	8008b26 <_dtoa_r+0x90e>
 8008a1c:	9b05      	ldr	r3, [sp, #20]
 8008a1e:	f1c0 001c 	rsb	r0, r0, #28
 8008a22:	4403      	add	r3, r0
 8008a24:	9305      	str	r3, [sp, #20]
 8008a26:	9b06      	ldr	r3, [sp, #24]
 8008a28:	4403      	add	r3, r0
 8008a2a:	4405      	add	r5, r0
 8008a2c:	9306      	str	r3, [sp, #24]
 8008a2e:	9b05      	ldr	r3, [sp, #20]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dd05      	ble.n	8008a40 <_dtoa_r+0x828>
 8008a34:	4651      	mov	r1, sl
 8008a36:	461a      	mov	r2, r3
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fcef 	bl	800941c <__lshift>
 8008a3e:	4682      	mov	sl, r0
 8008a40:	9b06      	ldr	r3, [sp, #24]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	dd05      	ble.n	8008a52 <_dtoa_r+0x83a>
 8008a46:	4631      	mov	r1, r6
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f000 fce6 	bl	800941c <__lshift>
 8008a50:	4606      	mov	r6, r0
 8008a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d072      	beq.n	8008b3e <_dtoa_r+0x926>
 8008a58:	4631      	mov	r1, r6
 8008a5a:	4650      	mov	r0, sl
 8008a5c:	f000 fd4a 	bl	80094f4 <__mcmp>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	da6c      	bge.n	8008b3e <_dtoa_r+0x926>
 8008a64:	2300      	movs	r3, #0
 8008a66:	4651      	mov	r1, sl
 8008a68:	220a      	movs	r2, #10
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 fb28 	bl	80090c0 <__multadd>
 8008a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a76:	4682      	mov	sl, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 81b0 	beq.w	8008dde <_dtoa_r+0xbc6>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	4639      	mov	r1, r7
 8008a82:	220a      	movs	r2, #10
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 fb1b 	bl	80090c0 <__multadd>
 8008a8a:	9b01      	ldr	r3, [sp, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	4607      	mov	r7, r0
 8008a90:	f300 8096 	bgt.w	8008bc0 <_dtoa_r+0x9a8>
 8008a94:	9b07      	ldr	r3, [sp, #28]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	dc59      	bgt.n	8008b4e <_dtoa_r+0x936>
 8008a9a:	e091      	b.n	8008bc0 <_dtoa_r+0x9a8>
 8008a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008aa2:	e758      	b.n	8008956 <_dtoa_r+0x73e>
 8008aa4:	9b04      	ldr	r3, [sp, #16]
 8008aa6:	1e5e      	subs	r6, r3, #1
 8008aa8:	9b08      	ldr	r3, [sp, #32]
 8008aaa:	42b3      	cmp	r3, r6
 8008aac:	bfbf      	itttt	lt
 8008aae:	9b08      	ldrlt	r3, [sp, #32]
 8008ab0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008ab2:	9608      	strlt	r6, [sp, #32]
 8008ab4:	1af3      	sublt	r3, r6, r3
 8008ab6:	bfb4      	ite	lt
 8008ab8:	18d2      	addlt	r2, r2, r3
 8008aba:	1b9e      	subge	r6, r3, r6
 8008abc:	9b04      	ldr	r3, [sp, #16]
 8008abe:	bfbc      	itt	lt
 8008ac0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008ac2:	2600      	movlt	r6, #0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bfb7      	itett	lt
 8008ac8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008acc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008ad0:	1a9d      	sublt	r5, r3, r2
 8008ad2:	2300      	movlt	r3, #0
 8008ad4:	e741      	b.n	800895a <_dtoa_r+0x742>
 8008ad6:	9e08      	ldr	r6, [sp, #32]
 8008ad8:	9d05      	ldr	r5, [sp, #20]
 8008ada:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008adc:	e748      	b.n	8008970 <_dtoa_r+0x758>
 8008ade:	9a08      	ldr	r2, [sp, #32]
 8008ae0:	e770      	b.n	80089c4 <_dtoa_r+0x7ac>
 8008ae2:	9b07      	ldr	r3, [sp, #28]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	dc19      	bgt.n	8008b1c <_dtoa_r+0x904>
 8008ae8:	9b02      	ldr	r3, [sp, #8]
 8008aea:	b9bb      	cbnz	r3, 8008b1c <_dtoa_r+0x904>
 8008aec:	9b03      	ldr	r3, [sp, #12]
 8008aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008af2:	b99b      	cbnz	r3, 8008b1c <_dtoa_r+0x904>
 8008af4:	9b03      	ldr	r3, [sp, #12]
 8008af6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008afa:	0d1b      	lsrs	r3, r3, #20
 8008afc:	051b      	lsls	r3, r3, #20
 8008afe:	b183      	cbz	r3, 8008b22 <_dtoa_r+0x90a>
 8008b00:	9b05      	ldr	r3, [sp, #20]
 8008b02:	3301      	adds	r3, #1
 8008b04:	9305      	str	r3, [sp, #20]
 8008b06:	9b06      	ldr	r3, [sp, #24]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	9306      	str	r3, [sp, #24]
 8008b0c:	f04f 0801 	mov.w	r8, #1
 8008b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f47f af6f 	bne.w	80089f6 <_dtoa_r+0x7de>
 8008b18:	2001      	movs	r0, #1
 8008b1a:	e774      	b.n	8008a06 <_dtoa_r+0x7ee>
 8008b1c:	f04f 0800 	mov.w	r8, #0
 8008b20:	e7f6      	b.n	8008b10 <_dtoa_r+0x8f8>
 8008b22:	4698      	mov	r8, r3
 8008b24:	e7f4      	b.n	8008b10 <_dtoa_r+0x8f8>
 8008b26:	d082      	beq.n	8008a2e <_dtoa_r+0x816>
 8008b28:	9a05      	ldr	r2, [sp, #20]
 8008b2a:	331c      	adds	r3, #28
 8008b2c:	441a      	add	r2, r3
 8008b2e:	9205      	str	r2, [sp, #20]
 8008b30:	9a06      	ldr	r2, [sp, #24]
 8008b32:	441a      	add	r2, r3
 8008b34:	441d      	add	r5, r3
 8008b36:	9206      	str	r2, [sp, #24]
 8008b38:	e779      	b.n	8008a2e <_dtoa_r+0x816>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	e7f4      	b.n	8008b28 <_dtoa_r+0x910>
 8008b3e:	9b04      	ldr	r3, [sp, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	dc37      	bgt.n	8008bb4 <_dtoa_r+0x99c>
 8008b44:	9b07      	ldr	r3, [sp, #28]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	dd34      	ble.n	8008bb4 <_dtoa_r+0x99c>
 8008b4a:	9b04      	ldr	r3, [sp, #16]
 8008b4c:	9301      	str	r3, [sp, #4]
 8008b4e:	9b01      	ldr	r3, [sp, #4]
 8008b50:	b963      	cbnz	r3, 8008b6c <_dtoa_r+0x954>
 8008b52:	4631      	mov	r1, r6
 8008b54:	2205      	movs	r2, #5
 8008b56:	4620      	mov	r0, r4
 8008b58:	f000 fab2 	bl	80090c0 <__multadd>
 8008b5c:	4601      	mov	r1, r0
 8008b5e:	4606      	mov	r6, r0
 8008b60:	4650      	mov	r0, sl
 8008b62:	f000 fcc7 	bl	80094f4 <__mcmp>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f73f adbb 	bgt.w	80086e2 <_dtoa_r+0x4ca>
 8008b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6e:	9d00      	ldr	r5, [sp, #0]
 8008b70:	ea6f 0b03 	mvn.w	fp, r3
 8008b74:	f04f 0800 	mov.w	r8, #0
 8008b78:	4631      	mov	r1, r6
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 fa7e 	bl	800907c <_Bfree>
 8008b80:	2f00      	cmp	r7, #0
 8008b82:	f43f aeab 	beq.w	80088dc <_dtoa_r+0x6c4>
 8008b86:	f1b8 0f00 	cmp.w	r8, #0
 8008b8a:	d005      	beq.n	8008b98 <_dtoa_r+0x980>
 8008b8c:	45b8      	cmp	r8, r7
 8008b8e:	d003      	beq.n	8008b98 <_dtoa_r+0x980>
 8008b90:	4641      	mov	r1, r8
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 fa72 	bl	800907c <_Bfree>
 8008b98:	4639      	mov	r1, r7
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 fa6e 	bl	800907c <_Bfree>
 8008ba0:	e69c      	b.n	80088dc <_dtoa_r+0x6c4>
 8008ba2:	2600      	movs	r6, #0
 8008ba4:	4637      	mov	r7, r6
 8008ba6:	e7e1      	b.n	8008b6c <_dtoa_r+0x954>
 8008ba8:	46bb      	mov	fp, r7
 8008baa:	4637      	mov	r7, r6
 8008bac:	e599      	b.n	80086e2 <_dtoa_r+0x4ca>
 8008bae:	bf00      	nop
 8008bb0:	40240000 	.word	0x40240000
 8008bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f000 80c8 	beq.w	8008d4c <_dtoa_r+0xb34>
 8008bbc:	9b04      	ldr	r3, [sp, #16]
 8008bbe:	9301      	str	r3, [sp, #4]
 8008bc0:	2d00      	cmp	r5, #0
 8008bc2:	dd05      	ble.n	8008bd0 <_dtoa_r+0x9b8>
 8008bc4:	4639      	mov	r1, r7
 8008bc6:	462a      	mov	r2, r5
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 fc27 	bl	800941c <__lshift>
 8008bce:	4607      	mov	r7, r0
 8008bd0:	f1b8 0f00 	cmp.w	r8, #0
 8008bd4:	d05b      	beq.n	8008c8e <_dtoa_r+0xa76>
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f000 fa0f 	bl	8008ffc <_Balloc>
 8008bde:	4605      	mov	r5, r0
 8008be0:	b928      	cbnz	r0, 8008bee <_dtoa_r+0x9d6>
 8008be2:	4b83      	ldr	r3, [pc, #524]	; (8008df0 <_dtoa_r+0xbd8>)
 8008be4:	4602      	mov	r2, r0
 8008be6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008bea:	f7ff bb2e 	b.w	800824a <_dtoa_r+0x32>
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	3202      	adds	r2, #2
 8008bf2:	0092      	lsls	r2, r2, #2
 8008bf4:	f107 010c 	add.w	r1, r7, #12
 8008bf8:	300c      	adds	r0, #12
 8008bfa:	f000 ffab 	bl	8009b54 <memcpy>
 8008bfe:	2201      	movs	r2, #1
 8008c00:	4629      	mov	r1, r5
 8008c02:	4620      	mov	r0, r4
 8008c04:	f000 fc0a 	bl	800941c <__lshift>
 8008c08:	9b00      	ldr	r3, [sp, #0]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	9304      	str	r3, [sp, #16]
 8008c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c12:	4413      	add	r3, r2
 8008c14:	9308      	str	r3, [sp, #32]
 8008c16:	9b02      	ldr	r3, [sp, #8]
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	46b8      	mov	r8, r7
 8008c1e:	9306      	str	r3, [sp, #24]
 8008c20:	4607      	mov	r7, r0
 8008c22:	9b04      	ldr	r3, [sp, #16]
 8008c24:	4631      	mov	r1, r6
 8008c26:	3b01      	subs	r3, #1
 8008c28:	4650      	mov	r0, sl
 8008c2a:	9301      	str	r3, [sp, #4]
 8008c2c:	f7ff fa6b 	bl	8008106 <quorem>
 8008c30:	4641      	mov	r1, r8
 8008c32:	9002      	str	r0, [sp, #8]
 8008c34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008c38:	4650      	mov	r0, sl
 8008c3a:	f000 fc5b 	bl	80094f4 <__mcmp>
 8008c3e:	463a      	mov	r2, r7
 8008c40:	9005      	str	r0, [sp, #20]
 8008c42:	4631      	mov	r1, r6
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 fc71 	bl	800952c <__mdiff>
 8008c4a:	68c2      	ldr	r2, [r0, #12]
 8008c4c:	4605      	mov	r5, r0
 8008c4e:	bb02      	cbnz	r2, 8008c92 <_dtoa_r+0xa7a>
 8008c50:	4601      	mov	r1, r0
 8008c52:	4650      	mov	r0, sl
 8008c54:	f000 fc4e 	bl	80094f4 <__mcmp>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c60:	f000 fa0c 	bl	800907c <_Bfree>
 8008c64:	9b07      	ldr	r3, [sp, #28]
 8008c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c68:	9d04      	ldr	r5, [sp, #16]
 8008c6a:	ea43 0102 	orr.w	r1, r3, r2
 8008c6e:	9b06      	ldr	r3, [sp, #24]
 8008c70:	4319      	orrs	r1, r3
 8008c72:	d110      	bne.n	8008c96 <_dtoa_r+0xa7e>
 8008c74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c78:	d029      	beq.n	8008cce <_dtoa_r+0xab6>
 8008c7a:	9b05      	ldr	r3, [sp, #20]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	dd02      	ble.n	8008c86 <_dtoa_r+0xa6e>
 8008c80:	9b02      	ldr	r3, [sp, #8]
 8008c82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008c86:	9b01      	ldr	r3, [sp, #4]
 8008c88:	f883 9000 	strb.w	r9, [r3]
 8008c8c:	e774      	b.n	8008b78 <_dtoa_r+0x960>
 8008c8e:	4638      	mov	r0, r7
 8008c90:	e7ba      	b.n	8008c08 <_dtoa_r+0x9f0>
 8008c92:	2201      	movs	r2, #1
 8008c94:	e7e1      	b.n	8008c5a <_dtoa_r+0xa42>
 8008c96:	9b05      	ldr	r3, [sp, #20]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	db04      	blt.n	8008ca6 <_dtoa_r+0xa8e>
 8008c9c:	9907      	ldr	r1, [sp, #28]
 8008c9e:	430b      	orrs	r3, r1
 8008ca0:	9906      	ldr	r1, [sp, #24]
 8008ca2:	430b      	orrs	r3, r1
 8008ca4:	d120      	bne.n	8008ce8 <_dtoa_r+0xad0>
 8008ca6:	2a00      	cmp	r2, #0
 8008ca8:	dded      	ble.n	8008c86 <_dtoa_r+0xa6e>
 8008caa:	4651      	mov	r1, sl
 8008cac:	2201      	movs	r2, #1
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f000 fbb4 	bl	800941c <__lshift>
 8008cb4:	4631      	mov	r1, r6
 8008cb6:	4682      	mov	sl, r0
 8008cb8:	f000 fc1c 	bl	80094f4 <__mcmp>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	dc03      	bgt.n	8008cc8 <_dtoa_r+0xab0>
 8008cc0:	d1e1      	bne.n	8008c86 <_dtoa_r+0xa6e>
 8008cc2:	f019 0f01 	tst.w	r9, #1
 8008cc6:	d0de      	beq.n	8008c86 <_dtoa_r+0xa6e>
 8008cc8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ccc:	d1d8      	bne.n	8008c80 <_dtoa_r+0xa68>
 8008cce:	9a01      	ldr	r2, [sp, #4]
 8008cd0:	2339      	movs	r3, #57	; 0x39
 8008cd2:	7013      	strb	r3, [r2, #0]
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	461d      	mov	r5, r3
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008cde:	2a39      	cmp	r2, #57	; 0x39
 8008ce0:	d06c      	beq.n	8008dbc <_dtoa_r+0xba4>
 8008ce2:	3201      	adds	r2, #1
 8008ce4:	701a      	strb	r2, [r3, #0]
 8008ce6:	e747      	b.n	8008b78 <_dtoa_r+0x960>
 8008ce8:	2a00      	cmp	r2, #0
 8008cea:	dd07      	ble.n	8008cfc <_dtoa_r+0xae4>
 8008cec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008cf0:	d0ed      	beq.n	8008cce <_dtoa_r+0xab6>
 8008cf2:	9a01      	ldr	r2, [sp, #4]
 8008cf4:	f109 0301 	add.w	r3, r9, #1
 8008cf8:	7013      	strb	r3, [r2, #0]
 8008cfa:	e73d      	b.n	8008b78 <_dtoa_r+0x960>
 8008cfc:	9b04      	ldr	r3, [sp, #16]
 8008cfe:	9a08      	ldr	r2, [sp, #32]
 8008d00:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d043      	beq.n	8008d90 <_dtoa_r+0xb78>
 8008d08:	4651      	mov	r1, sl
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	220a      	movs	r2, #10
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f000 f9d6 	bl	80090c0 <__multadd>
 8008d14:	45b8      	cmp	r8, r7
 8008d16:	4682      	mov	sl, r0
 8008d18:	f04f 0300 	mov.w	r3, #0
 8008d1c:	f04f 020a 	mov.w	r2, #10
 8008d20:	4641      	mov	r1, r8
 8008d22:	4620      	mov	r0, r4
 8008d24:	d107      	bne.n	8008d36 <_dtoa_r+0xb1e>
 8008d26:	f000 f9cb 	bl	80090c0 <__multadd>
 8008d2a:	4680      	mov	r8, r0
 8008d2c:	4607      	mov	r7, r0
 8008d2e:	9b04      	ldr	r3, [sp, #16]
 8008d30:	3301      	adds	r3, #1
 8008d32:	9304      	str	r3, [sp, #16]
 8008d34:	e775      	b.n	8008c22 <_dtoa_r+0xa0a>
 8008d36:	f000 f9c3 	bl	80090c0 <__multadd>
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	4680      	mov	r8, r0
 8008d3e:	2300      	movs	r3, #0
 8008d40:	220a      	movs	r2, #10
 8008d42:	4620      	mov	r0, r4
 8008d44:	f000 f9bc 	bl	80090c0 <__multadd>
 8008d48:	4607      	mov	r7, r0
 8008d4a:	e7f0      	b.n	8008d2e <_dtoa_r+0xb16>
 8008d4c:	9b04      	ldr	r3, [sp, #16]
 8008d4e:	9301      	str	r3, [sp, #4]
 8008d50:	9d00      	ldr	r5, [sp, #0]
 8008d52:	4631      	mov	r1, r6
 8008d54:	4650      	mov	r0, sl
 8008d56:	f7ff f9d6 	bl	8008106 <quorem>
 8008d5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d5e:	9b00      	ldr	r3, [sp, #0]
 8008d60:	f805 9b01 	strb.w	r9, [r5], #1
 8008d64:	1aea      	subs	r2, r5, r3
 8008d66:	9b01      	ldr	r3, [sp, #4]
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	dd07      	ble.n	8008d7c <_dtoa_r+0xb64>
 8008d6c:	4651      	mov	r1, sl
 8008d6e:	2300      	movs	r3, #0
 8008d70:	220a      	movs	r2, #10
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 f9a4 	bl	80090c0 <__multadd>
 8008d78:	4682      	mov	sl, r0
 8008d7a:	e7ea      	b.n	8008d52 <_dtoa_r+0xb3a>
 8008d7c:	9b01      	ldr	r3, [sp, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bfc8      	it	gt
 8008d82:	461d      	movgt	r5, r3
 8008d84:	9b00      	ldr	r3, [sp, #0]
 8008d86:	bfd8      	it	le
 8008d88:	2501      	movle	r5, #1
 8008d8a:	441d      	add	r5, r3
 8008d8c:	f04f 0800 	mov.w	r8, #0
 8008d90:	4651      	mov	r1, sl
 8008d92:	2201      	movs	r2, #1
 8008d94:	4620      	mov	r0, r4
 8008d96:	f000 fb41 	bl	800941c <__lshift>
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4682      	mov	sl, r0
 8008d9e:	f000 fba9 	bl	80094f4 <__mcmp>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	dc96      	bgt.n	8008cd4 <_dtoa_r+0xabc>
 8008da6:	d102      	bne.n	8008dae <_dtoa_r+0xb96>
 8008da8:	f019 0f01 	tst.w	r9, #1
 8008dac:	d192      	bne.n	8008cd4 <_dtoa_r+0xabc>
 8008dae:	462b      	mov	r3, r5
 8008db0:	461d      	mov	r5, r3
 8008db2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008db6:	2a30      	cmp	r2, #48	; 0x30
 8008db8:	d0fa      	beq.n	8008db0 <_dtoa_r+0xb98>
 8008dba:	e6dd      	b.n	8008b78 <_dtoa_r+0x960>
 8008dbc:	9a00      	ldr	r2, [sp, #0]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d189      	bne.n	8008cd6 <_dtoa_r+0xabe>
 8008dc2:	f10b 0b01 	add.w	fp, fp, #1
 8008dc6:	2331      	movs	r3, #49	; 0x31
 8008dc8:	e796      	b.n	8008cf8 <_dtoa_r+0xae0>
 8008dca:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <_dtoa_r+0xbdc>)
 8008dcc:	f7ff ba99 	b.w	8008302 <_dtoa_r+0xea>
 8008dd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f47f aa6d 	bne.w	80082b2 <_dtoa_r+0x9a>
 8008dd8:	4b07      	ldr	r3, [pc, #28]	; (8008df8 <_dtoa_r+0xbe0>)
 8008dda:	f7ff ba92 	b.w	8008302 <_dtoa_r+0xea>
 8008dde:	9b01      	ldr	r3, [sp, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	dcb5      	bgt.n	8008d50 <_dtoa_r+0xb38>
 8008de4:	9b07      	ldr	r3, [sp, #28]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	f73f aeb1 	bgt.w	8008b4e <_dtoa_r+0x936>
 8008dec:	e7b0      	b.n	8008d50 <_dtoa_r+0xb38>
 8008dee:	bf00      	nop
 8008df0:	0800a308 	.word	0x0800a308
 8008df4:	0800a268 	.word	0x0800a268
 8008df8:	0800a28c 	.word	0x0800a28c

08008dfc <_free_r>:
 8008dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dfe:	2900      	cmp	r1, #0
 8008e00:	d044      	beq.n	8008e8c <_free_r+0x90>
 8008e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e06:	9001      	str	r0, [sp, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e0e:	bfb8      	it	lt
 8008e10:	18e4      	addlt	r4, r4, r3
 8008e12:	f000 f8e7 	bl	8008fe4 <__malloc_lock>
 8008e16:	4a1e      	ldr	r2, [pc, #120]	; (8008e90 <_free_r+0x94>)
 8008e18:	9801      	ldr	r0, [sp, #4]
 8008e1a:	6813      	ldr	r3, [r2, #0]
 8008e1c:	b933      	cbnz	r3, 8008e2c <_free_r+0x30>
 8008e1e:	6063      	str	r3, [r4, #4]
 8008e20:	6014      	str	r4, [r2, #0]
 8008e22:	b003      	add	sp, #12
 8008e24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e28:	f000 b8e2 	b.w	8008ff0 <__malloc_unlock>
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	d908      	bls.n	8008e42 <_free_r+0x46>
 8008e30:	6825      	ldr	r5, [r4, #0]
 8008e32:	1961      	adds	r1, r4, r5
 8008e34:	428b      	cmp	r3, r1
 8008e36:	bf01      	itttt	eq
 8008e38:	6819      	ldreq	r1, [r3, #0]
 8008e3a:	685b      	ldreq	r3, [r3, #4]
 8008e3c:	1949      	addeq	r1, r1, r5
 8008e3e:	6021      	streq	r1, [r4, #0]
 8008e40:	e7ed      	b.n	8008e1e <_free_r+0x22>
 8008e42:	461a      	mov	r2, r3
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	b10b      	cbz	r3, 8008e4c <_free_r+0x50>
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	d9fa      	bls.n	8008e42 <_free_r+0x46>
 8008e4c:	6811      	ldr	r1, [r2, #0]
 8008e4e:	1855      	adds	r5, r2, r1
 8008e50:	42a5      	cmp	r5, r4
 8008e52:	d10b      	bne.n	8008e6c <_free_r+0x70>
 8008e54:	6824      	ldr	r4, [r4, #0]
 8008e56:	4421      	add	r1, r4
 8008e58:	1854      	adds	r4, r2, r1
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	6011      	str	r1, [r2, #0]
 8008e5e:	d1e0      	bne.n	8008e22 <_free_r+0x26>
 8008e60:	681c      	ldr	r4, [r3, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	6053      	str	r3, [r2, #4]
 8008e66:	440c      	add	r4, r1
 8008e68:	6014      	str	r4, [r2, #0]
 8008e6a:	e7da      	b.n	8008e22 <_free_r+0x26>
 8008e6c:	d902      	bls.n	8008e74 <_free_r+0x78>
 8008e6e:	230c      	movs	r3, #12
 8008e70:	6003      	str	r3, [r0, #0]
 8008e72:	e7d6      	b.n	8008e22 <_free_r+0x26>
 8008e74:	6825      	ldr	r5, [r4, #0]
 8008e76:	1961      	adds	r1, r4, r5
 8008e78:	428b      	cmp	r3, r1
 8008e7a:	bf04      	itt	eq
 8008e7c:	6819      	ldreq	r1, [r3, #0]
 8008e7e:	685b      	ldreq	r3, [r3, #4]
 8008e80:	6063      	str	r3, [r4, #4]
 8008e82:	bf04      	itt	eq
 8008e84:	1949      	addeq	r1, r1, r5
 8008e86:	6021      	streq	r1, [r4, #0]
 8008e88:	6054      	str	r4, [r2, #4]
 8008e8a:	e7ca      	b.n	8008e22 <_free_r+0x26>
 8008e8c:	b003      	add	sp, #12
 8008e8e:	bd30      	pop	{r4, r5, pc}
 8008e90:	20000480 	.word	0x20000480

08008e94 <malloc>:
 8008e94:	4b02      	ldr	r3, [pc, #8]	; (8008ea0 <malloc+0xc>)
 8008e96:	4601      	mov	r1, r0
 8008e98:	6818      	ldr	r0, [r3, #0]
 8008e9a:	f000 b823 	b.w	8008ee4 <_malloc_r>
 8008e9e:	bf00      	nop
 8008ea0:	20000068 	.word	0x20000068

08008ea4 <sbrk_aligned>:
 8008ea4:	b570      	push	{r4, r5, r6, lr}
 8008ea6:	4e0e      	ldr	r6, [pc, #56]	; (8008ee0 <sbrk_aligned+0x3c>)
 8008ea8:	460c      	mov	r4, r1
 8008eaa:	6831      	ldr	r1, [r6, #0]
 8008eac:	4605      	mov	r5, r0
 8008eae:	b911      	cbnz	r1, 8008eb6 <sbrk_aligned+0x12>
 8008eb0:	f000 fe40 	bl	8009b34 <_sbrk_r>
 8008eb4:	6030      	str	r0, [r6, #0]
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	4628      	mov	r0, r5
 8008eba:	f000 fe3b 	bl	8009b34 <_sbrk_r>
 8008ebe:	1c43      	adds	r3, r0, #1
 8008ec0:	d00a      	beq.n	8008ed8 <sbrk_aligned+0x34>
 8008ec2:	1cc4      	adds	r4, r0, #3
 8008ec4:	f024 0403 	bic.w	r4, r4, #3
 8008ec8:	42a0      	cmp	r0, r4
 8008eca:	d007      	beq.n	8008edc <sbrk_aligned+0x38>
 8008ecc:	1a21      	subs	r1, r4, r0
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f000 fe30 	bl	8009b34 <_sbrk_r>
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	d101      	bne.n	8008edc <sbrk_aligned+0x38>
 8008ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8008edc:	4620      	mov	r0, r4
 8008ede:	bd70      	pop	{r4, r5, r6, pc}
 8008ee0:	20000484 	.word	0x20000484

08008ee4 <_malloc_r>:
 8008ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee8:	1ccd      	adds	r5, r1, #3
 8008eea:	f025 0503 	bic.w	r5, r5, #3
 8008eee:	3508      	adds	r5, #8
 8008ef0:	2d0c      	cmp	r5, #12
 8008ef2:	bf38      	it	cc
 8008ef4:	250c      	movcc	r5, #12
 8008ef6:	2d00      	cmp	r5, #0
 8008ef8:	4607      	mov	r7, r0
 8008efa:	db01      	blt.n	8008f00 <_malloc_r+0x1c>
 8008efc:	42a9      	cmp	r1, r5
 8008efe:	d905      	bls.n	8008f0c <_malloc_r+0x28>
 8008f00:	230c      	movs	r3, #12
 8008f02:	603b      	str	r3, [r7, #0]
 8008f04:	2600      	movs	r6, #0
 8008f06:	4630      	mov	r0, r6
 8008f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008fe0 <_malloc_r+0xfc>
 8008f10:	f000 f868 	bl	8008fe4 <__malloc_lock>
 8008f14:	f8d8 3000 	ldr.w	r3, [r8]
 8008f18:	461c      	mov	r4, r3
 8008f1a:	bb5c      	cbnz	r4, 8008f74 <_malloc_r+0x90>
 8008f1c:	4629      	mov	r1, r5
 8008f1e:	4638      	mov	r0, r7
 8008f20:	f7ff ffc0 	bl	8008ea4 <sbrk_aligned>
 8008f24:	1c43      	adds	r3, r0, #1
 8008f26:	4604      	mov	r4, r0
 8008f28:	d155      	bne.n	8008fd6 <_malloc_r+0xf2>
 8008f2a:	f8d8 4000 	ldr.w	r4, [r8]
 8008f2e:	4626      	mov	r6, r4
 8008f30:	2e00      	cmp	r6, #0
 8008f32:	d145      	bne.n	8008fc0 <_malloc_r+0xdc>
 8008f34:	2c00      	cmp	r4, #0
 8008f36:	d048      	beq.n	8008fca <_malloc_r+0xe6>
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	4631      	mov	r1, r6
 8008f3c:	4638      	mov	r0, r7
 8008f3e:	eb04 0903 	add.w	r9, r4, r3
 8008f42:	f000 fdf7 	bl	8009b34 <_sbrk_r>
 8008f46:	4581      	cmp	r9, r0
 8008f48:	d13f      	bne.n	8008fca <_malloc_r+0xe6>
 8008f4a:	6821      	ldr	r1, [r4, #0]
 8008f4c:	1a6d      	subs	r5, r5, r1
 8008f4e:	4629      	mov	r1, r5
 8008f50:	4638      	mov	r0, r7
 8008f52:	f7ff ffa7 	bl	8008ea4 <sbrk_aligned>
 8008f56:	3001      	adds	r0, #1
 8008f58:	d037      	beq.n	8008fca <_malloc_r+0xe6>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	442b      	add	r3, r5
 8008f5e:	6023      	str	r3, [r4, #0]
 8008f60:	f8d8 3000 	ldr.w	r3, [r8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d038      	beq.n	8008fda <_malloc_r+0xf6>
 8008f68:	685a      	ldr	r2, [r3, #4]
 8008f6a:	42a2      	cmp	r2, r4
 8008f6c:	d12b      	bne.n	8008fc6 <_malloc_r+0xe2>
 8008f6e:	2200      	movs	r2, #0
 8008f70:	605a      	str	r2, [r3, #4]
 8008f72:	e00f      	b.n	8008f94 <_malloc_r+0xb0>
 8008f74:	6822      	ldr	r2, [r4, #0]
 8008f76:	1b52      	subs	r2, r2, r5
 8008f78:	d41f      	bmi.n	8008fba <_malloc_r+0xd6>
 8008f7a:	2a0b      	cmp	r2, #11
 8008f7c:	d917      	bls.n	8008fae <_malloc_r+0xca>
 8008f7e:	1961      	adds	r1, r4, r5
 8008f80:	42a3      	cmp	r3, r4
 8008f82:	6025      	str	r5, [r4, #0]
 8008f84:	bf18      	it	ne
 8008f86:	6059      	strne	r1, [r3, #4]
 8008f88:	6863      	ldr	r3, [r4, #4]
 8008f8a:	bf08      	it	eq
 8008f8c:	f8c8 1000 	streq.w	r1, [r8]
 8008f90:	5162      	str	r2, [r4, r5]
 8008f92:	604b      	str	r3, [r1, #4]
 8008f94:	4638      	mov	r0, r7
 8008f96:	f104 060b 	add.w	r6, r4, #11
 8008f9a:	f000 f829 	bl	8008ff0 <__malloc_unlock>
 8008f9e:	f026 0607 	bic.w	r6, r6, #7
 8008fa2:	1d23      	adds	r3, r4, #4
 8008fa4:	1af2      	subs	r2, r6, r3
 8008fa6:	d0ae      	beq.n	8008f06 <_malloc_r+0x22>
 8008fa8:	1b9b      	subs	r3, r3, r6
 8008faa:	50a3      	str	r3, [r4, r2]
 8008fac:	e7ab      	b.n	8008f06 <_malloc_r+0x22>
 8008fae:	42a3      	cmp	r3, r4
 8008fb0:	6862      	ldr	r2, [r4, #4]
 8008fb2:	d1dd      	bne.n	8008f70 <_malloc_r+0x8c>
 8008fb4:	f8c8 2000 	str.w	r2, [r8]
 8008fb8:	e7ec      	b.n	8008f94 <_malloc_r+0xb0>
 8008fba:	4623      	mov	r3, r4
 8008fbc:	6864      	ldr	r4, [r4, #4]
 8008fbe:	e7ac      	b.n	8008f1a <_malloc_r+0x36>
 8008fc0:	4634      	mov	r4, r6
 8008fc2:	6876      	ldr	r6, [r6, #4]
 8008fc4:	e7b4      	b.n	8008f30 <_malloc_r+0x4c>
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	e7cc      	b.n	8008f64 <_malloc_r+0x80>
 8008fca:	230c      	movs	r3, #12
 8008fcc:	603b      	str	r3, [r7, #0]
 8008fce:	4638      	mov	r0, r7
 8008fd0:	f000 f80e 	bl	8008ff0 <__malloc_unlock>
 8008fd4:	e797      	b.n	8008f06 <_malloc_r+0x22>
 8008fd6:	6025      	str	r5, [r4, #0]
 8008fd8:	e7dc      	b.n	8008f94 <_malloc_r+0xb0>
 8008fda:	605b      	str	r3, [r3, #4]
 8008fdc:	deff      	udf	#255	; 0xff
 8008fde:	bf00      	nop
 8008fe0:	20000480 	.word	0x20000480

08008fe4 <__malloc_lock>:
 8008fe4:	4801      	ldr	r0, [pc, #4]	; (8008fec <__malloc_lock+0x8>)
 8008fe6:	f7ff b88c 	b.w	8008102 <__retarget_lock_acquire_recursive>
 8008fea:	bf00      	nop
 8008fec:	2000047c 	.word	0x2000047c

08008ff0 <__malloc_unlock>:
 8008ff0:	4801      	ldr	r0, [pc, #4]	; (8008ff8 <__malloc_unlock+0x8>)
 8008ff2:	f7ff b887 	b.w	8008104 <__retarget_lock_release_recursive>
 8008ff6:	bf00      	nop
 8008ff8:	2000047c 	.word	0x2000047c

08008ffc <_Balloc>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	69c6      	ldr	r6, [r0, #28]
 8009000:	4604      	mov	r4, r0
 8009002:	460d      	mov	r5, r1
 8009004:	b976      	cbnz	r6, 8009024 <_Balloc+0x28>
 8009006:	2010      	movs	r0, #16
 8009008:	f7ff ff44 	bl	8008e94 <malloc>
 800900c:	4602      	mov	r2, r0
 800900e:	61e0      	str	r0, [r4, #28]
 8009010:	b920      	cbnz	r0, 800901c <_Balloc+0x20>
 8009012:	4b18      	ldr	r3, [pc, #96]	; (8009074 <_Balloc+0x78>)
 8009014:	4818      	ldr	r0, [pc, #96]	; (8009078 <_Balloc+0x7c>)
 8009016:	216b      	movs	r1, #107	; 0x6b
 8009018:	f000 fdaa 	bl	8009b70 <__assert_func>
 800901c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009020:	6006      	str	r6, [r0, #0]
 8009022:	60c6      	str	r6, [r0, #12]
 8009024:	69e6      	ldr	r6, [r4, #28]
 8009026:	68f3      	ldr	r3, [r6, #12]
 8009028:	b183      	cbz	r3, 800904c <_Balloc+0x50>
 800902a:	69e3      	ldr	r3, [r4, #28]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009032:	b9b8      	cbnz	r0, 8009064 <_Balloc+0x68>
 8009034:	2101      	movs	r1, #1
 8009036:	fa01 f605 	lsl.w	r6, r1, r5
 800903a:	1d72      	adds	r2, r6, #5
 800903c:	0092      	lsls	r2, r2, #2
 800903e:	4620      	mov	r0, r4
 8009040:	f000 fdb4 	bl	8009bac <_calloc_r>
 8009044:	b160      	cbz	r0, 8009060 <_Balloc+0x64>
 8009046:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800904a:	e00e      	b.n	800906a <_Balloc+0x6e>
 800904c:	2221      	movs	r2, #33	; 0x21
 800904e:	2104      	movs	r1, #4
 8009050:	4620      	mov	r0, r4
 8009052:	f000 fdab 	bl	8009bac <_calloc_r>
 8009056:	69e3      	ldr	r3, [r4, #28]
 8009058:	60f0      	str	r0, [r6, #12]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1e4      	bne.n	800902a <_Balloc+0x2e>
 8009060:	2000      	movs	r0, #0
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	6802      	ldr	r2, [r0, #0]
 8009066:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800906a:	2300      	movs	r3, #0
 800906c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009070:	e7f7      	b.n	8009062 <_Balloc+0x66>
 8009072:	bf00      	nop
 8009074:	0800a299 	.word	0x0800a299
 8009078:	0800a319 	.word	0x0800a319

0800907c <_Bfree>:
 800907c:	b570      	push	{r4, r5, r6, lr}
 800907e:	69c6      	ldr	r6, [r0, #28]
 8009080:	4605      	mov	r5, r0
 8009082:	460c      	mov	r4, r1
 8009084:	b976      	cbnz	r6, 80090a4 <_Bfree+0x28>
 8009086:	2010      	movs	r0, #16
 8009088:	f7ff ff04 	bl	8008e94 <malloc>
 800908c:	4602      	mov	r2, r0
 800908e:	61e8      	str	r0, [r5, #28]
 8009090:	b920      	cbnz	r0, 800909c <_Bfree+0x20>
 8009092:	4b09      	ldr	r3, [pc, #36]	; (80090b8 <_Bfree+0x3c>)
 8009094:	4809      	ldr	r0, [pc, #36]	; (80090bc <_Bfree+0x40>)
 8009096:	218f      	movs	r1, #143	; 0x8f
 8009098:	f000 fd6a 	bl	8009b70 <__assert_func>
 800909c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090a0:	6006      	str	r6, [r0, #0]
 80090a2:	60c6      	str	r6, [r0, #12]
 80090a4:	b13c      	cbz	r4, 80090b6 <_Bfree+0x3a>
 80090a6:	69eb      	ldr	r3, [r5, #28]
 80090a8:	6862      	ldr	r2, [r4, #4]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090b0:	6021      	str	r1, [r4, #0]
 80090b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090b6:	bd70      	pop	{r4, r5, r6, pc}
 80090b8:	0800a299 	.word	0x0800a299
 80090bc:	0800a319 	.word	0x0800a319

080090c0 <__multadd>:
 80090c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c4:	690d      	ldr	r5, [r1, #16]
 80090c6:	4607      	mov	r7, r0
 80090c8:	460c      	mov	r4, r1
 80090ca:	461e      	mov	r6, r3
 80090cc:	f101 0c14 	add.w	ip, r1, #20
 80090d0:	2000      	movs	r0, #0
 80090d2:	f8dc 3000 	ldr.w	r3, [ip]
 80090d6:	b299      	uxth	r1, r3
 80090d8:	fb02 6101 	mla	r1, r2, r1, r6
 80090dc:	0c1e      	lsrs	r6, r3, #16
 80090de:	0c0b      	lsrs	r3, r1, #16
 80090e0:	fb02 3306 	mla	r3, r2, r6, r3
 80090e4:	b289      	uxth	r1, r1
 80090e6:	3001      	adds	r0, #1
 80090e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090ec:	4285      	cmp	r5, r0
 80090ee:	f84c 1b04 	str.w	r1, [ip], #4
 80090f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090f6:	dcec      	bgt.n	80090d2 <__multadd+0x12>
 80090f8:	b30e      	cbz	r6, 800913e <__multadd+0x7e>
 80090fa:	68a3      	ldr	r3, [r4, #8]
 80090fc:	42ab      	cmp	r3, r5
 80090fe:	dc19      	bgt.n	8009134 <__multadd+0x74>
 8009100:	6861      	ldr	r1, [r4, #4]
 8009102:	4638      	mov	r0, r7
 8009104:	3101      	adds	r1, #1
 8009106:	f7ff ff79 	bl	8008ffc <_Balloc>
 800910a:	4680      	mov	r8, r0
 800910c:	b928      	cbnz	r0, 800911a <__multadd+0x5a>
 800910e:	4602      	mov	r2, r0
 8009110:	4b0c      	ldr	r3, [pc, #48]	; (8009144 <__multadd+0x84>)
 8009112:	480d      	ldr	r0, [pc, #52]	; (8009148 <__multadd+0x88>)
 8009114:	21ba      	movs	r1, #186	; 0xba
 8009116:	f000 fd2b 	bl	8009b70 <__assert_func>
 800911a:	6922      	ldr	r2, [r4, #16]
 800911c:	3202      	adds	r2, #2
 800911e:	f104 010c 	add.w	r1, r4, #12
 8009122:	0092      	lsls	r2, r2, #2
 8009124:	300c      	adds	r0, #12
 8009126:	f000 fd15 	bl	8009b54 <memcpy>
 800912a:	4621      	mov	r1, r4
 800912c:	4638      	mov	r0, r7
 800912e:	f7ff ffa5 	bl	800907c <_Bfree>
 8009132:	4644      	mov	r4, r8
 8009134:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009138:	3501      	adds	r5, #1
 800913a:	615e      	str	r6, [r3, #20]
 800913c:	6125      	str	r5, [r4, #16]
 800913e:	4620      	mov	r0, r4
 8009140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009144:	0800a308 	.word	0x0800a308
 8009148:	0800a319 	.word	0x0800a319

0800914c <__hi0bits>:
 800914c:	0c03      	lsrs	r3, r0, #16
 800914e:	041b      	lsls	r3, r3, #16
 8009150:	b9d3      	cbnz	r3, 8009188 <__hi0bits+0x3c>
 8009152:	0400      	lsls	r0, r0, #16
 8009154:	2310      	movs	r3, #16
 8009156:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800915a:	bf04      	itt	eq
 800915c:	0200      	lsleq	r0, r0, #8
 800915e:	3308      	addeq	r3, #8
 8009160:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009164:	bf04      	itt	eq
 8009166:	0100      	lsleq	r0, r0, #4
 8009168:	3304      	addeq	r3, #4
 800916a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800916e:	bf04      	itt	eq
 8009170:	0080      	lsleq	r0, r0, #2
 8009172:	3302      	addeq	r3, #2
 8009174:	2800      	cmp	r0, #0
 8009176:	db05      	blt.n	8009184 <__hi0bits+0x38>
 8009178:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800917c:	f103 0301 	add.w	r3, r3, #1
 8009180:	bf08      	it	eq
 8009182:	2320      	moveq	r3, #32
 8009184:	4618      	mov	r0, r3
 8009186:	4770      	bx	lr
 8009188:	2300      	movs	r3, #0
 800918a:	e7e4      	b.n	8009156 <__hi0bits+0xa>

0800918c <__lo0bits>:
 800918c:	6803      	ldr	r3, [r0, #0]
 800918e:	f013 0207 	ands.w	r2, r3, #7
 8009192:	d00c      	beq.n	80091ae <__lo0bits+0x22>
 8009194:	07d9      	lsls	r1, r3, #31
 8009196:	d422      	bmi.n	80091de <__lo0bits+0x52>
 8009198:	079a      	lsls	r2, r3, #30
 800919a:	bf49      	itett	mi
 800919c:	085b      	lsrmi	r3, r3, #1
 800919e:	089b      	lsrpl	r3, r3, #2
 80091a0:	6003      	strmi	r3, [r0, #0]
 80091a2:	2201      	movmi	r2, #1
 80091a4:	bf5c      	itt	pl
 80091a6:	6003      	strpl	r3, [r0, #0]
 80091a8:	2202      	movpl	r2, #2
 80091aa:	4610      	mov	r0, r2
 80091ac:	4770      	bx	lr
 80091ae:	b299      	uxth	r1, r3
 80091b0:	b909      	cbnz	r1, 80091b6 <__lo0bits+0x2a>
 80091b2:	0c1b      	lsrs	r3, r3, #16
 80091b4:	2210      	movs	r2, #16
 80091b6:	b2d9      	uxtb	r1, r3
 80091b8:	b909      	cbnz	r1, 80091be <__lo0bits+0x32>
 80091ba:	3208      	adds	r2, #8
 80091bc:	0a1b      	lsrs	r3, r3, #8
 80091be:	0719      	lsls	r1, r3, #28
 80091c0:	bf04      	itt	eq
 80091c2:	091b      	lsreq	r3, r3, #4
 80091c4:	3204      	addeq	r2, #4
 80091c6:	0799      	lsls	r1, r3, #30
 80091c8:	bf04      	itt	eq
 80091ca:	089b      	lsreq	r3, r3, #2
 80091cc:	3202      	addeq	r2, #2
 80091ce:	07d9      	lsls	r1, r3, #31
 80091d0:	d403      	bmi.n	80091da <__lo0bits+0x4e>
 80091d2:	085b      	lsrs	r3, r3, #1
 80091d4:	f102 0201 	add.w	r2, r2, #1
 80091d8:	d003      	beq.n	80091e2 <__lo0bits+0x56>
 80091da:	6003      	str	r3, [r0, #0]
 80091dc:	e7e5      	b.n	80091aa <__lo0bits+0x1e>
 80091de:	2200      	movs	r2, #0
 80091e0:	e7e3      	b.n	80091aa <__lo0bits+0x1e>
 80091e2:	2220      	movs	r2, #32
 80091e4:	e7e1      	b.n	80091aa <__lo0bits+0x1e>
	...

080091e8 <__i2b>:
 80091e8:	b510      	push	{r4, lr}
 80091ea:	460c      	mov	r4, r1
 80091ec:	2101      	movs	r1, #1
 80091ee:	f7ff ff05 	bl	8008ffc <_Balloc>
 80091f2:	4602      	mov	r2, r0
 80091f4:	b928      	cbnz	r0, 8009202 <__i2b+0x1a>
 80091f6:	4b05      	ldr	r3, [pc, #20]	; (800920c <__i2b+0x24>)
 80091f8:	4805      	ldr	r0, [pc, #20]	; (8009210 <__i2b+0x28>)
 80091fa:	f240 1145 	movw	r1, #325	; 0x145
 80091fe:	f000 fcb7 	bl	8009b70 <__assert_func>
 8009202:	2301      	movs	r3, #1
 8009204:	6144      	str	r4, [r0, #20]
 8009206:	6103      	str	r3, [r0, #16]
 8009208:	bd10      	pop	{r4, pc}
 800920a:	bf00      	nop
 800920c:	0800a308 	.word	0x0800a308
 8009210:	0800a319 	.word	0x0800a319

08009214 <__multiply>:
 8009214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	4691      	mov	r9, r2
 800921a:	690a      	ldr	r2, [r1, #16]
 800921c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009220:	429a      	cmp	r2, r3
 8009222:	bfb8      	it	lt
 8009224:	460b      	movlt	r3, r1
 8009226:	460c      	mov	r4, r1
 8009228:	bfbc      	itt	lt
 800922a:	464c      	movlt	r4, r9
 800922c:	4699      	movlt	r9, r3
 800922e:	6927      	ldr	r7, [r4, #16]
 8009230:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009234:	68a3      	ldr	r3, [r4, #8]
 8009236:	6861      	ldr	r1, [r4, #4]
 8009238:	eb07 060a 	add.w	r6, r7, sl
 800923c:	42b3      	cmp	r3, r6
 800923e:	b085      	sub	sp, #20
 8009240:	bfb8      	it	lt
 8009242:	3101      	addlt	r1, #1
 8009244:	f7ff feda 	bl	8008ffc <_Balloc>
 8009248:	b930      	cbnz	r0, 8009258 <__multiply+0x44>
 800924a:	4602      	mov	r2, r0
 800924c:	4b44      	ldr	r3, [pc, #272]	; (8009360 <__multiply+0x14c>)
 800924e:	4845      	ldr	r0, [pc, #276]	; (8009364 <__multiply+0x150>)
 8009250:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009254:	f000 fc8c 	bl	8009b70 <__assert_func>
 8009258:	f100 0514 	add.w	r5, r0, #20
 800925c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009260:	462b      	mov	r3, r5
 8009262:	2200      	movs	r2, #0
 8009264:	4543      	cmp	r3, r8
 8009266:	d321      	bcc.n	80092ac <__multiply+0x98>
 8009268:	f104 0314 	add.w	r3, r4, #20
 800926c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009270:	f109 0314 	add.w	r3, r9, #20
 8009274:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009278:	9202      	str	r2, [sp, #8]
 800927a:	1b3a      	subs	r2, r7, r4
 800927c:	3a15      	subs	r2, #21
 800927e:	f022 0203 	bic.w	r2, r2, #3
 8009282:	3204      	adds	r2, #4
 8009284:	f104 0115 	add.w	r1, r4, #21
 8009288:	428f      	cmp	r7, r1
 800928a:	bf38      	it	cc
 800928c:	2204      	movcc	r2, #4
 800928e:	9201      	str	r2, [sp, #4]
 8009290:	9a02      	ldr	r2, [sp, #8]
 8009292:	9303      	str	r3, [sp, #12]
 8009294:	429a      	cmp	r2, r3
 8009296:	d80c      	bhi.n	80092b2 <__multiply+0x9e>
 8009298:	2e00      	cmp	r6, #0
 800929a:	dd03      	ble.n	80092a4 <__multiply+0x90>
 800929c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d05b      	beq.n	800935c <__multiply+0x148>
 80092a4:	6106      	str	r6, [r0, #16]
 80092a6:	b005      	add	sp, #20
 80092a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ac:	f843 2b04 	str.w	r2, [r3], #4
 80092b0:	e7d8      	b.n	8009264 <__multiply+0x50>
 80092b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80092b6:	f1ba 0f00 	cmp.w	sl, #0
 80092ba:	d024      	beq.n	8009306 <__multiply+0xf2>
 80092bc:	f104 0e14 	add.w	lr, r4, #20
 80092c0:	46a9      	mov	r9, r5
 80092c2:	f04f 0c00 	mov.w	ip, #0
 80092c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80092ca:	f8d9 1000 	ldr.w	r1, [r9]
 80092ce:	fa1f fb82 	uxth.w	fp, r2
 80092d2:	b289      	uxth	r1, r1
 80092d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80092d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80092dc:	f8d9 2000 	ldr.w	r2, [r9]
 80092e0:	4461      	add	r1, ip
 80092e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80092ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80092ee:	b289      	uxth	r1, r1
 80092f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092f4:	4577      	cmp	r7, lr
 80092f6:	f849 1b04 	str.w	r1, [r9], #4
 80092fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092fe:	d8e2      	bhi.n	80092c6 <__multiply+0xb2>
 8009300:	9a01      	ldr	r2, [sp, #4]
 8009302:	f845 c002 	str.w	ip, [r5, r2]
 8009306:	9a03      	ldr	r2, [sp, #12]
 8009308:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800930c:	3304      	adds	r3, #4
 800930e:	f1b9 0f00 	cmp.w	r9, #0
 8009312:	d021      	beq.n	8009358 <__multiply+0x144>
 8009314:	6829      	ldr	r1, [r5, #0]
 8009316:	f104 0c14 	add.w	ip, r4, #20
 800931a:	46ae      	mov	lr, r5
 800931c:	f04f 0a00 	mov.w	sl, #0
 8009320:	f8bc b000 	ldrh.w	fp, [ip]
 8009324:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009328:	fb09 220b 	mla	r2, r9, fp, r2
 800932c:	4452      	add	r2, sl
 800932e:	b289      	uxth	r1, r1
 8009330:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009334:	f84e 1b04 	str.w	r1, [lr], #4
 8009338:	f85c 1b04 	ldr.w	r1, [ip], #4
 800933c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009340:	f8be 1000 	ldrh.w	r1, [lr]
 8009344:	fb09 110a 	mla	r1, r9, sl, r1
 8009348:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800934c:	4567      	cmp	r7, ip
 800934e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009352:	d8e5      	bhi.n	8009320 <__multiply+0x10c>
 8009354:	9a01      	ldr	r2, [sp, #4]
 8009356:	50a9      	str	r1, [r5, r2]
 8009358:	3504      	adds	r5, #4
 800935a:	e799      	b.n	8009290 <__multiply+0x7c>
 800935c:	3e01      	subs	r6, #1
 800935e:	e79b      	b.n	8009298 <__multiply+0x84>
 8009360:	0800a308 	.word	0x0800a308
 8009364:	0800a319 	.word	0x0800a319

08009368 <__pow5mult>:
 8009368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800936c:	4615      	mov	r5, r2
 800936e:	f012 0203 	ands.w	r2, r2, #3
 8009372:	4606      	mov	r6, r0
 8009374:	460f      	mov	r7, r1
 8009376:	d007      	beq.n	8009388 <__pow5mult+0x20>
 8009378:	4c25      	ldr	r4, [pc, #148]	; (8009410 <__pow5mult+0xa8>)
 800937a:	3a01      	subs	r2, #1
 800937c:	2300      	movs	r3, #0
 800937e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009382:	f7ff fe9d 	bl	80090c0 <__multadd>
 8009386:	4607      	mov	r7, r0
 8009388:	10ad      	asrs	r5, r5, #2
 800938a:	d03d      	beq.n	8009408 <__pow5mult+0xa0>
 800938c:	69f4      	ldr	r4, [r6, #28]
 800938e:	b97c      	cbnz	r4, 80093b0 <__pow5mult+0x48>
 8009390:	2010      	movs	r0, #16
 8009392:	f7ff fd7f 	bl	8008e94 <malloc>
 8009396:	4602      	mov	r2, r0
 8009398:	61f0      	str	r0, [r6, #28]
 800939a:	b928      	cbnz	r0, 80093a8 <__pow5mult+0x40>
 800939c:	4b1d      	ldr	r3, [pc, #116]	; (8009414 <__pow5mult+0xac>)
 800939e:	481e      	ldr	r0, [pc, #120]	; (8009418 <__pow5mult+0xb0>)
 80093a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80093a4:	f000 fbe4 	bl	8009b70 <__assert_func>
 80093a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093ac:	6004      	str	r4, [r0, #0]
 80093ae:	60c4      	str	r4, [r0, #12]
 80093b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80093b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093b8:	b94c      	cbnz	r4, 80093ce <__pow5mult+0x66>
 80093ba:	f240 2171 	movw	r1, #625	; 0x271
 80093be:	4630      	mov	r0, r6
 80093c0:	f7ff ff12 	bl	80091e8 <__i2b>
 80093c4:	2300      	movs	r3, #0
 80093c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80093ca:	4604      	mov	r4, r0
 80093cc:	6003      	str	r3, [r0, #0]
 80093ce:	f04f 0900 	mov.w	r9, #0
 80093d2:	07eb      	lsls	r3, r5, #31
 80093d4:	d50a      	bpl.n	80093ec <__pow5mult+0x84>
 80093d6:	4639      	mov	r1, r7
 80093d8:	4622      	mov	r2, r4
 80093da:	4630      	mov	r0, r6
 80093dc:	f7ff ff1a 	bl	8009214 <__multiply>
 80093e0:	4639      	mov	r1, r7
 80093e2:	4680      	mov	r8, r0
 80093e4:	4630      	mov	r0, r6
 80093e6:	f7ff fe49 	bl	800907c <_Bfree>
 80093ea:	4647      	mov	r7, r8
 80093ec:	106d      	asrs	r5, r5, #1
 80093ee:	d00b      	beq.n	8009408 <__pow5mult+0xa0>
 80093f0:	6820      	ldr	r0, [r4, #0]
 80093f2:	b938      	cbnz	r0, 8009404 <__pow5mult+0x9c>
 80093f4:	4622      	mov	r2, r4
 80093f6:	4621      	mov	r1, r4
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff ff0b 	bl	8009214 <__multiply>
 80093fe:	6020      	str	r0, [r4, #0]
 8009400:	f8c0 9000 	str.w	r9, [r0]
 8009404:	4604      	mov	r4, r0
 8009406:	e7e4      	b.n	80093d2 <__pow5mult+0x6a>
 8009408:	4638      	mov	r0, r7
 800940a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800940e:	bf00      	nop
 8009410:	0800a468 	.word	0x0800a468
 8009414:	0800a299 	.word	0x0800a299
 8009418:	0800a319 	.word	0x0800a319

0800941c <__lshift>:
 800941c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009420:	460c      	mov	r4, r1
 8009422:	6849      	ldr	r1, [r1, #4]
 8009424:	6923      	ldr	r3, [r4, #16]
 8009426:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800942a:	68a3      	ldr	r3, [r4, #8]
 800942c:	4607      	mov	r7, r0
 800942e:	4691      	mov	r9, r2
 8009430:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009434:	f108 0601 	add.w	r6, r8, #1
 8009438:	42b3      	cmp	r3, r6
 800943a:	db0b      	blt.n	8009454 <__lshift+0x38>
 800943c:	4638      	mov	r0, r7
 800943e:	f7ff fddd 	bl	8008ffc <_Balloc>
 8009442:	4605      	mov	r5, r0
 8009444:	b948      	cbnz	r0, 800945a <__lshift+0x3e>
 8009446:	4602      	mov	r2, r0
 8009448:	4b28      	ldr	r3, [pc, #160]	; (80094ec <__lshift+0xd0>)
 800944a:	4829      	ldr	r0, [pc, #164]	; (80094f0 <__lshift+0xd4>)
 800944c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009450:	f000 fb8e 	bl	8009b70 <__assert_func>
 8009454:	3101      	adds	r1, #1
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	e7ee      	b.n	8009438 <__lshift+0x1c>
 800945a:	2300      	movs	r3, #0
 800945c:	f100 0114 	add.w	r1, r0, #20
 8009460:	f100 0210 	add.w	r2, r0, #16
 8009464:	4618      	mov	r0, r3
 8009466:	4553      	cmp	r3, sl
 8009468:	db33      	blt.n	80094d2 <__lshift+0xb6>
 800946a:	6920      	ldr	r0, [r4, #16]
 800946c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009470:	f104 0314 	add.w	r3, r4, #20
 8009474:	f019 091f 	ands.w	r9, r9, #31
 8009478:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800947c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009480:	d02b      	beq.n	80094da <__lshift+0xbe>
 8009482:	f1c9 0e20 	rsb	lr, r9, #32
 8009486:	468a      	mov	sl, r1
 8009488:	2200      	movs	r2, #0
 800948a:	6818      	ldr	r0, [r3, #0]
 800948c:	fa00 f009 	lsl.w	r0, r0, r9
 8009490:	4310      	orrs	r0, r2
 8009492:	f84a 0b04 	str.w	r0, [sl], #4
 8009496:	f853 2b04 	ldr.w	r2, [r3], #4
 800949a:	459c      	cmp	ip, r3
 800949c:	fa22 f20e 	lsr.w	r2, r2, lr
 80094a0:	d8f3      	bhi.n	800948a <__lshift+0x6e>
 80094a2:	ebac 0304 	sub.w	r3, ip, r4
 80094a6:	3b15      	subs	r3, #21
 80094a8:	f023 0303 	bic.w	r3, r3, #3
 80094ac:	3304      	adds	r3, #4
 80094ae:	f104 0015 	add.w	r0, r4, #21
 80094b2:	4584      	cmp	ip, r0
 80094b4:	bf38      	it	cc
 80094b6:	2304      	movcc	r3, #4
 80094b8:	50ca      	str	r2, [r1, r3]
 80094ba:	b10a      	cbz	r2, 80094c0 <__lshift+0xa4>
 80094bc:	f108 0602 	add.w	r6, r8, #2
 80094c0:	3e01      	subs	r6, #1
 80094c2:	4638      	mov	r0, r7
 80094c4:	612e      	str	r6, [r5, #16]
 80094c6:	4621      	mov	r1, r4
 80094c8:	f7ff fdd8 	bl	800907c <_Bfree>
 80094cc:	4628      	mov	r0, r5
 80094ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80094d6:	3301      	adds	r3, #1
 80094d8:	e7c5      	b.n	8009466 <__lshift+0x4a>
 80094da:	3904      	subs	r1, #4
 80094dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80094e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80094e4:	459c      	cmp	ip, r3
 80094e6:	d8f9      	bhi.n	80094dc <__lshift+0xc0>
 80094e8:	e7ea      	b.n	80094c0 <__lshift+0xa4>
 80094ea:	bf00      	nop
 80094ec:	0800a308 	.word	0x0800a308
 80094f0:	0800a319 	.word	0x0800a319

080094f4 <__mcmp>:
 80094f4:	b530      	push	{r4, r5, lr}
 80094f6:	6902      	ldr	r2, [r0, #16]
 80094f8:	690c      	ldr	r4, [r1, #16]
 80094fa:	1b12      	subs	r2, r2, r4
 80094fc:	d10e      	bne.n	800951c <__mcmp+0x28>
 80094fe:	f100 0314 	add.w	r3, r0, #20
 8009502:	3114      	adds	r1, #20
 8009504:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009508:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800950c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009510:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009514:	42a5      	cmp	r5, r4
 8009516:	d003      	beq.n	8009520 <__mcmp+0x2c>
 8009518:	d305      	bcc.n	8009526 <__mcmp+0x32>
 800951a:	2201      	movs	r2, #1
 800951c:	4610      	mov	r0, r2
 800951e:	bd30      	pop	{r4, r5, pc}
 8009520:	4283      	cmp	r3, r0
 8009522:	d3f3      	bcc.n	800950c <__mcmp+0x18>
 8009524:	e7fa      	b.n	800951c <__mcmp+0x28>
 8009526:	f04f 32ff 	mov.w	r2, #4294967295
 800952a:	e7f7      	b.n	800951c <__mcmp+0x28>

0800952c <__mdiff>:
 800952c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009530:	460c      	mov	r4, r1
 8009532:	4606      	mov	r6, r0
 8009534:	4611      	mov	r1, r2
 8009536:	4620      	mov	r0, r4
 8009538:	4690      	mov	r8, r2
 800953a:	f7ff ffdb 	bl	80094f4 <__mcmp>
 800953e:	1e05      	subs	r5, r0, #0
 8009540:	d110      	bne.n	8009564 <__mdiff+0x38>
 8009542:	4629      	mov	r1, r5
 8009544:	4630      	mov	r0, r6
 8009546:	f7ff fd59 	bl	8008ffc <_Balloc>
 800954a:	b930      	cbnz	r0, 800955a <__mdiff+0x2e>
 800954c:	4b3a      	ldr	r3, [pc, #232]	; (8009638 <__mdiff+0x10c>)
 800954e:	4602      	mov	r2, r0
 8009550:	f240 2137 	movw	r1, #567	; 0x237
 8009554:	4839      	ldr	r0, [pc, #228]	; (800963c <__mdiff+0x110>)
 8009556:	f000 fb0b 	bl	8009b70 <__assert_func>
 800955a:	2301      	movs	r3, #1
 800955c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009564:	bfa4      	itt	ge
 8009566:	4643      	movge	r3, r8
 8009568:	46a0      	movge	r8, r4
 800956a:	4630      	mov	r0, r6
 800956c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009570:	bfa6      	itte	ge
 8009572:	461c      	movge	r4, r3
 8009574:	2500      	movge	r5, #0
 8009576:	2501      	movlt	r5, #1
 8009578:	f7ff fd40 	bl	8008ffc <_Balloc>
 800957c:	b920      	cbnz	r0, 8009588 <__mdiff+0x5c>
 800957e:	4b2e      	ldr	r3, [pc, #184]	; (8009638 <__mdiff+0x10c>)
 8009580:	4602      	mov	r2, r0
 8009582:	f240 2145 	movw	r1, #581	; 0x245
 8009586:	e7e5      	b.n	8009554 <__mdiff+0x28>
 8009588:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800958c:	6926      	ldr	r6, [r4, #16]
 800958e:	60c5      	str	r5, [r0, #12]
 8009590:	f104 0914 	add.w	r9, r4, #20
 8009594:	f108 0514 	add.w	r5, r8, #20
 8009598:	f100 0e14 	add.w	lr, r0, #20
 800959c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80095a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80095a4:	f108 0210 	add.w	r2, r8, #16
 80095a8:	46f2      	mov	sl, lr
 80095aa:	2100      	movs	r1, #0
 80095ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80095b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80095b4:	fa11 f88b 	uxtah	r8, r1, fp
 80095b8:	b299      	uxth	r1, r3
 80095ba:	0c1b      	lsrs	r3, r3, #16
 80095bc:	eba8 0801 	sub.w	r8, r8, r1
 80095c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80095c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80095c8:	fa1f f888 	uxth.w	r8, r8
 80095cc:	1419      	asrs	r1, r3, #16
 80095ce:	454e      	cmp	r6, r9
 80095d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80095d4:	f84a 3b04 	str.w	r3, [sl], #4
 80095d8:	d8e8      	bhi.n	80095ac <__mdiff+0x80>
 80095da:	1b33      	subs	r3, r6, r4
 80095dc:	3b15      	subs	r3, #21
 80095de:	f023 0303 	bic.w	r3, r3, #3
 80095e2:	3304      	adds	r3, #4
 80095e4:	3415      	adds	r4, #21
 80095e6:	42a6      	cmp	r6, r4
 80095e8:	bf38      	it	cc
 80095ea:	2304      	movcc	r3, #4
 80095ec:	441d      	add	r5, r3
 80095ee:	4473      	add	r3, lr
 80095f0:	469e      	mov	lr, r3
 80095f2:	462e      	mov	r6, r5
 80095f4:	4566      	cmp	r6, ip
 80095f6:	d30e      	bcc.n	8009616 <__mdiff+0xea>
 80095f8:	f10c 0203 	add.w	r2, ip, #3
 80095fc:	1b52      	subs	r2, r2, r5
 80095fe:	f022 0203 	bic.w	r2, r2, #3
 8009602:	3d03      	subs	r5, #3
 8009604:	45ac      	cmp	ip, r5
 8009606:	bf38      	it	cc
 8009608:	2200      	movcc	r2, #0
 800960a:	4413      	add	r3, r2
 800960c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009610:	b17a      	cbz	r2, 8009632 <__mdiff+0x106>
 8009612:	6107      	str	r7, [r0, #16]
 8009614:	e7a4      	b.n	8009560 <__mdiff+0x34>
 8009616:	f856 8b04 	ldr.w	r8, [r6], #4
 800961a:	fa11 f288 	uxtah	r2, r1, r8
 800961e:	1414      	asrs	r4, r2, #16
 8009620:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009624:	b292      	uxth	r2, r2
 8009626:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800962a:	f84e 2b04 	str.w	r2, [lr], #4
 800962e:	1421      	asrs	r1, r4, #16
 8009630:	e7e0      	b.n	80095f4 <__mdiff+0xc8>
 8009632:	3f01      	subs	r7, #1
 8009634:	e7ea      	b.n	800960c <__mdiff+0xe0>
 8009636:	bf00      	nop
 8009638:	0800a308 	.word	0x0800a308
 800963c:	0800a319 	.word	0x0800a319

08009640 <__d2b>:
 8009640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009644:	460f      	mov	r7, r1
 8009646:	2101      	movs	r1, #1
 8009648:	ec59 8b10 	vmov	r8, r9, d0
 800964c:	4616      	mov	r6, r2
 800964e:	f7ff fcd5 	bl	8008ffc <_Balloc>
 8009652:	4604      	mov	r4, r0
 8009654:	b930      	cbnz	r0, 8009664 <__d2b+0x24>
 8009656:	4602      	mov	r2, r0
 8009658:	4b24      	ldr	r3, [pc, #144]	; (80096ec <__d2b+0xac>)
 800965a:	4825      	ldr	r0, [pc, #148]	; (80096f0 <__d2b+0xb0>)
 800965c:	f240 310f 	movw	r1, #783	; 0x30f
 8009660:	f000 fa86 	bl	8009b70 <__assert_func>
 8009664:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800966c:	bb2d      	cbnz	r5, 80096ba <__d2b+0x7a>
 800966e:	9301      	str	r3, [sp, #4]
 8009670:	f1b8 0300 	subs.w	r3, r8, #0
 8009674:	d026      	beq.n	80096c4 <__d2b+0x84>
 8009676:	4668      	mov	r0, sp
 8009678:	9300      	str	r3, [sp, #0]
 800967a:	f7ff fd87 	bl	800918c <__lo0bits>
 800967e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009682:	b1e8      	cbz	r0, 80096c0 <__d2b+0x80>
 8009684:	f1c0 0320 	rsb	r3, r0, #32
 8009688:	fa02 f303 	lsl.w	r3, r2, r3
 800968c:	430b      	orrs	r3, r1
 800968e:	40c2      	lsrs	r2, r0
 8009690:	6163      	str	r3, [r4, #20]
 8009692:	9201      	str	r2, [sp, #4]
 8009694:	9b01      	ldr	r3, [sp, #4]
 8009696:	61a3      	str	r3, [r4, #24]
 8009698:	2b00      	cmp	r3, #0
 800969a:	bf14      	ite	ne
 800969c:	2202      	movne	r2, #2
 800969e:	2201      	moveq	r2, #1
 80096a0:	6122      	str	r2, [r4, #16]
 80096a2:	b1bd      	cbz	r5, 80096d4 <__d2b+0x94>
 80096a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80096a8:	4405      	add	r5, r0
 80096aa:	603d      	str	r5, [r7, #0]
 80096ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096b0:	6030      	str	r0, [r6, #0]
 80096b2:	4620      	mov	r0, r4
 80096b4:	b003      	add	sp, #12
 80096b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096be:	e7d6      	b.n	800966e <__d2b+0x2e>
 80096c0:	6161      	str	r1, [r4, #20]
 80096c2:	e7e7      	b.n	8009694 <__d2b+0x54>
 80096c4:	a801      	add	r0, sp, #4
 80096c6:	f7ff fd61 	bl	800918c <__lo0bits>
 80096ca:	9b01      	ldr	r3, [sp, #4]
 80096cc:	6163      	str	r3, [r4, #20]
 80096ce:	3020      	adds	r0, #32
 80096d0:	2201      	movs	r2, #1
 80096d2:	e7e5      	b.n	80096a0 <__d2b+0x60>
 80096d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096dc:	6038      	str	r0, [r7, #0]
 80096de:	6918      	ldr	r0, [r3, #16]
 80096e0:	f7ff fd34 	bl	800914c <__hi0bits>
 80096e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096e8:	e7e2      	b.n	80096b0 <__d2b+0x70>
 80096ea:	bf00      	nop
 80096ec:	0800a308 	.word	0x0800a308
 80096f0:	0800a319 	.word	0x0800a319

080096f4 <__ssputs_r>:
 80096f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f8:	688e      	ldr	r6, [r1, #8]
 80096fa:	461f      	mov	r7, r3
 80096fc:	42be      	cmp	r6, r7
 80096fe:	680b      	ldr	r3, [r1, #0]
 8009700:	4682      	mov	sl, r0
 8009702:	460c      	mov	r4, r1
 8009704:	4690      	mov	r8, r2
 8009706:	d82c      	bhi.n	8009762 <__ssputs_r+0x6e>
 8009708:	898a      	ldrh	r2, [r1, #12]
 800970a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800970e:	d026      	beq.n	800975e <__ssputs_r+0x6a>
 8009710:	6965      	ldr	r5, [r4, #20]
 8009712:	6909      	ldr	r1, [r1, #16]
 8009714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009718:	eba3 0901 	sub.w	r9, r3, r1
 800971c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009720:	1c7b      	adds	r3, r7, #1
 8009722:	444b      	add	r3, r9
 8009724:	106d      	asrs	r5, r5, #1
 8009726:	429d      	cmp	r5, r3
 8009728:	bf38      	it	cc
 800972a:	461d      	movcc	r5, r3
 800972c:	0553      	lsls	r3, r2, #21
 800972e:	d527      	bpl.n	8009780 <__ssputs_r+0x8c>
 8009730:	4629      	mov	r1, r5
 8009732:	f7ff fbd7 	bl	8008ee4 <_malloc_r>
 8009736:	4606      	mov	r6, r0
 8009738:	b360      	cbz	r0, 8009794 <__ssputs_r+0xa0>
 800973a:	6921      	ldr	r1, [r4, #16]
 800973c:	464a      	mov	r2, r9
 800973e:	f000 fa09 	bl	8009b54 <memcpy>
 8009742:	89a3      	ldrh	r3, [r4, #12]
 8009744:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800974c:	81a3      	strh	r3, [r4, #12]
 800974e:	6126      	str	r6, [r4, #16]
 8009750:	6165      	str	r5, [r4, #20]
 8009752:	444e      	add	r6, r9
 8009754:	eba5 0509 	sub.w	r5, r5, r9
 8009758:	6026      	str	r6, [r4, #0]
 800975a:	60a5      	str	r5, [r4, #8]
 800975c:	463e      	mov	r6, r7
 800975e:	42be      	cmp	r6, r7
 8009760:	d900      	bls.n	8009764 <__ssputs_r+0x70>
 8009762:	463e      	mov	r6, r7
 8009764:	6820      	ldr	r0, [r4, #0]
 8009766:	4632      	mov	r2, r6
 8009768:	4641      	mov	r1, r8
 800976a:	f000 f9c9 	bl	8009b00 <memmove>
 800976e:	68a3      	ldr	r3, [r4, #8]
 8009770:	1b9b      	subs	r3, r3, r6
 8009772:	60a3      	str	r3, [r4, #8]
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	4433      	add	r3, r6
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	2000      	movs	r0, #0
 800977c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009780:	462a      	mov	r2, r5
 8009782:	f000 fa3b 	bl	8009bfc <_realloc_r>
 8009786:	4606      	mov	r6, r0
 8009788:	2800      	cmp	r0, #0
 800978a:	d1e0      	bne.n	800974e <__ssputs_r+0x5a>
 800978c:	6921      	ldr	r1, [r4, #16]
 800978e:	4650      	mov	r0, sl
 8009790:	f7ff fb34 	bl	8008dfc <_free_r>
 8009794:	230c      	movs	r3, #12
 8009796:	f8ca 3000 	str.w	r3, [sl]
 800979a:	89a3      	ldrh	r3, [r4, #12]
 800979c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a0:	81a3      	strh	r3, [r4, #12]
 80097a2:	f04f 30ff 	mov.w	r0, #4294967295
 80097a6:	e7e9      	b.n	800977c <__ssputs_r+0x88>

080097a8 <_svfiprintf_r>:
 80097a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ac:	4698      	mov	r8, r3
 80097ae:	898b      	ldrh	r3, [r1, #12]
 80097b0:	061b      	lsls	r3, r3, #24
 80097b2:	b09d      	sub	sp, #116	; 0x74
 80097b4:	4607      	mov	r7, r0
 80097b6:	460d      	mov	r5, r1
 80097b8:	4614      	mov	r4, r2
 80097ba:	d50e      	bpl.n	80097da <_svfiprintf_r+0x32>
 80097bc:	690b      	ldr	r3, [r1, #16]
 80097be:	b963      	cbnz	r3, 80097da <_svfiprintf_r+0x32>
 80097c0:	2140      	movs	r1, #64	; 0x40
 80097c2:	f7ff fb8f 	bl	8008ee4 <_malloc_r>
 80097c6:	6028      	str	r0, [r5, #0]
 80097c8:	6128      	str	r0, [r5, #16]
 80097ca:	b920      	cbnz	r0, 80097d6 <_svfiprintf_r+0x2e>
 80097cc:	230c      	movs	r3, #12
 80097ce:	603b      	str	r3, [r7, #0]
 80097d0:	f04f 30ff 	mov.w	r0, #4294967295
 80097d4:	e0d0      	b.n	8009978 <_svfiprintf_r+0x1d0>
 80097d6:	2340      	movs	r3, #64	; 0x40
 80097d8:	616b      	str	r3, [r5, #20]
 80097da:	2300      	movs	r3, #0
 80097dc:	9309      	str	r3, [sp, #36]	; 0x24
 80097de:	2320      	movs	r3, #32
 80097e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80097e8:	2330      	movs	r3, #48	; 0x30
 80097ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009990 <_svfiprintf_r+0x1e8>
 80097ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097f2:	f04f 0901 	mov.w	r9, #1
 80097f6:	4623      	mov	r3, r4
 80097f8:	469a      	mov	sl, r3
 80097fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097fe:	b10a      	cbz	r2, 8009804 <_svfiprintf_r+0x5c>
 8009800:	2a25      	cmp	r2, #37	; 0x25
 8009802:	d1f9      	bne.n	80097f8 <_svfiprintf_r+0x50>
 8009804:	ebba 0b04 	subs.w	fp, sl, r4
 8009808:	d00b      	beq.n	8009822 <_svfiprintf_r+0x7a>
 800980a:	465b      	mov	r3, fp
 800980c:	4622      	mov	r2, r4
 800980e:	4629      	mov	r1, r5
 8009810:	4638      	mov	r0, r7
 8009812:	f7ff ff6f 	bl	80096f4 <__ssputs_r>
 8009816:	3001      	adds	r0, #1
 8009818:	f000 80a9 	beq.w	800996e <_svfiprintf_r+0x1c6>
 800981c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800981e:	445a      	add	r2, fp
 8009820:	9209      	str	r2, [sp, #36]	; 0x24
 8009822:	f89a 3000 	ldrb.w	r3, [sl]
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 80a1 	beq.w	800996e <_svfiprintf_r+0x1c6>
 800982c:	2300      	movs	r3, #0
 800982e:	f04f 32ff 	mov.w	r2, #4294967295
 8009832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009836:	f10a 0a01 	add.w	sl, sl, #1
 800983a:	9304      	str	r3, [sp, #16]
 800983c:	9307      	str	r3, [sp, #28]
 800983e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009842:	931a      	str	r3, [sp, #104]	; 0x68
 8009844:	4654      	mov	r4, sl
 8009846:	2205      	movs	r2, #5
 8009848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800984c:	4850      	ldr	r0, [pc, #320]	; (8009990 <_svfiprintf_r+0x1e8>)
 800984e:	f7f6 fcc7 	bl	80001e0 <memchr>
 8009852:	9a04      	ldr	r2, [sp, #16]
 8009854:	b9d8      	cbnz	r0, 800988e <_svfiprintf_r+0xe6>
 8009856:	06d0      	lsls	r0, r2, #27
 8009858:	bf44      	itt	mi
 800985a:	2320      	movmi	r3, #32
 800985c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009860:	0711      	lsls	r1, r2, #28
 8009862:	bf44      	itt	mi
 8009864:	232b      	movmi	r3, #43	; 0x2b
 8009866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800986a:	f89a 3000 	ldrb.w	r3, [sl]
 800986e:	2b2a      	cmp	r3, #42	; 0x2a
 8009870:	d015      	beq.n	800989e <_svfiprintf_r+0xf6>
 8009872:	9a07      	ldr	r2, [sp, #28]
 8009874:	4654      	mov	r4, sl
 8009876:	2000      	movs	r0, #0
 8009878:	f04f 0c0a 	mov.w	ip, #10
 800987c:	4621      	mov	r1, r4
 800987e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009882:	3b30      	subs	r3, #48	; 0x30
 8009884:	2b09      	cmp	r3, #9
 8009886:	d94d      	bls.n	8009924 <_svfiprintf_r+0x17c>
 8009888:	b1b0      	cbz	r0, 80098b8 <_svfiprintf_r+0x110>
 800988a:	9207      	str	r2, [sp, #28]
 800988c:	e014      	b.n	80098b8 <_svfiprintf_r+0x110>
 800988e:	eba0 0308 	sub.w	r3, r0, r8
 8009892:	fa09 f303 	lsl.w	r3, r9, r3
 8009896:	4313      	orrs	r3, r2
 8009898:	9304      	str	r3, [sp, #16]
 800989a:	46a2      	mov	sl, r4
 800989c:	e7d2      	b.n	8009844 <_svfiprintf_r+0x9c>
 800989e:	9b03      	ldr	r3, [sp, #12]
 80098a0:	1d19      	adds	r1, r3, #4
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	9103      	str	r1, [sp, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bfbb      	ittet	lt
 80098aa:	425b      	neglt	r3, r3
 80098ac:	f042 0202 	orrlt.w	r2, r2, #2
 80098b0:	9307      	strge	r3, [sp, #28]
 80098b2:	9307      	strlt	r3, [sp, #28]
 80098b4:	bfb8      	it	lt
 80098b6:	9204      	strlt	r2, [sp, #16]
 80098b8:	7823      	ldrb	r3, [r4, #0]
 80098ba:	2b2e      	cmp	r3, #46	; 0x2e
 80098bc:	d10c      	bne.n	80098d8 <_svfiprintf_r+0x130>
 80098be:	7863      	ldrb	r3, [r4, #1]
 80098c0:	2b2a      	cmp	r3, #42	; 0x2a
 80098c2:	d134      	bne.n	800992e <_svfiprintf_r+0x186>
 80098c4:	9b03      	ldr	r3, [sp, #12]
 80098c6:	1d1a      	adds	r2, r3, #4
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	9203      	str	r2, [sp, #12]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	bfb8      	it	lt
 80098d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80098d4:	3402      	adds	r4, #2
 80098d6:	9305      	str	r3, [sp, #20]
 80098d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80099a0 <_svfiprintf_r+0x1f8>
 80098dc:	7821      	ldrb	r1, [r4, #0]
 80098de:	2203      	movs	r2, #3
 80098e0:	4650      	mov	r0, sl
 80098e2:	f7f6 fc7d 	bl	80001e0 <memchr>
 80098e6:	b138      	cbz	r0, 80098f8 <_svfiprintf_r+0x150>
 80098e8:	9b04      	ldr	r3, [sp, #16]
 80098ea:	eba0 000a 	sub.w	r0, r0, sl
 80098ee:	2240      	movs	r2, #64	; 0x40
 80098f0:	4082      	lsls	r2, r0
 80098f2:	4313      	orrs	r3, r2
 80098f4:	3401      	adds	r4, #1
 80098f6:	9304      	str	r3, [sp, #16]
 80098f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098fc:	4825      	ldr	r0, [pc, #148]	; (8009994 <_svfiprintf_r+0x1ec>)
 80098fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009902:	2206      	movs	r2, #6
 8009904:	f7f6 fc6c 	bl	80001e0 <memchr>
 8009908:	2800      	cmp	r0, #0
 800990a:	d038      	beq.n	800997e <_svfiprintf_r+0x1d6>
 800990c:	4b22      	ldr	r3, [pc, #136]	; (8009998 <_svfiprintf_r+0x1f0>)
 800990e:	bb1b      	cbnz	r3, 8009958 <_svfiprintf_r+0x1b0>
 8009910:	9b03      	ldr	r3, [sp, #12]
 8009912:	3307      	adds	r3, #7
 8009914:	f023 0307 	bic.w	r3, r3, #7
 8009918:	3308      	adds	r3, #8
 800991a:	9303      	str	r3, [sp, #12]
 800991c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800991e:	4433      	add	r3, r6
 8009920:	9309      	str	r3, [sp, #36]	; 0x24
 8009922:	e768      	b.n	80097f6 <_svfiprintf_r+0x4e>
 8009924:	fb0c 3202 	mla	r2, ip, r2, r3
 8009928:	460c      	mov	r4, r1
 800992a:	2001      	movs	r0, #1
 800992c:	e7a6      	b.n	800987c <_svfiprintf_r+0xd4>
 800992e:	2300      	movs	r3, #0
 8009930:	3401      	adds	r4, #1
 8009932:	9305      	str	r3, [sp, #20]
 8009934:	4619      	mov	r1, r3
 8009936:	f04f 0c0a 	mov.w	ip, #10
 800993a:	4620      	mov	r0, r4
 800993c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009940:	3a30      	subs	r2, #48	; 0x30
 8009942:	2a09      	cmp	r2, #9
 8009944:	d903      	bls.n	800994e <_svfiprintf_r+0x1a6>
 8009946:	2b00      	cmp	r3, #0
 8009948:	d0c6      	beq.n	80098d8 <_svfiprintf_r+0x130>
 800994a:	9105      	str	r1, [sp, #20]
 800994c:	e7c4      	b.n	80098d8 <_svfiprintf_r+0x130>
 800994e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009952:	4604      	mov	r4, r0
 8009954:	2301      	movs	r3, #1
 8009956:	e7f0      	b.n	800993a <_svfiprintf_r+0x192>
 8009958:	ab03      	add	r3, sp, #12
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	462a      	mov	r2, r5
 800995e:	4b0f      	ldr	r3, [pc, #60]	; (800999c <_svfiprintf_r+0x1f4>)
 8009960:	a904      	add	r1, sp, #16
 8009962:	4638      	mov	r0, r7
 8009964:	f7fd fe50 	bl	8007608 <_printf_float>
 8009968:	1c42      	adds	r2, r0, #1
 800996a:	4606      	mov	r6, r0
 800996c:	d1d6      	bne.n	800991c <_svfiprintf_r+0x174>
 800996e:	89ab      	ldrh	r3, [r5, #12]
 8009970:	065b      	lsls	r3, r3, #25
 8009972:	f53f af2d 	bmi.w	80097d0 <_svfiprintf_r+0x28>
 8009976:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009978:	b01d      	add	sp, #116	; 0x74
 800997a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997e:	ab03      	add	r3, sp, #12
 8009980:	9300      	str	r3, [sp, #0]
 8009982:	462a      	mov	r2, r5
 8009984:	4b05      	ldr	r3, [pc, #20]	; (800999c <_svfiprintf_r+0x1f4>)
 8009986:	a904      	add	r1, sp, #16
 8009988:	4638      	mov	r0, r7
 800998a:	f7fe f8e1 	bl	8007b50 <_printf_i>
 800998e:	e7eb      	b.n	8009968 <_svfiprintf_r+0x1c0>
 8009990:	0800a474 	.word	0x0800a474
 8009994:	0800a47e 	.word	0x0800a47e
 8009998:	08007609 	.word	0x08007609
 800999c:	080096f5 	.word	0x080096f5
 80099a0:	0800a47a 	.word	0x0800a47a

080099a4 <__sflush_r>:
 80099a4:	898a      	ldrh	r2, [r1, #12]
 80099a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099aa:	4605      	mov	r5, r0
 80099ac:	0710      	lsls	r0, r2, #28
 80099ae:	460c      	mov	r4, r1
 80099b0:	d458      	bmi.n	8009a64 <__sflush_r+0xc0>
 80099b2:	684b      	ldr	r3, [r1, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	dc05      	bgt.n	80099c4 <__sflush_r+0x20>
 80099b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	dc02      	bgt.n	80099c4 <__sflush_r+0x20>
 80099be:	2000      	movs	r0, #0
 80099c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099c6:	2e00      	cmp	r6, #0
 80099c8:	d0f9      	beq.n	80099be <__sflush_r+0x1a>
 80099ca:	2300      	movs	r3, #0
 80099cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099d0:	682f      	ldr	r7, [r5, #0]
 80099d2:	6a21      	ldr	r1, [r4, #32]
 80099d4:	602b      	str	r3, [r5, #0]
 80099d6:	d032      	beq.n	8009a3e <__sflush_r+0x9a>
 80099d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099da:	89a3      	ldrh	r3, [r4, #12]
 80099dc:	075a      	lsls	r2, r3, #29
 80099de:	d505      	bpl.n	80099ec <__sflush_r+0x48>
 80099e0:	6863      	ldr	r3, [r4, #4]
 80099e2:	1ac0      	subs	r0, r0, r3
 80099e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099e6:	b10b      	cbz	r3, 80099ec <__sflush_r+0x48>
 80099e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099ea:	1ac0      	subs	r0, r0, r3
 80099ec:	2300      	movs	r3, #0
 80099ee:	4602      	mov	r2, r0
 80099f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099f2:	6a21      	ldr	r1, [r4, #32]
 80099f4:	4628      	mov	r0, r5
 80099f6:	47b0      	blx	r6
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	89a3      	ldrh	r3, [r4, #12]
 80099fc:	d106      	bne.n	8009a0c <__sflush_r+0x68>
 80099fe:	6829      	ldr	r1, [r5, #0]
 8009a00:	291d      	cmp	r1, #29
 8009a02:	d82b      	bhi.n	8009a5c <__sflush_r+0xb8>
 8009a04:	4a29      	ldr	r2, [pc, #164]	; (8009aac <__sflush_r+0x108>)
 8009a06:	410a      	asrs	r2, r1
 8009a08:	07d6      	lsls	r6, r2, #31
 8009a0a:	d427      	bmi.n	8009a5c <__sflush_r+0xb8>
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	6062      	str	r2, [r4, #4]
 8009a10:	04d9      	lsls	r1, r3, #19
 8009a12:	6922      	ldr	r2, [r4, #16]
 8009a14:	6022      	str	r2, [r4, #0]
 8009a16:	d504      	bpl.n	8009a22 <__sflush_r+0x7e>
 8009a18:	1c42      	adds	r2, r0, #1
 8009a1a:	d101      	bne.n	8009a20 <__sflush_r+0x7c>
 8009a1c:	682b      	ldr	r3, [r5, #0]
 8009a1e:	b903      	cbnz	r3, 8009a22 <__sflush_r+0x7e>
 8009a20:	6560      	str	r0, [r4, #84]	; 0x54
 8009a22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a24:	602f      	str	r7, [r5, #0]
 8009a26:	2900      	cmp	r1, #0
 8009a28:	d0c9      	beq.n	80099be <__sflush_r+0x1a>
 8009a2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a2e:	4299      	cmp	r1, r3
 8009a30:	d002      	beq.n	8009a38 <__sflush_r+0x94>
 8009a32:	4628      	mov	r0, r5
 8009a34:	f7ff f9e2 	bl	8008dfc <_free_r>
 8009a38:	2000      	movs	r0, #0
 8009a3a:	6360      	str	r0, [r4, #52]	; 0x34
 8009a3c:	e7c0      	b.n	80099c0 <__sflush_r+0x1c>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	4628      	mov	r0, r5
 8009a42:	47b0      	blx	r6
 8009a44:	1c41      	adds	r1, r0, #1
 8009a46:	d1c8      	bne.n	80099da <__sflush_r+0x36>
 8009a48:	682b      	ldr	r3, [r5, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d0c5      	beq.n	80099da <__sflush_r+0x36>
 8009a4e:	2b1d      	cmp	r3, #29
 8009a50:	d001      	beq.n	8009a56 <__sflush_r+0xb2>
 8009a52:	2b16      	cmp	r3, #22
 8009a54:	d101      	bne.n	8009a5a <__sflush_r+0xb6>
 8009a56:	602f      	str	r7, [r5, #0]
 8009a58:	e7b1      	b.n	80099be <__sflush_r+0x1a>
 8009a5a:	89a3      	ldrh	r3, [r4, #12]
 8009a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a60:	81a3      	strh	r3, [r4, #12]
 8009a62:	e7ad      	b.n	80099c0 <__sflush_r+0x1c>
 8009a64:	690f      	ldr	r7, [r1, #16]
 8009a66:	2f00      	cmp	r7, #0
 8009a68:	d0a9      	beq.n	80099be <__sflush_r+0x1a>
 8009a6a:	0793      	lsls	r3, r2, #30
 8009a6c:	680e      	ldr	r6, [r1, #0]
 8009a6e:	bf08      	it	eq
 8009a70:	694b      	ldreq	r3, [r1, #20]
 8009a72:	600f      	str	r7, [r1, #0]
 8009a74:	bf18      	it	ne
 8009a76:	2300      	movne	r3, #0
 8009a78:	eba6 0807 	sub.w	r8, r6, r7
 8009a7c:	608b      	str	r3, [r1, #8]
 8009a7e:	f1b8 0f00 	cmp.w	r8, #0
 8009a82:	dd9c      	ble.n	80099be <__sflush_r+0x1a>
 8009a84:	6a21      	ldr	r1, [r4, #32]
 8009a86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a88:	4643      	mov	r3, r8
 8009a8a:	463a      	mov	r2, r7
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	47b0      	blx	r6
 8009a90:	2800      	cmp	r0, #0
 8009a92:	dc06      	bgt.n	8009aa2 <__sflush_r+0xfe>
 8009a94:	89a3      	ldrh	r3, [r4, #12]
 8009a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a9a:	81a3      	strh	r3, [r4, #12]
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	e78e      	b.n	80099c0 <__sflush_r+0x1c>
 8009aa2:	4407      	add	r7, r0
 8009aa4:	eba8 0800 	sub.w	r8, r8, r0
 8009aa8:	e7e9      	b.n	8009a7e <__sflush_r+0xda>
 8009aaa:	bf00      	nop
 8009aac:	dfbffffe 	.word	0xdfbffffe

08009ab0 <_fflush_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	690b      	ldr	r3, [r1, #16]
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	b913      	cbnz	r3, 8009ac0 <_fflush_r+0x10>
 8009aba:	2500      	movs	r5, #0
 8009abc:	4628      	mov	r0, r5
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
 8009ac0:	b118      	cbz	r0, 8009aca <_fflush_r+0x1a>
 8009ac2:	6a03      	ldr	r3, [r0, #32]
 8009ac4:	b90b      	cbnz	r3, 8009aca <_fflush_r+0x1a>
 8009ac6:	f7fe f9f1 	bl	8007eac <__sinit>
 8009aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d0f3      	beq.n	8009aba <_fflush_r+0xa>
 8009ad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ad4:	07d0      	lsls	r0, r2, #31
 8009ad6:	d404      	bmi.n	8009ae2 <_fflush_r+0x32>
 8009ad8:	0599      	lsls	r1, r3, #22
 8009ada:	d402      	bmi.n	8009ae2 <_fflush_r+0x32>
 8009adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ade:	f7fe fb10 	bl	8008102 <__retarget_lock_acquire_recursive>
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	f7ff ff5d 	bl	80099a4 <__sflush_r>
 8009aea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009aec:	07da      	lsls	r2, r3, #31
 8009aee:	4605      	mov	r5, r0
 8009af0:	d4e4      	bmi.n	8009abc <_fflush_r+0xc>
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	059b      	lsls	r3, r3, #22
 8009af6:	d4e1      	bmi.n	8009abc <_fflush_r+0xc>
 8009af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009afa:	f7fe fb03 	bl	8008104 <__retarget_lock_release_recursive>
 8009afe:	e7dd      	b.n	8009abc <_fflush_r+0xc>

08009b00 <memmove>:
 8009b00:	4288      	cmp	r0, r1
 8009b02:	b510      	push	{r4, lr}
 8009b04:	eb01 0402 	add.w	r4, r1, r2
 8009b08:	d902      	bls.n	8009b10 <memmove+0x10>
 8009b0a:	4284      	cmp	r4, r0
 8009b0c:	4623      	mov	r3, r4
 8009b0e:	d807      	bhi.n	8009b20 <memmove+0x20>
 8009b10:	1e43      	subs	r3, r0, #1
 8009b12:	42a1      	cmp	r1, r4
 8009b14:	d008      	beq.n	8009b28 <memmove+0x28>
 8009b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b1e:	e7f8      	b.n	8009b12 <memmove+0x12>
 8009b20:	4402      	add	r2, r0
 8009b22:	4601      	mov	r1, r0
 8009b24:	428a      	cmp	r2, r1
 8009b26:	d100      	bne.n	8009b2a <memmove+0x2a>
 8009b28:	bd10      	pop	{r4, pc}
 8009b2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b32:	e7f7      	b.n	8009b24 <memmove+0x24>

08009b34 <_sbrk_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4d06      	ldr	r5, [pc, #24]	; (8009b50 <_sbrk_r+0x1c>)
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	602b      	str	r3, [r5, #0]
 8009b40:	f7f7 fe8e 	bl	8001860 <_sbrk>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	d102      	bne.n	8009b4e <_sbrk_r+0x1a>
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	b103      	cbz	r3, 8009b4e <_sbrk_r+0x1a>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	20000478 	.word	0x20000478

08009b54 <memcpy>:
 8009b54:	440a      	add	r2, r1
 8009b56:	4291      	cmp	r1, r2
 8009b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b5c:	d100      	bne.n	8009b60 <memcpy+0xc>
 8009b5e:	4770      	bx	lr
 8009b60:	b510      	push	{r4, lr}
 8009b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b6a:	4291      	cmp	r1, r2
 8009b6c:	d1f9      	bne.n	8009b62 <memcpy+0xe>
 8009b6e:	bd10      	pop	{r4, pc}

08009b70 <__assert_func>:
 8009b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b72:	4614      	mov	r4, r2
 8009b74:	461a      	mov	r2, r3
 8009b76:	4b09      	ldr	r3, [pc, #36]	; (8009b9c <__assert_func+0x2c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4605      	mov	r5, r0
 8009b7c:	68d8      	ldr	r0, [r3, #12]
 8009b7e:	b14c      	cbz	r4, 8009b94 <__assert_func+0x24>
 8009b80:	4b07      	ldr	r3, [pc, #28]	; (8009ba0 <__assert_func+0x30>)
 8009b82:	9100      	str	r1, [sp, #0]
 8009b84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b88:	4906      	ldr	r1, [pc, #24]	; (8009ba4 <__assert_func+0x34>)
 8009b8a:	462b      	mov	r3, r5
 8009b8c:	f000 f872 	bl	8009c74 <fiprintf>
 8009b90:	f000 f882 	bl	8009c98 <abort>
 8009b94:	4b04      	ldr	r3, [pc, #16]	; (8009ba8 <__assert_func+0x38>)
 8009b96:	461c      	mov	r4, r3
 8009b98:	e7f3      	b.n	8009b82 <__assert_func+0x12>
 8009b9a:	bf00      	nop
 8009b9c:	20000068 	.word	0x20000068
 8009ba0:	0800a48f 	.word	0x0800a48f
 8009ba4:	0800a49c 	.word	0x0800a49c
 8009ba8:	0800a4ca 	.word	0x0800a4ca

08009bac <_calloc_r>:
 8009bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bae:	fba1 2402 	umull	r2, r4, r1, r2
 8009bb2:	b94c      	cbnz	r4, 8009bc8 <_calloc_r+0x1c>
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	9201      	str	r2, [sp, #4]
 8009bb8:	f7ff f994 	bl	8008ee4 <_malloc_r>
 8009bbc:	9a01      	ldr	r2, [sp, #4]
 8009bbe:	4605      	mov	r5, r0
 8009bc0:	b930      	cbnz	r0, 8009bd0 <_calloc_r+0x24>
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	b003      	add	sp, #12
 8009bc6:	bd30      	pop	{r4, r5, pc}
 8009bc8:	220c      	movs	r2, #12
 8009bca:	6002      	str	r2, [r0, #0]
 8009bcc:	2500      	movs	r5, #0
 8009bce:	e7f8      	b.n	8009bc2 <_calloc_r+0x16>
 8009bd0:	4621      	mov	r1, r4
 8009bd2:	f7fe fa18 	bl	8008006 <memset>
 8009bd6:	e7f4      	b.n	8009bc2 <_calloc_r+0x16>

08009bd8 <__ascii_mbtowc>:
 8009bd8:	b082      	sub	sp, #8
 8009bda:	b901      	cbnz	r1, 8009bde <__ascii_mbtowc+0x6>
 8009bdc:	a901      	add	r1, sp, #4
 8009bde:	b142      	cbz	r2, 8009bf2 <__ascii_mbtowc+0x1a>
 8009be0:	b14b      	cbz	r3, 8009bf6 <__ascii_mbtowc+0x1e>
 8009be2:	7813      	ldrb	r3, [r2, #0]
 8009be4:	600b      	str	r3, [r1, #0]
 8009be6:	7812      	ldrb	r2, [r2, #0]
 8009be8:	1e10      	subs	r0, r2, #0
 8009bea:	bf18      	it	ne
 8009bec:	2001      	movne	r0, #1
 8009bee:	b002      	add	sp, #8
 8009bf0:	4770      	bx	lr
 8009bf2:	4610      	mov	r0, r2
 8009bf4:	e7fb      	b.n	8009bee <__ascii_mbtowc+0x16>
 8009bf6:	f06f 0001 	mvn.w	r0, #1
 8009bfa:	e7f8      	b.n	8009bee <__ascii_mbtowc+0x16>

08009bfc <_realloc_r>:
 8009bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c00:	4680      	mov	r8, r0
 8009c02:	4614      	mov	r4, r2
 8009c04:	460e      	mov	r6, r1
 8009c06:	b921      	cbnz	r1, 8009c12 <_realloc_r+0x16>
 8009c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	f7ff b969 	b.w	8008ee4 <_malloc_r>
 8009c12:	b92a      	cbnz	r2, 8009c20 <_realloc_r+0x24>
 8009c14:	f7ff f8f2 	bl	8008dfc <_free_r>
 8009c18:	4625      	mov	r5, r4
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c20:	f000 f841 	bl	8009ca6 <_malloc_usable_size_r>
 8009c24:	4284      	cmp	r4, r0
 8009c26:	4607      	mov	r7, r0
 8009c28:	d802      	bhi.n	8009c30 <_realloc_r+0x34>
 8009c2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c2e:	d812      	bhi.n	8009c56 <_realloc_r+0x5a>
 8009c30:	4621      	mov	r1, r4
 8009c32:	4640      	mov	r0, r8
 8009c34:	f7ff f956 	bl	8008ee4 <_malloc_r>
 8009c38:	4605      	mov	r5, r0
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d0ed      	beq.n	8009c1a <_realloc_r+0x1e>
 8009c3e:	42bc      	cmp	r4, r7
 8009c40:	4622      	mov	r2, r4
 8009c42:	4631      	mov	r1, r6
 8009c44:	bf28      	it	cs
 8009c46:	463a      	movcs	r2, r7
 8009c48:	f7ff ff84 	bl	8009b54 <memcpy>
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4640      	mov	r0, r8
 8009c50:	f7ff f8d4 	bl	8008dfc <_free_r>
 8009c54:	e7e1      	b.n	8009c1a <_realloc_r+0x1e>
 8009c56:	4635      	mov	r5, r6
 8009c58:	e7df      	b.n	8009c1a <_realloc_r+0x1e>

08009c5a <__ascii_wctomb>:
 8009c5a:	b149      	cbz	r1, 8009c70 <__ascii_wctomb+0x16>
 8009c5c:	2aff      	cmp	r2, #255	; 0xff
 8009c5e:	bf85      	ittet	hi
 8009c60:	238a      	movhi	r3, #138	; 0x8a
 8009c62:	6003      	strhi	r3, [r0, #0]
 8009c64:	700a      	strbls	r2, [r1, #0]
 8009c66:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c6a:	bf98      	it	ls
 8009c6c:	2001      	movls	r0, #1
 8009c6e:	4770      	bx	lr
 8009c70:	4608      	mov	r0, r1
 8009c72:	4770      	bx	lr

08009c74 <fiprintf>:
 8009c74:	b40e      	push	{r1, r2, r3}
 8009c76:	b503      	push	{r0, r1, lr}
 8009c78:	4601      	mov	r1, r0
 8009c7a:	ab03      	add	r3, sp, #12
 8009c7c:	4805      	ldr	r0, [pc, #20]	; (8009c94 <fiprintf+0x20>)
 8009c7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c82:	6800      	ldr	r0, [r0, #0]
 8009c84:	9301      	str	r3, [sp, #4]
 8009c86:	f000 f83f 	bl	8009d08 <_vfiprintf_r>
 8009c8a:	b002      	add	sp, #8
 8009c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c90:	b003      	add	sp, #12
 8009c92:	4770      	bx	lr
 8009c94:	20000068 	.word	0x20000068

08009c98 <abort>:
 8009c98:	b508      	push	{r3, lr}
 8009c9a:	2006      	movs	r0, #6
 8009c9c:	f000 fa0c 	bl	800a0b8 <raise>
 8009ca0:	2001      	movs	r0, #1
 8009ca2:	f7f7 fd65 	bl	8001770 <_exit>

08009ca6 <_malloc_usable_size_r>:
 8009ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009caa:	1f18      	subs	r0, r3, #4
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	bfbc      	itt	lt
 8009cb0:	580b      	ldrlt	r3, [r1, r0]
 8009cb2:	18c0      	addlt	r0, r0, r3
 8009cb4:	4770      	bx	lr

08009cb6 <__sfputc_r>:
 8009cb6:	6893      	ldr	r3, [r2, #8]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	b410      	push	{r4}
 8009cbe:	6093      	str	r3, [r2, #8]
 8009cc0:	da08      	bge.n	8009cd4 <__sfputc_r+0x1e>
 8009cc2:	6994      	ldr	r4, [r2, #24]
 8009cc4:	42a3      	cmp	r3, r4
 8009cc6:	db01      	blt.n	8009ccc <__sfputc_r+0x16>
 8009cc8:	290a      	cmp	r1, #10
 8009cca:	d103      	bne.n	8009cd4 <__sfputc_r+0x1e>
 8009ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cd0:	f000 b934 	b.w	8009f3c <__swbuf_r>
 8009cd4:	6813      	ldr	r3, [r2, #0]
 8009cd6:	1c58      	adds	r0, r3, #1
 8009cd8:	6010      	str	r0, [r2, #0]
 8009cda:	7019      	strb	r1, [r3, #0]
 8009cdc:	4608      	mov	r0, r1
 8009cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <__sfputs_r>:
 8009ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	460f      	mov	r7, r1
 8009cea:	4614      	mov	r4, r2
 8009cec:	18d5      	adds	r5, r2, r3
 8009cee:	42ac      	cmp	r4, r5
 8009cf0:	d101      	bne.n	8009cf6 <__sfputs_r+0x12>
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	e007      	b.n	8009d06 <__sfputs_r+0x22>
 8009cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cfa:	463a      	mov	r2, r7
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	f7ff ffda 	bl	8009cb6 <__sfputc_r>
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	d1f3      	bne.n	8009cee <__sfputs_r+0xa>
 8009d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d08 <_vfiprintf_r>:
 8009d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	460d      	mov	r5, r1
 8009d0e:	b09d      	sub	sp, #116	; 0x74
 8009d10:	4614      	mov	r4, r2
 8009d12:	4698      	mov	r8, r3
 8009d14:	4606      	mov	r6, r0
 8009d16:	b118      	cbz	r0, 8009d20 <_vfiprintf_r+0x18>
 8009d18:	6a03      	ldr	r3, [r0, #32]
 8009d1a:	b90b      	cbnz	r3, 8009d20 <_vfiprintf_r+0x18>
 8009d1c:	f7fe f8c6 	bl	8007eac <__sinit>
 8009d20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d22:	07d9      	lsls	r1, r3, #31
 8009d24:	d405      	bmi.n	8009d32 <_vfiprintf_r+0x2a>
 8009d26:	89ab      	ldrh	r3, [r5, #12]
 8009d28:	059a      	lsls	r2, r3, #22
 8009d2a:	d402      	bmi.n	8009d32 <_vfiprintf_r+0x2a>
 8009d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d2e:	f7fe f9e8 	bl	8008102 <__retarget_lock_acquire_recursive>
 8009d32:	89ab      	ldrh	r3, [r5, #12]
 8009d34:	071b      	lsls	r3, r3, #28
 8009d36:	d501      	bpl.n	8009d3c <_vfiprintf_r+0x34>
 8009d38:	692b      	ldr	r3, [r5, #16]
 8009d3a:	b99b      	cbnz	r3, 8009d64 <_vfiprintf_r+0x5c>
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	4630      	mov	r0, r6
 8009d40:	f000 f93a 	bl	8009fb8 <__swsetup_r>
 8009d44:	b170      	cbz	r0, 8009d64 <_vfiprintf_r+0x5c>
 8009d46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d48:	07dc      	lsls	r4, r3, #31
 8009d4a:	d504      	bpl.n	8009d56 <_vfiprintf_r+0x4e>
 8009d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d50:	b01d      	add	sp, #116	; 0x74
 8009d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d56:	89ab      	ldrh	r3, [r5, #12]
 8009d58:	0598      	lsls	r0, r3, #22
 8009d5a:	d4f7      	bmi.n	8009d4c <_vfiprintf_r+0x44>
 8009d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d5e:	f7fe f9d1 	bl	8008104 <__retarget_lock_release_recursive>
 8009d62:	e7f3      	b.n	8009d4c <_vfiprintf_r+0x44>
 8009d64:	2300      	movs	r3, #0
 8009d66:	9309      	str	r3, [sp, #36]	; 0x24
 8009d68:	2320      	movs	r3, #32
 8009d6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d72:	2330      	movs	r3, #48	; 0x30
 8009d74:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009f28 <_vfiprintf_r+0x220>
 8009d78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d7c:	f04f 0901 	mov.w	r9, #1
 8009d80:	4623      	mov	r3, r4
 8009d82:	469a      	mov	sl, r3
 8009d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d88:	b10a      	cbz	r2, 8009d8e <_vfiprintf_r+0x86>
 8009d8a:	2a25      	cmp	r2, #37	; 0x25
 8009d8c:	d1f9      	bne.n	8009d82 <_vfiprintf_r+0x7a>
 8009d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8009d92:	d00b      	beq.n	8009dac <_vfiprintf_r+0xa4>
 8009d94:	465b      	mov	r3, fp
 8009d96:	4622      	mov	r2, r4
 8009d98:	4629      	mov	r1, r5
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	f7ff ffa2 	bl	8009ce4 <__sfputs_r>
 8009da0:	3001      	adds	r0, #1
 8009da2:	f000 80a9 	beq.w	8009ef8 <_vfiprintf_r+0x1f0>
 8009da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009da8:	445a      	add	r2, fp
 8009daa:	9209      	str	r2, [sp, #36]	; 0x24
 8009dac:	f89a 3000 	ldrb.w	r3, [sl]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f000 80a1 	beq.w	8009ef8 <_vfiprintf_r+0x1f0>
 8009db6:	2300      	movs	r3, #0
 8009db8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dc0:	f10a 0a01 	add.w	sl, sl, #1
 8009dc4:	9304      	str	r3, [sp, #16]
 8009dc6:	9307      	str	r3, [sp, #28]
 8009dc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dcc:	931a      	str	r3, [sp, #104]	; 0x68
 8009dce:	4654      	mov	r4, sl
 8009dd0:	2205      	movs	r2, #5
 8009dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd6:	4854      	ldr	r0, [pc, #336]	; (8009f28 <_vfiprintf_r+0x220>)
 8009dd8:	f7f6 fa02 	bl	80001e0 <memchr>
 8009ddc:	9a04      	ldr	r2, [sp, #16]
 8009dde:	b9d8      	cbnz	r0, 8009e18 <_vfiprintf_r+0x110>
 8009de0:	06d1      	lsls	r1, r2, #27
 8009de2:	bf44      	itt	mi
 8009de4:	2320      	movmi	r3, #32
 8009de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dea:	0713      	lsls	r3, r2, #28
 8009dec:	bf44      	itt	mi
 8009dee:	232b      	movmi	r3, #43	; 0x2b
 8009df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009df4:	f89a 3000 	ldrb.w	r3, [sl]
 8009df8:	2b2a      	cmp	r3, #42	; 0x2a
 8009dfa:	d015      	beq.n	8009e28 <_vfiprintf_r+0x120>
 8009dfc:	9a07      	ldr	r2, [sp, #28]
 8009dfe:	4654      	mov	r4, sl
 8009e00:	2000      	movs	r0, #0
 8009e02:	f04f 0c0a 	mov.w	ip, #10
 8009e06:	4621      	mov	r1, r4
 8009e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e0c:	3b30      	subs	r3, #48	; 0x30
 8009e0e:	2b09      	cmp	r3, #9
 8009e10:	d94d      	bls.n	8009eae <_vfiprintf_r+0x1a6>
 8009e12:	b1b0      	cbz	r0, 8009e42 <_vfiprintf_r+0x13a>
 8009e14:	9207      	str	r2, [sp, #28]
 8009e16:	e014      	b.n	8009e42 <_vfiprintf_r+0x13a>
 8009e18:	eba0 0308 	sub.w	r3, r0, r8
 8009e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8009e20:	4313      	orrs	r3, r2
 8009e22:	9304      	str	r3, [sp, #16]
 8009e24:	46a2      	mov	sl, r4
 8009e26:	e7d2      	b.n	8009dce <_vfiprintf_r+0xc6>
 8009e28:	9b03      	ldr	r3, [sp, #12]
 8009e2a:	1d19      	adds	r1, r3, #4
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	9103      	str	r1, [sp, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	bfbb      	ittet	lt
 8009e34:	425b      	neglt	r3, r3
 8009e36:	f042 0202 	orrlt.w	r2, r2, #2
 8009e3a:	9307      	strge	r3, [sp, #28]
 8009e3c:	9307      	strlt	r3, [sp, #28]
 8009e3e:	bfb8      	it	lt
 8009e40:	9204      	strlt	r2, [sp, #16]
 8009e42:	7823      	ldrb	r3, [r4, #0]
 8009e44:	2b2e      	cmp	r3, #46	; 0x2e
 8009e46:	d10c      	bne.n	8009e62 <_vfiprintf_r+0x15a>
 8009e48:	7863      	ldrb	r3, [r4, #1]
 8009e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e4c:	d134      	bne.n	8009eb8 <_vfiprintf_r+0x1b0>
 8009e4e:	9b03      	ldr	r3, [sp, #12]
 8009e50:	1d1a      	adds	r2, r3, #4
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	9203      	str	r2, [sp, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	bfb8      	it	lt
 8009e5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e5e:	3402      	adds	r4, #2
 8009e60:	9305      	str	r3, [sp, #20]
 8009e62:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009f38 <_vfiprintf_r+0x230>
 8009e66:	7821      	ldrb	r1, [r4, #0]
 8009e68:	2203      	movs	r2, #3
 8009e6a:	4650      	mov	r0, sl
 8009e6c:	f7f6 f9b8 	bl	80001e0 <memchr>
 8009e70:	b138      	cbz	r0, 8009e82 <_vfiprintf_r+0x17a>
 8009e72:	9b04      	ldr	r3, [sp, #16]
 8009e74:	eba0 000a 	sub.w	r0, r0, sl
 8009e78:	2240      	movs	r2, #64	; 0x40
 8009e7a:	4082      	lsls	r2, r0
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	3401      	adds	r4, #1
 8009e80:	9304      	str	r3, [sp, #16]
 8009e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e86:	4829      	ldr	r0, [pc, #164]	; (8009f2c <_vfiprintf_r+0x224>)
 8009e88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e8c:	2206      	movs	r2, #6
 8009e8e:	f7f6 f9a7 	bl	80001e0 <memchr>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d03f      	beq.n	8009f16 <_vfiprintf_r+0x20e>
 8009e96:	4b26      	ldr	r3, [pc, #152]	; (8009f30 <_vfiprintf_r+0x228>)
 8009e98:	bb1b      	cbnz	r3, 8009ee2 <_vfiprintf_r+0x1da>
 8009e9a:	9b03      	ldr	r3, [sp, #12]
 8009e9c:	3307      	adds	r3, #7
 8009e9e:	f023 0307 	bic.w	r3, r3, #7
 8009ea2:	3308      	adds	r3, #8
 8009ea4:	9303      	str	r3, [sp, #12]
 8009ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea8:	443b      	add	r3, r7
 8009eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8009eac:	e768      	b.n	8009d80 <_vfiprintf_r+0x78>
 8009eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	2001      	movs	r0, #1
 8009eb6:	e7a6      	b.n	8009e06 <_vfiprintf_r+0xfe>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	3401      	adds	r4, #1
 8009ebc:	9305      	str	r3, [sp, #20]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	f04f 0c0a 	mov.w	ip, #10
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eca:	3a30      	subs	r2, #48	; 0x30
 8009ecc:	2a09      	cmp	r2, #9
 8009ece:	d903      	bls.n	8009ed8 <_vfiprintf_r+0x1d0>
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d0c6      	beq.n	8009e62 <_vfiprintf_r+0x15a>
 8009ed4:	9105      	str	r1, [sp, #20]
 8009ed6:	e7c4      	b.n	8009e62 <_vfiprintf_r+0x15a>
 8009ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009edc:	4604      	mov	r4, r0
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e7f0      	b.n	8009ec4 <_vfiprintf_r+0x1bc>
 8009ee2:	ab03      	add	r3, sp, #12
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	462a      	mov	r2, r5
 8009ee8:	4b12      	ldr	r3, [pc, #72]	; (8009f34 <_vfiprintf_r+0x22c>)
 8009eea:	a904      	add	r1, sp, #16
 8009eec:	4630      	mov	r0, r6
 8009eee:	f7fd fb8b 	bl	8007608 <_printf_float>
 8009ef2:	4607      	mov	r7, r0
 8009ef4:	1c78      	adds	r0, r7, #1
 8009ef6:	d1d6      	bne.n	8009ea6 <_vfiprintf_r+0x19e>
 8009ef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009efa:	07d9      	lsls	r1, r3, #31
 8009efc:	d405      	bmi.n	8009f0a <_vfiprintf_r+0x202>
 8009efe:	89ab      	ldrh	r3, [r5, #12]
 8009f00:	059a      	lsls	r2, r3, #22
 8009f02:	d402      	bmi.n	8009f0a <_vfiprintf_r+0x202>
 8009f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f06:	f7fe f8fd 	bl	8008104 <__retarget_lock_release_recursive>
 8009f0a:	89ab      	ldrh	r3, [r5, #12]
 8009f0c:	065b      	lsls	r3, r3, #25
 8009f0e:	f53f af1d 	bmi.w	8009d4c <_vfiprintf_r+0x44>
 8009f12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f14:	e71c      	b.n	8009d50 <_vfiprintf_r+0x48>
 8009f16:	ab03      	add	r3, sp, #12
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	462a      	mov	r2, r5
 8009f1c:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <_vfiprintf_r+0x22c>)
 8009f1e:	a904      	add	r1, sp, #16
 8009f20:	4630      	mov	r0, r6
 8009f22:	f7fd fe15 	bl	8007b50 <_printf_i>
 8009f26:	e7e4      	b.n	8009ef2 <_vfiprintf_r+0x1ea>
 8009f28:	0800a474 	.word	0x0800a474
 8009f2c:	0800a47e 	.word	0x0800a47e
 8009f30:	08007609 	.word	0x08007609
 8009f34:	08009ce5 	.word	0x08009ce5
 8009f38:	0800a47a 	.word	0x0800a47a

08009f3c <__swbuf_r>:
 8009f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3e:	460e      	mov	r6, r1
 8009f40:	4614      	mov	r4, r2
 8009f42:	4605      	mov	r5, r0
 8009f44:	b118      	cbz	r0, 8009f4e <__swbuf_r+0x12>
 8009f46:	6a03      	ldr	r3, [r0, #32]
 8009f48:	b90b      	cbnz	r3, 8009f4e <__swbuf_r+0x12>
 8009f4a:	f7fd ffaf 	bl	8007eac <__sinit>
 8009f4e:	69a3      	ldr	r3, [r4, #24]
 8009f50:	60a3      	str	r3, [r4, #8]
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	071a      	lsls	r2, r3, #28
 8009f56:	d525      	bpl.n	8009fa4 <__swbuf_r+0x68>
 8009f58:	6923      	ldr	r3, [r4, #16]
 8009f5a:	b31b      	cbz	r3, 8009fa4 <__swbuf_r+0x68>
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	6922      	ldr	r2, [r4, #16]
 8009f60:	1a98      	subs	r0, r3, r2
 8009f62:	6963      	ldr	r3, [r4, #20]
 8009f64:	b2f6      	uxtb	r6, r6
 8009f66:	4283      	cmp	r3, r0
 8009f68:	4637      	mov	r7, r6
 8009f6a:	dc04      	bgt.n	8009f76 <__swbuf_r+0x3a>
 8009f6c:	4621      	mov	r1, r4
 8009f6e:	4628      	mov	r0, r5
 8009f70:	f7ff fd9e 	bl	8009ab0 <_fflush_r>
 8009f74:	b9e0      	cbnz	r0, 8009fb0 <__swbuf_r+0x74>
 8009f76:	68a3      	ldr	r3, [r4, #8]
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	60a3      	str	r3, [r4, #8]
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	1c5a      	adds	r2, r3, #1
 8009f80:	6022      	str	r2, [r4, #0]
 8009f82:	701e      	strb	r6, [r3, #0]
 8009f84:	6962      	ldr	r2, [r4, #20]
 8009f86:	1c43      	adds	r3, r0, #1
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d004      	beq.n	8009f96 <__swbuf_r+0x5a>
 8009f8c:	89a3      	ldrh	r3, [r4, #12]
 8009f8e:	07db      	lsls	r3, r3, #31
 8009f90:	d506      	bpl.n	8009fa0 <__swbuf_r+0x64>
 8009f92:	2e0a      	cmp	r6, #10
 8009f94:	d104      	bne.n	8009fa0 <__swbuf_r+0x64>
 8009f96:	4621      	mov	r1, r4
 8009f98:	4628      	mov	r0, r5
 8009f9a:	f7ff fd89 	bl	8009ab0 <_fflush_r>
 8009f9e:	b938      	cbnz	r0, 8009fb0 <__swbuf_r+0x74>
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	f000 f806 	bl	8009fb8 <__swsetup_r>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d0d5      	beq.n	8009f5c <__swbuf_r+0x20>
 8009fb0:	f04f 37ff 	mov.w	r7, #4294967295
 8009fb4:	e7f4      	b.n	8009fa0 <__swbuf_r+0x64>
	...

08009fb8 <__swsetup_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4b2a      	ldr	r3, [pc, #168]	; (800a064 <__swsetup_r+0xac>)
 8009fbc:	4605      	mov	r5, r0
 8009fbe:	6818      	ldr	r0, [r3, #0]
 8009fc0:	460c      	mov	r4, r1
 8009fc2:	b118      	cbz	r0, 8009fcc <__swsetup_r+0x14>
 8009fc4:	6a03      	ldr	r3, [r0, #32]
 8009fc6:	b90b      	cbnz	r3, 8009fcc <__swsetup_r+0x14>
 8009fc8:	f7fd ff70 	bl	8007eac <__sinit>
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fd2:	0718      	lsls	r0, r3, #28
 8009fd4:	d422      	bmi.n	800a01c <__swsetup_r+0x64>
 8009fd6:	06d9      	lsls	r1, r3, #27
 8009fd8:	d407      	bmi.n	8009fea <__swsetup_r+0x32>
 8009fda:	2309      	movs	r3, #9
 8009fdc:	602b      	str	r3, [r5, #0]
 8009fde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fe2:	81a3      	strh	r3, [r4, #12]
 8009fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe8:	e034      	b.n	800a054 <__swsetup_r+0x9c>
 8009fea:	0758      	lsls	r0, r3, #29
 8009fec:	d512      	bpl.n	800a014 <__swsetup_r+0x5c>
 8009fee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ff0:	b141      	cbz	r1, 800a004 <__swsetup_r+0x4c>
 8009ff2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ff6:	4299      	cmp	r1, r3
 8009ff8:	d002      	beq.n	800a000 <__swsetup_r+0x48>
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f7fe fefe 	bl	8008dfc <_free_r>
 800a000:	2300      	movs	r3, #0
 800a002:	6363      	str	r3, [r4, #52]	; 0x34
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a00a:	81a3      	strh	r3, [r4, #12]
 800a00c:	2300      	movs	r3, #0
 800a00e:	6063      	str	r3, [r4, #4]
 800a010:	6923      	ldr	r3, [r4, #16]
 800a012:	6023      	str	r3, [r4, #0]
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	f043 0308 	orr.w	r3, r3, #8
 800a01a:	81a3      	strh	r3, [r4, #12]
 800a01c:	6923      	ldr	r3, [r4, #16]
 800a01e:	b94b      	cbnz	r3, 800a034 <__swsetup_r+0x7c>
 800a020:	89a3      	ldrh	r3, [r4, #12]
 800a022:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a02a:	d003      	beq.n	800a034 <__swsetup_r+0x7c>
 800a02c:	4621      	mov	r1, r4
 800a02e:	4628      	mov	r0, r5
 800a030:	f000 f884 	bl	800a13c <__smakebuf_r>
 800a034:	89a0      	ldrh	r0, [r4, #12]
 800a036:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a03a:	f010 0301 	ands.w	r3, r0, #1
 800a03e:	d00a      	beq.n	800a056 <__swsetup_r+0x9e>
 800a040:	2300      	movs	r3, #0
 800a042:	60a3      	str	r3, [r4, #8]
 800a044:	6963      	ldr	r3, [r4, #20]
 800a046:	425b      	negs	r3, r3
 800a048:	61a3      	str	r3, [r4, #24]
 800a04a:	6923      	ldr	r3, [r4, #16]
 800a04c:	b943      	cbnz	r3, 800a060 <__swsetup_r+0xa8>
 800a04e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a052:	d1c4      	bne.n	8009fde <__swsetup_r+0x26>
 800a054:	bd38      	pop	{r3, r4, r5, pc}
 800a056:	0781      	lsls	r1, r0, #30
 800a058:	bf58      	it	pl
 800a05a:	6963      	ldrpl	r3, [r4, #20]
 800a05c:	60a3      	str	r3, [r4, #8]
 800a05e:	e7f4      	b.n	800a04a <__swsetup_r+0x92>
 800a060:	2000      	movs	r0, #0
 800a062:	e7f7      	b.n	800a054 <__swsetup_r+0x9c>
 800a064:	20000068 	.word	0x20000068

0800a068 <_raise_r>:
 800a068:	291f      	cmp	r1, #31
 800a06a:	b538      	push	{r3, r4, r5, lr}
 800a06c:	4604      	mov	r4, r0
 800a06e:	460d      	mov	r5, r1
 800a070:	d904      	bls.n	800a07c <_raise_r+0x14>
 800a072:	2316      	movs	r3, #22
 800a074:	6003      	str	r3, [r0, #0]
 800a076:	f04f 30ff 	mov.w	r0, #4294967295
 800a07a:	bd38      	pop	{r3, r4, r5, pc}
 800a07c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a07e:	b112      	cbz	r2, 800a086 <_raise_r+0x1e>
 800a080:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a084:	b94b      	cbnz	r3, 800a09a <_raise_r+0x32>
 800a086:	4620      	mov	r0, r4
 800a088:	f000 f830 	bl	800a0ec <_getpid_r>
 800a08c:	462a      	mov	r2, r5
 800a08e:	4601      	mov	r1, r0
 800a090:	4620      	mov	r0, r4
 800a092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a096:	f000 b817 	b.w	800a0c8 <_kill_r>
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d00a      	beq.n	800a0b4 <_raise_r+0x4c>
 800a09e:	1c59      	adds	r1, r3, #1
 800a0a0:	d103      	bne.n	800a0aa <_raise_r+0x42>
 800a0a2:	2316      	movs	r3, #22
 800a0a4:	6003      	str	r3, [r0, #0]
 800a0a6:	2001      	movs	r0, #1
 800a0a8:	e7e7      	b.n	800a07a <_raise_r+0x12>
 800a0aa:	2400      	movs	r4, #0
 800a0ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	4798      	blx	r3
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	e7e0      	b.n	800a07a <_raise_r+0x12>

0800a0b8 <raise>:
 800a0b8:	4b02      	ldr	r3, [pc, #8]	; (800a0c4 <raise+0xc>)
 800a0ba:	4601      	mov	r1, r0
 800a0bc:	6818      	ldr	r0, [r3, #0]
 800a0be:	f7ff bfd3 	b.w	800a068 <_raise_r>
 800a0c2:	bf00      	nop
 800a0c4:	20000068 	.word	0x20000068

0800a0c8 <_kill_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d07      	ldr	r5, [pc, #28]	; (800a0e8 <_kill_r+0x20>)
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	4611      	mov	r1, r2
 800a0d4:	602b      	str	r3, [r5, #0]
 800a0d6:	f7f7 fb3b 	bl	8001750 <_kill>
 800a0da:	1c43      	adds	r3, r0, #1
 800a0dc:	d102      	bne.n	800a0e4 <_kill_r+0x1c>
 800a0de:	682b      	ldr	r3, [r5, #0]
 800a0e0:	b103      	cbz	r3, 800a0e4 <_kill_r+0x1c>
 800a0e2:	6023      	str	r3, [r4, #0]
 800a0e4:	bd38      	pop	{r3, r4, r5, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20000478 	.word	0x20000478

0800a0ec <_getpid_r>:
 800a0ec:	f7f7 bb28 	b.w	8001740 <_getpid>

0800a0f0 <__swhatbuf_r>:
 800a0f0:	b570      	push	{r4, r5, r6, lr}
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f8:	2900      	cmp	r1, #0
 800a0fa:	b096      	sub	sp, #88	; 0x58
 800a0fc:	4615      	mov	r5, r2
 800a0fe:	461e      	mov	r6, r3
 800a100:	da0d      	bge.n	800a11e <__swhatbuf_r+0x2e>
 800a102:	89a3      	ldrh	r3, [r4, #12]
 800a104:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a108:	f04f 0100 	mov.w	r1, #0
 800a10c:	bf0c      	ite	eq
 800a10e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a112:	2340      	movne	r3, #64	; 0x40
 800a114:	2000      	movs	r0, #0
 800a116:	6031      	str	r1, [r6, #0]
 800a118:	602b      	str	r3, [r5, #0]
 800a11a:	b016      	add	sp, #88	; 0x58
 800a11c:	bd70      	pop	{r4, r5, r6, pc}
 800a11e:	466a      	mov	r2, sp
 800a120:	f000 f848 	bl	800a1b4 <_fstat_r>
 800a124:	2800      	cmp	r0, #0
 800a126:	dbec      	blt.n	800a102 <__swhatbuf_r+0x12>
 800a128:	9901      	ldr	r1, [sp, #4]
 800a12a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a12e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a132:	4259      	negs	r1, r3
 800a134:	4159      	adcs	r1, r3
 800a136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a13a:	e7eb      	b.n	800a114 <__swhatbuf_r+0x24>

0800a13c <__smakebuf_r>:
 800a13c:	898b      	ldrh	r3, [r1, #12]
 800a13e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a140:	079d      	lsls	r5, r3, #30
 800a142:	4606      	mov	r6, r0
 800a144:	460c      	mov	r4, r1
 800a146:	d507      	bpl.n	800a158 <__smakebuf_r+0x1c>
 800a148:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a14c:	6023      	str	r3, [r4, #0]
 800a14e:	6123      	str	r3, [r4, #16]
 800a150:	2301      	movs	r3, #1
 800a152:	6163      	str	r3, [r4, #20]
 800a154:	b002      	add	sp, #8
 800a156:	bd70      	pop	{r4, r5, r6, pc}
 800a158:	ab01      	add	r3, sp, #4
 800a15a:	466a      	mov	r2, sp
 800a15c:	f7ff ffc8 	bl	800a0f0 <__swhatbuf_r>
 800a160:	9900      	ldr	r1, [sp, #0]
 800a162:	4605      	mov	r5, r0
 800a164:	4630      	mov	r0, r6
 800a166:	f7fe febd 	bl	8008ee4 <_malloc_r>
 800a16a:	b948      	cbnz	r0, 800a180 <__smakebuf_r+0x44>
 800a16c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a170:	059a      	lsls	r2, r3, #22
 800a172:	d4ef      	bmi.n	800a154 <__smakebuf_r+0x18>
 800a174:	f023 0303 	bic.w	r3, r3, #3
 800a178:	f043 0302 	orr.w	r3, r3, #2
 800a17c:	81a3      	strh	r3, [r4, #12]
 800a17e:	e7e3      	b.n	800a148 <__smakebuf_r+0xc>
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	6020      	str	r0, [r4, #0]
 800a184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a188:	81a3      	strh	r3, [r4, #12]
 800a18a:	9b00      	ldr	r3, [sp, #0]
 800a18c:	6163      	str	r3, [r4, #20]
 800a18e:	9b01      	ldr	r3, [sp, #4]
 800a190:	6120      	str	r0, [r4, #16]
 800a192:	b15b      	cbz	r3, 800a1ac <__smakebuf_r+0x70>
 800a194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a198:	4630      	mov	r0, r6
 800a19a:	f000 f81d 	bl	800a1d8 <_isatty_r>
 800a19e:	b128      	cbz	r0, 800a1ac <__smakebuf_r+0x70>
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	f023 0303 	bic.w	r3, r3, #3
 800a1a6:	f043 0301 	orr.w	r3, r3, #1
 800a1aa:	81a3      	strh	r3, [r4, #12]
 800a1ac:	89a3      	ldrh	r3, [r4, #12]
 800a1ae:	431d      	orrs	r5, r3
 800a1b0:	81a5      	strh	r5, [r4, #12]
 800a1b2:	e7cf      	b.n	800a154 <__smakebuf_r+0x18>

0800a1b4 <_fstat_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4d07      	ldr	r5, [pc, #28]	; (800a1d4 <_fstat_r+0x20>)
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	4608      	mov	r0, r1
 800a1be:	4611      	mov	r1, r2
 800a1c0:	602b      	str	r3, [r5, #0]
 800a1c2:	f7f7 fb24 	bl	800180e <_fstat>
 800a1c6:	1c43      	adds	r3, r0, #1
 800a1c8:	d102      	bne.n	800a1d0 <_fstat_r+0x1c>
 800a1ca:	682b      	ldr	r3, [r5, #0]
 800a1cc:	b103      	cbz	r3, 800a1d0 <_fstat_r+0x1c>
 800a1ce:	6023      	str	r3, [r4, #0]
 800a1d0:	bd38      	pop	{r3, r4, r5, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20000478 	.word	0x20000478

0800a1d8 <_isatty_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	4d06      	ldr	r5, [pc, #24]	; (800a1f4 <_isatty_r+0x1c>)
 800a1dc:	2300      	movs	r3, #0
 800a1de:	4604      	mov	r4, r0
 800a1e0:	4608      	mov	r0, r1
 800a1e2:	602b      	str	r3, [r5, #0]
 800a1e4:	f7f7 fb23 	bl	800182e <_isatty>
 800a1e8:	1c43      	adds	r3, r0, #1
 800a1ea:	d102      	bne.n	800a1f2 <_isatty_r+0x1a>
 800a1ec:	682b      	ldr	r3, [r5, #0]
 800a1ee:	b103      	cbz	r3, 800a1f2 <_isatty_r+0x1a>
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	bd38      	pop	{r3, r4, r5, pc}
 800a1f4:	20000478 	.word	0x20000478

0800a1f8 <_init>:
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fa:	bf00      	nop
 800a1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1fe:	bc08      	pop	{r3}
 800a200:	469e      	mov	lr, r3
 800a202:	4770      	bx	lr

0800a204 <_fini>:
 800a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a206:	bf00      	nop
 800a208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20a:	bc08      	pop	{r3}
 800a20c:	469e      	mov	lr, r3
 800a20e:	4770      	bx	lr
