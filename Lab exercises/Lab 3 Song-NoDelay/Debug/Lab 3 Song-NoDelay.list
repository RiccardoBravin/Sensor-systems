
Lab 3 Song-NoDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000501c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080051b8  080051b8  000151b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005304  08005304  000202e0  2**0
                  CONTENTS
  4 .ARM          00000008  08005304  08005304  00015304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800530c  0800530c  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800530c  0800530c  0001530c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  08005314  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200002e0  080055f4  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  080055f4  00020514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c49c  00000000  00000000  00020396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a53  00000000  00000000  0002c832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002e288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000929  00000000  00000000  0002ee28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015f6b  00000000  00000000  0002f751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cee6  00000000  00000000  000456bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ce22  00000000  00000000  000525a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037f8  00000000  00000000  000df3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000e2bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002e0 	.word	0x200002e0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800519c 	.word	0x0800519c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002e4 	.word	0x200002e4
 80001d4:	0800519c 	.word	0x0800519c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b970 	b.w	8000e48 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9e08      	ldr	r6, [sp, #32]
 8000b86:	460d      	mov	r5, r1
 8000b88:	4604      	mov	r4, r0
 8000b8a:	460f      	mov	r7, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14a      	bne.n	8000c26 <__udivmoddi4+0xa6>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4694      	mov	ip, r2
 8000b94:	d965      	bls.n	8000c62 <__udivmoddi4+0xe2>
 8000b96:	fab2 f382 	clz	r3, r2
 8000b9a:	b143      	cbz	r3, 8000bae <__udivmoddi4+0x2e>
 8000b9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba0:	f1c3 0220 	rsb	r2, r3, #32
 8000ba4:	409f      	lsls	r7, r3
 8000ba6:	fa20 f202 	lsr.w	r2, r0, r2
 8000baa:	4317      	orrs	r7, r2
 8000bac:	409c      	lsls	r4, r3
 8000bae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bb2:	fa1f f58c 	uxth.w	r5, ip
 8000bb6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bba:	0c22      	lsrs	r2, r4, #16
 8000bbc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bc0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc4:	fb01 f005 	mul.w	r0, r1, r5
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	d90a      	bls.n	8000be2 <__udivmoddi4+0x62>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bd4:	f080 811c 	bcs.w	8000e10 <__udivmoddi4+0x290>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f240 8119 	bls.w	8000e10 <__udivmoddi4+0x290>
 8000bde:	3902      	subs	r1, #2
 8000be0:	4462      	add	r2, ip
 8000be2:	1a12      	subs	r2, r2, r0
 8000be4:	b2a4      	uxth	r4, r4
 8000be6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bea:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf2:	fb00 f505 	mul.w	r5, r0, r5
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x90>
 8000bfa:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c02:	f080 8107 	bcs.w	8000e14 <__udivmoddi4+0x294>
 8000c06:	42a5      	cmp	r5, r4
 8000c08:	f240 8104 	bls.w	8000e14 <__udivmoddi4+0x294>
 8000c0c:	4464      	add	r4, ip
 8000c0e:	3802      	subs	r0, #2
 8000c10:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c14:	1b64      	subs	r4, r4, r5
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11e      	cbz	r6, 8000c22 <__udivmoddi4+0xa2>
 8000c1a:	40dc      	lsrs	r4, r3
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0xbc>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	f000 80ed 	beq.w	8000e0a <__udivmoddi4+0x28a>
 8000c30:	2100      	movs	r1, #0
 8000c32:	e9c6 0500 	strd	r0, r5, [r6]
 8000c36:	4608      	mov	r0, r1
 8000c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3c:	fab3 f183 	clz	r1, r3
 8000c40:	2900      	cmp	r1, #0
 8000c42:	d149      	bne.n	8000cd8 <__udivmoddi4+0x158>
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	d302      	bcc.n	8000c4e <__udivmoddi4+0xce>
 8000c48:	4282      	cmp	r2, r0
 8000c4a:	f200 80f8 	bhi.w	8000e3e <__udivmoddi4+0x2be>
 8000c4e:	1a84      	subs	r4, r0, r2
 8000c50:	eb65 0203 	sbc.w	r2, r5, r3
 8000c54:	2001      	movs	r0, #1
 8000c56:	4617      	mov	r7, r2
 8000c58:	2e00      	cmp	r6, #0
 8000c5a:	d0e2      	beq.n	8000c22 <__udivmoddi4+0xa2>
 8000c5c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c60:	e7df      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000c62:	b902      	cbnz	r2, 8000c66 <__udivmoddi4+0xe6>
 8000c64:	deff      	udf	#255	; 0xff
 8000c66:	fab2 f382 	clz	r3, r2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8090 	bne.w	8000d90 <__udivmoddi4+0x210>
 8000c70:	1a8a      	subs	r2, r1, r2
 8000c72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c80:	fb07 2015 	mls	r0, r7, r5, r2
 8000c84:	0c22      	lsrs	r2, r4, #16
 8000c86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c8a:	fb0e f005 	mul.w	r0, lr, r5
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x124>
 8000c92:	eb1c 0202 	adds.w	r2, ip, r2
 8000c96:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x122>
 8000c9c:	4290      	cmp	r0, r2
 8000c9e:	f200 80cb 	bhi.w	8000e38 <__udivmoddi4+0x2b8>
 8000ca2:	4645      	mov	r5, r8
 8000ca4:	1a12      	subs	r2, r2, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cac:	fb07 2210 	mls	r2, r7, r0, r2
 8000cb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x14e>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cc4:	d202      	bcs.n	8000ccc <__udivmoddi4+0x14c>
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	f200 80bb 	bhi.w	8000e42 <__udivmoddi4+0x2c2>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cd6:	e79f      	b.n	8000c18 <__udivmoddi4+0x98>
 8000cd8:	f1c1 0720 	rsb	r7, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cea:	fa20 f307 	lsr.w	r3, r0, r7
 8000cee:	40fd      	lsrs	r5, r7
 8000cf0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cfa:	fa1f fe8c 	uxth.w	lr, ip
 8000cfe:	fb09 5518 	mls	r5, r9, r8, r5
 8000d02:	0c1c      	lsrs	r4, r3, #16
 8000d04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d08:	fb08 f50e 	mul.w	r5, r8, lr
 8000d0c:	42a5      	cmp	r5, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	fa00 f001 	lsl.w	r0, r0, r1
 8000d16:	d90b      	bls.n	8000d30 <__udivmoddi4+0x1b0>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d20:	f080 8088 	bcs.w	8000e34 <__udivmoddi4+0x2b4>
 8000d24:	42a5      	cmp	r5, r4
 8000d26:	f240 8085 	bls.w	8000e34 <__udivmoddi4+0x2b4>
 8000d2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2e:	4464      	add	r4, ip
 8000d30:	1b64      	subs	r4, r4, r5
 8000d32:	b29d      	uxth	r5, r3
 8000d34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d38:	fb09 4413 	mls	r4, r9, r3, r4
 8000d3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d40:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1da>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d50:	d26c      	bcs.n	8000e2c <__udivmoddi4+0x2ac>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	d96a      	bls.n	8000e2c <__udivmoddi4+0x2ac>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	4464      	add	r4, ip
 8000d5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	42ac      	cmp	r4, r5
 8000d68:	46c8      	mov	r8, r9
 8000d6a:	46ae      	mov	lr, r5
 8000d6c:	d356      	bcc.n	8000e1c <__udivmoddi4+0x29c>
 8000d6e:	d053      	beq.n	8000e18 <__udivmoddi4+0x298>
 8000d70:	b156      	cbz	r6, 8000d88 <__udivmoddi4+0x208>
 8000d72:	ebb0 0208 	subs.w	r2, r0, r8
 8000d76:	eb64 040e 	sbc.w	r4, r4, lr
 8000d7a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d7e:	40ca      	lsrs	r2, r1
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	4317      	orrs	r7, r2
 8000d84:	e9c6 7400 	strd	r7, r4, [r6]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	f1c3 0120 	rsb	r1, r3, #32
 8000d94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d98:	fa20 f201 	lsr.w	r2, r0, r1
 8000d9c:	fa25 f101 	lsr.w	r1, r5, r1
 8000da0:	409d      	lsls	r5, r3
 8000da2:	432a      	orrs	r2, r5
 8000da4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db0:	fb07 1510 	mls	r5, r7, r0, r1
 8000db4:	0c11      	lsrs	r1, r2, #16
 8000db6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dba:	fb00 f50e 	mul.w	r5, r0, lr
 8000dbe:	428d      	cmp	r5, r1
 8000dc0:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x258>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dce:	d22f      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd0:	428d      	cmp	r5, r1
 8000dd2:	d92d      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4461      	add	r1, ip
 8000dd8:	1b49      	subs	r1, r1, r5
 8000dda:	b292      	uxth	r2, r2
 8000ddc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000de0:	fb07 1115 	mls	r1, r7, r5, r1
 8000de4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dec:	4291      	cmp	r1, r2
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x282>
 8000df0:	eb1c 0202 	adds.w	r2, ip, r2
 8000df4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df8:	d216      	bcs.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfa:	4291      	cmp	r1, r2
 8000dfc:	d914      	bls.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfe:	3d02      	subs	r5, #2
 8000e00:	4462      	add	r2, ip
 8000e02:	1a52      	subs	r2, r2, r1
 8000e04:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e08:	e738      	b.n	8000c7c <__udivmoddi4+0xfc>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e708      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000e10:	4639      	mov	r1, r7
 8000e12:	e6e6      	b.n	8000be2 <__udivmoddi4+0x62>
 8000e14:	4610      	mov	r0, r2
 8000e16:	e6fb      	b.n	8000c10 <__udivmoddi4+0x90>
 8000e18:	4548      	cmp	r0, r9
 8000e1a:	d2a9      	bcs.n	8000d70 <__udivmoddi4+0x1f0>
 8000e1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e20:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e24:	3b01      	subs	r3, #1
 8000e26:	e7a3      	b.n	8000d70 <__udivmoddi4+0x1f0>
 8000e28:	4645      	mov	r5, r8
 8000e2a:	e7ea      	b.n	8000e02 <__udivmoddi4+0x282>
 8000e2c:	462b      	mov	r3, r5
 8000e2e:	e794      	b.n	8000d5a <__udivmoddi4+0x1da>
 8000e30:	4640      	mov	r0, r8
 8000e32:	e7d1      	b.n	8000dd8 <__udivmoddi4+0x258>
 8000e34:	46d0      	mov	r8, sl
 8000e36:	e77b      	b.n	8000d30 <__udivmoddi4+0x1b0>
 8000e38:	3d02      	subs	r5, #2
 8000e3a:	4462      	add	r2, ip
 8000e3c:	e732      	b.n	8000ca4 <__udivmoddi4+0x124>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e70a      	b.n	8000c58 <__udivmoddi4+0xd8>
 8000e42:	4464      	add	r4, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e742      	b.n	8000cce <__udivmoddi4+0x14e>

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	0000      	movs	r0, r0
	...

08000e50 <note_to_freq>:

/**
 * @brief Conversion from note in string form to corresponding frequency
 * @retval Floating point frequency
 */
float note_to_freq(char *note) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	switch (note[0]) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	3b41      	subs	r3, #65	; 0x41
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	f200 81c7 	bhi.w	80011f2 <note_to_freq+0x3a2>
 8000e64:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <note_to_freq+0x1c>)
 8000e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6a:	bf00      	nop
 8000e6c:	08000e89 	.word	0x08000e89
 8000e70:	08000f1b 	.word	0x08000f1b
 8000e74:	08000f63 	.word	0x08000f63
 8000e78:	08000ff5 	.word	0x08000ff5
 8000e7c:	08001087 	.word	0x08001087
 8000e80:	080010cf 	.word	0x080010cf
 8000e84:	08001161 	.word	0x08001161
	case 'A':
		if (note[1] == '#')
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b23      	cmp	r3, #35	; 0x23
 8000e90:	d11f      	bne.n	8000ed2 <note_to_freq+0x82>
			return 58.27 * pow(2, atoi(&note[2]));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3302      	adds	r3, #2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f004 f8be 	bl	8005018 <atoi>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff faec 	bl	800047c <__aeabi_i2d>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	ec43 2b11 	vmov	d1, r2, r3
 8000eac:	ed9f 0bd6 	vldr	d0, [pc, #856]	; 8001208 <note_to_freq+0x3b8>
 8000eb0:	f003 f97a 	bl	80041a8 <pow>
 8000eb4:	ec51 0b10 	vmov	r0, r1, d0
 8000eb8:	a3e9      	add	r3, pc, #932	; (adr r3, 8001260 <note_to_freq+0x410>)
 8000eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebe:	f7ff fb47 	bl	8000550 <__aeabi_dmul>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f7ff fdf1 	bl	8000ab0 <__aeabi_d2f>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	e191      	b.n	80011f6 <note_to_freq+0x3a6>
		return 55 * pow(2, (float) atoi(&note[1]));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f004 f89e 	bl	8005018 <atoi>
 8000edc:	ee07 0a90 	vmov	s15, r0
 8000ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee4:	ee17 0a90 	vmov	r0, s15
 8000ee8:	f7ff fada 	bl	80004a0 <__aeabi_f2d>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	ec43 2b11 	vmov	d1, r2, r3
 8000ef4:	ed9f 0bc4 	vldr	d0, [pc, #784]	; 8001208 <note_to_freq+0x3b8>
 8000ef8:	f003 f956 	bl	80041a8 <pow>
 8000efc:	ec51 0b10 	vmov	r0, r1, d0
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	4bd4      	ldr	r3, [pc, #848]	; (8001258 <note_to_freq+0x408>)
 8000f06:	f7ff fb23 	bl	8000550 <__aeabi_dmul>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	f7ff fdcd 	bl	8000ab0 <__aeabi_d2f>
 8000f16:	4603      	mov	r3, r0
 8000f18:	e16d      	b.n	80011f6 <note_to_freq+0x3a6>
		break;
	case 'B':
		return 61.74 * pow(2, (float) atoi(&note[1]));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f004 f87a 	bl	8005018 <atoi>
 8000f24:	ee07 0a90 	vmov	s15, r0
 8000f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f2c:	ee17 0a90 	vmov	r0, s15
 8000f30:	f7ff fab6 	bl	80004a0 <__aeabi_f2d>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	ec43 2b11 	vmov	d1, r2, r3
 8000f3c:	ed9f 0bb2 	vldr	d0, [pc, #712]	; 8001208 <note_to_freq+0x3b8>
 8000f40:	f003 f932 	bl	80041a8 <pow>
 8000f44:	ec51 0b10 	vmov	r0, r1, d0
 8000f48:	a3b1      	add	r3, pc, #708	; (adr r3, 8001210 <note_to_freq+0x3c0>)
 8000f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4e:	f7ff faff 	bl	8000550 <__aeabi_dmul>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f7ff fda9 	bl	8000ab0 <__aeabi_d2f>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	e149      	b.n	80011f6 <note_to_freq+0x3a6>
		break;
	case 'C':
		if (note[1] == '#')
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3301      	adds	r3, #1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b23      	cmp	r3, #35	; 0x23
 8000f6a:	d11f      	bne.n	8000fac <note_to_freq+0x15c>
			return 69.30 * pow(2, atoi(&note[2]));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f004 f851 	bl	8005018 <atoi>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fa7f 	bl	800047c <__aeabi_i2d>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	ec43 2b11 	vmov	d1, r2, r3
 8000f86:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8001208 <note_to_freq+0x3b8>
 8000f8a:	f003 f90d 	bl	80041a8 <pow>
 8000f8e:	ec51 0b10 	vmov	r0, r1, d0
 8000f92:	a3a1      	add	r3, pc, #644	; (adr r3, 8001218 <note_to_freq+0x3c8>)
 8000f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f98:	f7ff fada 	bl	8000550 <__aeabi_dmul>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f7ff fd84 	bl	8000ab0 <__aeabi_d2f>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	e124      	b.n	80011f6 <note_to_freq+0x3a6>
		return 65.41 * pow(2, (float) atoi(&note[1]));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f004 f831 	bl	8005018 <atoi>
 8000fb6:	ee07 0a90 	vmov	s15, r0
 8000fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbe:	ee17 0a90 	vmov	r0, s15
 8000fc2:	f7ff fa6d 	bl	80004a0 <__aeabi_f2d>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	ec43 2b11 	vmov	d1, r2, r3
 8000fce:	ed9f 0b8e 	vldr	d0, [pc, #568]	; 8001208 <note_to_freq+0x3b8>
 8000fd2:	f003 f8e9 	bl	80041a8 <pow>
 8000fd6:	ec51 0b10 	vmov	r0, r1, d0
 8000fda:	a391      	add	r3, pc, #580	; (adr r3, 8001220 <note_to_freq+0x3d0>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff fab6 	bl	8000550 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fd60 	bl	8000ab0 <__aeabi_d2f>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	e100      	b.n	80011f6 <note_to_freq+0x3a6>
		break;
	case 'D':
		if (note[1] == '#')
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b23      	cmp	r3, #35	; 0x23
 8000ffc:	d11f      	bne.n	800103e <note_to_freq+0x1ee>
			return 77.78 * pow(2, atoi(&note[2]));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3302      	adds	r3, #2
 8001002:	4618      	mov	r0, r3
 8001004:	f004 f808 	bl	8005018 <atoi>
 8001008:	4603      	mov	r3, r0
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fa36 	bl	800047c <__aeabi_i2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	ec43 2b11 	vmov	d1, r2, r3
 8001018:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 8001208 <note_to_freq+0x3b8>
 800101c:	f003 f8c4 	bl	80041a8 <pow>
 8001020:	ec51 0b10 	vmov	r0, r1, d0
 8001024:	a380      	add	r3, pc, #512	; (adr r3, 8001228 <note_to_freq+0x3d8>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	f7ff fa91 	bl	8000550 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fd3b 	bl	8000ab0 <__aeabi_d2f>
 800103a:	4603      	mov	r3, r0
 800103c:	e0db      	b.n	80011f6 <note_to_freq+0x3a6>
		return 73.42 * pow(2, (float) atoi(&note[1]));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3301      	adds	r3, #1
 8001042:	4618      	mov	r0, r3
 8001044:	f003 ffe8 	bl	8005018 <atoi>
 8001048:	ee07 0a90 	vmov	s15, r0
 800104c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001050:	ee17 0a90 	vmov	r0, s15
 8001054:	f7ff fa24 	bl	80004a0 <__aeabi_f2d>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	ec43 2b11 	vmov	d1, r2, r3
 8001060:	ed9f 0b69 	vldr	d0, [pc, #420]	; 8001208 <note_to_freq+0x3b8>
 8001064:	f003 f8a0 	bl	80041a8 <pow>
 8001068:	ec51 0b10 	vmov	r0, r1, d0
 800106c:	a370      	add	r3, pc, #448	; (adr r3, 8001230 <note_to_freq+0x3e0>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	f7ff fa6d 	bl	8000550 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff fd17 	bl	8000ab0 <__aeabi_d2f>
 8001082:	4603      	mov	r3, r0
 8001084:	e0b7      	b.n	80011f6 <note_to_freq+0x3a6>
		break;
	case 'E':
		return 82.41 * pow(2, (float) atoi(&note[1]));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3301      	adds	r3, #1
 800108a:	4618      	mov	r0, r3
 800108c:	f003 ffc4 	bl	8005018 <atoi>
 8001090:	ee07 0a90 	vmov	s15, r0
 8001094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001098:	ee17 0a90 	vmov	r0, s15
 800109c:	f7ff fa00 	bl	80004a0 <__aeabi_f2d>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	ec43 2b11 	vmov	d1, r2, r3
 80010a8:	ed9f 0b57 	vldr	d0, [pc, #348]	; 8001208 <note_to_freq+0x3b8>
 80010ac:	f003 f87c 	bl	80041a8 <pow>
 80010b0:	ec51 0b10 	vmov	r0, r1, d0
 80010b4:	a360      	add	r3, pc, #384	; (adr r3, 8001238 <note_to_freq+0x3e8>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f7ff fa49 	bl	8000550 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fcf3 	bl	8000ab0 <__aeabi_d2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	e093      	b.n	80011f6 <note_to_freq+0x3a6>
		break;
	case 'F':
		if (note[1] == '#')
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3301      	adds	r3, #1
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b23      	cmp	r3, #35	; 0x23
 80010d6:	d11f      	bne.n	8001118 <note_to_freq+0x2c8>
			return 92.50 * pow(2, atoi(&note[2]));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3302      	adds	r3, #2
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 ff9b 	bl	8005018 <atoi>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f9c9 	bl	800047c <__aeabi_i2d>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	ec43 2b11 	vmov	d1, r2, r3
 80010f2:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8001208 <note_to_freq+0x3b8>
 80010f6:	f003 f857 	bl	80041a8 <pow>
 80010fa:	ec51 0b10 	vmov	r0, r1, d0
 80010fe:	a350      	add	r3, pc, #320	; (adr r3, 8001240 <note_to_freq+0x3f0>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff fa24 	bl	8000550 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fcce 	bl	8000ab0 <__aeabi_d2f>
 8001114:	4603      	mov	r3, r0
 8001116:	e06e      	b.n	80011f6 <note_to_freq+0x3a6>
		return 87.31 * pow(2, (float) atoi(&note[1]));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3301      	adds	r3, #1
 800111c:	4618      	mov	r0, r3
 800111e:	f003 ff7b 	bl	8005018 <atoi>
 8001122:	ee07 0a90 	vmov	s15, r0
 8001126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112a:	ee17 0a90 	vmov	r0, s15
 800112e:	f7ff f9b7 	bl	80004a0 <__aeabi_f2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	ec43 2b11 	vmov	d1, r2, r3
 800113a:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8001208 <note_to_freq+0x3b8>
 800113e:	f003 f833 	bl	80041a8 <pow>
 8001142:	ec51 0b10 	vmov	r0, r1, d0
 8001146:	a340      	add	r3, pc, #256	; (adr r3, 8001248 <note_to_freq+0x3f8>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff fa00 	bl	8000550 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fcaa 	bl	8000ab0 <__aeabi_d2f>
 800115c:	4603      	mov	r3, r0
 800115e:	e04a      	b.n	80011f6 <note_to_freq+0x3a6>
		break;
	case 'G':
		if (note[1] == '#')
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3301      	adds	r3, #1
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b23      	cmp	r3, #35	; 0x23
 8001168:	d11f      	bne.n	80011aa <note_to_freq+0x35a>
			return 103.83 * pow(2, atoi(&note[2]));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3302      	adds	r3, #2
 800116e:	4618      	mov	r0, r3
 8001170:	f003 ff52 	bl	8005018 <atoi>
 8001174:	4603      	mov	r3, r0
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f980 	bl	800047c <__aeabi_i2d>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	ec43 2b11 	vmov	d1, r2, r3
 8001184:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001208 <note_to_freq+0x3b8>
 8001188:	f003 f80e 	bl	80041a8 <pow>
 800118c:	ec51 0b10 	vmov	r0, r1, d0
 8001190:	a32f      	add	r3, pc, #188	; (adr r3, 8001250 <note_to_freq+0x400>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff f9db 	bl	8000550 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fc85 	bl	8000ab0 <__aeabi_d2f>
 80011a6:	4603      	mov	r3, r0
 80011a8:	e025      	b.n	80011f6 <note_to_freq+0x3a6>
		return 98.00 * pow(2, (float) atoi(&note[1]));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 ff32 	bl	8005018 <atoi>
 80011b4:	ee07 0a90 	vmov	s15, r0
 80011b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011bc:	ee17 0a90 	vmov	r0, s15
 80011c0:	f7ff f96e 	bl	80004a0 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	ec43 2b11 	vmov	d1, r2, r3
 80011cc:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001208 <note_to_freq+0x3b8>
 80011d0:	f002 ffea 	bl	80041a8 <pow>
 80011d4:	ec51 0b10 	vmov	r0, r1, d0
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <note_to_freq+0x40c>)
 80011de:	f7ff f9b7 	bl	8000550 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fc61 	bl	8000ab0 <__aeabi_d2f>
 80011ee:	4603      	mov	r3, r0
 80011f0:	e001      	b.n	80011f6 <note_to_freq+0x3a6>
		break;
	default:
		return 1;
 80011f2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		break;
	}
}
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb0 0a67 	vmov.f32	s0, s15
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	f3af 8000 	nop.w
 8001208:	00000000 	.word	0x00000000
 800120c:	40000000 	.word	0x40000000
 8001210:	51eb851f 	.word	0x51eb851f
 8001214:	404edeb8 	.word	0x404edeb8
 8001218:	33333333 	.word	0x33333333
 800121c:	40515333 	.word	0x40515333
 8001220:	70a3d70a 	.word	0x70a3d70a
 8001224:	40505a3d 	.word	0x40505a3d
 8001228:	851eb852 	.word	0x851eb852
 800122c:	405371eb 	.word	0x405371eb
 8001230:	47ae147b 	.word	0x47ae147b
 8001234:	40525ae1 	.word	0x40525ae1
 8001238:	70a3d70a 	.word	0x70a3d70a
 800123c:	40549a3d 	.word	0x40549a3d
 8001240:	00000000 	.word	0x00000000
 8001244:	40572000 	.word	0x40572000
 8001248:	0a3d70a4 	.word	0x0a3d70a4
 800124c:	4055d3d7 	.word	0x4055d3d7
 8001250:	b851eb85 	.word	0xb851eb85
 8001254:	4059f51e 	.word	0x4059f51e
 8001258:	404b8000 	.word	0x404b8000
 800125c:	40588000 	.word	0x40588000
 8001260:	5c28f5c3 	.word	0x5c28f5c3
 8001264:	404d228f 	.word	0x404d228f

08001268 <set_pwm>:

void set_pwm(float freq) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	ed87 0a01 	vstr	s0, [r7, #4]
	htim1.Init.Period = 1000000 / freq - 1;
 8001272:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001314 <set_pwm+0xac>
 8001276:	ed97 7a01 	vldr	s14, [r7, #4]
 800127a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800127e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001282:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800128a:	ee17 2a90 	vmov	r2, s15
 800128e:	4b22      	ldr	r3, [pc, #136]	; (8001318 <set_pwm+0xb0>)
 8001290:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001292:	4821      	ldr	r0, [pc, #132]	; (8001318 <set_pwm+0xb0>)
 8001294:	f001 fcfe 	bl	8002c94 <HAL_TIM_PWM_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <set_pwm+0x3a>
		Error_Handler();
 800129e:	f000 fadd 	bl	800185c <Error_Handler>

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	619a      	str	r2, [r3, #24]

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b6:	2360      	movs	r3, #96	; 0x60
 80012b8:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = 1000000 / freq / 2 - 1;
 80012ba:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001314 <set_pwm+0xac>
 80012be:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012c6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012da:	ee17 3a90 	vmov	r3, s15
 80012de:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2204      	movs	r2, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4806      	ldr	r0, [pc, #24]	; (8001318 <set_pwm+0xb0>)
 80012fe:	f001 ff3f 	bl	8003180 <HAL_TIM_PWM_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <set_pwm+0xa4>
		Error_Handler();
 8001308:	f000 faa8 	bl	800185c <Error_Handler>
}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	49742400 	.word	0x49742400
 8001318:	200002fc 	.word	0x200002fc

0800131c <play_note>:
/**
 * @brief Given a note in string format and a duration in 4/4 plays the note requested
 * @retval None
 */
void play_note(note *val) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

	float freq = note_to_freq(val->name);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fd92 	bl	8000e50 <note_to_freq>
 800132c:	ed87 0a03 	vstr	s0, [r7, #12]
	static note *last_note = 0;

	if (freq != 1) {
 8001330:	edd7 7a03 	vldr	s15, [r7, #12]
 8001334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001338:	eef4 7a47 	vcmp.f32	s15, s14
 800133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001340:	d02a      	beq.n	8001398 <play_note+0x7c>
		if (last_note != val) {
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <play_note+0xac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	d00f      	beq.n	800136c <play_note+0x50>
			last_note = val;
 800134c:	4a1e      	ldr	r2, [pc, #120]	; (80013c8 <play_note+0xac>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
			set_pwm(freq);
 8001352:	ed97 0a03 	vldr	s0, [r7, #12]
 8001356:	f7ff ff87 	bl	8001268 <set_pwm>
			if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 800135a:	2104      	movs	r1, #4
 800135c:	481b      	ldr	r0, [pc, #108]	; (80013cc <play_note+0xb0>)
 800135e:	f001 fcf3 	bl	8002d48 <HAL_TIM_PWM_Start>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <play_note+0x50>
							Error_Handler();
 8001368:	f000 fa78 	bl	800185c <Error_Handler>
		}
		if (val->duration <= TIME_INTERVAL * 2) {
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001372:	eddf 7a17 	vldr	s15, [pc, #92]	; 80013d0 <play_note+0xb4>
 8001376:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800137a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	d812      	bhi.n	80013aa <play_note+0x8e>
			if (HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8001384:	2104      	movs	r1, #4
 8001386:	4811      	ldr	r0, [pc, #68]	; (80013cc <play_note+0xb0>)
 8001388:	f001 fd8e 	bl	8002ea8 <HAL_TIM_PWM_Stop>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00b      	beq.n	80013aa <play_note+0x8e>
				Error_Handler();
 8001392:	f000 fa63 	bl	800185c <Error_Handler>
 8001396:	e008      	b.n	80013aa <play_note+0x8e>
		}

	} else {
		if (HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8001398:	2104      	movs	r1, #4
 800139a:	480c      	ldr	r0, [pc, #48]	; (80013cc <play_note+0xb0>)
 800139c:	f001 fd84 	bl	8002ea8 <HAL_TIM_PWM_Stop>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <play_note+0x8e>
			Error_Handler();
 80013a6:	f000 fa59 	bl	800185c <Error_Handler>
	}

	val->duration -= TIME_INTERVAL;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80013b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80013d0 <play_note+0xb4>
 80013b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	edc3 7a01 	vstr	s15, [r3, #4]

}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200003d0 	.word	0x200003d0
 80013cc:	200002fc 	.word	0x200002fc
 80013d0:	3c638e39 	.word	0x3c638e39

080013d4 <step_play>:

void step_play() {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	static int i = 0;

	if(i < sizeof(song2)/sizeof(song2[0])){
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <step_play+0x48>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b4d      	cmp	r3, #77	; 0x4d
 80013de:	d81a      	bhi.n	8001416 <step_play+0x42>
		play_note(&song2[i]);
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <step_play+0x48>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <step_play+0x4c>)
 80013e8:	4413      	add	r3, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff96 	bl	800131c <play_note>

		if (song2[i].duration <= 0) {
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <step_play+0x48>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <step_play+0x4c>)
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4413      	add	r3, r2
 80013fa:	3304      	adds	r3, #4
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001408:	d900      	bls.n	800140c <step_play+0x38>
			i++;
		}
	}

}
 800140a:	e004      	b.n	8001416 <step_play+0x42>
			i++;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <step_play+0x48>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	4a02      	ldr	r2, [pc, #8]	; (800141c <step_play+0x48>)
 8001414:	6013      	str	r3, [r2, #0]
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200003d4 	.word	0x200003d4
 8001420:	20000000 	.word	0x20000000

08001424 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d101      	bne.n	8001438 <HAL_TIM_PeriodElapsedCallback+0x14>
		step_play();
 8001434:	f7ff ffce 	bl	80013d4 <step_play>
	}
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000344 	.word	0x20000344

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001448:	f000 fb94 	bl	8001b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144c:	f000 f80e 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001450:	f000 f98e 	bl	8001770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001454:	f000 f962 	bl	800171c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001458:	f000 f874 	bl	8001544 <MX_TIM1_Init>
  MX_TIM2_Init();
 800145c:	f000 f912 	bl	8001684 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001460:	4801      	ldr	r0, [pc, #4]	; (8001468 <main+0x24>)
 8001462:	f001 fbb5 	bl	8002bd0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8001466:	e7fe      	b.n	8001466 <main+0x22>
 8001468:	20000344 	.word	0x20000344

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b094      	sub	sp, #80	; 0x50
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	2230      	movs	r2, #48	; 0x30
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f003 fe5c 	bl	8005138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <SystemClock_Config+0xd0>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	4a28      	ldr	r2, [pc, #160]	; (800153c <SystemClock_Config+0xd0>)
 800149a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
 80014a0:	4b26      	ldr	r3, [pc, #152]	; (800153c <SystemClock_Config+0xd0>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	4b23      	ldr	r3, [pc, #140]	; (8001540 <SystemClock_Config+0xd4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014b8:	4a21      	ldr	r2, [pc, #132]	; (8001540 <SystemClock_Config+0xd4>)
 80014ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <SystemClock_Config+0xd4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014cc:	2302      	movs	r3, #2
 80014ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d0:	2301      	movs	r3, #1
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d4:	2310      	movs	r3, #16
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d8:	2302      	movs	r3, #2
 80014da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014dc:	2300      	movs	r3, #0
 80014de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014e0:	2310      	movs	r3, #16
 80014e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014ea:	2304      	movs	r3, #4
 80014ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014ee:	2307      	movs	r3, #7
 80014f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f2:	f107 0320 	add.w	r3, r7, #32
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fe82 	bl	8002200 <HAL_RCC_OscConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001502:	f000 f9ab 	bl	800185c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001506:	230f      	movs	r3, #15
 8001508:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150a:	2302      	movs	r3, #2
 800150c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001516:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2102      	movs	r1, #2
 8001522:	4618      	mov	r0, r3
 8001524:	f001 f8e4 	bl	80026f0 <HAL_RCC_ClockConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800152e:	f000 f995 	bl	800185c <Error_Handler>
  }
}
 8001532:	bf00      	nop
 8001534:	3750      	adds	r7, #80	; 0x50
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000

08001544 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b096      	sub	sp, #88	; 0x58
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	615a      	str	r2, [r3, #20]
 8001574:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2220      	movs	r2, #32
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fddb 	bl	8005138 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001582:	4b3e      	ldr	r3, [pc, #248]	; (800167c <MX_TIM1_Init+0x138>)
 8001584:	4a3e      	ldr	r2, [pc, #248]	; (8001680 <MX_TIM1_Init+0x13c>)
 8001586:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001588:	4b3c      	ldr	r3, [pc, #240]	; (800167c <MX_TIM1_Init+0x138>)
 800158a:	2253      	movs	r2, #83	; 0x53
 800158c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b3b      	ldr	r3, [pc, #236]	; (800167c <MX_TIM1_Init+0x138>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001594:	4b39      	ldr	r3, [pc, #228]	; (800167c <MX_TIM1_Init+0x138>)
 8001596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800159a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159c:	4b37      	ldr	r3, [pc, #220]	; (800167c <MX_TIM1_Init+0x138>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a2:	4b36      	ldr	r3, [pc, #216]	; (800167c <MX_TIM1_Init+0x138>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a8:	4b34      	ldr	r3, [pc, #208]	; (800167c <MX_TIM1_Init+0x138>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015ae:	4833      	ldr	r0, [pc, #204]	; (800167c <MX_TIM1_Init+0x138>)
 80015b0:	f001 fabe 	bl	8002b30 <HAL_TIM_Base_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015ba:	f000 f94f 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015c8:	4619      	mov	r1, r3
 80015ca:	482c      	ldr	r0, [pc, #176]	; (800167c <MX_TIM1_Init+0x138>)
 80015cc:	f001 fe9a 	bl	8003304 <HAL_TIM_ConfigClockSource>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015d6:	f000 f941 	bl	800185c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015da:	4828      	ldr	r0, [pc, #160]	; (800167c <MX_TIM1_Init+0x138>)
 80015dc:	f001 fb5a 	bl	8002c94 <HAL_TIM_PWM_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015e6:	f000 f939 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015f6:	4619      	mov	r1, r3
 80015f8:	4820      	ldr	r0, [pc, #128]	; (800167c <MX_TIM1_Init+0x138>)
 80015fa:	f002 fa3f 	bl	8003a7c <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001604:	f000 f92a 	bl	800185c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001608:	2360      	movs	r3, #96	; 0x60
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001614:	2300      	movs	r3, #0
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800161c:	2300      	movs	r3, #0
 800161e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001628:	2204      	movs	r2, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4813      	ldr	r0, [pc, #76]	; (800167c <MX_TIM1_Init+0x138>)
 800162e:	f001 fda7 	bl	8003180 <HAL_TIM_PWM_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001638:	f000 f910 	bl	800185c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001654:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	4619      	mov	r1, r3
 800165e:	4807      	ldr	r0, [pc, #28]	; (800167c <MX_TIM1_Init+0x138>)
 8001660:	f002 fa7a 	bl	8003b58 <HAL_TIMEx_ConfigBreakDeadTime>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800166a:	f000 f8f7 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800166e:	4803      	ldr	r0, [pc, #12]	; (800167c <MX_TIM1_Init+0x138>)
 8001670:	f000 f986 	bl	8001980 <HAL_TIM_MspPostInit>

}
 8001674:	bf00      	nop
 8001676:	3758      	adds	r7, #88	; 0x58
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200002fc 	.word	0x200002fc
 8001680:	40010000 	.word	0x40010000

08001684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001698:	463b      	mov	r3, r7
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <MX_TIM2_Init+0x94>)
 80016a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <MX_TIM2_Init+0x94>)
 80016aa:	2253      	movs	r2, #83	; 0x53
 80016ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <MX_TIM2_Init+0x94>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <MX_TIM2_Init+0x94>)
 80016b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80016ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <MX_TIM2_Init+0x94>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <MX_TIM2_Init+0x94>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016c8:	4813      	ldr	r0, [pc, #76]	; (8001718 <MX_TIM2_Init+0x94>)
 80016ca:	f001 fa31 	bl	8002b30 <HAL_TIM_Base_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016d4:	f000 f8c2 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	4619      	mov	r1, r3
 80016e4:	480c      	ldr	r0, [pc, #48]	; (8001718 <MX_TIM2_Init+0x94>)
 80016e6:	f001 fe0d 	bl	8003304 <HAL_TIM_ConfigClockSource>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016f0:	f000 f8b4 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	4619      	mov	r1, r3
 8001700:	4805      	ldr	r0, [pc, #20]	; (8001718 <MX_TIM2_Init+0x94>)
 8001702:	f002 f9bb 	bl	8003a7c <HAL_TIMEx_MasterConfigSynchronization>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800170c:	f000 f8a6 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000344 	.word	0x20000344

0800171c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <MX_USART2_UART_Init+0x50>)
 8001724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800172c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001754:	f002 fa66 	bl	8003c24 <HAL_UART_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800175e:	f000 f87d 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000038c 	.word	0x2000038c
 800176c:	40004400 	.word	0x40004400

08001770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b31      	ldr	r3, [pc, #196]	; (8001850 <MX_GPIO_Init+0xe0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a30      	ldr	r2, [pc, #192]	; (8001850 <MX_GPIO_Init+0xe0>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <MX_GPIO_Init+0xe0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <MX_GPIO_Init+0xe0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a29      	ldr	r2, [pc, #164]	; (8001850 <MX_GPIO_Init+0xe0>)
 80017ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b27      	ldr	r3, [pc, #156]	; (8001850 <MX_GPIO_Init+0xe0>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <MX_GPIO_Init+0xe0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a22      	ldr	r2, [pc, #136]	; (8001850 <MX_GPIO_Init+0xe0>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <MX_GPIO_Init+0xe0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <MX_GPIO_Init+0xe0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a1b      	ldr	r2, [pc, #108]	; (8001850 <MX_GPIO_Init+0xe0>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <MX_GPIO_Init+0xe0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2120      	movs	r1, #32
 80017fa:	4816      	ldr	r0, [pc, #88]	; (8001854 <MX_GPIO_Init+0xe4>)
 80017fc:	f000 fcc2 	bl	8002184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001806:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	4810      	ldr	r0, [pc, #64]	; (8001858 <MX_GPIO_Init+0xe8>)
 8001818:	f000 fb30 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800181c:	2320      	movs	r3, #32
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	4808      	ldr	r0, [pc, #32]	; (8001854 <MX_GPIO_Init+0xe4>)
 8001834:	f000 fb22 	bl	8001e7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	2028      	movs	r0, #40	; 0x28
 800183e:	f000 fae6 	bl	8001e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001842:	2028      	movs	r0, #40	; 0x28
 8001844:	f000 faff 	bl	8001e46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	; 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000
 8001858:	40020800 	.word	0x40020800

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001864:	e7fe      	b.n	8001864 <Error_Handler+0x8>
	...

08001868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_MspInit+0x4c>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <HAL_MspInit+0x4c>)
 8001878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_MspInit+0x4c>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_MspInit+0x4c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_MspInit+0x4c>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_MspInit+0x4c>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018a6:	2007      	movs	r0, #7
 80018a8:	f000 faa6 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800

080018b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a27      	ldr	r2, [pc, #156]	; (8001974 <HAL_TIM_Base_MspInit+0xbc>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d10e      	bne.n	80018f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a25      	ldr	r2, [pc, #148]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b23      	ldr	r3, [pc, #140]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018f6:	e038      	b.n	800196a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001900:	d133      	bne.n	800196a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a14      	ldr	r2, [pc, #80]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_TIM_Base_MspInit+0xc0>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800193a:	2301      	movs	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800194a:	2301      	movs	r3, #1
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4809      	ldr	r0, [pc, #36]	; (800197c <HAL_TIM_Base_MspInit+0xc4>)
 8001956:	f000 fa91 	bl	8001e7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	201c      	movs	r0, #28
 8001960:	f000 fa55 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001964:	201c      	movs	r0, #28
 8001966:	f000 fa6e 	bl	8001e46 <HAL_NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40010000 	.word	0x40010000
 8001978:	40023800 	.word	0x40023800
 800197c:	40020000 	.word	0x40020000

08001980 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <HAL_TIM_MspPostInit+0x68>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d11e      	bne.n	80019e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_TIM_MspPostInit+0x6c>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <HAL_TIM_MspPostInit+0x6c>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_TIM_MspPostInit+0x6c>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	4619      	mov	r1, r3
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <HAL_TIM_MspPostInit+0x70>)
 80019dc:	f000 fa4e 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019e0:	bf00      	nop
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40010000 	.word	0x40010000
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020000 	.word	0x40020000

080019f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <HAL_UART_MspInit+0x84>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d12b      	bne.n	8001a6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_UART_MspInit+0x88>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <HAL_UART_MspInit+0x88>)
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_UART_MspInit+0x88>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_UART_MspInit+0x88>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <HAL_UART_MspInit+0x88>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <HAL_UART_MspInit+0x88>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a4e:	230c      	movs	r3, #12
 8001a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a5e:	2307      	movs	r3, #7
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	; (8001a80 <HAL_UART_MspInit+0x8c>)
 8001a6a:	f000 fa07 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a6e:	bf00      	nop
 8001a70:	3728      	adds	r7, #40	; 0x28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40004400 	.word	0x40004400
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020000 	.word	0x40020000

08001a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <NMI_Handler+0x4>

08001a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <MemManage_Handler+0x4>

08001a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <BusFault_Handler+0x4>

08001a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <UsageFault_Handler+0x4>

08001aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad0:	f000 f8a2 	bl	8001c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <TIM2_IRQHandler+0x10>)
 8001ade:	f001 fa47 	bl	8002f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000344 	.word	0x20000344

08001aec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001af0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001af4:	f000 fb60 	bl	80021b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <SystemInit+0x20>)
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <SystemInit+0x20>)
 8001b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b24:	480d      	ldr	r0, [pc, #52]	; (8001b5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b26:	490e      	ldr	r1, [pc, #56]	; (8001b60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b28:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b2c:	e002      	b.n	8001b34 <LoopCopyDataInit>

08001b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b32:	3304      	adds	r3, #4

08001b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b38:	d3f9      	bcc.n	8001b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b3c:	4c0b      	ldr	r4, [pc, #44]	; (8001b6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b40:	e001      	b.n	8001b46 <LoopFillZerobss>

08001b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b44:	3204      	adds	r2, #4

08001b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b48:	d3fb      	bcc.n	8001b42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b4a:	f7ff ffd7 	bl	8001afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4e:	f003 fb01 	bl	8005154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b52:	f7ff fc77 	bl	8001444 <main>
  bx  lr    
 8001b56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b60:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8001b64:	08005314 	.word	0x08005314
  ldr r2, =_sbss
 8001b68:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8001b6c:	20000514 	.word	0x20000514

08001b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <ADC_IRQHandler>
	...

08001b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <HAL_Init+0x40>)
 8001b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_Init+0x40>)
 8001b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_Init+0x40>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_Init+0x40>)
 8001b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f000 f92b 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f000 f808 	bl	8001bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba8:	f7ff fe5e 	bl	8001868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_InitTick+0x54>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x58>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 f943 	bl	8001e62 <HAL_SYSTICK_Config>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00e      	b.n	8001c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b0f      	cmp	r3, #15
 8001bea:	d80a      	bhi.n	8001c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bec:	2200      	movs	r2, #0
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f000 f90b 	bl	8001e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf8:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <HAL_InitTick+0x5c>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e000      	b.n	8001c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000270 	.word	0x20000270
 8001c10:	20000278 	.word	0x20000278
 8001c14:	20000274 	.word	0x20000274

08001c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x20>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x24>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_IncTick+0x24>)
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000278 	.word	0x20000278
 8001c3c:	200003d8 	.word	0x200003d8

08001c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return uwTick;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_GetTick+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	200003d8 	.word	0x200003d8

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db0b      	blt.n	8001ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4907      	ldr	r1, [pc, #28]	; (8001cf4 <__NVIC_EnableIRQ+0x38>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	; (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc4:	d301      	bcc.n	8001dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00f      	b.n	8001dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <SysTick_Config+0x40>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f7ff ff8e 	bl	8001cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <SysTick_Config+0x40>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SysTick_Config+0x40>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000e010 	.word	0xe000e010

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff29 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff3e 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ff8e 	bl	8001d4c <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff5d 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff31 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffa2 	bl	8001db4 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e159      	b.n	800214c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8148 	bne.w	8002146 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d005      	beq.n	8001ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d130      	bne.n	8001f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0201 	and.w	r2, r3, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d017      	beq.n	8001f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d123      	bne.n	8001fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0203 	and.w	r2, r3, #3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80a2 	beq.w	8002146 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b57      	ldr	r3, [pc, #348]	; (8002164 <HAL_GPIO_Init+0x2e8>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a56      	ldr	r2, [pc, #344]	; (8002164 <HAL_GPIO_Init+0x2e8>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b54      	ldr	r3, [pc, #336]	; (8002164 <HAL_GPIO_Init+0x2e8>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201e:	4a52      	ldr	r2, [pc, #328]	; (8002168 <HAL_GPIO_Init+0x2ec>)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a49      	ldr	r2, [pc, #292]	; (800216c <HAL_GPIO_Init+0x2f0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d019      	beq.n	800207e <HAL_GPIO_Init+0x202>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a48      	ldr	r2, [pc, #288]	; (8002170 <HAL_GPIO_Init+0x2f4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0x1fe>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a47      	ldr	r2, [pc, #284]	; (8002174 <HAL_GPIO_Init+0x2f8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00d      	beq.n	8002076 <HAL_GPIO_Init+0x1fa>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a46      	ldr	r2, [pc, #280]	; (8002178 <HAL_GPIO_Init+0x2fc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <HAL_GPIO_Init+0x1f6>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a45      	ldr	r2, [pc, #276]	; (800217c <HAL_GPIO_Init+0x300>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_GPIO_Init+0x1f2>
 800206a:	2304      	movs	r3, #4
 800206c:	e008      	b.n	8002080 <HAL_GPIO_Init+0x204>
 800206e:	2307      	movs	r3, #7
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x204>
 8002072:	2303      	movs	r3, #3
 8002074:	e004      	b.n	8002080 <HAL_GPIO_Init+0x204>
 8002076:	2302      	movs	r3, #2
 8002078:	e002      	b.n	8002080 <HAL_GPIO_Init+0x204>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x204>
 800207e:	2300      	movs	r3, #0
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	f002 0203 	and.w	r2, r2, #3
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	4093      	lsls	r3, r2
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002090:	4935      	ldr	r1, [pc, #212]	; (8002168 <HAL_GPIO_Init+0x2ec>)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209e:	4b38      	ldr	r3, [pc, #224]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020c2:	4a2f      	ldr	r2, [pc, #188]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020ec:	4a24      	ldr	r2, [pc, #144]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020f2:	4b23      	ldr	r3, [pc, #140]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002116:	4a1a      	ldr	r2, [pc, #104]	; (8002180 <HAL_GPIO_Init+0x304>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_GPIO_Init+0x304>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002140:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <HAL_GPIO_Init+0x304>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3301      	adds	r3, #1
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	f67f aea2 	bls.w	8001e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	40013800 	.word	0x40013800
 800216c:	40020000 	.word	0x40020000
 8002170:	40020400 	.word	0x40020400
 8002174:	40020800 	.word	0x40020800
 8002178:	40020c00 	.word	0x40020c00
 800217c:	40021000 	.word	0x40021000
 8002180:	40013c00 	.word	0x40013c00

08002184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
 8002190:	4613      	mov	r3, r2
 8002192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002194:	787b      	ldrb	r3, [r7, #1]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a0:	e003      	b.n	80021aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021a2:	887b      	ldrh	r3, [r7, #2]
 80021a4:	041a      	lsls	r2, r3, #16
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	619a      	str	r2, [r3, #24]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ce:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f806 	bl	80021e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40013c00 	.word	0x40013c00

080021e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e267      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d075      	beq.n	800230a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800221e:	4b88      	ldr	r3, [pc, #544]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d00c      	beq.n	8002244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222a:	4b85      	ldr	r3, [pc, #532]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002232:	2b08      	cmp	r3, #8
 8002234:	d112      	bne.n	800225c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002236:	4b82      	ldr	r3, [pc, #520]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002242:	d10b      	bne.n	800225c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	4b7e      	ldr	r3, [pc, #504]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d05b      	beq.n	8002308 <HAL_RCC_OscConfig+0x108>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d157      	bne.n	8002308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e242      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002264:	d106      	bne.n	8002274 <HAL_RCC_OscConfig+0x74>
 8002266:	4b76      	ldr	r3, [pc, #472]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a75      	ldr	r2, [pc, #468]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e01d      	b.n	80022b0 <HAL_RCC_OscConfig+0xb0>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x98>
 800227e:	4b70      	ldr	r3, [pc, #448]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6f      	ldr	r2, [pc, #444]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b6d      	ldr	r3, [pc, #436]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a6c      	ldr	r2, [pc, #432]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0xb0>
 8002298:	4b69      	ldr	r3, [pc, #420]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a68      	ldr	r2, [pc, #416]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 800229e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b66      	ldr	r3, [pc, #408]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a65      	ldr	r2, [pc, #404]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 80022aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d013      	beq.n	80022e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff fcc2 	bl	8001c40 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff fcbe 	bl	8001c40 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e207      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	4b5b      	ldr	r3, [pc, #364]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0xc0>
 80022de:	e014      	b.n	800230a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff fcae 	bl	8001c40 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e8:	f7ff fcaa 	bl	8001c40 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e1f3      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fa:	4b51      	ldr	r3, [pc, #324]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0xe8>
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d063      	beq.n	80023de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002316:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800232a:	2b08      	cmp	r3, #8
 800232c:	d11c      	bne.n	8002368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232e:	4b44      	ldr	r3, [pc, #272]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d116      	bne.n	8002368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233a:	4b41      	ldr	r3, [pc, #260]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_RCC_OscConfig+0x152>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e1c7      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002352:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4937      	ldr	r1, [pc, #220]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002366:	e03a      	b.n	80023de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002370:	4b34      	ldr	r3, [pc, #208]	; (8002444 <HAL_RCC_OscConfig+0x244>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002376:	f7ff fc63 	bl	8001c40 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800237e:	f7ff fc5f 	bl	8001c40 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e1a8      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002390:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239c:	4b28      	ldr	r3, [pc, #160]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4925      	ldr	r1, [pc, #148]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]
 80023b0:	e015      	b.n	80023de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b2:	4b24      	ldr	r3, [pc, #144]	; (8002444 <HAL_RCC_OscConfig+0x244>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7ff fc42 	bl	8001c40 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c0:	f7ff fc3e 	bl	8001c40 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e187      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d2:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d036      	beq.n	8002458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d016      	beq.n	8002420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <HAL_RCC_OscConfig+0x248>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f8:	f7ff fc22 	bl	8001c40 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002400:	f7ff fc1e 	bl	8001c40 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e167      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_OscConfig+0x240>)
 8002414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x200>
 800241e:	e01b      	b.n	8002458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_RCC_OscConfig+0x248>)
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7ff fc0b 	bl	8001c40 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	e00e      	b.n	800244c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800242e:	f7ff fc07 	bl	8001c40 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d907      	bls.n	800244c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e150      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
 8002440:	40023800 	.word	0x40023800
 8002444:	42470000 	.word	0x42470000
 8002448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	4b88      	ldr	r3, [pc, #544]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800244e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1ea      	bne.n	800242e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8097 	beq.w	8002594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246a:	4b81      	ldr	r3, [pc, #516]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10f      	bne.n	8002496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	4b7d      	ldr	r3, [pc, #500]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a7c      	ldr	r2, [pc, #496]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
 8002486:	4b7a      	ldr	r3, [pc, #488]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002492:	2301      	movs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	4b77      	ldr	r3, [pc, #476]	; (8002674 <HAL_RCC_OscConfig+0x474>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a2:	4b74      	ldr	r3, [pc, #464]	; (8002674 <HAL_RCC_OscConfig+0x474>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a73      	ldr	r2, [pc, #460]	; (8002674 <HAL_RCC_OscConfig+0x474>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ae:	f7ff fbc7 	bl	8001c40 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7ff fbc3 	bl	8001c40 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e10c      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b6a      	ldr	r3, [pc, #424]	; (8002674 <HAL_RCC_OscConfig+0x474>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x2ea>
 80024dc:	4b64      	ldr	r3, [pc, #400]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	4a63      	ldr	r2, [pc, #396]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6713      	str	r3, [r2, #112]	; 0x70
 80024e8:	e01c      	b.n	8002524 <HAL_RCC_OscConfig+0x324>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x30c>
 80024f2:	4b5f      	ldr	r3, [pc, #380]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	4a5e      	ldr	r2, [pc, #376]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 80024f8:	f043 0304 	orr.w	r3, r3, #4
 80024fc:	6713      	str	r3, [r2, #112]	; 0x70
 80024fe:	4b5c      	ldr	r3, [pc, #368]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002502:	4a5b      	ldr	r2, [pc, #364]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6713      	str	r3, [r2, #112]	; 0x70
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0x324>
 800250c:	4b58      	ldr	r3, [pc, #352]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	4a57      	ldr	r2, [pc, #348]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	6713      	str	r3, [r2, #112]	; 0x70
 8002518:	4b55      	ldr	r3, [pc, #340]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	4a54      	ldr	r2, [pc, #336]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800251e:	f023 0304 	bic.w	r3, r3, #4
 8002522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d015      	beq.n	8002558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7ff fb88 	bl	8001c40 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002532:	e00a      	b.n	800254a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7ff fb84 	bl	8001c40 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e0cb      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254a:	4b49      	ldr	r3, [pc, #292]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0ee      	beq.n	8002534 <HAL_RCC_OscConfig+0x334>
 8002556:	e014      	b.n	8002582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7ff fb72 	bl	8001c40 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002560:	f7ff fb6e 	bl	8001c40 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	; 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e0b5      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002576:	4b3e      	ldr	r3, [pc, #248]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1ee      	bne.n	8002560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002582:	7dfb      	ldrb	r3, [r7, #23]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002588:	4b39      	ldr	r3, [pc, #228]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	4a38      	ldr	r2, [pc, #224]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800258e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a1 	beq.w	80026e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800259e:	4b34      	ldr	r3, [pc, #208]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d05c      	beq.n	8002664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d141      	bne.n	8002636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b31      	ldr	r3, [pc, #196]	; (8002678 <HAL_RCC_OscConfig+0x478>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff fb42 	bl	8001c40 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c0:	f7ff fb3e 	bl	8001c40 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e087      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	4b27      	ldr	r3, [pc, #156]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	019b      	lsls	r3, r3, #6
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	3b01      	subs	r3, #1
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	491b      	ldr	r1, [pc, #108]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_RCC_OscConfig+0x478>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7ff fb17 	bl	8001c40 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002616:	f7ff fb13 	bl	8001c40 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e05c      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x416>
 8002634:	e054      	b.n	80026e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <HAL_RCC_OscConfig+0x478>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7ff fb00 	bl	8001c40 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002644:	f7ff fafc 	bl	8001c40 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e045      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCC_OscConfig+0x470>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x444>
 8002662:	e03d      	b.n	80026e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d107      	bne.n	800267c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e038      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
 8002670:	40023800 	.word	0x40023800
 8002674:	40007000 	.word	0x40007000
 8002678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x4ec>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d028      	beq.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d121      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d11a      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d111      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	3b01      	subs	r3, #1
 80026c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d107      	bne.n	80026dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800

080026f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0cc      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002704:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d90c      	bls.n	800272c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b65      	ldr	r3, [pc, #404]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b63      	ldr	r3, [pc, #396]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0b8      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002744:	4b59      	ldr	r3, [pc, #356]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a58      	ldr	r2, [pc, #352]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800274e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800275c:	4b53      	ldr	r3, [pc, #332]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a52      	ldr	r2, [pc, #328]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002768:	4b50      	ldr	r3, [pc, #320]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	494d      	ldr	r1, [pc, #308]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d044      	beq.n	8002810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d119      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e07f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e06f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e067      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ce:	4b37      	ldr	r3, [pc, #220]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4934      	ldr	r1, [pc, #208]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e0:	f7ff fa2e 	bl	8001c40 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e8:	f7ff fa2a 	bl	8001c40 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e04f      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 020c 	and.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	429a      	cmp	r2, r3
 800280e:	d1eb      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d20c      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e032      	b.n	800289e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4916      	ldr	r1, [pc, #88]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	490e      	ldr	r1, [pc, #56]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002876:	f000 f821 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	490a      	ldr	r1, [pc, #40]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	fa22 f303 	lsr.w	r3, r2, r3
 800288e:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff f98e 	bl	8001bb8 <HAL_InitTick>

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023c00 	.word	0x40023c00
 80028ac:	40023800 	.word	0x40023800
 80028b0:	080051b8 	.word	0x080051b8
 80028b4:	20000270 	.word	0x20000270
 80028b8:	20000274 	.word	0x20000274

080028bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c0:	b094      	sub	sp, #80	; 0x50
 80028c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	647b      	str	r3, [r7, #68]	; 0x44
 80028c8:	2300      	movs	r3, #0
 80028ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028cc:	2300      	movs	r3, #0
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d4:	4b79      	ldr	r3, [pc, #484]	; (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d00d      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x40>
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	f200 80e1 	bhi.w	8002aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x34>
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ee:	e0db      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f0:	4b73      	ldr	r3, [pc, #460]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028f4:	e0db      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028f6:	4b73      	ldr	r3, [pc, #460]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x208>)
 80028f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028fa:	e0d8      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028fc:	4b6f      	ldr	r3, [pc, #444]	; (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002904:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002906:	4b6d      	ldr	r3, [pc, #436]	; (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d063      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002912:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	2200      	movs	r2, #0
 800291a:	63bb      	str	r3, [r7, #56]	; 0x38
 800291c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800291e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002924:	633b      	str	r3, [r7, #48]	; 0x30
 8002926:	2300      	movs	r3, #0
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
 800292a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800292e:	4622      	mov	r2, r4
 8002930:	462b      	mov	r3, r5
 8002932:	f04f 0000 	mov.w	r0, #0
 8002936:	f04f 0100 	mov.w	r1, #0
 800293a:	0159      	lsls	r1, r3, #5
 800293c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002940:	0150      	lsls	r0, r2, #5
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4621      	mov	r1, r4
 8002948:	1a51      	subs	r1, r2, r1
 800294a:	6139      	str	r1, [r7, #16]
 800294c:	4629      	mov	r1, r5
 800294e:	eb63 0301 	sbc.w	r3, r3, r1
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002960:	4659      	mov	r1, fp
 8002962:	018b      	lsls	r3, r1, #6
 8002964:	4651      	mov	r1, sl
 8002966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800296a:	4651      	mov	r1, sl
 800296c:	018a      	lsls	r2, r1, #6
 800296e:	4651      	mov	r1, sl
 8002970:	ebb2 0801 	subs.w	r8, r2, r1
 8002974:	4659      	mov	r1, fp
 8002976:	eb63 0901 	sbc.w	r9, r3, r1
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800298a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800298e:	4690      	mov	r8, r2
 8002990:	4699      	mov	r9, r3
 8002992:	4623      	mov	r3, r4
 8002994:	eb18 0303 	adds.w	r3, r8, r3
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	462b      	mov	r3, r5
 800299c:	eb49 0303 	adc.w	r3, r9, r3
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029ae:	4629      	mov	r1, r5
 80029b0:	024b      	lsls	r3, r1, #9
 80029b2:	4621      	mov	r1, r4
 80029b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029b8:	4621      	mov	r1, r4
 80029ba:	024a      	lsls	r2, r1, #9
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c2:	2200      	movs	r2, #0
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029cc:	f7fe f8c0 	bl	8000b50 <__aeabi_uldivmod>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4613      	mov	r3, r2
 80029d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d8:	e058      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	4b38      	ldr	r3, [pc, #224]	; (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	2200      	movs	r2, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	4611      	mov	r1, r2
 80029e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029ea:	623b      	str	r3, [r7, #32]
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
 80029f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029f4:	4642      	mov	r2, r8
 80029f6:	464b      	mov	r3, r9
 80029f8:	f04f 0000 	mov.w	r0, #0
 80029fc:	f04f 0100 	mov.w	r1, #0
 8002a00:	0159      	lsls	r1, r3, #5
 8002a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a06:	0150      	lsls	r0, r2, #5
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4641      	mov	r1, r8
 8002a0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a12:	4649      	mov	r1, r9
 8002a14:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a2c:	ebb2 040a 	subs.w	r4, r2, sl
 8002a30:	eb63 050b 	sbc.w	r5, r3, fp
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	00eb      	lsls	r3, r5, #3
 8002a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a42:	00e2      	lsls	r2, r4, #3
 8002a44:	4614      	mov	r4, r2
 8002a46:	461d      	mov	r5, r3
 8002a48:	4643      	mov	r3, r8
 8002a4a:	18e3      	adds	r3, r4, r3
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	464b      	mov	r3, r9
 8002a50:	eb45 0303 	adc.w	r3, r5, r3
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a62:	4629      	mov	r1, r5
 8002a64:	028b      	lsls	r3, r1, #10
 8002a66:	4621      	mov	r1, r4
 8002a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	028a      	lsls	r2, r1, #10
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a76:	2200      	movs	r2, #0
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	61fa      	str	r2, [r7, #28]
 8002a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a80:	f7fe f866 	bl	8000b50 <__aeabi_uldivmod>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4613      	mov	r3, r2
 8002a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	3301      	adds	r3, #1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aa6:	e002      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3750      	adds	r7, #80	; 0x50
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	00f42400 	.word	0x00f42400
 8002ac4:	007a1200 	.word	0x007a1200

08002ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000270 	.word	0x20000270

08002ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ae4:	f7ff fff0 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0a9b      	lsrs	r3, r3, #10
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4903      	ldr	r1, [pc, #12]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	080051c8 	.word	0x080051c8

08002b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b0c:	f7ff ffdc 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0b5b      	lsrs	r3, r3, #13
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4903      	ldr	r1, [pc, #12]	; (8002b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	080051c8 	.word	0x080051c8

08002b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e041      	b.n	8002bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe feae 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f000 fcb8 	bl	80034e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d001      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e044      	b.n	8002c72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1e      	ldr	r2, [pc, #120]	; (8002c80 <HAL_TIM_Base_Start_IT+0xb0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d018      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0x6c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c12:	d013      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0x6c>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1a      	ldr	r2, [pc, #104]	; (8002c84 <HAL_TIM_Base_Start_IT+0xb4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00e      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0x6c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a19      	ldr	r2, [pc, #100]	; (8002c88 <HAL_TIM_Base_Start_IT+0xb8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d009      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0x6c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <HAL_TIM_Base_Start_IT+0xbc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d004      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0x6c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a16      	ldr	r2, [pc, #88]	; (8002c90 <HAL_TIM_Base_Start_IT+0xc0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d111      	bne.n	8002c60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d010      	beq.n	8002c70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0201 	orr.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5e:	e007      	b.n	8002c70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40010000 	.word	0x40010000
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40000800 	.word	0x40000800
 8002c8c:	40000c00 	.word	0x40000c00
 8002c90:	40014000 	.word	0x40014000

08002c94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e041      	b.n	8002d2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f839 	bl	8002d32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f000 fc06 	bl	80034e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_TIM_PWM_Start+0x24>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e022      	b.n	8002db2 <HAL_TIM_PWM_Start+0x6a>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d109      	bne.n	8002d86 <HAL_TIM_PWM_Start+0x3e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	bf14      	ite	ne
 8002d7e:	2301      	movne	r3, #1
 8002d80:	2300      	moveq	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	e015      	b.n	8002db2 <HAL_TIM_PWM_Start+0x6a>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d109      	bne.n	8002da0 <HAL_TIM_PWM_Start+0x58>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e008      	b.n	8002db2 <HAL_TIM_PWM_Start+0x6a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	bf14      	ite	ne
 8002dac:	2301      	movne	r3, #1
 8002dae:	2300      	moveq	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e068      	b.n	8002e8c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d104      	bne.n	8002dca <HAL_TIM_PWM_Start+0x82>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dc8:	e013      	b.n	8002df2 <HAL_TIM_PWM_Start+0xaa>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_PWM_Start+0x92>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd8:	e00b      	b.n	8002df2 <HAL_TIM_PWM_Start+0xaa>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_PWM_Start+0xa2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de8:	e003      	b.n	8002df2 <HAL_TIM_PWM_Start+0xaa>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2201      	movs	r2, #1
 8002df8:	6839      	ldr	r1, [r7, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fe18 	bl	8003a30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a23      	ldr	r2, [pc, #140]	; (8002e94 <HAL_TIM_PWM_Start+0x14c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d107      	bne.n	8002e1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1d      	ldr	r2, [pc, #116]	; (8002e94 <HAL_TIM_PWM_Start+0x14c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d018      	beq.n	8002e56 <HAL_TIM_PWM_Start+0x10e>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2c:	d013      	beq.n	8002e56 <HAL_TIM_PWM_Start+0x10e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <HAL_TIM_PWM_Start+0x150>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d00e      	beq.n	8002e56 <HAL_TIM_PWM_Start+0x10e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <HAL_TIM_PWM_Start+0x154>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d009      	beq.n	8002e56 <HAL_TIM_PWM_Start+0x10e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a16      	ldr	r2, [pc, #88]	; (8002ea0 <HAL_TIM_PWM_Start+0x158>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d004      	beq.n	8002e56 <HAL_TIM_PWM_Start+0x10e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a14      	ldr	r2, [pc, #80]	; (8002ea4 <HAL_TIM_PWM_Start+0x15c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d111      	bne.n	8002e7a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b06      	cmp	r3, #6
 8002e66:	d010      	beq.n	8002e8a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e78:	e007      	b.n	8002e8a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0201 	orr.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40010000 	.word	0x40010000
 8002e98:	40000400 	.word	0x40000400
 8002e9c:	40000800 	.word	0x40000800
 8002ea0:	40000c00 	.word	0x40000c00
 8002ea4:	40014000 	.word	0x40014000

08002ea8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	6839      	ldr	r1, [r7, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fdb8 	bl	8003a30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a29      	ldr	r2, [pc, #164]	; (8002f6c <HAL_TIM_PWM_Stop+0xc4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d117      	bne.n	8002efa <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6a1a      	ldr	r2, [r3, #32]
 8002ed0:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10f      	bne.n	8002efa <HAL_TIM_PWM_Stop+0x52>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a1a      	ldr	r2, [r3, #32]
 8002ee0:	f240 4344 	movw	r3, #1092	; 0x444
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d107      	bne.n	8002efa <HAL_TIM_PWM_Stop+0x52>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10f      	bne.n	8002f2a <HAL_TIM_PWM_Stop+0x82>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6a1a      	ldr	r2, [r3, #32]
 8002f10:	f240 4344 	movw	r3, #1092	; 0x444
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d107      	bne.n	8002f2a <HAL_TIM_PWM_Stop+0x82>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d104      	bne.n	8002f3a <HAL_TIM_PWM_Stop+0x92>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f38:	e013      	b.n	8002f62 <HAL_TIM_PWM_Stop+0xba>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d104      	bne.n	8002f4a <HAL_TIM_PWM_Stop+0xa2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f48:	e00b      	b.n	8002f62 <HAL_TIM_PWM_Stop+0xba>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d104      	bne.n	8002f5a <HAL_TIM_PWM_Stop+0xb2>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f58:	e003      	b.n	8002f62 <HAL_TIM_PWM_Stop+0xba>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40010000 	.word	0x40010000

08002f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0202 	mvn.w	r2, #2
 8002f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fa77 	bl	80034a6 <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fa69 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fa7a 	bl	80034ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0204 	mvn.w	r2, #4
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fa4d 	bl	80034a6 <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fa3f 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fa50 	bl	80034ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b08      	cmp	r3, #8
 800302c:	d122      	bne.n	8003074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b08      	cmp	r3, #8
 800303a:	d11b      	bne.n	8003074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0208 	mvn.w	r2, #8
 8003044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2204      	movs	r2, #4
 800304a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fa23 	bl	80034a6 <HAL_TIM_IC_CaptureCallback>
 8003060:	e005      	b.n	800306e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fa15 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fa26 	bl	80034ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b10      	cmp	r3, #16
 8003080:	d122      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b10      	cmp	r3, #16
 800308e:	d11b      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0210 	mvn.w	r2, #16
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2208      	movs	r2, #8
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f9f9 	bl	80034a6 <HAL_TIM_IC_CaptureCallback>
 80030b4:	e005      	b.n	80030c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f9eb 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f9fc 	bl	80034ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d10e      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d107      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0201 	mvn.w	r2, #1
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe f998 	bl	8001424 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	2b80      	cmp	r3, #128	; 0x80
 8003100:	d10e      	bne.n	8003120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310c:	2b80      	cmp	r3, #128	; 0x80
 800310e:	d107      	bne.n	8003120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fd78 	bl	8003c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d10e      	bne.n	800314c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d107      	bne.n	800314c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f9c1 	bl	80034ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b20      	cmp	r3, #32
 8003158:	d10e      	bne.n	8003178 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b20      	cmp	r3, #32
 8003166:	d107      	bne.n	8003178 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0220 	mvn.w	r2, #32
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fd42 	bl	8003bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800319a:	2302      	movs	r3, #2
 800319c:	e0ae      	b.n	80032fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b0c      	cmp	r3, #12
 80031aa:	f200 809f 	bhi.w	80032ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031e9 	.word	0x080031e9
 80031b8:	080032ed 	.word	0x080032ed
 80031bc:	080032ed 	.word	0x080032ed
 80031c0:	080032ed 	.word	0x080032ed
 80031c4:	08003229 	.word	0x08003229
 80031c8:	080032ed 	.word	0x080032ed
 80031cc:	080032ed 	.word	0x080032ed
 80031d0:	080032ed 	.word	0x080032ed
 80031d4:	0800326b 	.word	0x0800326b
 80031d8:	080032ed 	.word	0x080032ed
 80031dc:	080032ed 	.word	0x080032ed
 80031e0:	080032ed 	.word	0x080032ed
 80031e4:	080032ab 	.word	0x080032ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 f9f8 	bl	80035e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0208 	orr.w	r2, r2, #8
 8003202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0204 	bic.w	r2, r2, #4
 8003212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6999      	ldr	r1, [r3, #24]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	691a      	ldr	r2, [r3, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	619a      	str	r2, [r3, #24]
      break;
 8003226:	e064      	b.n	80032f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fa3e 	bl	80036b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6999      	ldr	r1, [r3, #24]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	021a      	lsls	r2, r3, #8
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	619a      	str	r2, [r3, #24]
      break;
 8003268:	e043      	b.n	80032f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fa89 	bl	8003788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0208 	orr.w	r2, r2, #8
 8003284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69da      	ldr	r2, [r3, #28]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0204 	bic.w	r2, r2, #4
 8003294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69d9      	ldr	r1, [r3, #28]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	61da      	str	r2, [r3, #28]
      break;
 80032a8:	e023      	b.n	80032f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fad3 	bl	800385c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69da      	ldr	r2, [r3, #28]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69d9      	ldr	r1, [r3, #28]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	021a      	lsls	r2, r3, #8
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	61da      	str	r2, [r3, #28]
      break;
 80032ea:	e002      	b.n	80032f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	75fb      	strb	r3, [r7, #23]
      break;
 80032f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_TIM_ConfigClockSource+0x1c>
 800331c:	2302      	movs	r3, #2
 800331e:	e0b4      	b.n	800348a <HAL_TIM_ConfigClockSource+0x186>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800333e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003346:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003358:	d03e      	beq.n	80033d8 <HAL_TIM_ConfigClockSource+0xd4>
 800335a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335e:	f200 8087 	bhi.w	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003366:	f000 8086 	beq.w	8003476 <HAL_TIM_ConfigClockSource+0x172>
 800336a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336e:	d87f      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003370:	2b70      	cmp	r3, #112	; 0x70
 8003372:	d01a      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0xa6>
 8003374:	2b70      	cmp	r3, #112	; 0x70
 8003376:	d87b      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003378:	2b60      	cmp	r3, #96	; 0x60
 800337a:	d050      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x11a>
 800337c:	2b60      	cmp	r3, #96	; 0x60
 800337e:	d877      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003380:	2b50      	cmp	r3, #80	; 0x50
 8003382:	d03c      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0xfa>
 8003384:	2b50      	cmp	r3, #80	; 0x50
 8003386:	d873      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d058      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x13a>
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d86f      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003390:	2b30      	cmp	r3, #48	; 0x30
 8003392:	d064      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x15a>
 8003394:	2b30      	cmp	r3, #48	; 0x30
 8003396:	d86b      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003398:	2b20      	cmp	r3, #32
 800339a:	d060      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x15a>
 800339c:	2b20      	cmp	r3, #32
 800339e:	d867      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d05c      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x15a>
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d05a      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x15a>
 80033a8:	e062      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6899      	ldr	r1, [r3, #8]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f000 fb19 	bl	80039f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	609a      	str	r2, [r3, #8]
      break;
 80033d6:	e04f      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6899      	ldr	r1, [r3, #8]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f000 fb02 	bl	80039f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033fa:	609a      	str	r2, [r3, #8]
      break;
 80033fc:	e03c      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	461a      	mov	r2, r3
 800340c:	f000 fa76 	bl	80038fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2150      	movs	r1, #80	; 0x50
 8003416:	4618      	mov	r0, r3
 8003418:	f000 facf 	bl	80039ba <TIM_ITRx_SetConfig>
      break;
 800341c:	e02c      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	461a      	mov	r2, r3
 800342c:	f000 fa95 	bl	800395a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2160      	movs	r1, #96	; 0x60
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fabf 	bl	80039ba <TIM_ITRx_SetConfig>
      break;
 800343c:	e01c      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	461a      	mov	r2, r3
 800344c:	f000 fa56 	bl	80038fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2140      	movs	r1, #64	; 0x40
 8003456:	4618      	mov	r0, r3
 8003458:	f000 faaf 	bl	80039ba <TIM_ITRx_SetConfig>
      break;
 800345c:	e00c      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f000 faa6 	bl	80039ba <TIM_ITRx_SetConfig>
      break;
 800346e:	e003      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
      break;
 8003474:	e000      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a34      	ldr	r2, [pc, #208]	; (80035c8 <TIM_Base_SetConfig+0xe4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00f      	beq.n	800351c <TIM_Base_SetConfig+0x38>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003502:	d00b      	beq.n	800351c <TIM_Base_SetConfig+0x38>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a31      	ldr	r2, [pc, #196]	; (80035cc <TIM_Base_SetConfig+0xe8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d007      	beq.n	800351c <TIM_Base_SetConfig+0x38>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a30      	ldr	r2, [pc, #192]	; (80035d0 <TIM_Base_SetConfig+0xec>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_Base_SetConfig+0x38>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a2f      	ldr	r2, [pc, #188]	; (80035d4 <TIM_Base_SetConfig+0xf0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d108      	bne.n	800352e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <TIM_Base_SetConfig+0xe4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d01b      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353c:	d017      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a22      	ldr	r2, [pc, #136]	; (80035cc <TIM_Base_SetConfig+0xe8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a21      	ldr	r2, [pc, #132]	; (80035d0 <TIM_Base_SetConfig+0xec>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00f      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a20      	ldr	r2, [pc, #128]	; (80035d4 <TIM_Base_SetConfig+0xf0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00b      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <TIM_Base_SetConfig+0xf4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d007      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <TIM_Base_SetConfig+0xf8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d003      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <TIM_Base_SetConfig+0xfc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d108      	bne.n	8003580 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a08      	ldr	r2, [pc, #32]	; (80035c8 <TIM_Base_SetConfig+0xe4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d103      	bne.n	80035b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	615a      	str	r2, [r3, #20]
}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40010000 	.word	0x40010000
 80035cc:	40000400 	.word	0x40000400
 80035d0:	40000800 	.word	0x40000800
 80035d4:	40000c00 	.word	0x40000c00
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40014400 	.word	0x40014400
 80035e0:	40014800 	.word	0x40014800

080035e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f023 0201 	bic.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0303 	bic.w	r3, r3, #3
 800361a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f023 0302 	bic.w	r3, r3, #2
 800362c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <TIM_OC1_SetConfig+0xc8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d10c      	bne.n	800365a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f023 0308 	bic.w	r3, r3, #8
 8003646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f023 0304 	bic.w	r3, r3, #4
 8003658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a13      	ldr	r2, [pc, #76]	; (80036ac <TIM_OC1_SetConfig+0xc8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d111      	bne.n	8003686 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	621a      	str	r2, [r3, #32]
}
 80036a0:	bf00      	nop
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40010000 	.word	0x40010000

080036b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	f023 0210 	bic.w	r2, r3, #16
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f023 0320 	bic.w	r3, r3, #32
 80036fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a1e      	ldr	r2, [pc, #120]	; (8003784 <TIM_OC2_SetConfig+0xd4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d10d      	bne.n	800372c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800372a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a15      	ldr	r2, [pc, #84]	; (8003784 <TIM_OC2_SetConfig+0xd4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d113      	bne.n	800375c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800373a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003742:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	621a      	str	r2, [r3, #32]
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40010000 	.word	0x40010000

08003788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0303 	bic.w	r3, r3, #3
 80037be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a1d      	ldr	r2, [pc, #116]	; (8003858 <TIM_OC3_SetConfig+0xd0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10d      	bne.n	8003802 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a14      	ldr	r2, [pc, #80]	; (8003858 <TIM_OC3_SetConfig+0xd0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d113      	bne.n	8003832 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	621a      	str	r2, [r3, #32]
}
 800384c:	bf00      	nop
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	40010000 	.word	0x40010000

0800385c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	031b      	lsls	r3, r3, #12
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a10      	ldr	r2, [pc, #64]	; (80038f8 <TIM_OC4_SetConfig+0x9c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d109      	bne.n	80038d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	019b      	lsls	r3, r3, #6
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	621a      	str	r2, [r3, #32]
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40010000 	.word	0x40010000

080038fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f023 0201 	bic.w	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f023 030a 	bic.w	r3, r3, #10
 8003938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	621a      	str	r2, [r3, #32]
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800395a:	b480      	push	{r7}
 800395c:	b087      	sub	sp, #28
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	f023 0210 	bic.w	r2, r3, #16
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003984:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	031b      	lsls	r3, r3, #12
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003996:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	621a      	str	r2, [r3, #32]
}
 80039ae:	bf00      	nop
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b085      	sub	sp, #20
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f043 0307 	orr.w	r3, r3, #7
 80039dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	021a      	lsls	r2, r3, #8
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	609a      	str	r2, [r3, #8]
}
 8003a24:	bf00      	nop
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	2201      	movs	r2, #1
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a1a      	ldr	r2, [r3, #32]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	43db      	mvns	r3, r3
 8003a52:	401a      	ands	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a1a      	ldr	r2, [r3, #32]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	fa01 f303 	lsl.w	r3, r1, r3
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	621a      	str	r2, [r3, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
	...

08003a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e050      	b.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d018      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae0:	d013      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00e      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d009      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d004      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a13      	ldr	r2, [pc, #76]	; (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d10c      	bne.n	8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40010000 	.word	0x40010000
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800
 8003b50:	40000c00 	.word	0x40000c00
 8003b54:	40014000 	.word	0x40014000

08003b58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e03d      	b.n	8003bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e03f      	b.n	8003cb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd fed2 	bl	80019f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2224      	movs	r2, #36	; 0x24
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f829 	bl	8003cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695a      	ldr	r2, [r3, #20]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc4:	b0c0      	sub	sp, #256	; 0x100
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	68d9      	ldr	r1, [r3, #12]
 8003cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	ea40 0301 	orr.w	r3, r0, r1
 8003ce8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d18:	f021 010c 	bic.w	r1, r1, #12
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d26:	430b      	orrs	r3, r1
 8003d28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3a:	6999      	ldr	r1, [r3, #24]
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	ea40 0301 	orr.w	r3, r0, r1
 8003d46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4b8f      	ldr	r3, [pc, #572]	; (8003f8c <UART_SetConfig+0x2cc>)
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d005      	beq.n	8003d60 <UART_SetConfig+0xa0>
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b8d      	ldr	r3, [pc, #564]	; (8003f90 <UART_SetConfig+0x2d0>)
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d104      	bne.n	8003d6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d60:	f7fe fed2 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 8003d64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d68:	e003      	b.n	8003d72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d6a:	f7fe feb9 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8003d6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7c:	f040 810c 	bne.w	8003f98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d92:	4622      	mov	r2, r4
 8003d94:	462b      	mov	r3, r5
 8003d96:	1891      	adds	r1, r2, r2
 8003d98:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d9a:	415b      	adcs	r3, r3
 8003d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003da2:	4621      	mov	r1, r4
 8003da4:	eb12 0801 	adds.w	r8, r2, r1
 8003da8:	4629      	mov	r1, r5
 8003daa:	eb43 0901 	adc.w	r9, r3, r1
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dc2:	4690      	mov	r8, r2
 8003dc4:	4699      	mov	r9, r3
 8003dc6:	4623      	mov	r3, r4
 8003dc8:	eb18 0303 	adds.w	r3, r8, r3
 8003dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003dd0:	462b      	mov	r3, r5
 8003dd2:	eb49 0303 	adc.w	r3, r9, r3
 8003dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003de6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003dea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dee:	460b      	mov	r3, r1
 8003df0:	18db      	adds	r3, r3, r3
 8003df2:	653b      	str	r3, [r7, #80]	; 0x50
 8003df4:	4613      	mov	r3, r2
 8003df6:	eb42 0303 	adc.w	r3, r2, r3
 8003dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8003dfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e04:	f7fc fea4 	bl	8000b50 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4b61      	ldr	r3, [pc, #388]	; (8003f94 <UART_SetConfig+0x2d4>)
 8003e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	011c      	lsls	r4, r3, #4
 8003e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e28:	4642      	mov	r2, r8
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	1891      	adds	r1, r2, r2
 8003e2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e30:	415b      	adcs	r3, r3
 8003e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e38:	4641      	mov	r1, r8
 8003e3a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e3e:	4649      	mov	r1, r9
 8003e40:	eb43 0b01 	adc.w	fp, r3, r1
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e58:	4692      	mov	sl, r2
 8003e5a:	469b      	mov	fp, r3
 8003e5c:	4643      	mov	r3, r8
 8003e5e:	eb1a 0303 	adds.w	r3, sl, r3
 8003e62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e66:	464b      	mov	r3, r9
 8003e68:	eb4b 0303 	adc.w	r3, fp, r3
 8003e6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e84:	460b      	mov	r3, r1
 8003e86:	18db      	adds	r3, r3, r3
 8003e88:	643b      	str	r3, [r7, #64]	; 0x40
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	eb42 0303 	adc.w	r3, r2, r3
 8003e90:	647b      	str	r3, [r7, #68]	; 0x44
 8003e92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e9a:	f7fc fe59 	bl	8000b50 <__aeabi_uldivmod>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	4b3b      	ldr	r3, [pc, #236]	; (8003f94 <UART_SetConfig+0x2d4>)
 8003ea6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	2264      	movs	r2, #100	; 0x64
 8003eae:	fb02 f303 	mul.w	r3, r2, r3
 8003eb2:	1acb      	subs	r3, r1, r3
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003eba:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <UART_SetConfig+0x2d4>)
 8003ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ec8:	441c      	add	r4, r3
 8003eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ed4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ed8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003edc:	4642      	mov	r2, r8
 8003ede:	464b      	mov	r3, r9
 8003ee0:	1891      	adds	r1, r2, r2
 8003ee2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ee4:	415b      	adcs	r3, r3
 8003ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003eec:	4641      	mov	r1, r8
 8003eee:	1851      	adds	r1, r2, r1
 8003ef0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	414b      	adcs	r3, r1
 8003ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f04:	4659      	mov	r1, fp
 8003f06:	00cb      	lsls	r3, r1, #3
 8003f08:	4651      	mov	r1, sl
 8003f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f0e:	4651      	mov	r1, sl
 8003f10:	00ca      	lsls	r2, r1, #3
 8003f12:	4610      	mov	r0, r2
 8003f14:	4619      	mov	r1, r3
 8003f16:	4603      	mov	r3, r0
 8003f18:	4642      	mov	r2, r8
 8003f1a:	189b      	adds	r3, r3, r2
 8003f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f20:	464b      	mov	r3, r9
 8003f22:	460a      	mov	r2, r1
 8003f24:	eb42 0303 	adc.w	r3, r2, r3
 8003f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f40:	460b      	mov	r3, r1
 8003f42:	18db      	adds	r3, r3, r3
 8003f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f46:	4613      	mov	r3, r2
 8003f48:	eb42 0303 	adc.w	r3, r2, r3
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f56:	f7fc fdfb 	bl	8000b50 <__aeabi_uldivmod>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <UART_SetConfig+0x2d4>)
 8003f60:	fba3 1302 	umull	r1, r3, r3, r2
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	2164      	movs	r1, #100	; 0x64
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	3332      	adds	r3, #50	; 0x32
 8003f72:	4a08      	ldr	r2, [pc, #32]	; (8003f94 <UART_SetConfig+0x2d4>)
 8003f74:	fba2 2303 	umull	r2, r3, r2, r3
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	f003 0207 	and.w	r2, r3, #7
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4422      	add	r2, r4
 8003f86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f88:	e106      	b.n	8004198 <UART_SetConfig+0x4d8>
 8003f8a:	bf00      	nop
 8003f8c:	40011000 	.word	0x40011000
 8003f90:	40011400 	.word	0x40011400
 8003f94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fa2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003faa:	4642      	mov	r2, r8
 8003fac:	464b      	mov	r3, r9
 8003fae:	1891      	adds	r1, r2, r2
 8003fb0:	6239      	str	r1, [r7, #32]
 8003fb2:	415b      	adcs	r3, r3
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fba:	4641      	mov	r1, r8
 8003fbc:	1854      	adds	r4, r2, r1
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	eb43 0501 	adc.w	r5, r3, r1
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	00eb      	lsls	r3, r5, #3
 8003fce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fd2:	00e2      	lsls	r2, r4, #3
 8003fd4:	4614      	mov	r4, r2
 8003fd6:	461d      	mov	r5, r3
 8003fd8:	4643      	mov	r3, r8
 8003fda:	18e3      	adds	r3, r4, r3
 8003fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	eb45 0303 	adc.w	r3, r5, r3
 8003fe6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ff6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004006:	4629      	mov	r1, r5
 8004008:	008b      	lsls	r3, r1, #2
 800400a:	4621      	mov	r1, r4
 800400c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004010:	4621      	mov	r1, r4
 8004012:	008a      	lsls	r2, r1, #2
 8004014:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004018:	f7fc fd9a 	bl	8000b50 <__aeabi_uldivmod>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4b60      	ldr	r3, [pc, #384]	; (80041a4 <UART_SetConfig+0x4e4>)
 8004022:	fba3 2302 	umull	r2, r3, r3, r2
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	011c      	lsls	r4, r3, #4
 800402a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800402e:	2200      	movs	r2, #0
 8004030:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004034:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004038:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800403c:	4642      	mov	r2, r8
 800403e:	464b      	mov	r3, r9
 8004040:	1891      	adds	r1, r2, r2
 8004042:	61b9      	str	r1, [r7, #24]
 8004044:	415b      	adcs	r3, r3
 8004046:	61fb      	str	r3, [r7, #28]
 8004048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800404c:	4641      	mov	r1, r8
 800404e:	1851      	adds	r1, r2, r1
 8004050:	6139      	str	r1, [r7, #16]
 8004052:	4649      	mov	r1, r9
 8004054:	414b      	adcs	r3, r1
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004064:	4659      	mov	r1, fp
 8004066:	00cb      	lsls	r3, r1, #3
 8004068:	4651      	mov	r1, sl
 800406a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800406e:	4651      	mov	r1, sl
 8004070:	00ca      	lsls	r2, r1, #3
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	4603      	mov	r3, r0
 8004078:	4642      	mov	r2, r8
 800407a:	189b      	adds	r3, r3, r2
 800407c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004080:	464b      	mov	r3, r9
 8004082:	460a      	mov	r2, r1
 8004084:	eb42 0303 	adc.w	r3, r2, r3
 8004088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	67bb      	str	r3, [r7, #120]	; 0x78
 8004096:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040a4:	4649      	mov	r1, r9
 80040a6:	008b      	lsls	r3, r1, #2
 80040a8:	4641      	mov	r1, r8
 80040aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ae:	4641      	mov	r1, r8
 80040b0:	008a      	lsls	r2, r1, #2
 80040b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040b6:	f7fc fd4b 	bl	8000b50 <__aeabi_uldivmod>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4611      	mov	r1, r2
 80040c0:	4b38      	ldr	r3, [pc, #224]	; (80041a4 <UART_SetConfig+0x4e4>)
 80040c2:	fba3 2301 	umull	r2, r3, r3, r1
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	2264      	movs	r2, #100	; 0x64
 80040ca:	fb02 f303 	mul.w	r3, r2, r3
 80040ce:	1acb      	subs	r3, r1, r3
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	3332      	adds	r3, #50	; 0x32
 80040d4:	4a33      	ldr	r2, [pc, #204]	; (80041a4 <UART_SetConfig+0x4e4>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e0:	441c      	add	r4, r3
 80040e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e6:	2200      	movs	r2, #0
 80040e8:	673b      	str	r3, [r7, #112]	; 0x70
 80040ea:	677a      	str	r2, [r7, #116]	; 0x74
 80040ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040f0:	4642      	mov	r2, r8
 80040f2:	464b      	mov	r3, r9
 80040f4:	1891      	adds	r1, r2, r2
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	415b      	adcs	r3, r3
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004100:	4641      	mov	r1, r8
 8004102:	1851      	adds	r1, r2, r1
 8004104:	6039      	str	r1, [r7, #0]
 8004106:	4649      	mov	r1, r9
 8004108:	414b      	adcs	r3, r1
 800410a:	607b      	str	r3, [r7, #4]
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004118:	4659      	mov	r1, fp
 800411a:	00cb      	lsls	r3, r1, #3
 800411c:	4651      	mov	r1, sl
 800411e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004122:	4651      	mov	r1, sl
 8004124:	00ca      	lsls	r2, r1, #3
 8004126:	4610      	mov	r0, r2
 8004128:	4619      	mov	r1, r3
 800412a:	4603      	mov	r3, r0
 800412c:	4642      	mov	r2, r8
 800412e:	189b      	adds	r3, r3, r2
 8004130:	66bb      	str	r3, [r7, #104]	; 0x68
 8004132:	464b      	mov	r3, r9
 8004134:	460a      	mov	r2, r1
 8004136:	eb42 0303 	adc.w	r3, r2, r3
 800413a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	663b      	str	r3, [r7, #96]	; 0x60
 8004146:	667a      	str	r2, [r7, #100]	; 0x64
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004154:	4649      	mov	r1, r9
 8004156:	008b      	lsls	r3, r1, #2
 8004158:	4641      	mov	r1, r8
 800415a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800415e:	4641      	mov	r1, r8
 8004160:	008a      	lsls	r2, r1, #2
 8004162:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004166:	f7fc fcf3 	bl	8000b50 <__aeabi_uldivmod>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <UART_SetConfig+0x4e4>)
 8004170:	fba3 1302 	umull	r1, r3, r3, r2
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	2164      	movs	r1, #100	; 0x64
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	3332      	adds	r3, #50	; 0x32
 8004182:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <UART_SetConfig+0x4e4>)
 8004184:	fba2 2303 	umull	r2, r3, r2, r3
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	f003 020f 	and.w	r2, r3, #15
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4422      	add	r2, r4
 8004196:	609a      	str	r2, [r3, #8]
}
 8004198:	bf00      	nop
 800419a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800419e:	46bd      	mov	sp, r7
 80041a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041a4:	51eb851f 	.word	0x51eb851f

080041a8 <pow>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	ed2d 8b02 	vpush	{d8}
 80041ae:	eeb0 8a40 	vmov.f32	s16, s0
 80041b2:	eef0 8a60 	vmov.f32	s17, s1
 80041b6:	ec55 4b11 	vmov	r4, r5, d1
 80041ba:	f000 f871 	bl	80042a0 <__ieee754_pow>
 80041be:	4622      	mov	r2, r4
 80041c0:	462b      	mov	r3, r5
 80041c2:	4620      	mov	r0, r4
 80041c4:	4629      	mov	r1, r5
 80041c6:	ec57 6b10 	vmov	r6, r7, d0
 80041ca:	f7fc fc5b 	bl	8000a84 <__aeabi_dcmpun>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d13b      	bne.n	800424a <pow+0xa2>
 80041d2:	ec51 0b18 	vmov	r0, r1, d8
 80041d6:	2200      	movs	r2, #0
 80041d8:	2300      	movs	r3, #0
 80041da:	f7fc fc21 	bl	8000a20 <__aeabi_dcmpeq>
 80041de:	b1b8      	cbz	r0, 8004210 <pow+0x68>
 80041e0:	2200      	movs	r2, #0
 80041e2:	2300      	movs	r3, #0
 80041e4:	4620      	mov	r0, r4
 80041e6:	4629      	mov	r1, r5
 80041e8:	f7fc fc1a 	bl	8000a20 <__aeabi_dcmpeq>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d146      	bne.n	800427e <pow+0xd6>
 80041f0:	ec45 4b10 	vmov	d0, r4, r5
 80041f4:	f000 f848 	bl	8004288 <finite>
 80041f8:	b338      	cbz	r0, 800424a <pow+0xa2>
 80041fa:	2200      	movs	r2, #0
 80041fc:	2300      	movs	r3, #0
 80041fe:	4620      	mov	r0, r4
 8004200:	4629      	mov	r1, r5
 8004202:	f7fc fc17 	bl	8000a34 <__aeabi_dcmplt>
 8004206:	b300      	cbz	r0, 800424a <pow+0xa2>
 8004208:	f000 ff9e 	bl	8005148 <__errno>
 800420c:	2322      	movs	r3, #34	; 0x22
 800420e:	e01b      	b.n	8004248 <pow+0xa0>
 8004210:	ec47 6b10 	vmov	d0, r6, r7
 8004214:	f000 f838 	bl	8004288 <finite>
 8004218:	b9e0      	cbnz	r0, 8004254 <pow+0xac>
 800421a:	eeb0 0a48 	vmov.f32	s0, s16
 800421e:	eef0 0a68 	vmov.f32	s1, s17
 8004222:	f000 f831 	bl	8004288 <finite>
 8004226:	b1a8      	cbz	r0, 8004254 <pow+0xac>
 8004228:	ec45 4b10 	vmov	d0, r4, r5
 800422c:	f000 f82c 	bl	8004288 <finite>
 8004230:	b180      	cbz	r0, 8004254 <pow+0xac>
 8004232:	4632      	mov	r2, r6
 8004234:	463b      	mov	r3, r7
 8004236:	4630      	mov	r0, r6
 8004238:	4639      	mov	r1, r7
 800423a:	f7fc fc23 	bl	8000a84 <__aeabi_dcmpun>
 800423e:	2800      	cmp	r0, #0
 8004240:	d0e2      	beq.n	8004208 <pow+0x60>
 8004242:	f000 ff81 	bl	8005148 <__errno>
 8004246:	2321      	movs	r3, #33	; 0x21
 8004248:	6003      	str	r3, [r0, #0]
 800424a:	ecbd 8b02 	vpop	{d8}
 800424e:	ec47 6b10 	vmov	d0, r6, r7
 8004252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004254:	2200      	movs	r2, #0
 8004256:	2300      	movs	r3, #0
 8004258:	4630      	mov	r0, r6
 800425a:	4639      	mov	r1, r7
 800425c:	f7fc fbe0 	bl	8000a20 <__aeabi_dcmpeq>
 8004260:	2800      	cmp	r0, #0
 8004262:	d0f2      	beq.n	800424a <pow+0xa2>
 8004264:	eeb0 0a48 	vmov.f32	s0, s16
 8004268:	eef0 0a68 	vmov.f32	s1, s17
 800426c:	f000 f80c 	bl	8004288 <finite>
 8004270:	2800      	cmp	r0, #0
 8004272:	d0ea      	beq.n	800424a <pow+0xa2>
 8004274:	ec45 4b10 	vmov	d0, r4, r5
 8004278:	f000 f806 	bl	8004288 <finite>
 800427c:	e7c3      	b.n	8004206 <pow+0x5e>
 800427e:	4f01      	ldr	r7, [pc, #4]	; (8004284 <pow+0xdc>)
 8004280:	2600      	movs	r6, #0
 8004282:	e7e2      	b.n	800424a <pow+0xa2>
 8004284:	3ff00000 	.word	0x3ff00000

08004288 <finite>:
 8004288:	b082      	sub	sp, #8
 800428a:	ed8d 0b00 	vstr	d0, [sp]
 800428e:	9801      	ldr	r0, [sp, #4]
 8004290:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004294:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004298:	0fc0      	lsrs	r0, r0, #31
 800429a:	b002      	add	sp, #8
 800429c:	4770      	bx	lr
	...

080042a0 <__ieee754_pow>:
 80042a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a4:	ed2d 8b06 	vpush	{d8-d10}
 80042a8:	b089      	sub	sp, #36	; 0x24
 80042aa:	ed8d 1b00 	vstr	d1, [sp]
 80042ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 80042b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80042b6:	ea58 0102 	orrs.w	r1, r8, r2
 80042ba:	ec57 6b10 	vmov	r6, r7, d0
 80042be:	d115      	bne.n	80042ec <__ieee754_pow+0x4c>
 80042c0:	19b3      	adds	r3, r6, r6
 80042c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80042c6:	4152      	adcs	r2, r2
 80042c8:	4299      	cmp	r1, r3
 80042ca:	4b89      	ldr	r3, [pc, #548]	; (80044f0 <__ieee754_pow+0x250>)
 80042cc:	4193      	sbcs	r3, r2
 80042ce:	f080 84d1 	bcs.w	8004c74 <__ieee754_pow+0x9d4>
 80042d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042d6:	4630      	mov	r0, r6
 80042d8:	4639      	mov	r1, r7
 80042da:	f7fb ff83 	bl	80001e4 <__adddf3>
 80042de:	ec41 0b10 	vmov	d0, r0, r1
 80042e2:	b009      	add	sp, #36	; 0x24
 80042e4:	ecbd 8b06 	vpop	{d8-d10}
 80042e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ec:	4b81      	ldr	r3, [pc, #516]	; (80044f4 <__ieee754_pow+0x254>)
 80042ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80042f2:	429c      	cmp	r4, r3
 80042f4:	ee10 aa10 	vmov	sl, s0
 80042f8:	463d      	mov	r5, r7
 80042fa:	dc06      	bgt.n	800430a <__ieee754_pow+0x6a>
 80042fc:	d101      	bne.n	8004302 <__ieee754_pow+0x62>
 80042fe:	2e00      	cmp	r6, #0
 8004300:	d1e7      	bne.n	80042d2 <__ieee754_pow+0x32>
 8004302:	4598      	cmp	r8, r3
 8004304:	dc01      	bgt.n	800430a <__ieee754_pow+0x6a>
 8004306:	d10f      	bne.n	8004328 <__ieee754_pow+0x88>
 8004308:	b172      	cbz	r2, 8004328 <__ieee754_pow+0x88>
 800430a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800430e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004312:	ea55 050a 	orrs.w	r5, r5, sl
 8004316:	d1dc      	bne.n	80042d2 <__ieee754_pow+0x32>
 8004318:	e9dd 3200 	ldrd	r3, r2, [sp]
 800431c:	18db      	adds	r3, r3, r3
 800431e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004322:	4152      	adcs	r2, r2
 8004324:	429d      	cmp	r5, r3
 8004326:	e7d0      	b.n	80042ca <__ieee754_pow+0x2a>
 8004328:	2d00      	cmp	r5, #0
 800432a:	da3b      	bge.n	80043a4 <__ieee754_pow+0x104>
 800432c:	4b72      	ldr	r3, [pc, #456]	; (80044f8 <__ieee754_pow+0x258>)
 800432e:	4598      	cmp	r8, r3
 8004330:	dc51      	bgt.n	80043d6 <__ieee754_pow+0x136>
 8004332:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004336:	4598      	cmp	r8, r3
 8004338:	f340 84ab 	ble.w	8004c92 <__ieee754_pow+0x9f2>
 800433c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004340:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004344:	2b14      	cmp	r3, #20
 8004346:	dd0f      	ble.n	8004368 <__ieee754_pow+0xc8>
 8004348:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800434c:	fa22 f103 	lsr.w	r1, r2, r3
 8004350:	fa01 f303 	lsl.w	r3, r1, r3
 8004354:	4293      	cmp	r3, r2
 8004356:	f040 849c 	bne.w	8004c92 <__ieee754_pow+0x9f2>
 800435a:	f001 0101 	and.w	r1, r1, #1
 800435e:	f1c1 0302 	rsb	r3, r1, #2
 8004362:	9304      	str	r3, [sp, #16]
 8004364:	b182      	cbz	r2, 8004388 <__ieee754_pow+0xe8>
 8004366:	e05f      	b.n	8004428 <__ieee754_pow+0x188>
 8004368:	2a00      	cmp	r2, #0
 800436a:	d15b      	bne.n	8004424 <__ieee754_pow+0x184>
 800436c:	f1c3 0314 	rsb	r3, r3, #20
 8004370:	fa48 f103 	asr.w	r1, r8, r3
 8004374:	fa01 f303 	lsl.w	r3, r1, r3
 8004378:	4543      	cmp	r3, r8
 800437a:	f040 8487 	bne.w	8004c8c <__ieee754_pow+0x9ec>
 800437e:	f001 0101 	and.w	r1, r1, #1
 8004382:	f1c1 0302 	rsb	r3, r1, #2
 8004386:	9304      	str	r3, [sp, #16]
 8004388:	4b5c      	ldr	r3, [pc, #368]	; (80044fc <__ieee754_pow+0x25c>)
 800438a:	4598      	cmp	r8, r3
 800438c:	d132      	bne.n	80043f4 <__ieee754_pow+0x154>
 800438e:	f1b9 0f00 	cmp.w	r9, #0
 8004392:	f280 8477 	bge.w	8004c84 <__ieee754_pow+0x9e4>
 8004396:	4959      	ldr	r1, [pc, #356]	; (80044fc <__ieee754_pow+0x25c>)
 8004398:	4632      	mov	r2, r6
 800439a:	463b      	mov	r3, r7
 800439c:	2000      	movs	r0, #0
 800439e:	f7fc fa01 	bl	80007a4 <__aeabi_ddiv>
 80043a2:	e79c      	b.n	80042de <__ieee754_pow+0x3e>
 80043a4:	2300      	movs	r3, #0
 80043a6:	9304      	str	r3, [sp, #16]
 80043a8:	2a00      	cmp	r2, #0
 80043aa:	d13d      	bne.n	8004428 <__ieee754_pow+0x188>
 80043ac:	4b51      	ldr	r3, [pc, #324]	; (80044f4 <__ieee754_pow+0x254>)
 80043ae:	4598      	cmp	r8, r3
 80043b0:	d1ea      	bne.n	8004388 <__ieee754_pow+0xe8>
 80043b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80043b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80043ba:	ea53 030a 	orrs.w	r3, r3, sl
 80043be:	f000 8459 	beq.w	8004c74 <__ieee754_pow+0x9d4>
 80043c2:	4b4f      	ldr	r3, [pc, #316]	; (8004500 <__ieee754_pow+0x260>)
 80043c4:	429c      	cmp	r4, r3
 80043c6:	dd08      	ble.n	80043da <__ieee754_pow+0x13a>
 80043c8:	f1b9 0f00 	cmp.w	r9, #0
 80043cc:	f2c0 8456 	blt.w	8004c7c <__ieee754_pow+0x9dc>
 80043d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043d4:	e783      	b.n	80042de <__ieee754_pow+0x3e>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e7e5      	b.n	80043a6 <__ieee754_pow+0x106>
 80043da:	f1b9 0f00 	cmp.w	r9, #0
 80043de:	f04f 0000 	mov.w	r0, #0
 80043e2:	f04f 0100 	mov.w	r1, #0
 80043e6:	f6bf af7a 	bge.w	80042de <__ieee754_pow+0x3e>
 80043ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 80043ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80043f2:	e774      	b.n	80042de <__ieee754_pow+0x3e>
 80043f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80043f8:	d106      	bne.n	8004408 <__ieee754_pow+0x168>
 80043fa:	4632      	mov	r2, r6
 80043fc:	463b      	mov	r3, r7
 80043fe:	4630      	mov	r0, r6
 8004400:	4639      	mov	r1, r7
 8004402:	f7fc f8a5 	bl	8000550 <__aeabi_dmul>
 8004406:	e76a      	b.n	80042de <__ieee754_pow+0x3e>
 8004408:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <__ieee754_pow+0x264>)
 800440a:	4599      	cmp	r9, r3
 800440c:	d10c      	bne.n	8004428 <__ieee754_pow+0x188>
 800440e:	2d00      	cmp	r5, #0
 8004410:	db0a      	blt.n	8004428 <__ieee754_pow+0x188>
 8004412:	ec47 6b10 	vmov	d0, r6, r7
 8004416:	b009      	add	sp, #36	; 0x24
 8004418:	ecbd 8b06 	vpop	{d8-d10}
 800441c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004420:	f000 bd20 	b.w	8004e64 <__ieee754_sqrt>
 8004424:	2300      	movs	r3, #0
 8004426:	9304      	str	r3, [sp, #16]
 8004428:	ec47 6b10 	vmov	d0, r6, r7
 800442c:	f000 fc62 	bl	8004cf4 <fabs>
 8004430:	ec51 0b10 	vmov	r0, r1, d0
 8004434:	f1ba 0f00 	cmp.w	sl, #0
 8004438:	d129      	bne.n	800448e <__ieee754_pow+0x1ee>
 800443a:	b124      	cbz	r4, 8004446 <__ieee754_pow+0x1a6>
 800443c:	4b2f      	ldr	r3, [pc, #188]	; (80044fc <__ieee754_pow+0x25c>)
 800443e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004442:	429a      	cmp	r2, r3
 8004444:	d123      	bne.n	800448e <__ieee754_pow+0x1ee>
 8004446:	f1b9 0f00 	cmp.w	r9, #0
 800444a:	da05      	bge.n	8004458 <__ieee754_pow+0x1b8>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	2000      	movs	r0, #0
 8004452:	492a      	ldr	r1, [pc, #168]	; (80044fc <__ieee754_pow+0x25c>)
 8004454:	f7fc f9a6 	bl	80007a4 <__aeabi_ddiv>
 8004458:	2d00      	cmp	r5, #0
 800445a:	f6bf af40 	bge.w	80042de <__ieee754_pow+0x3e>
 800445e:	9b04      	ldr	r3, [sp, #16]
 8004460:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004464:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004468:	431c      	orrs	r4, r3
 800446a:	d108      	bne.n	800447e <__ieee754_pow+0x1de>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	f7fb feb4 	bl	80001e0 <__aeabi_dsub>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	e78f      	b.n	800439e <__ieee754_pow+0xfe>
 800447e:	9b04      	ldr	r3, [sp, #16]
 8004480:	2b01      	cmp	r3, #1
 8004482:	f47f af2c 	bne.w	80042de <__ieee754_pow+0x3e>
 8004486:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800448a:	4619      	mov	r1, r3
 800448c:	e727      	b.n	80042de <__ieee754_pow+0x3e>
 800448e:	0feb      	lsrs	r3, r5, #31
 8004490:	3b01      	subs	r3, #1
 8004492:	9306      	str	r3, [sp, #24]
 8004494:	9a06      	ldr	r2, [sp, #24]
 8004496:	9b04      	ldr	r3, [sp, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	d102      	bne.n	80044a2 <__ieee754_pow+0x202>
 800449c:	4632      	mov	r2, r6
 800449e:	463b      	mov	r3, r7
 80044a0:	e7e6      	b.n	8004470 <__ieee754_pow+0x1d0>
 80044a2:	4b19      	ldr	r3, [pc, #100]	; (8004508 <__ieee754_pow+0x268>)
 80044a4:	4598      	cmp	r8, r3
 80044a6:	f340 80fb 	ble.w	80046a0 <__ieee754_pow+0x400>
 80044aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80044ae:	4598      	cmp	r8, r3
 80044b0:	4b13      	ldr	r3, [pc, #76]	; (8004500 <__ieee754_pow+0x260>)
 80044b2:	dd0c      	ble.n	80044ce <__ieee754_pow+0x22e>
 80044b4:	429c      	cmp	r4, r3
 80044b6:	dc0f      	bgt.n	80044d8 <__ieee754_pow+0x238>
 80044b8:	f1b9 0f00 	cmp.w	r9, #0
 80044bc:	da0f      	bge.n	80044de <__ieee754_pow+0x23e>
 80044be:	2000      	movs	r0, #0
 80044c0:	b009      	add	sp, #36	; 0x24
 80044c2:	ecbd 8b06 	vpop	{d8-d10}
 80044c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ca:	f000 bcc2 	b.w	8004e52 <__math_oflow>
 80044ce:	429c      	cmp	r4, r3
 80044d0:	dbf2      	blt.n	80044b8 <__ieee754_pow+0x218>
 80044d2:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <__ieee754_pow+0x25c>)
 80044d4:	429c      	cmp	r4, r3
 80044d6:	dd19      	ble.n	800450c <__ieee754_pow+0x26c>
 80044d8:	f1b9 0f00 	cmp.w	r9, #0
 80044dc:	dcef      	bgt.n	80044be <__ieee754_pow+0x21e>
 80044de:	2000      	movs	r0, #0
 80044e0:	b009      	add	sp, #36	; 0x24
 80044e2:	ecbd 8b06 	vpop	{d8-d10}
 80044e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ea:	f000 bca9 	b.w	8004e40 <__math_uflow>
 80044ee:	bf00      	nop
 80044f0:	fff00000 	.word	0xfff00000
 80044f4:	7ff00000 	.word	0x7ff00000
 80044f8:	433fffff 	.word	0x433fffff
 80044fc:	3ff00000 	.word	0x3ff00000
 8004500:	3fefffff 	.word	0x3fefffff
 8004504:	3fe00000 	.word	0x3fe00000
 8004508:	41e00000 	.word	0x41e00000
 800450c:	4b60      	ldr	r3, [pc, #384]	; (8004690 <__ieee754_pow+0x3f0>)
 800450e:	2200      	movs	r2, #0
 8004510:	f7fb fe66 	bl	80001e0 <__aeabi_dsub>
 8004514:	a354      	add	r3, pc, #336	; (adr r3, 8004668 <__ieee754_pow+0x3c8>)
 8004516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451a:	4604      	mov	r4, r0
 800451c:	460d      	mov	r5, r1
 800451e:	f7fc f817 	bl	8000550 <__aeabi_dmul>
 8004522:	a353      	add	r3, pc, #332	; (adr r3, 8004670 <__ieee754_pow+0x3d0>)
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	4606      	mov	r6, r0
 800452a:	460f      	mov	r7, r1
 800452c:	4620      	mov	r0, r4
 800452e:	4629      	mov	r1, r5
 8004530:	f7fc f80e 	bl	8000550 <__aeabi_dmul>
 8004534:	4b57      	ldr	r3, [pc, #348]	; (8004694 <__ieee754_pow+0x3f4>)
 8004536:	4682      	mov	sl, r0
 8004538:	468b      	mov	fp, r1
 800453a:	2200      	movs	r2, #0
 800453c:	4620      	mov	r0, r4
 800453e:	4629      	mov	r1, r5
 8004540:	f7fc f806 	bl	8000550 <__aeabi_dmul>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	a14b      	add	r1, pc, #300	; (adr r1, 8004678 <__ieee754_pow+0x3d8>)
 800454a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800454e:	f7fb fe47 	bl	80001e0 <__aeabi_dsub>
 8004552:	4622      	mov	r2, r4
 8004554:	462b      	mov	r3, r5
 8004556:	f7fb fffb 	bl	8000550 <__aeabi_dmul>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	2000      	movs	r0, #0
 8004560:	494d      	ldr	r1, [pc, #308]	; (8004698 <__ieee754_pow+0x3f8>)
 8004562:	f7fb fe3d 	bl	80001e0 <__aeabi_dsub>
 8004566:	4622      	mov	r2, r4
 8004568:	4680      	mov	r8, r0
 800456a:	4689      	mov	r9, r1
 800456c:	462b      	mov	r3, r5
 800456e:	4620      	mov	r0, r4
 8004570:	4629      	mov	r1, r5
 8004572:	f7fb ffed 	bl	8000550 <__aeabi_dmul>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	4640      	mov	r0, r8
 800457c:	4649      	mov	r1, r9
 800457e:	f7fb ffe7 	bl	8000550 <__aeabi_dmul>
 8004582:	a33f      	add	r3, pc, #252	; (adr r3, 8004680 <__ieee754_pow+0x3e0>)
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	f7fb ffe2 	bl	8000550 <__aeabi_dmul>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4650      	mov	r0, sl
 8004592:	4659      	mov	r1, fp
 8004594:	f7fb fe24 	bl	80001e0 <__aeabi_dsub>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4680      	mov	r8, r0
 800459e:	4689      	mov	r9, r1
 80045a0:	4630      	mov	r0, r6
 80045a2:	4639      	mov	r1, r7
 80045a4:	f7fb fe1e 	bl	80001e4 <__adddf3>
 80045a8:	2000      	movs	r0, #0
 80045aa:	4632      	mov	r2, r6
 80045ac:	463b      	mov	r3, r7
 80045ae:	4604      	mov	r4, r0
 80045b0:	460d      	mov	r5, r1
 80045b2:	f7fb fe15 	bl	80001e0 <__aeabi_dsub>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4640      	mov	r0, r8
 80045bc:	4649      	mov	r1, r9
 80045be:	f7fb fe0f 	bl	80001e0 <__aeabi_dsub>
 80045c2:	9b04      	ldr	r3, [sp, #16]
 80045c4:	9a06      	ldr	r2, [sp, #24]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	4682      	mov	sl, r0
 80045cc:	468b      	mov	fp, r1
 80045ce:	f040 81e7 	bne.w	80049a0 <__ieee754_pow+0x700>
 80045d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004688 <__ieee754_pow+0x3e8>
 80045d6:	eeb0 8a47 	vmov.f32	s16, s14
 80045da:	eef0 8a67 	vmov.f32	s17, s15
 80045de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80045e2:	2600      	movs	r6, #0
 80045e4:	4632      	mov	r2, r6
 80045e6:	463b      	mov	r3, r7
 80045e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045ec:	f7fb fdf8 	bl	80001e0 <__aeabi_dsub>
 80045f0:	4622      	mov	r2, r4
 80045f2:	462b      	mov	r3, r5
 80045f4:	f7fb ffac 	bl	8000550 <__aeabi_dmul>
 80045f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045fc:	4680      	mov	r8, r0
 80045fe:	4689      	mov	r9, r1
 8004600:	4650      	mov	r0, sl
 8004602:	4659      	mov	r1, fp
 8004604:	f7fb ffa4 	bl	8000550 <__aeabi_dmul>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4640      	mov	r0, r8
 800460e:	4649      	mov	r1, r9
 8004610:	f7fb fde8 	bl	80001e4 <__adddf3>
 8004614:	4632      	mov	r2, r6
 8004616:	463b      	mov	r3, r7
 8004618:	4680      	mov	r8, r0
 800461a:	4689      	mov	r9, r1
 800461c:	4620      	mov	r0, r4
 800461e:	4629      	mov	r1, r5
 8004620:	f7fb ff96 	bl	8000550 <__aeabi_dmul>
 8004624:	460b      	mov	r3, r1
 8004626:	4604      	mov	r4, r0
 8004628:	460d      	mov	r5, r1
 800462a:	4602      	mov	r2, r0
 800462c:	4649      	mov	r1, r9
 800462e:	4640      	mov	r0, r8
 8004630:	f7fb fdd8 	bl	80001e4 <__adddf3>
 8004634:	4b19      	ldr	r3, [pc, #100]	; (800469c <__ieee754_pow+0x3fc>)
 8004636:	4299      	cmp	r1, r3
 8004638:	ec45 4b19 	vmov	d9, r4, r5
 800463c:	4606      	mov	r6, r0
 800463e:	460f      	mov	r7, r1
 8004640:	468b      	mov	fp, r1
 8004642:	f340 82f0 	ble.w	8004c26 <__ieee754_pow+0x986>
 8004646:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800464a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800464e:	4303      	orrs	r3, r0
 8004650:	f000 81e4 	beq.w	8004a1c <__ieee754_pow+0x77c>
 8004654:	ec51 0b18 	vmov	r0, r1, d8
 8004658:	2200      	movs	r2, #0
 800465a:	2300      	movs	r3, #0
 800465c:	f7fc f9ea 	bl	8000a34 <__aeabi_dcmplt>
 8004660:	3800      	subs	r0, #0
 8004662:	bf18      	it	ne
 8004664:	2001      	movne	r0, #1
 8004666:	e72b      	b.n	80044c0 <__ieee754_pow+0x220>
 8004668:	60000000 	.word	0x60000000
 800466c:	3ff71547 	.word	0x3ff71547
 8004670:	f85ddf44 	.word	0xf85ddf44
 8004674:	3e54ae0b 	.word	0x3e54ae0b
 8004678:	55555555 	.word	0x55555555
 800467c:	3fd55555 	.word	0x3fd55555
 8004680:	652b82fe 	.word	0x652b82fe
 8004684:	3ff71547 	.word	0x3ff71547
 8004688:	00000000 	.word	0x00000000
 800468c:	bff00000 	.word	0xbff00000
 8004690:	3ff00000 	.word	0x3ff00000
 8004694:	3fd00000 	.word	0x3fd00000
 8004698:	3fe00000 	.word	0x3fe00000
 800469c:	408fffff 	.word	0x408fffff
 80046a0:	4bd5      	ldr	r3, [pc, #852]	; (80049f8 <__ieee754_pow+0x758>)
 80046a2:	402b      	ands	r3, r5
 80046a4:	2200      	movs	r2, #0
 80046a6:	b92b      	cbnz	r3, 80046b4 <__ieee754_pow+0x414>
 80046a8:	4bd4      	ldr	r3, [pc, #848]	; (80049fc <__ieee754_pow+0x75c>)
 80046aa:	f7fb ff51 	bl	8000550 <__aeabi_dmul>
 80046ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80046b2:	460c      	mov	r4, r1
 80046b4:	1523      	asrs	r3, r4, #20
 80046b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80046ba:	4413      	add	r3, r2
 80046bc:	9305      	str	r3, [sp, #20]
 80046be:	4bd0      	ldr	r3, [pc, #832]	; (8004a00 <__ieee754_pow+0x760>)
 80046c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80046c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80046c8:	429c      	cmp	r4, r3
 80046ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80046ce:	dd08      	ble.n	80046e2 <__ieee754_pow+0x442>
 80046d0:	4bcc      	ldr	r3, [pc, #816]	; (8004a04 <__ieee754_pow+0x764>)
 80046d2:	429c      	cmp	r4, r3
 80046d4:	f340 8162 	ble.w	800499c <__ieee754_pow+0x6fc>
 80046d8:	9b05      	ldr	r3, [sp, #20]
 80046da:	3301      	adds	r3, #1
 80046dc:	9305      	str	r3, [sp, #20]
 80046de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80046e2:	2400      	movs	r4, #0
 80046e4:	00e3      	lsls	r3, r4, #3
 80046e6:	9307      	str	r3, [sp, #28]
 80046e8:	4bc7      	ldr	r3, [pc, #796]	; (8004a08 <__ieee754_pow+0x768>)
 80046ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80046ee:	ed93 7b00 	vldr	d7, [r3]
 80046f2:	4629      	mov	r1, r5
 80046f4:	ec53 2b17 	vmov	r2, r3, d7
 80046f8:	eeb0 9a47 	vmov.f32	s18, s14
 80046fc:	eef0 9a67 	vmov.f32	s19, s15
 8004700:	4682      	mov	sl, r0
 8004702:	f7fb fd6d 	bl	80001e0 <__aeabi_dsub>
 8004706:	4652      	mov	r2, sl
 8004708:	4606      	mov	r6, r0
 800470a:	460f      	mov	r7, r1
 800470c:	462b      	mov	r3, r5
 800470e:	ec51 0b19 	vmov	r0, r1, d9
 8004712:	f7fb fd67 	bl	80001e4 <__adddf3>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	2000      	movs	r0, #0
 800471c:	49bb      	ldr	r1, [pc, #748]	; (8004a0c <__ieee754_pow+0x76c>)
 800471e:	f7fc f841 	bl	80007a4 <__aeabi_ddiv>
 8004722:	ec41 0b1a 	vmov	d10, r0, r1
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4630      	mov	r0, r6
 800472c:	4639      	mov	r1, r7
 800472e:	f7fb ff0f 	bl	8000550 <__aeabi_dmul>
 8004732:	2300      	movs	r3, #0
 8004734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004738:	9302      	str	r3, [sp, #8]
 800473a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800473e:	46ab      	mov	fp, r5
 8004740:	106d      	asrs	r5, r5, #1
 8004742:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004746:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800474a:	ec41 0b18 	vmov	d8, r0, r1
 800474e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004752:	2200      	movs	r2, #0
 8004754:	4640      	mov	r0, r8
 8004756:	4649      	mov	r1, r9
 8004758:	4614      	mov	r4, r2
 800475a:	461d      	mov	r5, r3
 800475c:	f7fb fef8 	bl	8000550 <__aeabi_dmul>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4630      	mov	r0, r6
 8004766:	4639      	mov	r1, r7
 8004768:	f7fb fd3a 	bl	80001e0 <__aeabi_dsub>
 800476c:	ec53 2b19 	vmov	r2, r3, d9
 8004770:	4606      	mov	r6, r0
 8004772:	460f      	mov	r7, r1
 8004774:	4620      	mov	r0, r4
 8004776:	4629      	mov	r1, r5
 8004778:	f7fb fd32 	bl	80001e0 <__aeabi_dsub>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4650      	mov	r0, sl
 8004782:	4659      	mov	r1, fp
 8004784:	f7fb fd2c 	bl	80001e0 <__aeabi_dsub>
 8004788:	4642      	mov	r2, r8
 800478a:	464b      	mov	r3, r9
 800478c:	f7fb fee0 	bl	8000550 <__aeabi_dmul>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4630      	mov	r0, r6
 8004796:	4639      	mov	r1, r7
 8004798:	f7fb fd22 	bl	80001e0 <__aeabi_dsub>
 800479c:	ec53 2b1a 	vmov	r2, r3, d10
 80047a0:	f7fb fed6 	bl	8000550 <__aeabi_dmul>
 80047a4:	ec53 2b18 	vmov	r2, r3, d8
 80047a8:	ec41 0b19 	vmov	d9, r0, r1
 80047ac:	ec51 0b18 	vmov	r0, r1, d8
 80047b0:	f7fb fece 	bl	8000550 <__aeabi_dmul>
 80047b4:	a37c      	add	r3, pc, #496	; (adr r3, 80049a8 <__ieee754_pow+0x708>)
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	4604      	mov	r4, r0
 80047bc:	460d      	mov	r5, r1
 80047be:	f7fb fec7 	bl	8000550 <__aeabi_dmul>
 80047c2:	a37b      	add	r3, pc, #492	; (adr r3, 80049b0 <__ieee754_pow+0x710>)
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f7fb fd0c 	bl	80001e4 <__adddf3>
 80047cc:	4622      	mov	r2, r4
 80047ce:	462b      	mov	r3, r5
 80047d0:	f7fb febe 	bl	8000550 <__aeabi_dmul>
 80047d4:	a378      	add	r3, pc, #480	; (adr r3, 80049b8 <__ieee754_pow+0x718>)
 80047d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047da:	f7fb fd03 	bl	80001e4 <__adddf3>
 80047de:	4622      	mov	r2, r4
 80047e0:	462b      	mov	r3, r5
 80047e2:	f7fb feb5 	bl	8000550 <__aeabi_dmul>
 80047e6:	a376      	add	r3, pc, #472	; (adr r3, 80049c0 <__ieee754_pow+0x720>)
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	f7fb fcfa 	bl	80001e4 <__adddf3>
 80047f0:	4622      	mov	r2, r4
 80047f2:	462b      	mov	r3, r5
 80047f4:	f7fb feac 	bl	8000550 <__aeabi_dmul>
 80047f8:	a373      	add	r3, pc, #460	; (adr r3, 80049c8 <__ieee754_pow+0x728>)
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	f7fb fcf1 	bl	80001e4 <__adddf3>
 8004802:	4622      	mov	r2, r4
 8004804:	462b      	mov	r3, r5
 8004806:	f7fb fea3 	bl	8000550 <__aeabi_dmul>
 800480a:	a371      	add	r3, pc, #452	; (adr r3, 80049d0 <__ieee754_pow+0x730>)
 800480c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004810:	f7fb fce8 	bl	80001e4 <__adddf3>
 8004814:	4622      	mov	r2, r4
 8004816:	4606      	mov	r6, r0
 8004818:	460f      	mov	r7, r1
 800481a:	462b      	mov	r3, r5
 800481c:	4620      	mov	r0, r4
 800481e:	4629      	mov	r1, r5
 8004820:	f7fb fe96 	bl	8000550 <__aeabi_dmul>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4630      	mov	r0, r6
 800482a:	4639      	mov	r1, r7
 800482c:	f7fb fe90 	bl	8000550 <__aeabi_dmul>
 8004830:	4642      	mov	r2, r8
 8004832:	4604      	mov	r4, r0
 8004834:	460d      	mov	r5, r1
 8004836:	464b      	mov	r3, r9
 8004838:	ec51 0b18 	vmov	r0, r1, d8
 800483c:	f7fb fcd2 	bl	80001e4 <__adddf3>
 8004840:	ec53 2b19 	vmov	r2, r3, d9
 8004844:	f7fb fe84 	bl	8000550 <__aeabi_dmul>
 8004848:	4622      	mov	r2, r4
 800484a:	462b      	mov	r3, r5
 800484c:	f7fb fcca 	bl	80001e4 <__adddf3>
 8004850:	4642      	mov	r2, r8
 8004852:	4682      	mov	sl, r0
 8004854:	468b      	mov	fp, r1
 8004856:	464b      	mov	r3, r9
 8004858:	4640      	mov	r0, r8
 800485a:	4649      	mov	r1, r9
 800485c:	f7fb fe78 	bl	8000550 <__aeabi_dmul>
 8004860:	4b6b      	ldr	r3, [pc, #428]	; (8004a10 <__ieee754_pow+0x770>)
 8004862:	2200      	movs	r2, #0
 8004864:	4606      	mov	r6, r0
 8004866:	460f      	mov	r7, r1
 8004868:	f7fb fcbc 	bl	80001e4 <__adddf3>
 800486c:	4652      	mov	r2, sl
 800486e:	465b      	mov	r3, fp
 8004870:	f7fb fcb8 	bl	80001e4 <__adddf3>
 8004874:	2000      	movs	r0, #0
 8004876:	4604      	mov	r4, r0
 8004878:	460d      	mov	r5, r1
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4640      	mov	r0, r8
 8004880:	4649      	mov	r1, r9
 8004882:	f7fb fe65 	bl	8000550 <__aeabi_dmul>
 8004886:	4b62      	ldr	r3, [pc, #392]	; (8004a10 <__ieee754_pow+0x770>)
 8004888:	4680      	mov	r8, r0
 800488a:	4689      	mov	r9, r1
 800488c:	2200      	movs	r2, #0
 800488e:	4620      	mov	r0, r4
 8004890:	4629      	mov	r1, r5
 8004892:	f7fb fca5 	bl	80001e0 <__aeabi_dsub>
 8004896:	4632      	mov	r2, r6
 8004898:	463b      	mov	r3, r7
 800489a:	f7fb fca1 	bl	80001e0 <__aeabi_dsub>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4650      	mov	r0, sl
 80048a4:	4659      	mov	r1, fp
 80048a6:	f7fb fc9b 	bl	80001e0 <__aeabi_dsub>
 80048aa:	ec53 2b18 	vmov	r2, r3, d8
 80048ae:	f7fb fe4f 	bl	8000550 <__aeabi_dmul>
 80048b2:	4622      	mov	r2, r4
 80048b4:	4606      	mov	r6, r0
 80048b6:	460f      	mov	r7, r1
 80048b8:	462b      	mov	r3, r5
 80048ba:	ec51 0b19 	vmov	r0, r1, d9
 80048be:	f7fb fe47 	bl	8000550 <__aeabi_dmul>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4630      	mov	r0, r6
 80048c8:	4639      	mov	r1, r7
 80048ca:	f7fb fc8b 	bl	80001e4 <__adddf3>
 80048ce:	4606      	mov	r6, r0
 80048d0:	460f      	mov	r7, r1
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4640      	mov	r0, r8
 80048d8:	4649      	mov	r1, r9
 80048da:	f7fb fc83 	bl	80001e4 <__adddf3>
 80048de:	a33e      	add	r3, pc, #248	; (adr r3, 80049d8 <__ieee754_pow+0x738>)
 80048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e4:	2000      	movs	r0, #0
 80048e6:	4604      	mov	r4, r0
 80048e8:	460d      	mov	r5, r1
 80048ea:	f7fb fe31 	bl	8000550 <__aeabi_dmul>
 80048ee:	4642      	mov	r2, r8
 80048f0:	ec41 0b18 	vmov	d8, r0, r1
 80048f4:	464b      	mov	r3, r9
 80048f6:	4620      	mov	r0, r4
 80048f8:	4629      	mov	r1, r5
 80048fa:	f7fb fc71 	bl	80001e0 <__aeabi_dsub>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4630      	mov	r0, r6
 8004904:	4639      	mov	r1, r7
 8004906:	f7fb fc6b 	bl	80001e0 <__aeabi_dsub>
 800490a:	a335      	add	r3, pc, #212	; (adr r3, 80049e0 <__ieee754_pow+0x740>)
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f7fb fe1e 	bl	8000550 <__aeabi_dmul>
 8004914:	a334      	add	r3, pc, #208	; (adr r3, 80049e8 <__ieee754_pow+0x748>)
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	4606      	mov	r6, r0
 800491c:	460f      	mov	r7, r1
 800491e:	4620      	mov	r0, r4
 8004920:	4629      	mov	r1, r5
 8004922:	f7fb fe15 	bl	8000550 <__aeabi_dmul>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4630      	mov	r0, r6
 800492c:	4639      	mov	r1, r7
 800492e:	f7fb fc59 	bl	80001e4 <__adddf3>
 8004932:	9a07      	ldr	r2, [sp, #28]
 8004934:	4b37      	ldr	r3, [pc, #220]	; (8004a14 <__ieee754_pow+0x774>)
 8004936:	4413      	add	r3, r2
 8004938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493c:	f7fb fc52 	bl	80001e4 <__adddf3>
 8004940:	4682      	mov	sl, r0
 8004942:	9805      	ldr	r0, [sp, #20]
 8004944:	468b      	mov	fp, r1
 8004946:	f7fb fd99 	bl	800047c <__aeabi_i2d>
 800494a:	9a07      	ldr	r2, [sp, #28]
 800494c:	4b32      	ldr	r3, [pc, #200]	; (8004a18 <__ieee754_pow+0x778>)
 800494e:	4413      	add	r3, r2
 8004950:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004954:	4606      	mov	r6, r0
 8004956:	460f      	mov	r7, r1
 8004958:	4652      	mov	r2, sl
 800495a:	465b      	mov	r3, fp
 800495c:	ec51 0b18 	vmov	r0, r1, d8
 8004960:	f7fb fc40 	bl	80001e4 <__adddf3>
 8004964:	4642      	mov	r2, r8
 8004966:	464b      	mov	r3, r9
 8004968:	f7fb fc3c 	bl	80001e4 <__adddf3>
 800496c:	4632      	mov	r2, r6
 800496e:	463b      	mov	r3, r7
 8004970:	f7fb fc38 	bl	80001e4 <__adddf3>
 8004974:	2000      	movs	r0, #0
 8004976:	4632      	mov	r2, r6
 8004978:	463b      	mov	r3, r7
 800497a:	4604      	mov	r4, r0
 800497c:	460d      	mov	r5, r1
 800497e:	f7fb fc2f 	bl	80001e0 <__aeabi_dsub>
 8004982:	4642      	mov	r2, r8
 8004984:	464b      	mov	r3, r9
 8004986:	f7fb fc2b 	bl	80001e0 <__aeabi_dsub>
 800498a:	ec53 2b18 	vmov	r2, r3, d8
 800498e:	f7fb fc27 	bl	80001e0 <__aeabi_dsub>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4650      	mov	r0, sl
 8004998:	4659      	mov	r1, fp
 800499a:	e610      	b.n	80045be <__ieee754_pow+0x31e>
 800499c:	2401      	movs	r4, #1
 800499e:	e6a1      	b.n	80046e4 <__ieee754_pow+0x444>
 80049a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80049f0 <__ieee754_pow+0x750>
 80049a4:	e617      	b.n	80045d6 <__ieee754_pow+0x336>
 80049a6:	bf00      	nop
 80049a8:	4a454eef 	.word	0x4a454eef
 80049ac:	3fca7e28 	.word	0x3fca7e28
 80049b0:	93c9db65 	.word	0x93c9db65
 80049b4:	3fcd864a 	.word	0x3fcd864a
 80049b8:	a91d4101 	.word	0xa91d4101
 80049bc:	3fd17460 	.word	0x3fd17460
 80049c0:	518f264d 	.word	0x518f264d
 80049c4:	3fd55555 	.word	0x3fd55555
 80049c8:	db6fabff 	.word	0xdb6fabff
 80049cc:	3fdb6db6 	.word	0x3fdb6db6
 80049d0:	33333303 	.word	0x33333303
 80049d4:	3fe33333 	.word	0x3fe33333
 80049d8:	e0000000 	.word	0xe0000000
 80049dc:	3feec709 	.word	0x3feec709
 80049e0:	dc3a03fd 	.word	0xdc3a03fd
 80049e4:	3feec709 	.word	0x3feec709
 80049e8:	145b01f5 	.word	0x145b01f5
 80049ec:	be3e2fe0 	.word	0xbe3e2fe0
 80049f0:	00000000 	.word	0x00000000
 80049f4:	3ff00000 	.word	0x3ff00000
 80049f8:	7ff00000 	.word	0x7ff00000
 80049fc:	43400000 	.word	0x43400000
 8004a00:	0003988e 	.word	0x0003988e
 8004a04:	000bb679 	.word	0x000bb679
 8004a08:	080051d0 	.word	0x080051d0
 8004a0c:	3ff00000 	.word	0x3ff00000
 8004a10:	40080000 	.word	0x40080000
 8004a14:	080051f0 	.word	0x080051f0
 8004a18:	080051e0 	.word	0x080051e0
 8004a1c:	a3b3      	add	r3, pc, #716	; (adr r3, 8004cec <__ieee754_pow+0xa4c>)
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	4640      	mov	r0, r8
 8004a24:	4649      	mov	r1, r9
 8004a26:	f7fb fbdd 	bl	80001e4 <__adddf3>
 8004a2a:	4622      	mov	r2, r4
 8004a2c:	ec41 0b1a 	vmov	d10, r0, r1
 8004a30:	462b      	mov	r3, r5
 8004a32:	4630      	mov	r0, r6
 8004a34:	4639      	mov	r1, r7
 8004a36:	f7fb fbd3 	bl	80001e0 <__aeabi_dsub>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	ec51 0b1a 	vmov	r0, r1, d10
 8004a42:	f7fc f815 	bl	8000a70 <__aeabi_dcmpgt>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	f47f ae04 	bne.w	8004654 <__ieee754_pow+0x3b4>
 8004a4c:	4aa2      	ldr	r2, [pc, #648]	; (8004cd8 <__ieee754_pow+0xa38>)
 8004a4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a52:	4293      	cmp	r3, r2
 8004a54:	f340 8107 	ble.w	8004c66 <__ieee754_pow+0x9c6>
 8004a58:	151b      	asrs	r3, r3, #20
 8004a5a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004a5e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004a62:	fa4a fa03 	asr.w	sl, sl, r3
 8004a66:	44da      	add	sl, fp
 8004a68:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004a6c:	489b      	ldr	r0, [pc, #620]	; (8004cdc <__ieee754_pow+0xa3c>)
 8004a6e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004a72:	4108      	asrs	r0, r1
 8004a74:	ea00 030a 	and.w	r3, r0, sl
 8004a78:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004a7c:	f1c1 0114 	rsb	r1, r1, #20
 8004a80:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004a84:	fa4a fa01 	asr.w	sl, sl, r1
 8004a88:	f1bb 0f00 	cmp.w	fp, #0
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	4620      	mov	r0, r4
 8004a92:	4629      	mov	r1, r5
 8004a94:	bfb8      	it	lt
 8004a96:	f1ca 0a00 	rsblt	sl, sl, #0
 8004a9a:	f7fb fba1 	bl	80001e0 <__aeabi_dsub>
 8004a9e:	ec41 0b19 	vmov	d9, r0, r1
 8004aa2:	4642      	mov	r2, r8
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	ec51 0b19 	vmov	r0, r1, d9
 8004aaa:	f7fb fb9b 	bl	80001e4 <__adddf3>
 8004aae:	a37a      	add	r3, pc, #488	; (adr r3, 8004c98 <__ieee754_pow+0x9f8>)
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	460d      	mov	r5, r1
 8004aba:	f7fb fd49 	bl	8000550 <__aeabi_dmul>
 8004abe:	ec53 2b19 	vmov	r2, r3, d9
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	460f      	mov	r7, r1
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	4629      	mov	r1, r5
 8004aca:	f7fb fb89 	bl	80001e0 <__aeabi_dsub>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4640      	mov	r0, r8
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	f7fb fb83 	bl	80001e0 <__aeabi_dsub>
 8004ada:	a371      	add	r3, pc, #452	; (adr r3, 8004ca0 <__ieee754_pow+0xa00>)
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	f7fb fd36 	bl	8000550 <__aeabi_dmul>
 8004ae4:	a370      	add	r3, pc, #448	; (adr r3, 8004ca8 <__ieee754_pow+0xa08>)
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	4680      	mov	r8, r0
 8004aec:	4689      	mov	r9, r1
 8004aee:	4620      	mov	r0, r4
 8004af0:	4629      	mov	r1, r5
 8004af2:	f7fb fd2d 	bl	8000550 <__aeabi_dmul>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4640      	mov	r0, r8
 8004afc:	4649      	mov	r1, r9
 8004afe:	f7fb fb71 	bl	80001e4 <__adddf3>
 8004b02:	4604      	mov	r4, r0
 8004b04:	460d      	mov	r5, r1
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	4639      	mov	r1, r7
 8004b0e:	f7fb fb69 	bl	80001e4 <__adddf3>
 8004b12:	4632      	mov	r2, r6
 8004b14:	463b      	mov	r3, r7
 8004b16:	4680      	mov	r8, r0
 8004b18:	4689      	mov	r9, r1
 8004b1a:	f7fb fb61 	bl	80001e0 <__aeabi_dsub>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4620      	mov	r0, r4
 8004b24:	4629      	mov	r1, r5
 8004b26:	f7fb fb5b 	bl	80001e0 <__aeabi_dsub>
 8004b2a:	4642      	mov	r2, r8
 8004b2c:	4606      	mov	r6, r0
 8004b2e:	460f      	mov	r7, r1
 8004b30:	464b      	mov	r3, r9
 8004b32:	4640      	mov	r0, r8
 8004b34:	4649      	mov	r1, r9
 8004b36:	f7fb fd0b 	bl	8000550 <__aeabi_dmul>
 8004b3a:	a35d      	add	r3, pc, #372	; (adr r3, 8004cb0 <__ieee754_pow+0xa10>)
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	4604      	mov	r4, r0
 8004b42:	460d      	mov	r5, r1
 8004b44:	f7fb fd04 	bl	8000550 <__aeabi_dmul>
 8004b48:	a35b      	add	r3, pc, #364	; (adr r3, 8004cb8 <__ieee754_pow+0xa18>)
 8004b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4e:	f7fb fb47 	bl	80001e0 <__aeabi_dsub>
 8004b52:	4622      	mov	r2, r4
 8004b54:	462b      	mov	r3, r5
 8004b56:	f7fb fcfb 	bl	8000550 <__aeabi_dmul>
 8004b5a:	a359      	add	r3, pc, #356	; (adr r3, 8004cc0 <__ieee754_pow+0xa20>)
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f7fb fb40 	bl	80001e4 <__adddf3>
 8004b64:	4622      	mov	r2, r4
 8004b66:	462b      	mov	r3, r5
 8004b68:	f7fb fcf2 	bl	8000550 <__aeabi_dmul>
 8004b6c:	a356      	add	r3, pc, #344	; (adr r3, 8004cc8 <__ieee754_pow+0xa28>)
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	f7fb fb35 	bl	80001e0 <__aeabi_dsub>
 8004b76:	4622      	mov	r2, r4
 8004b78:	462b      	mov	r3, r5
 8004b7a:	f7fb fce9 	bl	8000550 <__aeabi_dmul>
 8004b7e:	a354      	add	r3, pc, #336	; (adr r3, 8004cd0 <__ieee754_pow+0xa30>)
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f7fb fb2e 	bl	80001e4 <__adddf3>
 8004b88:	4622      	mov	r2, r4
 8004b8a:	462b      	mov	r3, r5
 8004b8c:	f7fb fce0 	bl	8000550 <__aeabi_dmul>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4640      	mov	r0, r8
 8004b96:	4649      	mov	r1, r9
 8004b98:	f7fb fb22 	bl	80001e0 <__aeabi_dsub>
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	460d      	mov	r5, r1
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4640      	mov	r0, r8
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	f7fb fcd2 	bl	8000550 <__aeabi_dmul>
 8004bac:	2200      	movs	r2, #0
 8004bae:	ec41 0b19 	vmov	d9, r0, r1
 8004bb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	4629      	mov	r1, r5
 8004bba:	f7fb fb11 	bl	80001e0 <__aeabi_dsub>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	ec51 0b19 	vmov	r0, r1, d9
 8004bc6:	f7fb fded 	bl	80007a4 <__aeabi_ddiv>
 8004bca:	4632      	mov	r2, r6
 8004bcc:	4604      	mov	r4, r0
 8004bce:	460d      	mov	r5, r1
 8004bd0:	463b      	mov	r3, r7
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	f7fb fcbb 	bl	8000550 <__aeabi_dmul>
 8004bda:	4632      	mov	r2, r6
 8004bdc:	463b      	mov	r3, r7
 8004bde:	f7fb fb01 	bl	80001e4 <__adddf3>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4620      	mov	r0, r4
 8004be8:	4629      	mov	r1, r5
 8004bea:	f7fb faf9 	bl	80001e0 <__aeabi_dsub>
 8004bee:	4642      	mov	r2, r8
 8004bf0:	464b      	mov	r3, r9
 8004bf2:	f7fb faf5 	bl	80001e0 <__aeabi_dsub>
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4939      	ldr	r1, [pc, #228]	; (8004ce0 <__ieee754_pow+0xa40>)
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	f7fb faef 	bl	80001e0 <__aeabi_dsub>
 8004c02:	ec41 0b10 	vmov	d0, r0, r1
 8004c06:	ee10 3a90 	vmov	r3, s1
 8004c0a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c12:	da2b      	bge.n	8004c6c <__ieee754_pow+0x9cc>
 8004c14:	4650      	mov	r0, sl
 8004c16:	f000 f877 	bl	8004d08 <scalbn>
 8004c1a:	ec51 0b10 	vmov	r0, r1, d0
 8004c1e:	ec53 2b18 	vmov	r2, r3, d8
 8004c22:	f7ff bbee 	b.w	8004402 <__ieee754_pow+0x162>
 8004c26:	4b2f      	ldr	r3, [pc, #188]	; (8004ce4 <__ieee754_pow+0xa44>)
 8004c28:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004c2c:	429e      	cmp	r6, r3
 8004c2e:	f77f af0d 	ble.w	8004a4c <__ieee754_pow+0x7ac>
 8004c32:	4b2d      	ldr	r3, [pc, #180]	; (8004ce8 <__ieee754_pow+0xa48>)
 8004c34:	440b      	add	r3, r1
 8004c36:	4303      	orrs	r3, r0
 8004c38:	d009      	beq.n	8004c4e <__ieee754_pow+0x9ae>
 8004c3a:	ec51 0b18 	vmov	r0, r1, d8
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2300      	movs	r3, #0
 8004c42:	f7fb fef7 	bl	8000a34 <__aeabi_dcmplt>
 8004c46:	3800      	subs	r0, #0
 8004c48:	bf18      	it	ne
 8004c4a:	2001      	movne	r0, #1
 8004c4c:	e448      	b.n	80044e0 <__ieee754_pow+0x240>
 8004c4e:	4622      	mov	r2, r4
 8004c50:	462b      	mov	r3, r5
 8004c52:	f7fb fac5 	bl	80001e0 <__aeabi_dsub>
 8004c56:	4642      	mov	r2, r8
 8004c58:	464b      	mov	r3, r9
 8004c5a:	f7fb feff 	bl	8000a5c <__aeabi_dcmpge>
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	f43f aef4 	beq.w	8004a4c <__ieee754_pow+0x7ac>
 8004c64:	e7e9      	b.n	8004c3a <__ieee754_pow+0x99a>
 8004c66:	f04f 0a00 	mov.w	sl, #0
 8004c6a:	e71a      	b.n	8004aa2 <__ieee754_pow+0x802>
 8004c6c:	ec51 0b10 	vmov	r0, r1, d0
 8004c70:	4619      	mov	r1, r3
 8004c72:	e7d4      	b.n	8004c1e <__ieee754_pow+0x97e>
 8004c74:	491a      	ldr	r1, [pc, #104]	; (8004ce0 <__ieee754_pow+0xa40>)
 8004c76:	2000      	movs	r0, #0
 8004c78:	f7ff bb31 	b.w	80042de <__ieee754_pow+0x3e>
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	2100      	movs	r1, #0
 8004c80:	f7ff bb2d 	b.w	80042de <__ieee754_pow+0x3e>
 8004c84:	4630      	mov	r0, r6
 8004c86:	4639      	mov	r1, r7
 8004c88:	f7ff bb29 	b.w	80042de <__ieee754_pow+0x3e>
 8004c8c:	9204      	str	r2, [sp, #16]
 8004c8e:	f7ff bb7b 	b.w	8004388 <__ieee754_pow+0xe8>
 8004c92:	2300      	movs	r3, #0
 8004c94:	f7ff bb65 	b.w	8004362 <__ieee754_pow+0xc2>
 8004c98:	00000000 	.word	0x00000000
 8004c9c:	3fe62e43 	.word	0x3fe62e43
 8004ca0:	fefa39ef 	.word	0xfefa39ef
 8004ca4:	3fe62e42 	.word	0x3fe62e42
 8004ca8:	0ca86c39 	.word	0x0ca86c39
 8004cac:	be205c61 	.word	0xbe205c61
 8004cb0:	72bea4d0 	.word	0x72bea4d0
 8004cb4:	3e663769 	.word	0x3e663769
 8004cb8:	c5d26bf1 	.word	0xc5d26bf1
 8004cbc:	3ebbbd41 	.word	0x3ebbbd41
 8004cc0:	af25de2c 	.word	0xaf25de2c
 8004cc4:	3f11566a 	.word	0x3f11566a
 8004cc8:	16bebd93 	.word	0x16bebd93
 8004ccc:	3f66c16c 	.word	0x3f66c16c
 8004cd0:	5555553e 	.word	0x5555553e
 8004cd4:	3fc55555 	.word	0x3fc55555
 8004cd8:	3fe00000 	.word	0x3fe00000
 8004cdc:	fff00000 	.word	0xfff00000
 8004ce0:	3ff00000 	.word	0x3ff00000
 8004ce4:	4090cbff 	.word	0x4090cbff
 8004ce8:	3f6f3400 	.word	0x3f6f3400
 8004cec:	652b82fe 	.word	0x652b82fe
 8004cf0:	3c971547 	.word	0x3c971547

08004cf4 <fabs>:
 8004cf4:	ec51 0b10 	vmov	r0, r1, d0
 8004cf8:	ee10 2a10 	vmov	r2, s0
 8004cfc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004d00:	ec43 2b10 	vmov	d0, r2, r3
 8004d04:	4770      	bx	lr
	...

08004d08 <scalbn>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	ec55 4b10 	vmov	r4, r5, d0
 8004d0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004d12:	4606      	mov	r6, r0
 8004d14:	462b      	mov	r3, r5
 8004d16:	b999      	cbnz	r1, 8004d40 <scalbn+0x38>
 8004d18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004d1c:	4323      	orrs	r3, r4
 8004d1e:	d03f      	beq.n	8004da0 <scalbn+0x98>
 8004d20:	4b35      	ldr	r3, [pc, #212]	; (8004df8 <scalbn+0xf0>)
 8004d22:	4629      	mov	r1, r5
 8004d24:	ee10 0a10 	vmov	r0, s0
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f7fb fc11 	bl	8000550 <__aeabi_dmul>
 8004d2e:	4b33      	ldr	r3, [pc, #204]	; (8004dfc <scalbn+0xf4>)
 8004d30:	429e      	cmp	r6, r3
 8004d32:	4604      	mov	r4, r0
 8004d34:	460d      	mov	r5, r1
 8004d36:	da10      	bge.n	8004d5a <scalbn+0x52>
 8004d38:	a327      	add	r3, pc, #156	; (adr r3, 8004dd8 <scalbn+0xd0>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	e01f      	b.n	8004d80 <scalbn+0x78>
 8004d40:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d44:	4291      	cmp	r1, r2
 8004d46:	d10c      	bne.n	8004d62 <scalbn+0x5a>
 8004d48:	ee10 2a10 	vmov	r2, s0
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	4629      	mov	r1, r5
 8004d50:	f7fb fa48 	bl	80001e4 <__adddf3>
 8004d54:	4604      	mov	r4, r0
 8004d56:	460d      	mov	r5, r1
 8004d58:	e022      	b.n	8004da0 <scalbn+0x98>
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004d60:	3936      	subs	r1, #54	; 0x36
 8004d62:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004d66:	4296      	cmp	r6, r2
 8004d68:	dd0d      	ble.n	8004d86 <scalbn+0x7e>
 8004d6a:	2d00      	cmp	r5, #0
 8004d6c:	a11c      	add	r1, pc, #112	; (adr r1, 8004de0 <scalbn+0xd8>)
 8004d6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d72:	da02      	bge.n	8004d7a <scalbn+0x72>
 8004d74:	a11c      	add	r1, pc, #112	; (adr r1, 8004de8 <scalbn+0xe0>)
 8004d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d7a:	a319      	add	r3, pc, #100	; (adr r3, 8004de0 <scalbn+0xd8>)
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f7fb fbe6 	bl	8000550 <__aeabi_dmul>
 8004d84:	e7e6      	b.n	8004d54 <scalbn+0x4c>
 8004d86:	1872      	adds	r2, r6, r1
 8004d88:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004d8c:	428a      	cmp	r2, r1
 8004d8e:	dcec      	bgt.n	8004d6a <scalbn+0x62>
 8004d90:	2a00      	cmp	r2, #0
 8004d92:	dd08      	ble.n	8004da6 <scalbn+0x9e>
 8004d94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004d98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004da0:	ec45 4b10 	vmov	d0, r4, r5
 8004da4:	bd70      	pop	{r4, r5, r6, pc}
 8004da6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004daa:	da08      	bge.n	8004dbe <scalbn+0xb6>
 8004dac:	2d00      	cmp	r5, #0
 8004dae:	a10a      	add	r1, pc, #40	; (adr r1, 8004dd8 <scalbn+0xd0>)
 8004db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004db4:	dac0      	bge.n	8004d38 <scalbn+0x30>
 8004db6:	a10e      	add	r1, pc, #56	; (adr r1, 8004df0 <scalbn+0xe8>)
 8004db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dbc:	e7bc      	b.n	8004d38 <scalbn+0x30>
 8004dbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004dc2:	3236      	adds	r2, #54	; 0x36
 8004dc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004dc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004dcc:	4620      	mov	r0, r4
 8004dce:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <scalbn+0xf8>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	e7d5      	b.n	8004d80 <scalbn+0x78>
 8004dd4:	f3af 8000 	nop.w
 8004dd8:	c2f8f359 	.word	0xc2f8f359
 8004ddc:	01a56e1f 	.word	0x01a56e1f
 8004de0:	8800759c 	.word	0x8800759c
 8004de4:	7e37e43c 	.word	0x7e37e43c
 8004de8:	8800759c 	.word	0x8800759c
 8004dec:	fe37e43c 	.word	0xfe37e43c
 8004df0:	c2f8f359 	.word	0xc2f8f359
 8004df4:	81a56e1f 	.word	0x81a56e1f
 8004df8:	43500000 	.word	0x43500000
 8004dfc:	ffff3cb0 	.word	0xffff3cb0
 8004e00:	3c900000 	.word	0x3c900000

08004e04 <with_errno>:
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	4604      	mov	r4, r0
 8004e08:	460d      	mov	r5, r1
 8004e0a:	4616      	mov	r6, r2
 8004e0c:	f000 f99c 	bl	8005148 <__errno>
 8004e10:	4629      	mov	r1, r5
 8004e12:	6006      	str	r6, [r0, #0]
 8004e14:	4620      	mov	r0, r4
 8004e16:	bd70      	pop	{r4, r5, r6, pc}

08004e18 <xflow>:
 8004e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e1a:	4614      	mov	r4, r2
 8004e1c:	461d      	mov	r5, r3
 8004e1e:	b108      	cbz	r0, 8004e24 <xflow+0xc>
 8004e20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e24:	e9cd 2300 	strd	r2, r3, [sp]
 8004e28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	4629      	mov	r1, r5
 8004e30:	f7fb fb8e 	bl	8000550 <__aeabi_dmul>
 8004e34:	2222      	movs	r2, #34	; 0x22
 8004e36:	b003      	add	sp, #12
 8004e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e3c:	f7ff bfe2 	b.w	8004e04 <with_errno>

08004e40 <__math_uflow>:
 8004e40:	b508      	push	{r3, lr}
 8004e42:	2200      	movs	r2, #0
 8004e44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004e48:	f7ff ffe6 	bl	8004e18 <xflow>
 8004e4c:	ec41 0b10 	vmov	d0, r0, r1
 8004e50:	bd08      	pop	{r3, pc}

08004e52 <__math_oflow>:
 8004e52:	b508      	push	{r3, lr}
 8004e54:	2200      	movs	r2, #0
 8004e56:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004e5a:	f7ff ffdd 	bl	8004e18 <xflow>
 8004e5e:	ec41 0b10 	vmov	d0, r0, r1
 8004e62:	bd08      	pop	{r3, pc}

08004e64 <__ieee754_sqrt>:
 8004e64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e68:	ec55 4b10 	vmov	r4, r5, d0
 8004e6c:	4e67      	ldr	r6, [pc, #412]	; (800500c <__ieee754_sqrt+0x1a8>)
 8004e6e:	43ae      	bics	r6, r5
 8004e70:	ee10 0a10 	vmov	r0, s0
 8004e74:	ee10 2a10 	vmov	r2, s0
 8004e78:	4629      	mov	r1, r5
 8004e7a:	462b      	mov	r3, r5
 8004e7c:	d10d      	bne.n	8004e9a <__ieee754_sqrt+0x36>
 8004e7e:	f7fb fb67 	bl	8000550 <__aeabi_dmul>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4620      	mov	r0, r4
 8004e88:	4629      	mov	r1, r5
 8004e8a:	f7fb f9ab 	bl	80001e4 <__adddf3>
 8004e8e:	4604      	mov	r4, r0
 8004e90:	460d      	mov	r5, r1
 8004e92:	ec45 4b10 	vmov	d0, r4, r5
 8004e96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e9a:	2d00      	cmp	r5, #0
 8004e9c:	dc0b      	bgt.n	8004eb6 <__ieee754_sqrt+0x52>
 8004e9e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004ea2:	4326      	orrs	r6, r4
 8004ea4:	d0f5      	beq.n	8004e92 <__ieee754_sqrt+0x2e>
 8004ea6:	b135      	cbz	r5, 8004eb6 <__ieee754_sqrt+0x52>
 8004ea8:	f7fb f99a 	bl	80001e0 <__aeabi_dsub>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	f7fb fc78 	bl	80007a4 <__aeabi_ddiv>
 8004eb4:	e7eb      	b.n	8004e8e <__ieee754_sqrt+0x2a>
 8004eb6:	1509      	asrs	r1, r1, #20
 8004eb8:	f000 808d 	beq.w	8004fd6 <__ieee754_sqrt+0x172>
 8004ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ec0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8004ec4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec8:	07c9      	lsls	r1, r1, #31
 8004eca:	bf5c      	itt	pl
 8004ecc:	005b      	lslpl	r3, r3, #1
 8004ece:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8004ed2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004ed6:	bf58      	it	pl
 8004ed8:	0052      	lslpl	r2, r2, #1
 8004eda:	2500      	movs	r5, #0
 8004edc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004ee0:	1076      	asrs	r6, r6, #1
 8004ee2:	0052      	lsls	r2, r2, #1
 8004ee4:	f04f 0e16 	mov.w	lr, #22
 8004ee8:	46ac      	mov	ip, r5
 8004eea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eee:	eb0c 0001 	add.w	r0, ip, r1
 8004ef2:	4298      	cmp	r0, r3
 8004ef4:	bfde      	ittt	le
 8004ef6:	1a1b      	suble	r3, r3, r0
 8004ef8:	eb00 0c01 	addle.w	ip, r0, r1
 8004efc:	186d      	addle	r5, r5, r1
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	f1be 0e01 	subs.w	lr, lr, #1
 8004f04:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004f08:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004f0c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004f10:	d1ed      	bne.n	8004eee <__ieee754_sqrt+0x8a>
 8004f12:	4674      	mov	r4, lr
 8004f14:	2720      	movs	r7, #32
 8004f16:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004f1a:	4563      	cmp	r3, ip
 8004f1c:	eb01 000e 	add.w	r0, r1, lr
 8004f20:	dc02      	bgt.n	8004f28 <__ieee754_sqrt+0xc4>
 8004f22:	d113      	bne.n	8004f4c <__ieee754_sqrt+0xe8>
 8004f24:	4290      	cmp	r0, r2
 8004f26:	d811      	bhi.n	8004f4c <__ieee754_sqrt+0xe8>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	eb00 0e01 	add.w	lr, r0, r1
 8004f2e:	da57      	bge.n	8004fe0 <__ieee754_sqrt+0x17c>
 8004f30:	f1be 0f00 	cmp.w	lr, #0
 8004f34:	db54      	blt.n	8004fe0 <__ieee754_sqrt+0x17c>
 8004f36:	f10c 0801 	add.w	r8, ip, #1
 8004f3a:	eba3 030c 	sub.w	r3, r3, ip
 8004f3e:	4290      	cmp	r0, r2
 8004f40:	bf88      	it	hi
 8004f42:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004f46:	1a12      	subs	r2, r2, r0
 8004f48:	440c      	add	r4, r1
 8004f4a:	46c4      	mov	ip, r8
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	3f01      	subs	r7, #1
 8004f50:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004f54:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004f58:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004f5c:	d1dd      	bne.n	8004f1a <__ieee754_sqrt+0xb6>
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	d01b      	beq.n	8004f9a <__ieee754_sqrt+0x136>
 8004f62:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005010 <__ieee754_sqrt+0x1ac>
 8004f66:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005014 <__ieee754_sqrt+0x1b0>
 8004f6a:	e9da 0100 	ldrd	r0, r1, [sl]
 8004f6e:	e9db 2300 	ldrd	r2, r3, [fp]
 8004f72:	f7fb f935 	bl	80001e0 <__aeabi_dsub>
 8004f76:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4640      	mov	r0, r8
 8004f80:	4649      	mov	r1, r9
 8004f82:	f7fb fd61 	bl	8000a48 <__aeabi_dcmple>
 8004f86:	b140      	cbz	r0, 8004f9a <__ieee754_sqrt+0x136>
 8004f88:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004f8c:	e9da 0100 	ldrd	r0, r1, [sl]
 8004f90:	e9db 2300 	ldrd	r2, r3, [fp]
 8004f94:	d126      	bne.n	8004fe4 <__ieee754_sqrt+0x180>
 8004f96:	3501      	adds	r5, #1
 8004f98:	463c      	mov	r4, r7
 8004f9a:	106a      	asrs	r2, r5, #1
 8004f9c:	0863      	lsrs	r3, r4, #1
 8004f9e:	07e9      	lsls	r1, r5, #31
 8004fa0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004fa4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004fa8:	bf48      	it	mi
 8004faa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004fae:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8004fb2:	461c      	mov	r4, r3
 8004fb4:	e76d      	b.n	8004e92 <__ieee754_sqrt+0x2e>
 8004fb6:	0ad3      	lsrs	r3, r2, #11
 8004fb8:	3815      	subs	r0, #21
 8004fba:	0552      	lsls	r2, r2, #21
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0fa      	beq.n	8004fb6 <__ieee754_sqrt+0x152>
 8004fc0:	02dc      	lsls	r4, r3, #11
 8004fc2:	d50a      	bpl.n	8004fda <__ieee754_sqrt+0x176>
 8004fc4:	f1c1 0420 	rsb	r4, r1, #32
 8004fc8:	fa22 f404 	lsr.w	r4, r2, r4
 8004fcc:	1e4d      	subs	r5, r1, #1
 8004fce:	408a      	lsls	r2, r1
 8004fd0:	4323      	orrs	r3, r4
 8004fd2:	1b41      	subs	r1, r0, r5
 8004fd4:	e772      	b.n	8004ebc <__ieee754_sqrt+0x58>
 8004fd6:	4608      	mov	r0, r1
 8004fd8:	e7f0      	b.n	8004fbc <__ieee754_sqrt+0x158>
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	3101      	adds	r1, #1
 8004fde:	e7ef      	b.n	8004fc0 <__ieee754_sqrt+0x15c>
 8004fe0:	46e0      	mov	r8, ip
 8004fe2:	e7aa      	b.n	8004f3a <__ieee754_sqrt+0xd6>
 8004fe4:	f7fb f8fe 	bl	80001e4 <__adddf3>
 8004fe8:	e9da 8900 	ldrd	r8, r9, [sl]
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	f7fb fd1e 	bl	8000a34 <__aeabi_dcmplt>
 8004ff8:	b120      	cbz	r0, 8005004 <__ieee754_sqrt+0x1a0>
 8004ffa:	1ca0      	adds	r0, r4, #2
 8004ffc:	bf08      	it	eq
 8004ffe:	3501      	addeq	r5, #1
 8005000:	3402      	adds	r4, #2
 8005002:	e7ca      	b.n	8004f9a <__ieee754_sqrt+0x136>
 8005004:	3401      	adds	r4, #1
 8005006:	f024 0401 	bic.w	r4, r4, #1
 800500a:	e7c6      	b.n	8004f9a <__ieee754_sqrt+0x136>
 800500c:	7ff00000 	.word	0x7ff00000
 8005010:	20000280 	.word	0x20000280
 8005014:	20000288 	.word	0x20000288

08005018 <atoi>:
 8005018:	220a      	movs	r2, #10
 800501a:	2100      	movs	r1, #0
 800501c:	f000 b882 	b.w	8005124 <strtol>

08005020 <_strtol_l.constprop.0>:
 8005020:	2b01      	cmp	r3, #1
 8005022:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005026:	d001      	beq.n	800502c <_strtol_l.constprop.0+0xc>
 8005028:	2b24      	cmp	r3, #36	; 0x24
 800502a:	d906      	bls.n	800503a <_strtol_l.constprop.0+0x1a>
 800502c:	f000 f88c 	bl	8005148 <__errno>
 8005030:	2316      	movs	r3, #22
 8005032:	6003      	str	r3, [r0, #0]
 8005034:	2000      	movs	r0, #0
 8005036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005120 <_strtol_l.constprop.0+0x100>
 800503e:	460d      	mov	r5, r1
 8005040:	462e      	mov	r6, r5
 8005042:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005046:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800504a:	f017 0708 	ands.w	r7, r7, #8
 800504e:	d1f7      	bne.n	8005040 <_strtol_l.constprop.0+0x20>
 8005050:	2c2d      	cmp	r4, #45	; 0x2d
 8005052:	d132      	bne.n	80050ba <_strtol_l.constprop.0+0x9a>
 8005054:	782c      	ldrb	r4, [r5, #0]
 8005056:	2701      	movs	r7, #1
 8005058:	1cb5      	adds	r5, r6, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d05b      	beq.n	8005116 <_strtol_l.constprop.0+0xf6>
 800505e:	2b10      	cmp	r3, #16
 8005060:	d109      	bne.n	8005076 <_strtol_l.constprop.0+0x56>
 8005062:	2c30      	cmp	r4, #48	; 0x30
 8005064:	d107      	bne.n	8005076 <_strtol_l.constprop.0+0x56>
 8005066:	782c      	ldrb	r4, [r5, #0]
 8005068:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800506c:	2c58      	cmp	r4, #88	; 0x58
 800506e:	d14d      	bne.n	800510c <_strtol_l.constprop.0+0xec>
 8005070:	786c      	ldrb	r4, [r5, #1]
 8005072:	2310      	movs	r3, #16
 8005074:	3502      	adds	r5, #2
 8005076:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800507a:	f108 38ff 	add.w	r8, r8, #4294967295
 800507e:	f04f 0e00 	mov.w	lr, #0
 8005082:	fbb8 f9f3 	udiv	r9, r8, r3
 8005086:	4676      	mov	r6, lr
 8005088:	fb03 8a19 	mls	sl, r3, r9, r8
 800508c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005090:	f1bc 0f09 	cmp.w	ip, #9
 8005094:	d816      	bhi.n	80050c4 <_strtol_l.constprop.0+0xa4>
 8005096:	4664      	mov	r4, ip
 8005098:	42a3      	cmp	r3, r4
 800509a:	dd24      	ble.n	80050e6 <_strtol_l.constprop.0+0xc6>
 800509c:	f1be 3fff 	cmp.w	lr, #4294967295
 80050a0:	d008      	beq.n	80050b4 <_strtol_l.constprop.0+0x94>
 80050a2:	45b1      	cmp	r9, r6
 80050a4:	d31c      	bcc.n	80050e0 <_strtol_l.constprop.0+0xc0>
 80050a6:	d101      	bne.n	80050ac <_strtol_l.constprop.0+0x8c>
 80050a8:	45a2      	cmp	sl, r4
 80050aa:	db19      	blt.n	80050e0 <_strtol_l.constprop.0+0xc0>
 80050ac:	fb06 4603 	mla	r6, r6, r3, r4
 80050b0:	f04f 0e01 	mov.w	lr, #1
 80050b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050b8:	e7e8      	b.n	800508c <_strtol_l.constprop.0+0x6c>
 80050ba:	2c2b      	cmp	r4, #43	; 0x2b
 80050bc:	bf04      	itt	eq
 80050be:	782c      	ldrbeq	r4, [r5, #0]
 80050c0:	1cb5      	addeq	r5, r6, #2
 80050c2:	e7ca      	b.n	800505a <_strtol_l.constprop.0+0x3a>
 80050c4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80050c8:	f1bc 0f19 	cmp.w	ip, #25
 80050cc:	d801      	bhi.n	80050d2 <_strtol_l.constprop.0+0xb2>
 80050ce:	3c37      	subs	r4, #55	; 0x37
 80050d0:	e7e2      	b.n	8005098 <_strtol_l.constprop.0+0x78>
 80050d2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80050d6:	f1bc 0f19 	cmp.w	ip, #25
 80050da:	d804      	bhi.n	80050e6 <_strtol_l.constprop.0+0xc6>
 80050dc:	3c57      	subs	r4, #87	; 0x57
 80050de:	e7db      	b.n	8005098 <_strtol_l.constprop.0+0x78>
 80050e0:	f04f 3eff 	mov.w	lr, #4294967295
 80050e4:	e7e6      	b.n	80050b4 <_strtol_l.constprop.0+0x94>
 80050e6:	f1be 3fff 	cmp.w	lr, #4294967295
 80050ea:	d105      	bne.n	80050f8 <_strtol_l.constprop.0+0xd8>
 80050ec:	2322      	movs	r3, #34	; 0x22
 80050ee:	6003      	str	r3, [r0, #0]
 80050f0:	4646      	mov	r6, r8
 80050f2:	b942      	cbnz	r2, 8005106 <_strtol_l.constprop.0+0xe6>
 80050f4:	4630      	mov	r0, r6
 80050f6:	e79e      	b.n	8005036 <_strtol_l.constprop.0+0x16>
 80050f8:	b107      	cbz	r7, 80050fc <_strtol_l.constprop.0+0xdc>
 80050fa:	4276      	negs	r6, r6
 80050fc:	2a00      	cmp	r2, #0
 80050fe:	d0f9      	beq.n	80050f4 <_strtol_l.constprop.0+0xd4>
 8005100:	f1be 0f00 	cmp.w	lr, #0
 8005104:	d000      	beq.n	8005108 <_strtol_l.constprop.0+0xe8>
 8005106:	1e69      	subs	r1, r5, #1
 8005108:	6011      	str	r1, [r2, #0]
 800510a:	e7f3      	b.n	80050f4 <_strtol_l.constprop.0+0xd4>
 800510c:	2430      	movs	r4, #48	; 0x30
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1b1      	bne.n	8005076 <_strtol_l.constprop.0+0x56>
 8005112:	2308      	movs	r3, #8
 8005114:	e7af      	b.n	8005076 <_strtol_l.constprop.0+0x56>
 8005116:	2c30      	cmp	r4, #48	; 0x30
 8005118:	d0a5      	beq.n	8005066 <_strtol_l.constprop.0+0x46>
 800511a:	230a      	movs	r3, #10
 800511c:	e7ab      	b.n	8005076 <_strtol_l.constprop.0+0x56>
 800511e:	bf00      	nop
 8005120:	08005201 	.word	0x08005201

08005124 <strtol>:
 8005124:	4613      	mov	r3, r2
 8005126:	460a      	mov	r2, r1
 8005128:	4601      	mov	r1, r0
 800512a:	4802      	ldr	r0, [pc, #8]	; (8005134 <strtol+0x10>)
 800512c:	6800      	ldr	r0, [r0, #0]
 800512e:	f7ff bf77 	b.w	8005020 <_strtol_l.constprop.0>
 8005132:	bf00      	nop
 8005134:	200002dc 	.word	0x200002dc

08005138 <memset>:
 8005138:	4402      	add	r2, r0
 800513a:	4603      	mov	r3, r0
 800513c:	4293      	cmp	r3, r2
 800513e:	d100      	bne.n	8005142 <memset+0xa>
 8005140:	4770      	bx	lr
 8005142:	f803 1b01 	strb.w	r1, [r3], #1
 8005146:	e7f9      	b.n	800513c <memset+0x4>

08005148 <__errno>:
 8005148:	4b01      	ldr	r3, [pc, #4]	; (8005150 <__errno+0x8>)
 800514a:	6818      	ldr	r0, [r3, #0]
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	200002dc 	.word	0x200002dc

08005154 <__libc_init_array>:
 8005154:	b570      	push	{r4, r5, r6, lr}
 8005156:	4d0d      	ldr	r5, [pc, #52]	; (800518c <__libc_init_array+0x38>)
 8005158:	4c0d      	ldr	r4, [pc, #52]	; (8005190 <__libc_init_array+0x3c>)
 800515a:	1b64      	subs	r4, r4, r5
 800515c:	10a4      	asrs	r4, r4, #2
 800515e:	2600      	movs	r6, #0
 8005160:	42a6      	cmp	r6, r4
 8005162:	d109      	bne.n	8005178 <__libc_init_array+0x24>
 8005164:	4d0b      	ldr	r5, [pc, #44]	; (8005194 <__libc_init_array+0x40>)
 8005166:	4c0c      	ldr	r4, [pc, #48]	; (8005198 <__libc_init_array+0x44>)
 8005168:	f000 f818 	bl	800519c <_init>
 800516c:	1b64      	subs	r4, r4, r5
 800516e:	10a4      	asrs	r4, r4, #2
 8005170:	2600      	movs	r6, #0
 8005172:	42a6      	cmp	r6, r4
 8005174:	d105      	bne.n	8005182 <__libc_init_array+0x2e>
 8005176:	bd70      	pop	{r4, r5, r6, pc}
 8005178:	f855 3b04 	ldr.w	r3, [r5], #4
 800517c:	4798      	blx	r3
 800517e:	3601      	adds	r6, #1
 8005180:	e7ee      	b.n	8005160 <__libc_init_array+0xc>
 8005182:	f855 3b04 	ldr.w	r3, [r5], #4
 8005186:	4798      	blx	r3
 8005188:	3601      	adds	r6, #1
 800518a:	e7f2      	b.n	8005172 <__libc_init_array+0x1e>
 800518c:	0800530c 	.word	0x0800530c
 8005190:	0800530c 	.word	0x0800530c
 8005194:	0800530c 	.word	0x0800530c
 8005198:	08005310 	.word	0x08005310

0800519c <_init>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	bf00      	nop
 80051a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a2:	bc08      	pop	{r3}
 80051a4:	469e      	mov	lr, r3
 80051a6:	4770      	bx	lr

080051a8 <_fini>:
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	bf00      	nop
 80051ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ae:	bc08      	pop	{r3}
 80051b0:	469e      	mov	lr, r3
 80051b2:	4770      	bx	lr
