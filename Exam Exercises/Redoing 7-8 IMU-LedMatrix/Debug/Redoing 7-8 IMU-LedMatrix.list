
Redoing 7-8 IMU-LedMatrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08008df0  08008df0  00018df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008efc  08008efc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008efc  08008efc  00018efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f04  08008f04  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f04  08008f04  00018f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f08  08008f08  00018f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008f0c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000075c  20000070  08008f7c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007cc  08008f7c  000207cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011cc1  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022bd  00000000  00000000  00031da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  00034068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d94  00000000  00000000  00035180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000170cb  00000000  00000000  00035f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f31  00000000  00000000  0004cfdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000924f6  00000000  00000000  00060f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053e8  00000000  00000000  000f3408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000f87f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008dd8 	.word	0x08008dd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08008dd8 	.word	0x08008dd8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HAL_I2C_MasterRxCpltCallback>:
/* USER CODE BEGIN 0 */

uint8_t device_addr = LIS2DE;
int8_t data[5];
uint8_t x = 0, y = 1; //variables assigned by the reception of IMU values with relative matrix col and row to lightup
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	6078      	str	r0, [r7, #4]
	if(&hi2c1 == hi2c){
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a58      	ldr	r2, [pc, #352]	; (8001010 <HAL_I2C_MasterRxCpltCallback+0x16c>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	f040 80a8 	bne.w	8001006 <HAL_I2C_MasterRxCpltCallback+0x162>
		PRINT("Received: %d, %d, %d\r\n",data[0], data[2], data[4]);
 8000eb6:	4b57      	ldr	r3, [pc, #348]	; (8001014 <HAL_I2C_MasterRxCpltCallback+0x170>)
 8000eb8:	f993 3000 	ldrsb.w	r3, [r3]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4b55      	ldr	r3, [pc, #340]	; (8001014 <HAL_I2C_MasterRxCpltCallback+0x170>)
 8000ec0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b53      	ldr	r3, [pc, #332]	; (8001014 <HAL_I2C_MasterRxCpltCallback+0x170>)
 8000ec8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	9200      	str	r2, [sp, #0]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4a51      	ldr	r2, [pc, #324]	; (8001018 <HAL_I2C_MasterRxCpltCallback+0x174>)
 8000ed4:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8000ed8:	4850      	ldr	r0, [pc, #320]	; (800101c <HAL_I2C_MasterRxCpltCallback+0x178>)
 8000eda:	f007 fac5 	bl	8008468 <sniprintf>
 8000ede:	484f      	ldr	r0, [pc, #316]	; (800101c <HAL_I2C_MasterRxCpltCallback+0x178>)
 8000ee0:	f7ff f97e 	bl	80001e0 <strlen>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	2364      	movs	r3, #100	; 0x64
 8000eea:	494c      	ldr	r1, [pc, #304]	; (800101c <HAL_I2C_MasterRxCpltCallback+0x178>)
 8000eec:	484c      	ldr	r0, [pc, #304]	; (8001020 <HAL_I2C_MasterRxCpltCallback+0x17c>)
 8000eee:	f005 fb89 	bl	8006604 <HAL_UART_Transmit>
		x = round(-(float)data[2]/100.0f * 4.0f) + 2;
 8000ef2:	4b48      	ldr	r3, [pc, #288]	; (8001014 <HAL_I2C_MasterRxCpltCallback+0x170>)
 8000ef4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f00:	eeb1 7a67 	vneg.f32	s14, s15
 8000f04:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001024 <HAL_I2C_MasterRxCpltCallback+0x180>
 8000f08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f0c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000f10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f14:	ee17 0a90 	vmov	r0, s15
 8000f18:	f7ff fb1e 	bl	8000558 <__aeabi_f2d>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	ec43 2b10 	vmov	d0, r2, r3
 8000f24:	f006 fb9c 	bl	8007660 <round>
 8000f28:	ec51 0b10 	vmov	r0, r1, d0
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f34:	f7ff f9b2 	bl	800029c <__adddf3>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fe12 	bl	8000b68 <__aeabi_d2uiz>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b37      	ldr	r3, [pc, #220]	; (8001028 <HAL_I2C_MasterRxCpltCallback+0x184>)
 8000f4a:	701a      	strb	r2, [r3, #0]
		y = round((float)data[0]/100.0f * 6.0f) + 3;
 8000f4c:	4b31      	ldr	r3, [pc, #196]	; (8001014 <HAL_I2C_MasterRxCpltCallback+0x170>)
 8000f4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f5a:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001024 <HAL_I2C_MasterRxCpltCallback+0x180>
 8000f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f62:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6a:	ee17 0a90 	vmov	r0, s15
 8000f6e:	f7ff faf3 	bl	8000558 <__aeabi_f2d>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	ec43 2b10 	vmov	d0, r2, r3
 8000f7a:	f006 fb71 	bl	8007660 <round>
 8000f7e:	ec51 0b10 	vmov	r0, r1, d0
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	4b29      	ldr	r3, [pc, #164]	; (800102c <HAL_I2C_MasterRxCpltCallback+0x188>)
 8000f88:	f7ff f988 	bl	800029c <__adddf3>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f7ff fde8 	bl	8000b68 <__aeabi_d2uiz>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b24      	ldr	r3, [pc, #144]	; (8001030 <HAL_I2C_MasterRxCpltCallback+0x18c>)
 8000f9e:	701a      	strb	r2, [r3, #0]
		x = CLAMP(x, 0, 4);
 8000fa0:	4b21      	ldr	r3, [pc, #132]	; (8001028 <HAL_I2C_MasterRxCpltCallback+0x184>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <HAL_I2C_MasterRxCpltCallback+0x112>
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <HAL_I2C_MasterRxCpltCallback+0x184>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	bf28      	it	cs
 8000fb0:	2304      	movcs	r3, #4
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	e000      	b.n	8000fb8 <HAL_I2C_MasterRxCpltCallback+0x114>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <HAL_I2C_MasterRxCpltCallback+0x184>)
 8000fba:	7013      	strb	r3, [r2, #0]
		y = CLAMP(y, 0, 6);
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <HAL_I2C_MasterRxCpltCallback+0x18c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <HAL_I2C_MasterRxCpltCallback+0x12e>
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <HAL_I2C_MasterRxCpltCallback+0x18c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b06      	cmp	r3, #6
 8000fca:	bf28      	it	cs
 8000fcc:	2306      	movcs	r3, #6
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	e000      	b.n	8000fd4 <HAL_I2C_MasterRxCpltCallback+0x130>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	4a16      	ldr	r2, [pc, #88]	; (8001030 <HAL_I2C_MasterRxCpltCallback+0x18c>)
 8000fd6:	7013      	strb	r3, [r2, #0]

		PRINT("To mat %d:%d\r\n", x, y);
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <HAL_I2C_MasterRxCpltCallback+0x184>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_I2C_MasterRxCpltCallback+0x18c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	4a13      	ldr	r2, [pc, #76]	; (8001034 <HAL_I2C_MasterRxCpltCallback+0x190>)
 8000fe8:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8000fec:	480b      	ldr	r0, [pc, #44]	; (800101c <HAL_I2C_MasterRxCpltCallback+0x178>)
 8000fee:	f007 fa3b 	bl	8008468 <sniprintf>
 8000ff2:	480a      	ldr	r0, [pc, #40]	; (800101c <HAL_I2C_MasterRxCpltCallback+0x178>)
 8000ff4:	f7ff f8f4 	bl	80001e0 <strlen>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	2364      	movs	r3, #100	; 0x64
 8000ffe:	4907      	ldr	r1, [pc, #28]	; (800101c <HAL_I2C_MasterRxCpltCallback+0x178>)
 8001000:	4807      	ldr	r0, [pc, #28]	; (8001020 <HAL_I2C_MasterRxCpltCallback+0x17c>)
 8001002:	f005 faff 	bl	8006604 <HAL_UART_Transmit>
	}
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000048c 	.word	0x2000048c
 8001014:	20000670 	.word	0x20000670
 8001018:	08008df0 	.word	0x08008df0
 800101c:	2000008c 	.word	0x2000008c
 8001020:	20000628 	.word	0x20000628
 8001024:	42c80000 	.word	0x42c80000
 8001028:	20000675 	.word	0x20000675
 800102c:	40080000 	.word	0x40080000
 8001030:	20000001 	.word	0x20000001
 8001034:	08008e08 	.word	0x08008e08

08001038 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
 800103e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a39      	ldr	r2, [pc, #228]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d115      	bne.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x3c>
		uint8_t X_pin = 0b10101001; //00101001 is the address of pin x, the msb = 1 means that we want auto increment made by the device
 8001048:	23a9      	movs	r3, #169	; 0xa9
 800104a:	73fb      	strb	r3, [r7, #15]

		HAL_I2C_Master_Transmit(&hi2c1, device_addr, &X_pin, 1, 50); //telling which variable i want to read
 800104c:	4b37      	ldr	r3, [pc, #220]	; (800112c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b299      	uxth	r1, r3
 8001052:	f107 020f 	add.w	r2, r7, #15
 8001056:	2332      	movs	r3, #50	; 0x32
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	4834      	ldr	r0, [pc, #208]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800105e:	f001 fe3f 	bl	8002ce0 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive_IT(&hi2c1, device_addr, (uint8_t*)data, 5);
 8001062:	4b32      	ldr	r3, [pc, #200]	; (800112c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b299      	uxth	r1, r3
 8001068:	2305      	movs	r3, #5
 800106a:	4a32      	ldr	r2, [pc, #200]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800106c:	4830      	ldr	r0, [pc, #192]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800106e:	f001 ff35 	bl	8002edc <HAL_I2C_Master_Receive_IT>
			send[0] = pow(2,y);
		}
		HAL_SPI_Transmit_DMA(&hspi1, send, 2);
		col = (col+1) % 5;
	}
}
 8001072:	e050      	b.n	8001116 <HAL_TIM_PeriodElapsedCallback+0xde>
	}else if(htim == &htim2){
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a30      	ldr	r2, [pc, #192]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d14c      	bne.n	8001116 <HAL_TIM_PeriodElapsedCallback+0xde>
		uint8_t send[2] = {0,pow(2,4-col)};
 800107c:	2300      	movs	r3, #0
 800107e:	733b      	strb	r3, [r7, #12]
 8001080:	4b2e      	ldr	r3, [pc, #184]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1c3 0304 	rsb	r3, r3, #4
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa53 	bl	8000534 <__aeabi_i2d>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	ec43 2b11 	vmov	d1, r2, r3
 8001096:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8001120 <HAL_TIM_PeriodElapsedCallback+0xe8>
 800109a:	f006 fa65 	bl	8007568 <pow>
 800109e:	ec53 2b10 	vmov	r2, r3, d0
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f7ff fd5f 	bl	8000b68 <__aeabi_d2uiz>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	737b      	strb	r3, [r7, #13]
		if(col == x){
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d115      	bne.n	80010ea <HAL_TIM_PeriodElapsedCallback+0xb2>
			send[0] = pow(2,y);
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fa26 	bl	8000514 <__aeabi_ui2d>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	ec43 2b11 	vmov	d1, r2, r3
 80010d0:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8001120 <HAL_TIM_PeriodElapsedCallback+0xe8>
 80010d4:	f006 fa48 	bl	8007568 <pow>
 80010d8:	ec53 2b10 	vmov	r2, r3, d0
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fd42 	bl	8000b68 <__aeabi_d2uiz>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	733b      	strb	r3, [r7, #12]
		HAL_SPI_Transmit_DMA(&hspi1, send, 2);
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2202      	movs	r2, #2
 80010f0:	4619      	mov	r1, r3
 80010f2:	4815      	ldr	r0, [pc, #84]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80010f4:	f004 fad0 	bl	8005698 <HAL_SPI_Transmit_DMA>
		col = (col+1) % 5;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	1c59      	adds	r1, r3, #1
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001100:	fb83 2301 	smull	r2, r3, r3, r1
 8001104:	105a      	asrs	r2, r3, #1
 8001106:	17cb      	asrs	r3, r1, #31
 8001108:	1ad2      	subs	r2, r2, r3
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	1aca      	subs	r2, r1, r3
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001114:	601a      	str	r2, [r3, #0]
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	00000000 	.word	0x00000000
 8001124:	40000000 	.word	0x40000000
 8001128:	200005e0 	.word	0x200005e0
 800112c:	20000000 	.word	0x20000000
 8001130:	2000048c 	.word	0x2000048c
 8001134:	20000670 	.word	0x20000670
 8001138:	20000598 	.word	0x20000598
 800113c:	20000678 	.word	0x20000678
 8001140:	20000675 	.word	0x20000675
 8001144:	20000001 	.word	0x20000001
 8001148:	200004e0 	.word	0x200004e0
 800114c:	66666667 	.word	0x66666667

08001150 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef * hspi){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(MAT_SWITCH);
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_SPI_TxCpltCallback+0x20>)
 800115c:	f001 fc4b 	bl	80029f6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(MAT_SWITCH);
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <HAL_SPI_TxCpltCallback+0x20>)
 8001164:	f001 fc47 	bl	80029f6 <HAL_GPIO_TogglePin>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40020400 	.word	0x40020400

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117a:	f000 fd0b 	bl	8001b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117e:	f000 f87b 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001182:	f000 fa2d 	bl	80015e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001186:	f000 fa0b 	bl	80015a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800118a:	f000 f9df 	bl	800154c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800118e:	f000 f8df 	bl	8001350 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001192:	f000 f98d 	bl	80014b0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001196:	f000 f93f 	bl	8001418 <MX_TIM2_Init>
  MX_SPI1_Init();
 800119a:	f000 f907 	bl	80013ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  //uint8_t who_am_i_addr[2] = {0b00110011, 0b00000000};
  uint8_t CTRL_REG1[2] = {0x20, 0b01000111}; //set 50Hz on all directions
 800119e:	f244 7320 	movw	r3, #18208	; 0x4720
 80011a2:	80bb      	strh	r3, [r7, #4]

  if(HAL_I2C_Master_Transmit(&hi2c1, device_addr, CTRL_REG1, sizeof(CTRL_REG1), 100) != HAL_OK){
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <main+0xe0>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b299      	uxth	r1, r3
 80011aa:	1d3a      	adds	r2, r7, #4
 80011ac:	2364      	movs	r3, #100	; 0x64
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2302      	movs	r3, #2
 80011b2:	4829      	ldr	r0, [pc, #164]	; (8001258 <main+0xe4>)
 80011b4:	f001 fd94 	bl	8002ce0 <HAL_I2C_Master_Transmit>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d031      	beq.n	8001222 <main+0xae>
	  PRINT("Device LIS2DE not found\r\n");
 80011be:	4a27      	ldr	r2, [pc, #156]	; (800125c <main+0xe8>)
 80011c0:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 80011c4:	4826      	ldr	r0, [pc, #152]	; (8001260 <main+0xec>)
 80011c6:	f007 f94f 	bl	8008468 <sniprintf>
 80011ca:	4825      	ldr	r0, [pc, #148]	; (8001260 <main+0xec>)
 80011cc:	f7ff f808 	bl	80001e0 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	2364      	movs	r3, #100	; 0x64
 80011d6:	4922      	ldr	r1, [pc, #136]	; (8001260 <main+0xec>)
 80011d8:	4822      	ldr	r0, [pc, #136]	; (8001264 <main+0xf0>)
 80011da:	f005 fa13 	bl	8006604 <HAL_UART_Transmit>
	  device_addr = LIS2DE12;
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <main+0xe0>)
 80011e0:	2230      	movs	r2, #48	; 0x30
 80011e2:	701a      	strb	r2, [r3, #0]
	  if(HAL_I2C_Master_Transmit(&hi2c1, device_addr, CTRL_REG1, sizeof(CTRL_REG1), 100) != HAL_OK){
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <main+0xe0>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b299      	uxth	r1, r3
 80011ea:	1d3a      	adds	r2, r7, #4
 80011ec:	2364      	movs	r3, #100	; 0x64
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2302      	movs	r3, #2
 80011f2:	4819      	ldr	r0, [pc, #100]	; (8001258 <main+0xe4>)
 80011f4:	f001 fd74 	bl	8002ce0 <HAL_I2C_Master_Transmit>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d011      	beq.n	8001222 <main+0xae>
		  PRINT("DeviceLIS2DE12 not found.\r\nABORTING...\r\n");
 80011fe:	4a1a      	ldr	r2, [pc, #104]	; (8001268 <main+0xf4>)
 8001200:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8001204:	4816      	ldr	r0, [pc, #88]	; (8001260 <main+0xec>)
 8001206:	f007 f92f 	bl	8008468 <sniprintf>
 800120a:	4815      	ldr	r0, [pc, #84]	; (8001260 <main+0xec>)
 800120c:	f7fe ffe8 	bl	80001e0 <strlen>
 8001210:	4603      	mov	r3, r0
 8001212:	b29a      	uxth	r2, r3
 8001214:	2364      	movs	r3, #100	; 0x64
 8001216:	4912      	ldr	r1, [pc, #72]	; (8001260 <main+0xec>)
 8001218:	4812      	ldr	r0, [pc, #72]	; (8001264 <main+0xf0>)
 800121a:	f005 f9f3 	bl	8006604 <HAL_UART_Transmit>
		  Error_Handler();
 800121e:	f000 fa4d 	bl	80016bc <Error_Handler>
	  }
  }

  PRINT("Transmitting to %#X\r\n", device_addr);
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <main+0xe0>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4a11      	ldr	r2, [pc, #68]	; (800126c <main+0xf8>)
 8001228:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <main+0xec>)
 800122e:	f007 f91b 	bl	8008468 <sniprintf>
 8001232:	480b      	ldr	r0, [pc, #44]	; (8001260 <main+0xec>)
 8001234:	f7fe ffd4 	bl	80001e0 <strlen>
 8001238:	4603      	mov	r3, r0
 800123a:	b29a      	uxth	r2, r3
 800123c:	2364      	movs	r3, #100	; 0x64
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <main+0xec>)
 8001240:	4808      	ldr	r0, [pc, #32]	; (8001264 <main+0xf0>)
 8001242:	f005 f9df 	bl	8006604 <HAL_UART_Transmit>

  HAL_TIM_Base_Start_IT(&htim3);
 8001246:	480a      	ldr	r0, [pc, #40]	; (8001270 <main+0xfc>)
 8001248:	f004 fda2 	bl	8005d90 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <main+0x100>)
 800124e:	f004 fd9f 	bl	8005d90 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001252:	e7fe      	b.n	8001252 <main+0xde>
 8001254:	20000000 	.word	0x20000000
 8001258:	2000048c 	.word	0x2000048c
 800125c:	08008e18 	.word	0x08008e18
 8001260:	2000008c 	.word	0x2000008c
 8001264:	20000628 	.word	0x20000628
 8001268:	08008e34 	.word	0x08008e34
 800126c:	08008e60 	.word	0x08008e60
 8001270:	200005e0 	.word	0x200005e0
 8001274:	20000598 	.word	0x20000598

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	2230      	movs	r2, #48	; 0x30
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f007 f922 	bl	80084d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <SystemClock_Config+0xd0>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a28      	ldr	r2, [pc, #160]	; (8001348 <SystemClock_Config+0xd0>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <SystemClock_Config+0xd0>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <SystemClock_Config+0xd4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012c4:	4a21      	ldr	r2, [pc, #132]	; (800134c <SystemClock_Config+0xd4>)
 80012c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <SystemClock_Config+0xd4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	2302      	movs	r3, #2
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e0:	2310      	movs	r3, #16
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e4:	2302      	movs	r3, #2
 80012e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012ec:	2310      	movs	r3, #16
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012f6:	2304      	movs	r3, #4
 80012f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012fa:	2307      	movs	r3, #7
 80012fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fca6 	bl	8004c54 <HAL_RCC_OscConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800130e:	f000 f9d5 	bl	80016bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001312:	230f      	movs	r3, #15
 8001314:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001316:	2302      	movs	r3, #2
 8001318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001322:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2102      	movs	r1, #2
 800132e:	4618      	mov	r0, r3
 8001330:	f003 ff08 	bl	8005144 <HAL_RCC_ClockConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800133a:	f000 f9bf 	bl	80016bc <Error_Handler>
  }
}
 800133e:	bf00      	nop
 8001340:	3750      	adds	r7, #80	; 0x50
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <MX_I2C1_Init+0x50>)
 8001356:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <MX_I2C1_Init+0x54>)
 8001358:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_I2C1_Init+0x50>)
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <MX_I2C1_Init+0x58>)
 800135e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_I2C1_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_I2C1_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_I2C1_Init+0x50>)
 800136e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001372:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <MX_I2C1_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_I2C1_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <MX_I2C1_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_I2C1_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_I2C1_Init+0x50>)
 800138e:	f001 fb4d 	bl	8002a2c <HAL_I2C_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001398:	f000 f990 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000048c 	.word	0x2000048c
 80013a4:	40005400 	.word	0x40005400
 80013a8:	000186a0 	.word	0x000186a0

080013ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_SPI1_Init+0x64>)
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <MX_SPI1_Init+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_SPI1_Init+0x64>)
 80013b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_SPI1_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_SPI1_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_SPI1_Init+0x64>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_SPI1_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_SPI1_Init+0x64>)
 80013d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_SPI1_Init+0x64>)
 80013e0:	2208      	movs	r2, #8
 80013e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_SPI1_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_SPI1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_SPI1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_SPI1_Init+0x64>)
 80013f8:	220a      	movs	r2, #10
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_SPI1_Init+0x64>)
 80013fe:	f004 f8c1 	bl	8005584 <HAL_SPI_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001408:	f000 f958 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200004e0 	.word	0x200004e0
 8001414:	40013000 	.word	0x40013000

08001418 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	463b      	mov	r3, r7
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_TIM2_Init+0x94>)
 8001436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_TIM2_Init+0x94>)
 800143e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001442:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_TIM2_Init+0x94>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_TIM2_Init+0x94>)
 800144c:	2209      	movs	r2, #9
 800144e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_TIM2_Init+0x94>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_TIM2_Init+0x94>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800145c:	4813      	ldr	r0, [pc, #76]	; (80014ac <MX_TIM2_Init+0x94>)
 800145e:	f004 fc47 	bl	8005cf0 <HAL_TIM_Base_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001468:	f000 f928 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001470:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001472:	f107 0308 	add.w	r3, r7, #8
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <MX_TIM2_Init+0x94>)
 800147a:	f004 fddb 	bl	8006034 <HAL_TIM_ConfigClockSource>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001484:	f000 f91a 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001490:	463b      	mov	r3, r7
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_TIM2_Init+0x94>)
 8001496:	f004 ffe3 	bl	8006460 <HAL_TIMEx_MasterConfigSynchronization>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014a0:	f000 f90c 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000598 	.word	0x20000598

080014b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	463b      	mov	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_TIM3_Init+0x94>)
 80014ce:	4a1e      	ldr	r2, [pc, #120]	; (8001548 <MX_TIM3_Init+0x98>)
 80014d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <MX_TIM3_Init+0x94>)
 80014d4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80014d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_TIM3_Init+0x94>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_TIM3_Init+0x94>)
 80014e2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80014e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <MX_TIM3_Init+0x94>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_TIM3_Init+0x94>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014f4:	4813      	ldr	r0, [pc, #76]	; (8001544 <MX_TIM3_Init+0x94>)
 80014f6:	f004 fbfb 	bl	8005cf0 <HAL_TIM_Base_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001500:	f000 f8dc 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001508:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4619      	mov	r1, r3
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <MX_TIM3_Init+0x94>)
 8001512:	f004 fd8f 	bl	8006034 <HAL_TIM_ConfigClockSource>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800151c:	f000 f8ce 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_TIM3_Init+0x94>)
 800152e:	f004 ff97 	bl	8006460 <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001538:	f000 f8c0 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200005e0 	.word	0x200005e0
 8001548:	40000400 	.word	0x40000400

0800154c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <MX_USART2_UART_Init+0x50>)
 8001554:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 8001558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800155c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 8001584:	f004 ffee 	bl	8006564 <HAL_UART_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800158e:	f000 f895 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000628 	.word	0x20000628
 800159c:	40004400 	.word	0x40004400

080015a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_DMA_Init+0x3c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <MX_DMA_Init+0x3c>)
 80015b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_DMA_Init+0x3c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	203b      	movs	r0, #59	; 0x3b
 80015c8:	f000 fc31 	bl	8001e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80015cc:	203b      	movs	r0, #59	; 0x3b
 80015ce:	f000 fc4a 	bl	8001e66 <HAL_NVIC_EnableIRQ>

}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <MX_GPIO_Init+0xd0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a2c      	ldr	r2, [pc, #176]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a25      	ldr	r2, [pc, #148]	; (80016b0 <MX_GPIO_Init+0xd0>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <MX_GPIO_Init+0xd0>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <MX_GPIO_Init+0xd0>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2140      	movs	r1, #64	; 0x40
 800166a:	4812      	ldr	r0, [pc, #72]	; (80016b4 <MX_GPIO_Init+0xd4>)
 800166c:	f001 f9aa 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001676:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	480c      	ldr	r0, [pc, #48]	; (80016b8 <MX_GPIO_Init+0xd8>)
 8001688:	f001 f818 	bl	80026bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800168c:	2340      	movs	r3, #64	; 0x40
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_GPIO_Init+0xd4>)
 80016a4:	f001 f80a 	bl	80026bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a8:	bf00      	nop
 80016aa:	3728      	adds	r7, #40	; 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020400 	.word	0x40020400
 80016b8:	40020800 	.word	0x40020800

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <Error_Handler+0x8>
	...

080016c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_MspInit+0x4c>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <HAL_MspInit+0x4c>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_MspInit+0x4c>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_MspInit+0x4c>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_MspInit+0x4c>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_MspInit+0x4c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001706:	2007      	movs	r0, #7
 8001708:	f000 fb86 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40023800 	.word	0x40023800

08001718 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_I2C_MspInit+0x94>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d134      	bne.n	80017a4 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <HAL_I2C_MspInit+0x98>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <HAL_I2C_MspInit+0x98>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_I2C_MspInit+0x98>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001756:	f44f 7340 	mov.w	r3, #768	; 0x300
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175c:	2312      	movs	r3, #18
 800175e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001768:	2304      	movs	r3, #4
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4810      	ldr	r0, [pc, #64]	; (80017b4 <HAL_I2C_MspInit+0x9c>)
 8001774:	f000 ffa2 	bl	80026bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <HAL_I2C_MspInit+0x98>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HAL_I2C_MspInit+0x98>)
 8001782:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001786:	6413      	str	r3, [r2, #64]	; 0x40
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_I2C_MspInit+0x98>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	201f      	movs	r0, #31
 800179a:	f000 fb48 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800179e:	201f      	movs	r0, #31
 80017a0:	f000 fb61 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	; 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40005400 	.word	0x40005400
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020400 	.word	0x40020400

080017b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a34      	ldr	r2, [pc, #208]	; (80018a8 <HAL_SPI_MspInit+0xf0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d161      	bne.n	800189e <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b33      	ldr	r3, [pc, #204]	; (80018ac <HAL_SPI_MspInit+0xf4>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a32      	ldr	r2, [pc, #200]	; (80018ac <HAL_SPI_MspInit+0xf4>)
 80017e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b30      	ldr	r3, [pc, #192]	; (80018ac <HAL_SPI_MspInit+0xf4>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <HAL_SPI_MspInit+0xf4>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a2b      	ldr	r2, [pc, #172]	; (80018ac <HAL_SPI_MspInit+0xf4>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b29      	ldr	r3, [pc, #164]	; (80018ac <HAL_SPI_MspInit+0xf4>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001812:	23f0      	movs	r3, #240	; 0xf0
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001822:	2305      	movs	r3, #5
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4820      	ldr	r0, [pc, #128]	; (80018b0 <HAL_SPI_MspInit+0xf8>)
 800182e:	f000 ff45 	bl	80026bc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_SPI_MspInit+0xfc>)
 8001834:	4a20      	ldr	r2, [pc, #128]	; (80018b8 <HAL_SPI_MspInit+0x100>)
 8001836:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <HAL_SPI_MspInit+0xfc>)
 800183a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800183e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <HAL_SPI_MspInit+0xfc>)
 8001842:	2240      	movs	r2, #64	; 0x40
 8001844:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_SPI_MspInit+0xfc>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_SPI_MspInit+0xfc>)
 800184e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001852:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_SPI_MspInit+0xfc>)
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800185a:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_SPI_MspInit+0xfc>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001860:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_SPI_MspInit+0xfc>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <HAL_SPI_MspInit+0xfc>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_SPI_MspInit+0xfc>)
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001872:	4810      	ldr	r0, [pc, #64]	; (80018b4 <HAL_SPI_MspInit+0xfc>)
 8001874:	f000 fb12 	bl	8001e9c <HAL_DMA_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800187e:	f7ff ff1d 	bl	80016bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <HAL_SPI_MspInit+0xfc>)
 8001886:	649a      	str	r2, [r3, #72]	; 0x48
 8001888:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <HAL_SPI_MspInit+0xfc>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	2023      	movs	r0, #35	; 0x23
 8001894:	f000 facb 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001898:	2023      	movs	r0, #35	; 0x23
 800189a:	f000 fae4 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800189e:	bf00      	nop
 80018a0:	3728      	adds	r7, #40	; 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40013000 	.word	0x40013000
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	20000538 	.word	0x20000538
 80018b8:	40026458 	.word	0x40026458

080018bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018cc:	d116      	bne.n	80018fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_TIM_Base_MspInit+0x80>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a19      	ldr	r2, [pc, #100]	; (800193c <HAL_TIM_Base_MspInit+0x80>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_TIM_Base_MspInit+0x80>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	201c      	movs	r0, #28
 80018f0:	f000 fa9d 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018f4:	201c      	movs	r0, #28
 80018f6:	f000 fab6 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018fa:	e01a      	b.n	8001932 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HAL_TIM_Base_MspInit+0x84>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d115      	bne.n	8001932 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_TIM_Base_MspInit+0x80>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <HAL_TIM_Base_MspInit+0x80>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6413      	str	r3, [r2, #64]	; 0x40
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_TIM_Base_MspInit+0x80>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	201d      	movs	r0, #29
 8001928:	f000 fa81 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800192c:	201d      	movs	r0, #29
 800192e:	f000 fa9a 	bl	8001e66 <HAL_NVIC_EnableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40000400 	.word	0x40000400

08001944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <HAL_UART_MspInit+0x94>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d133      	bne.n	80019ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <HAL_UART_MspInit+0x98>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <HAL_UART_MspInit+0x98>)
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001974:	6413      	str	r3, [r2, #64]	; 0x40
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_UART_MspInit+0x98>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_UART_MspInit+0x98>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a14      	ldr	r2, [pc, #80]	; (80019dc <HAL_UART_MspInit+0x98>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_UART_MspInit+0x98>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800199e:	230c      	movs	r3, #12
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ae:	2307      	movs	r3, #7
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	4809      	ldr	r0, [pc, #36]	; (80019e0 <HAL_UART_MspInit+0x9c>)
 80019ba:	f000 fe7f 	bl	80026bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	2026      	movs	r0, #38	; 0x26
 80019c4:	f000 fa33 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019c8:	2026      	movs	r0, #38	; 0x26
 80019ca:	f000 fa4c 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40004400 	.word	0x40004400
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e8:	e7fe      	b.n	80019e8 <NMI_Handler+0x4>

080019ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <HardFault_Handler+0x4>

080019f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <MemManage_Handler+0x4>

080019f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <BusFault_Handler+0x4>

080019fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <UsageFault_Handler+0x4>

08001a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a30:	f000 f902 	bl	8001c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <TIM2_IRQHandler+0x10>)
 8001a3e:	f004 fa09 	bl	8005e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000598 	.word	0x20000598

08001a4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <TIM3_IRQHandler+0x10>)
 8001a52:	f004 f9ff 	bl	8005e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200005e0 	.word	0x200005e0

08001a60 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <I2C1_EV_IRQHandler+0x10>)
 8001a66:	f001 fae3 	bl	8003030 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000048c 	.word	0x2000048c

08001a74 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <SPI1_IRQHandler+0x10>)
 8001a7a:	f003 febf 	bl	80057fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200004e0 	.word	0x200004e0

08001a88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <USART2_IRQHandler+0x10>)
 8001a8e:	f004 fe45 	bl	800671c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000628 	.word	0x20000628

08001a9c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <DMA2_Stream3_IRQHandler+0x10>)
 8001aa2:	f000 fb93 	bl	80021cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000538 	.word	0x20000538

08001ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <_sbrk+0x5c>)
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <_sbrk+0x60>)
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <_sbrk+0x64>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <_sbrk+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d207      	bcs.n	8001af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae0:	f006 fcfe 	bl	80084e0 <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e009      	b.n	8001b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <_sbrk+0x64>)
 8001b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20018000 	.word	0x20018000
 8001b10:	00000400 	.word	0x00000400
 8001b14:	2000067c 	.word	0x2000067c
 8001b18:	200007d0 	.word	0x200007d0

08001b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <SystemInit+0x20>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <SystemInit+0x20>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b44:	f7ff ffea 	bl	8001b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b4a:	490d      	ldr	r1, [pc, #52]	; (8001b80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b60:	4c0a      	ldr	r4, [pc, #40]	; (8001b8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f006 fcbd 	bl	80084ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b72:	f7ff faff 	bl	8001174 <main>
  bx  lr    
 8001b76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b80:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b84:	08008f0c 	.word	0x08008f0c
  ldr r2, =_sbss
 8001b88:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b8c:	200007cc 	.word	0x200007cc

08001b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC_IRQHandler>
	...

08001b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <HAL_Init+0x40>)
 8001b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_Init+0x40>)
 8001baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_Init+0x40>)
 8001bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f000 f92b 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f000 f808 	bl	8001bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc8:	f7ff fd7e 	bl	80016c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023c00 	.word	0x40023c00

08001bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_InitTick+0x54>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x58>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f943 	bl	8001e82 <HAL_SYSTICK_Config>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00e      	b.n	8001c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b0f      	cmp	r3, #15
 8001c0a:	d80a      	bhi.n	8001c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f000 f90b 	bl	8001e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c18:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <HAL_InitTick+0x5c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000004 	.word	0x20000004
 8001c30:	2000000c 	.word	0x2000000c
 8001c34:	20000008 	.word	0x20000008

08001c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x20>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x24>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_IncTick+0x24>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	2000000c 	.word	0x2000000c
 8001c5c:	20000680 	.word	0x20000680

08001c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_GetTick+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000680 	.word	0x20000680

08001c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001caa:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60d3      	str	r3, [r2, #12]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f003 0307 	and.w	r3, r3, #7
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	db0b      	blt.n	8001d06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	4907      	ldr	r1, [pc, #28]	; (8001d14 <__NVIC_EnableIRQ+0x38>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	; (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	; (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
         );
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	; 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de4:	d301      	bcc.n	8001dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00f      	b.n	8001e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <SysTick_Config+0x40>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f7ff ff8e 	bl	8001d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <SysTick_Config+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <SysTick_Config+0x40>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff29 	bl	8001c78 <__NVIC_SetPriorityGrouping>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff3e 	bl	8001cc0 <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff8e 	bl	8001d6c <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5d 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff31 	bl	8001cdc <__NVIC_EnableIRQ>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffa2 	bl	8001dd4 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff feda 	bl	8001c60 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e099      	b.n	8001fec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed8:	e00f      	b.n	8001efa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eda:	f7ff fec1 	bl	8001c60 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	d908      	bls.n	8001efa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e078      	b.n	8001fec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e8      	bne.n	8001eda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <HAL_DMA_Init+0x158>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d107      	bne.n	8001f64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f023 0307 	bic.w	r3, r3, #7
 8001f7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d117      	bne.n	8001fbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00e      	beq.n	8001fbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 fb0f 	bl	80025c4 <DMA_CheckFifoParam>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2240      	movs	r2, #64	; 0x40
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e016      	b.n	8001fec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fac6 	bl	8002558 <DMA_CalcBaseAndBitshift>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	223f      	movs	r2, #63	; 0x3f
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	f010803f 	.word	0xf010803f

08001ff8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_DMA_Start_IT+0x26>
 800201a:	2302      	movs	r3, #2
 800201c:	e040      	b.n	80020a0 <HAL_DMA_Start_IT+0xa8>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d12f      	bne.n	8002092 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2202      	movs	r2, #2
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fa58 	bl	80024fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	223f      	movs	r2, #63	; 0x3f
 8002052:	409a      	lsls	r2, r3
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0216 	orr.w	r2, r2, #22
 8002066:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0208 	orr.w	r2, r2, #8
 800207e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e005      	b.n	800209e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800209a:	2302      	movs	r3, #2
 800209c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800209e:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020b6:	f7ff fdd3 	bl	8001c60 <HAL_GetTick>
 80020ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d008      	beq.n	80020da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2280      	movs	r2, #128	; 0x80
 80020cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e052      	b.n	8002180 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0216 	bic.w	r2, r2, #22
 80020e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d103      	bne.n	800210a <HAL_DMA_Abort+0x62>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0208 	bic.w	r2, r2, #8
 8002118:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0201 	bic.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800212a:	e013      	b.n	8002154 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800212c:	f7ff fd98 	bl	8001c60 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b05      	cmp	r3, #5
 8002138:	d90c      	bls.n	8002154 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2220      	movs	r2, #32
 800213e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2203      	movs	r2, #3
 8002144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e015      	b.n	8002180 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1e4      	bne.n	800212c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002166:	223f      	movs	r2, #63	; 0x3f
 8002168:	409a      	lsls	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d004      	beq.n	80021a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2280      	movs	r2, #128	; 0x80
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00c      	b.n	80021c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2205      	movs	r2, #5
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0201 	bic.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021d8:	4b8e      	ldr	r3, [pc, #568]	; (8002414 <HAL_DMA_IRQHandler+0x248>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a8e      	ldr	r2, [pc, #568]	; (8002418 <HAL_DMA_IRQHandler+0x24c>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0a9b      	lsrs	r3, r3, #10
 80021e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	2208      	movs	r2, #8
 80021f8:	409a      	lsls	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01a      	beq.n	8002238 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d013      	beq.n	8002238 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0204 	bic.w	r2, r2, #4
 800221e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002224:	2208      	movs	r2, #8
 8002226:	409a      	lsls	r2, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223c:	2201      	movs	r2, #1
 800223e:	409a      	lsls	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d012      	beq.n	800226e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225a:	2201      	movs	r2, #1
 800225c:	409a      	lsls	r2, r3
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	f043 0202 	orr.w	r2, r3, #2
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	2204      	movs	r2, #4
 8002274:	409a      	lsls	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d012      	beq.n	80022a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00b      	beq.n	80022a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	2204      	movs	r2, #4
 8002292:	409a      	lsls	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	f043 0204 	orr.w	r2, r3, #4
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	2210      	movs	r2, #16
 80022aa:	409a      	lsls	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d043      	beq.n	800233c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d03c      	beq.n	800233c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	2210      	movs	r2, #16
 80022c8:	409a      	lsls	r2, r3
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d018      	beq.n	800230e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d108      	bne.n	80022fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d024      	beq.n	800233c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	4798      	blx	r3
 80022fa:	e01f      	b.n	800233c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01b      	beq.n	800233c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	4798      	blx	r3
 800230c:	e016      	b.n	800233c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d107      	bne.n	800232c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0208 	bic.w	r2, r2, #8
 800232a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	2220      	movs	r2, #32
 8002342:	409a      	lsls	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 808f 	beq.w	800246c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8087 	beq.w	800246c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	2220      	movs	r2, #32
 8002364:	409a      	lsls	r2, r3
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b05      	cmp	r3, #5
 8002374:	d136      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0216 	bic.w	r2, r2, #22
 8002384:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002394:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	2b00      	cmp	r3, #0
 800239c:	d103      	bne.n	80023a6 <HAL_DMA_IRQHandler+0x1da>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0208 	bic.w	r2, r2, #8
 80023b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ba:	223f      	movs	r2, #63	; 0x3f
 80023bc:	409a      	lsls	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d07e      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4798      	blx	r3
        }
        return;
 80023e2:	e079      	b.n	80024d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d01d      	beq.n	800242e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10d      	bne.n	800241c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	2b00      	cmp	r3, #0
 8002406:	d031      	beq.n	800246c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4798      	blx	r3
 8002410:	e02c      	b.n	800246c <HAL_DMA_IRQHandler+0x2a0>
 8002412:	bf00      	nop
 8002414:	20000004 	.word	0x20000004
 8002418:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d023      	beq.n	800246c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
 800242c:	e01e      	b.n	800246c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10f      	bne.n	800245c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0210 	bic.w	r2, r2, #16
 800244a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	2b00      	cmp	r3, #0
 8002472:	d032      	beq.n	80024da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d022      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2205      	movs	r2, #5
 8002484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	3301      	adds	r3, #1
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d307      	bcc.n	80024b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f2      	bne.n	8002498 <HAL_DMA_IRQHandler+0x2cc>
 80024b2:	e000      	b.n	80024b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	4798      	blx	r3
 80024d6:	e000      	b.n	80024da <HAL_DMA_IRQHandler+0x30e>
        return;
 80024d8:	bf00      	nop
    }
  }
}
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ee:	b2db      	uxtb	r3, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002518:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b40      	cmp	r3, #64	; 0x40
 8002528:	d108      	bne.n	800253c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800253a:	e007      	b.n	800254c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	60da      	str	r2, [r3, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	3b10      	subs	r3, #16
 8002568:	4a14      	ldr	r2, [pc, #80]	; (80025bc <DMA_CalcBaseAndBitshift+0x64>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002572:	4a13      	ldr	r2, [pc, #76]	; (80025c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4413      	add	r3, r2
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d909      	bls.n	800259a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	1d1a      	adds	r2, r3, #4
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	659a      	str	r2, [r3, #88]	; 0x58
 8002598:	e007      	b.n	80025aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025a2:	f023 0303 	bic.w	r3, r3, #3
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	aaaaaaab 	.word	0xaaaaaaab
 80025c0:	08008e90 	.word	0x08008e90

080025c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d11f      	bne.n	800261e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d856      	bhi.n	8002692 <DMA_CheckFifoParam+0xce>
 80025e4:	a201      	add	r2, pc, #4	; (adr r2, 80025ec <DMA_CheckFifoParam+0x28>)
 80025e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ea:	bf00      	nop
 80025ec:	080025fd 	.word	0x080025fd
 80025f0:	0800260f 	.word	0x0800260f
 80025f4:	080025fd 	.word	0x080025fd
 80025f8:	08002693 	.word	0x08002693
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d046      	beq.n	8002696 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260c:	e043      	b.n	8002696 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002612:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002616:	d140      	bne.n	800269a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800261c:	e03d      	b.n	800269a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002626:	d121      	bne.n	800266c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d837      	bhi.n	800269e <DMA_CheckFifoParam+0xda>
 800262e:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <DMA_CheckFifoParam+0x70>)
 8002630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002634:	08002645 	.word	0x08002645
 8002638:	0800264b 	.word	0x0800264b
 800263c:	08002645 	.word	0x08002645
 8002640:	0800265d 	.word	0x0800265d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      break;
 8002648:	e030      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d025      	beq.n	80026a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265a:	e022      	b.n	80026a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002664:	d11f      	bne.n	80026a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800266a:	e01c      	b.n	80026a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d903      	bls.n	800267a <DMA_CheckFifoParam+0xb6>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d003      	beq.n	8002680 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002678:	e018      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
      break;
 800267e:	e015      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00e      	beq.n	80026aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
      break;
 8002690:	e00b      	b.n	80026aa <DMA_CheckFifoParam+0xe6>
      break;
 8002692:	bf00      	nop
 8002694:	e00a      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      break;
 8002696:	bf00      	nop
 8002698:	e008      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      break;
 800269a:	bf00      	nop
 800269c:	e006      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      break;
 800269e:	bf00      	nop
 80026a0:	e004      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      break;
 80026a2:	bf00      	nop
 80026a4:	e002      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      break;   
 80026a6:	bf00      	nop
 80026a8:	e000      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      break;
 80026aa:	bf00      	nop
    }
  } 
  
  return status; 
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop

080026bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	e159      	b.n	800298c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026d8:	2201      	movs	r2, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	f040 8148 	bne.w	8002986 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d005      	beq.n	800270e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270a:	2b02      	cmp	r3, #2
 800270c:	d130      	bne.n	8002770 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	2203      	movs	r2, #3
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002744:	2201      	movs	r2, #1
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 0201 	and.w	r2, r3, #1
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	2b03      	cmp	r3, #3
 800277a:	d017      	beq.n	80027ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2203      	movs	r2, #3
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d123      	bne.n	8002800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	08da      	lsrs	r2, r3, #3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3208      	adds	r2, #8
 80027c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	220f      	movs	r2, #15
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	08da      	lsrs	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3208      	adds	r2, #8
 80027fa:	69b9      	ldr	r1, [r7, #24]
 80027fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0203 	and.w	r2, r3, #3
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80a2 	beq.w	8002986 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b57      	ldr	r3, [pc, #348]	; (80029a4 <HAL_GPIO_Init+0x2e8>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	4a56      	ldr	r2, [pc, #344]	; (80029a4 <HAL_GPIO_Init+0x2e8>)
 800284c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002850:	6453      	str	r3, [r2, #68]	; 0x44
 8002852:	4b54      	ldr	r3, [pc, #336]	; (80029a4 <HAL_GPIO_Init+0x2e8>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800285e:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_GPIO_Init+0x2ec>)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	3302      	adds	r3, #2
 8002866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	220f      	movs	r2, #15
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a49      	ldr	r2, [pc, #292]	; (80029ac <HAL_GPIO_Init+0x2f0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d019      	beq.n	80028be <HAL_GPIO_Init+0x202>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a48      	ldr	r2, [pc, #288]	; (80029b0 <HAL_GPIO_Init+0x2f4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <HAL_GPIO_Init+0x1fe>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a47      	ldr	r2, [pc, #284]	; (80029b4 <HAL_GPIO_Init+0x2f8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00d      	beq.n	80028b6 <HAL_GPIO_Init+0x1fa>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a46      	ldr	r2, [pc, #280]	; (80029b8 <HAL_GPIO_Init+0x2fc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <HAL_GPIO_Init+0x1f6>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a45      	ldr	r2, [pc, #276]	; (80029bc <HAL_GPIO_Init+0x300>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <HAL_GPIO_Init+0x1f2>
 80028aa:	2304      	movs	r3, #4
 80028ac:	e008      	b.n	80028c0 <HAL_GPIO_Init+0x204>
 80028ae:	2307      	movs	r3, #7
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x204>
 80028b2:	2303      	movs	r3, #3
 80028b4:	e004      	b.n	80028c0 <HAL_GPIO_Init+0x204>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e002      	b.n	80028c0 <HAL_GPIO_Init+0x204>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_GPIO_Init+0x204>
 80028be:	2300      	movs	r3, #0
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	f002 0203 	and.w	r2, r2, #3
 80028c6:	0092      	lsls	r2, r2, #2
 80028c8:	4093      	lsls	r3, r2
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028d0:	4935      	ldr	r1, [pc, #212]	; (80029a8 <HAL_GPIO_Init+0x2ec>)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	3302      	adds	r3, #2
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028de:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <HAL_GPIO_Init+0x304>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002902:	4a2f      	ldr	r2, [pc, #188]	; (80029c0 <HAL_GPIO_Init+0x304>)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002908:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <HAL_GPIO_Init+0x304>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800292c:	4a24      	ldr	r2, [pc, #144]	; (80029c0 <HAL_GPIO_Init+0x304>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_GPIO_Init+0x304>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002956:	4a1a      	ldr	r2, [pc, #104]	; (80029c0 <HAL_GPIO_Init+0x304>)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_GPIO_Init+0x304>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002980:	4a0f      	ldr	r2, [pc, #60]	; (80029c0 <HAL_GPIO_Init+0x304>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3301      	adds	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b0f      	cmp	r3, #15
 8002990:	f67f aea2 	bls.w	80026d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3724      	adds	r7, #36	; 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40013800 	.word	0x40013800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020400 	.word	0x40020400
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020c00 	.word	0x40020c00
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40013c00 	.word	0x40013c00

080029c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]
 80029d0:	4613      	mov	r3, r2
 80029d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d4:	787b      	ldrb	r3, [r7, #1]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e0:	e003      	b.n	80029ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029e2:	887b      	ldrh	r3, [r7, #2]
 80029e4:	041a      	lsls	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	619a      	str	r2, [r3, #24]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b085      	sub	sp, #20
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	460b      	mov	r3, r1
 8002a00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a08:	887a      	ldrh	r2, [r7, #2]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	041a      	lsls	r2, r3, #16
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	887b      	ldrh	r3, [r7, #2]
 8002a16:	400b      	ands	r3, r1
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	619a      	str	r2, [r3, #24]
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e12b      	b.n	8002c96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe fe60 	bl	8001718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2224      	movs	r2, #36	; 0x24
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a90:	f002 fd50 	bl	8005534 <HAL_RCC_GetPCLK1Freq>
 8002a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4a81      	ldr	r2, [pc, #516]	; (8002ca0 <HAL_I2C_Init+0x274>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d807      	bhi.n	8002ab0 <HAL_I2C_Init+0x84>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4a80      	ldr	r2, [pc, #512]	; (8002ca4 <HAL_I2C_Init+0x278>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	bf94      	ite	ls
 8002aa8:	2301      	movls	r3, #1
 8002aaa:	2300      	movhi	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e006      	b.n	8002abe <HAL_I2C_Init+0x92>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4a7d      	ldr	r2, [pc, #500]	; (8002ca8 <HAL_I2C_Init+0x27c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	bf94      	ite	ls
 8002ab8:	2301      	movls	r3, #1
 8002aba:	2300      	movhi	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e0e7      	b.n	8002c96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4a78      	ldr	r2, [pc, #480]	; (8002cac <HAL_I2C_Init+0x280>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	0c9b      	lsrs	r3, r3, #18
 8002ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4a6a      	ldr	r2, [pc, #424]	; (8002ca0 <HAL_I2C_Init+0x274>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d802      	bhi.n	8002b00 <HAL_I2C_Init+0xd4>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	3301      	adds	r3, #1
 8002afe:	e009      	b.n	8002b14 <HAL_I2C_Init+0xe8>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	4a69      	ldr	r2, [pc, #420]	; (8002cb0 <HAL_I2C_Init+0x284>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	099b      	lsrs	r3, r3, #6
 8002b12:	3301      	adds	r3, #1
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	495c      	ldr	r1, [pc, #368]	; (8002ca0 <HAL_I2C_Init+0x274>)
 8002b30:	428b      	cmp	r3, r1
 8002b32:	d819      	bhi.n	8002b68 <HAL_I2C_Init+0x13c>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1e59      	subs	r1, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b42:	1c59      	adds	r1, r3, #1
 8002b44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b48:	400b      	ands	r3, r1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_I2C_Init+0x138>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1e59      	subs	r1, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b62:	e051      	b.n	8002c08 <HAL_I2C_Init+0x1dc>
 8002b64:	2304      	movs	r3, #4
 8002b66:	e04f      	b.n	8002c08 <HAL_I2C_Init+0x1dc>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d111      	bne.n	8002b94 <HAL_I2C_Init+0x168>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1e58      	subs	r0, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	440b      	add	r3, r1
 8002b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e012      	b.n	8002bba <HAL_I2C_Init+0x18e>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1e58      	subs	r0, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6859      	ldr	r1, [r3, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	0099      	lsls	r1, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002baa:	3301      	adds	r3, #1
 8002bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_Init+0x196>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e022      	b.n	8002c08 <HAL_I2C_Init+0x1dc>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10e      	bne.n	8002be8 <HAL_I2C_Init+0x1bc>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1e58      	subs	r0, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6859      	ldr	r1, [r3, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	440b      	add	r3, r1
 8002bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bdc:	3301      	adds	r3, #1
 8002bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be6:	e00f      	b.n	8002c08 <HAL_I2C_Init+0x1dc>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e58      	subs	r0, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	0099      	lsls	r1, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	6809      	ldr	r1, [r1, #0]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69da      	ldr	r2, [r3, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6911      	ldr	r1, [r2, #16]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68d2      	ldr	r2, [r2, #12]
 8002c42:	4311      	orrs	r1, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	000186a0 	.word	0x000186a0
 8002ca4:	001e847f 	.word	0x001e847f
 8002ca8:	003d08ff 	.word	0x003d08ff
 8002cac:	431bde83 	.word	0x431bde83
 8002cb0:	10624dd3 	.word	0x10624dd3

08002cb4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc6:	2b80      	cmp	r3, #128	; 0x80
 8002cc8:	d103      	bne.n	8002cd2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	461a      	mov	r2, r3
 8002cec:	460b      	mov	r3, r1
 8002cee:	817b      	strh	r3, [r7, #10]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cf4:	f7fe ffb4 	bl	8001c60 <HAL_GetTick>
 8002cf8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	f040 80e0 	bne.w	8002ec8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	2319      	movs	r3, #25
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4970      	ldr	r1, [pc, #448]	; (8002ed4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f001 fd78 	bl	8004808 <I2C_WaitOnFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e0d3      	b.n	8002eca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_I2C_Master_Transmit+0x50>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e0cc      	b.n	8002eca <HAL_I2C_Master_Transmit+0x1ea>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d007      	beq.n	8002d56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0201 	orr.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2221      	movs	r2, #33	; 0x21
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2210      	movs	r2, #16
 8002d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	893a      	ldrh	r2, [r7, #8]
 8002d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4a50      	ldr	r2, [pc, #320]	; (8002ed8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d98:	8979      	ldrh	r1, [r7, #10]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	6a3a      	ldr	r2, [r7, #32]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f001 fc08 	bl	80045b4 <I2C_MasterRequestWrite>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e08d      	b.n	8002eca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002dc4:	e066      	b.n	8002e94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	6a39      	ldr	r1, [r7, #32]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f001 fe36 	bl	8004a3c <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00d      	beq.n	8002df2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d107      	bne.n	8002dee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e06b      	b.n	8002eca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	781a      	ldrb	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d11b      	bne.n	8002e68 <HAL_I2C_Master_Transmit+0x188>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d017      	beq.n	8002e68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	6a39      	ldr	r1, [r7, #32]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f001 fe2d 	bl	8004acc <I2C_WaitOnBTFFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00d      	beq.n	8002e94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d107      	bne.n	8002e90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e01a      	b.n	8002eca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d194      	bne.n	8002dc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e000      	b.n	8002eca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
  }
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	00100002 	.word	0x00100002
 8002ed8:	ffff0000 	.word	0xffff0000

08002edc <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	460b      	mov	r3, r1
 8002eea:	817b      	strh	r3, [r7, #10]
 8002eec:	4613      	mov	r3, r2
 8002eee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	f040 8089 	bne.w	8003014 <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f02:	4b48      	ldr	r3, [pc, #288]	; (8003024 <HAL_I2C_Master_Receive_IT+0x148>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	08db      	lsrs	r3, r3, #3
 8002f08:	4a47      	ldr	r2, [pc, #284]	; (8003028 <HAL_I2C_Master_Receive_IT+0x14c>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0a1a      	lsrs	r2, r3, #8
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	009a      	lsls	r2, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d112      	bne.n	8002f4e <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f043 0220 	orr.w	r2, r3, #32
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e063      	b.n	8003016 <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d0df      	beq.n	8002f1c <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Master_Receive_IT+0x8e>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e055      	b.n	8003016 <HAL_I2C_Master_Receive_IT+0x13a>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d007      	beq.n	8002f90 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2222      	movs	r2, #34	; 0x22
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2210      	movs	r2, #16
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	893a      	ldrh	r2, [r7, #8]
 8002fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_I2C_Master_Receive_IT+0x150>)
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002fd2:	897a      	ldrh	r2, [r7, #10]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002fee:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ffe:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800300e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	e000      	b.n	8003016 <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8003014:	2302      	movs	r3, #2
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	371c      	adds	r7, #28
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	20000004 	.word	0x20000004
 8003028:	14f8b589 	.word	0x14f8b589
 800302c:	ffff0000 	.word	0xffff0000

08003030 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003050:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003058:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	2b10      	cmp	r3, #16
 800305e:	d003      	beq.n	8003068 <HAL_I2C_EV_IRQHandler+0x38>
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	f040 80b1 	bne.w	80031ca <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10d      	bne.n	800309e <HAL_I2C_EV_IRQHandler+0x6e>
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003088:	d003      	beq.n	8003092 <HAL_I2C_EV_IRQHandler+0x62>
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003090:	d101      	bne.n	8003096 <HAL_I2C_EV_IRQHandler+0x66>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_I2C_EV_IRQHandler+0x68>
 8003096:	2300      	movs	r3, #0
 8003098:	2b01      	cmp	r3, #1
 800309a:	f000 8114 	beq.w	80032c6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00b      	beq.n	80030c0 <HAL_I2C_EV_IRQHandler+0x90>
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f001 fdb3 	bl	8004c1e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fcd1 	bl	8003a60 <I2C_Master_SB>
 80030be:	e083      	b.n	80031c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <HAL_I2C_EV_IRQHandler+0xac>
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fd49 	bl	8003b6c <I2C_Master_ADD10>
 80030da:	e075      	b.n	80031c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_I2C_EV_IRQHandler+0xc8>
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fd65 	bl	8003bc0 <I2C_Master_ADDR>
 80030f6:	e067      	b.n	80031c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d036      	beq.n	8003170 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003110:	f000 80db 	beq.w	80032ca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00d      	beq.n	800313a <HAL_I2C_EV_IRQHandler+0x10a>
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_I2C_EV_IRQHandler+0x10a>
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d103      	bne.n	800313a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f92d 	bl	8003392 <I2C_MasterTransmit_TXE>
 8003138:	e046      	b.n	80031c8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80c2 	beq.w	80032ca <HAL_I2C_EV_IRQHandler+0x29a>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80bc 	beq.w	80032ca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003152:	7bbb      	ldrb	r3, [r7, #14]
 8003154:	2b21      	cmp	r3, #33	; 0x21
 8003156:	d103      	bne.n	8003160 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f9b6 	bl	80034ca <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800315e:	e0b4      	b.n	80032ca <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	f040 80b1 	bne.w	80032ca <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fa24 	bl	80035b6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800316e:	e0ac      	b.n	80032ca <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317e:	f000 80a4 	beq.w	80032ca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00d      	beq.n	80031a8 <HAL_I2C_EV_IRQHandler+0x178>
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_I2C_EV_IRQHandler+0x178>
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d103      	bne.n	80031a8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 faa0 	bl	80036e6 <I2C_MasterReceive_RXNE>
 80031a6:	e00f      	b.n	80031c8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 808b 	beq.w	80032ca <HAL_I2C_EV_IRQHandler+0x29a>
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8085 	beq.w	80032ca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fb58 	bl	8003876 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031c6:	e080      	b.n	80032ca <HAL_I2C_EV_IRQHandler+0x29a>
 80031c8:	e07f      	b.n	80032ca <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d004      	beq.n	80031dc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	e007      	b.n	80031ec <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d011      	beq.n	800321a <HAL_I2C_EV_IRQHandler+0x1ea>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00c      	beq.n	800321a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003210:	69b9      	ldr	r1, [r7, #24]
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 ff23 	bl	800405e <I2C_Slave_ADDR>
 8003218:	e05a      	b.n	80032d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_I2C_EV_IRQHandler+0x206>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 ff5e 	bl	80040f0 <I2C_Slave_STOPF>
 8003234:	e04c      	b.n	80032d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003236:	7bbb      	ldrb	r3, [r7, #14]
 8003238:	2b21      	cmp	r3, #33	; 0x21
 800323a:	d002      	beq.n	8003242 <HAL_I2C_EV_IRQHandler+0x212>
 800323c:	7bbb      	ldrb	r3, [r7, #14]
 800323e:	2b29      	cmp	r3, #41	; 0x29
 8003240:	d120      	bne.n	8003284 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00d      	beq.n	8003268 <HAL_I2C_EV_IRQHandler+0x238>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_I2C_EV_IRQHandler+0x238>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d103      	bne.n	8003268 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fe3e 	bl	8003ee2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003266:	e032      	b.n	80032ce <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d02d      	beq.n	80032ce <HAL_I2C_EV_IRQHandler+0x29e>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003278:	2b00      	cmp	r3, #0
 800327a:	d028      	beq.n	80032ce <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fe6d 	bl	8003f5c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003282:	e024      	b.n	80032ce <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00d      	beq.n	80032aa <HAL_I2C_EV_IRQHandler+0x27a>
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_I2C_EV_IRQHandler+0x27a>
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d103      	bne.n	80032aa <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fe7b 	bl	8003f9e <I2C_SlaveReceive_RXNE>
 80032a8:	e012      	b.n	80032d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00d      	beq.n	80032d0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 feab 	bl	800401a <I2C_SlaveReceive_BTF>
 80032c4:	e004      	b.n	80032d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80032c6:	bf00      	nop
 80032c8:	e002      	b.n	80032d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ca:	bf00      	nop
 80032cc:	e000      	b.n	80032d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ce:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	70fb      	strb	r3, [r7, #3]
 800331e:	4613      	mov	r3, r2
 8003320:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d150      	bne.n	800345a <I2C_MasterTransmit_TXE+0xc8>
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b21      	cmp	r3, #33	; 0x21
 80033bc:	d14d      	bne.n	800345a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d01d      	beq.n	8003400 <I2C_MasterTransmit_TXE+0x6e>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d01a      	beq.n	8003400 <I2C_MasterTransmit_TXE+0x6e>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033d0:	d016      	beq.n	8003400 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033e0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2211      	movs	r2, #17
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff ff6c 	bl	80032d6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033fe:	e060      	b.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800340e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d107      	bne.n	800344a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ff7d 	bl	8003342 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003448:	e03b      	b.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ff3f 	bl	80032d6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003458:	e033      	b.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	2b21      	cmp	r3, #33	; 0x21
 800345e:	d005      	beq.n	800346c <I2C_MasterTransmit_TXE+0xda>
 8003460:	7bbb      	ldrb	r3, [r7, #14]
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d12d      	bne.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	2b22      	cmp	r3, #34	; 0x22
 800346a:	d12a      	bne.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d108      	bne.n	8003488 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003484:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003486:	e01c      	b.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d103      	bne.n	800349c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f88e 	bl	80035b6 <I2C_MemoryTransmit_TXE_BTF>
}
 800349a:	e012      	b.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034c0:	e7ff      	b.n	80034c2 <I2C_MasterTransmit_TXE+0x130>
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b21      	cmp	r3, #33	; 0x21
 80034e2:	d164      	bne.n	80035ae <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d012      	beq.n	8003514 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	781a      	ldrb	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003512:	e04c      	b.n	80035ae <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b08      	cmp	r3, #8
 8003518:	d01d      	beq.n	8003556 <I2C_MasterTransmit_BTF+0x8c>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b20      	cmp	r3, #32
 800351e:	d01a      	beq.n	8003556 <I2C_MasterTransmit_BTF+0x8c>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003526:	d016      	beq.n	8003556 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003536:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2211      	movs	r2, #17
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff fec1 	bl	80032d6 <HAL_I2C_MasterTxCpltCallback>
}
 8003554:	e02b      	b.n	80035ae <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003564:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003574:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d107      	bne.n	80035a0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff fed2 	bl	8003342 <HAL_I2C_MemTxCpltCallback>
}
 800359e:	e006      	b.n	80035ae <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff fe94 	bl	80032d6 <HAL_I2C_MasterTxCpltCallback>
}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d11d      	bne.n	800360a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d10b      	bne.n	80035ee <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e6:	1c9a      	adds	r2, r3, #2
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80035ec:	e077      	b.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	121b      	asrs	r3, r3, #8
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003608:	e069      	b.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10b      	bne.n	800362a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003616:	b2da      	uxtb	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003628:	e059      	b.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362e:	2b02      	cmp	r3, #2
 8003630:	d152      	bne.n	80036d8 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	2b22      	cmp	r3, #34	; 0x22
 8003636:	d10d      	bne.n	8003654 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003646:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003652:	e044      	b.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d015      	beq.n	800368a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b21      	cmp	r3, #33	; 0x21
 8003662:	d112      	bne.n	800368a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	781a      	ldrb	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003688:	e029      	b.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d124      	bne.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	2b21      	cmp	r3, #33	; 0x21
 8003698:	d121      	bne.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036a8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fe36 	bl	8003342 <HAL_I2C_MemTxCpltCallback>
}
 80036d6:	e002      	b.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff faeb 	bl	8002cb4 <I2C_Flush_DR>
}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b22      	cmp	r3, #34	; 0x22
 80036f8:	f040 80b9 	bne.w	800386e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d921      	bls.n	8003754 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b03      	cmp	r3, #3
 800373e:	f040 8096 	bne.w	800386e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003750:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003752:	e08c      	b.n	800386e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	2b02      	cmp	r3, #2
 800375a:	d07f      	beq.n	800385c <I2C_MasterReceive_RXNE+0x176>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d002      	beq.n	8003768 <I2C_MasterReceive_RXNE+0x82>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d179      	bne.n	800385c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f001 f9f7 	bl	8004b5c <I2C_WaitOnSTOPRequestThroughIT>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d14c      	bne.n	800380e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003782:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003792:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d10a      	bne.n	80037e4 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff fdba 	bl	8003356 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037e2:	e044      	b.n	800386e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d002      	beq.n	80037f8 <I2C_MasterReceive_RXNE+0x112>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d103      	bne.n	8003800 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
 80037fe:	e002      	b.n	8003806 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2212      	movs	r2, #18
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fd fb4c 	bl	8000ea4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800380c:	e02f      	b.n	800386e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800381c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff fd88 	bl	800336a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800385a:	e008      	b.n	800386e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800386a:	605a      	str	r2, [r3, #4]
}
 800386c:	e7ff      	b.n	800386e <I2C_MasterReceive_RXNE+0x188>
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b04      	cmp	r3, #4
 800388c:	d11b      	bne.n	80038c6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80038c4:	e0c8      	b.n	8003a58 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d129      	bne.n	8003924 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038de:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d00a      	beq.n	80038fc <I2C_MasterReceive_BTF+0x86>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d007      	beq.n	80038fc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003922:	e099      	b.n	8003a58 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	f040 8081 	bne.w	8003a32 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d002      	beq.n	800393c <I2C_MasterReceive_BTF+0xc6>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b10      	cmp	r3, #16
 800393a:	d108      	bne.n	800394e <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	e019      	b.n	8003982 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b04      	cmp	r3, #4
 8003952:	d002      	beq.n	800395a <I2C_MasterReceive_BTF+0xe4>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d108      	bne.n	800396c <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e00a      	b.n	8003982 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b10      	cmp	r3, #16
 8003970:	d007      	beq.n	8003982 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003980:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039dc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b40      	cmp	r3, #64	; 0x40
 80039f0:	d10a      	bne.n	8003a08 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff fca8 	bl	8003356 <HAL_I2C_MemRxCpltCallback>
}
 8003a06:	e027      	b.n	8003a58 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d002      	beq.n	8003a1c <I2C_MasterReceive_BTF+0x1a6>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d103      	bne.n	8003a24 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30
 8003a22:	e002      	b.n	8003a2a <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2212      	movs	r2, #18
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fd fa3a 	bl	8000ea4 <HAL_I2C_MasterRxCpltCallback>
}
 8003a30:	e012      	b.n	8003a58 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b40      	cmp	r3, #64	; 0x40
 8003a72:	d117      	bne.n	8003aa4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	461a      	mov	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a8c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a8e:	e067      	b.n	8003b60 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	611a      	str	r2, [r3, #16]
}
 8003aa2:	e05d      	b.n	8003b60 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aac:	d133      	bne.n	8003b16 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b21      	cmp	r3, #33	; 0x21
 8003ab8:	d109      	bne.n	8003ace <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003aca:	611a      	str	r2, [r3, #16]
 8003acc:	e008      	b.n	8003ae0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d004      	beq.n	8003af2 <I2C_Master_SB+0x92>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d108      	bne.n	8003b04 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d032      	beq.n	8003b60 <I2C_Master_SB+0x100>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d02d      	beq.n	8003b60 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b12:	605a      	str	r2, [r3, #4]
}
 8003b14:	e024      	b.n	8003b60 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10e      	bne.n	8003b3c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	11db      	asrs	r3, r3, #7
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f003 0306 	and.w	r3, r3, #6
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f063 030f 	orn	r3, r3, #15
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	611a      	str	r2, [r3, #16]
}
 8003b3a:	e011      	b.n	8003b60 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d10d      	bne.n	8003b60 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	11db      	asrs	r3, r3, #7
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f003 0306 	and.w	r3, r3, #6
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f063 030e 	orn	r3, r3, #14
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	611a      	str	r2, [r3, #16]
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d004      	beq.n	8003b92 <I2C_Master_ADD10+0x26>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d108      	bne.n	8003ba4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00c      	beq.n	8003bb4 <I2C_Master_ADD10+0x48>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb2:	605a      	str	r2, [r3, #4]
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b091      	sub	sp, #68	; 0x44
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b22      	cmp	r3, #34	; 0x22
 8003be8:	f040 8169 	bne.w	8003ebe <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10f      	bne.n	8003c14 <I2C_Master_ADDR+0x54>
 8003bf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003bf8:	2b40      	cmp	r3, #64	; 0x40
 8003bfa:	d10b      	bne.n	8003c14 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	633b      	str	r3, [r7, #48]	; 0x30
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	e160      	b.n	8003ed6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d11d      	bne.n	8003c58 <I2C_Master_ADDR+0x98>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c24:	d118      	bne.n	8003c58 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c26:	2300      	movs	r3, #0
 8003c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c4a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	651a      	str	r2, [r3, #80]	; 0x50
 8003c56:	e13e      	b.n	8003ed6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d113      	bne.n	8003c8a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c62:	2300      	movs	r3, #0
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e115      	b.n	8003eb6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	f040 808a 	bne.w	8003daa <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c9c:	d137      	bne.n	8003d0e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cac:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cbc:	d113      	bne.n	8003ce6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ccc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	e0e7      	b.n	8003eb6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	623b      	str	r3, [r7, #32]
 8003cfa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e0d3      	b.n	8003eb6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d02e      	beq.n	8003d72 <I2C_Master_ADDR+0x1b2>
 8003d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d02b      	beq.n	8003d72 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1c:	2b12      	cmp	r3, #18
 8003d1e:	d102      	bne.n	8003d26 <I2C_Master_ADDR+0x166>
 8003d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d125      	bne.n	8003d72 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d00e      	beq.n	8003d4a <I2C_Master_ADDR+0x18a>
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d00b      	beq.n	8003d4a <I2C_Master_ADDR+0x18a>
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d008      	beq.n	8003d4a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	e007      	b.n	8003d5a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d58:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	61fb      	str	r3, [r7, #28]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	e0a1      	b.n	8003eb6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d80:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	61bb      	str	r3, [r7, #24]
 8003d96:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	e085      	b.n	8003eb6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d14d      	bne.n	8003e50 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d016      	beq.n	8003de8 <I2C_Master_ADDR+0x228>
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d013      	beq.n	8003de8 <I2C_Master_ADDR+0x228>
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d010      	beq.n	8003de8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e007      	b.n	8003df8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003df6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e06:	d117      	bne.n	8003e38 <I2C_Master_ADDR+0x278>
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e0e:	d00b      	beq.n	8003e28 <I2C_Master_ADDR+0x268>
 8003e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d008      	beq.n	8003e28 <I2C_Master_ADDR+0x268>
 8003e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d005      	beq.n	8003e28 <I2C_Master_ADDR+0x268>
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1e:	2b10      	cmp	r3, #16
 8003e20:	d002      	beq.n	8003e28 <I2C_Master_ADDR+0x268>
 8003e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d107      	bne.n	8003e38 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e36:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	e032      	b.n	8003eb6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e5e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e6e:	d117      	bne.n	8003ea0 <I2C_Master_ADDR+0x2e0>
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e76:	d00b      	beq.n	8003e90 <I2C_Master_ADDR+0x2d0>
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d008      	beq.n	8003e90 <I2C_Master_ADDR+0x2d0>
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d005      	beq.n	8003e90 <I2C_Master_ADDR+0x2d0>
 8003e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d002      	beq.n	8003e90 <I2C_Master_ADDR+0x2d0>
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d107      	bne.n	8003ea0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e9e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003ebc:	e00b      	b.n	8003ed6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
}
 8003ed4:	e7ff      	b.n	8003ed6 <I2C_Master_ADDR+0x316>
 8003ed6:	bf00      	nop
 8003ed8:	3744      	adds	r7, #68	; 0x44
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d02b      	beq.n	8003f54 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	781a      	ldrb	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d114      	bne.n	8003f54 <I2C_SlaveTransmit_TXE+0x72>
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b29      	cmp	r3, #41	; 0x29
 8003f2e:	d111      	bne.n	8003f54 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f3e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2221      	movs	r2, #33	; 0x21
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2228      	movs	r2, #40	; 0x28
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff f9cb 	bl	80032ea <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d011      	beq.n	8003f92 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	781a      	ldrb	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d02c      	beq.n	8004012 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d114      	bne.n	8004012 <I2C_SlaveReceive_RXNE+0x74>
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b2a      	cmp	r3, #42	; 0x2a
 8003fec:	d111      	bne.n	8004012 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2222      	movs	r2, #34	; 0x22
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2228      	movs	r2, #40	; 0x28
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff f976 	bl	80032fe <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d012      	beq.n	8004052 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004068:	2300      	movs	r3, #0
 800406a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004078:	2b28      	cmp	r3, #40	; 0x28
 800407a:	d125      	bne.n	80040c8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d103      	bne.n	80040ac <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	81bb      	strh	r3, [r7, #12]
 80040aa:	e002      	b.n	80040b2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80040ba:	89ba      	ldrh	r2, [r7, #12]
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	4619      	mov	r1, r3
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff f926 	bl	8003312 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80040c6:	e00e      	b.n	80040e6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c8:	2300      	movs	r3, #0
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800410e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004110:	2300      	movs	r3, #0
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0201 	orr.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414c:	d172      	bne.n	8004234 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	2b22      	cmp	r3, #34	; 0x22
 8004152:	d002      	beq.n	800415a <I2C_Slave_STOPF+0x6a>
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	2b2a      	cmp	r3, #42	; 0x2a
 8004158:	d135      	bne.n	80041c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f043 0204 	orr.w	r2, r3, #4
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800418c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe f9a4 	bl	80024e0 <HAL_DMA_GetState>
 8004198:	4603      	mov	r3, r0
 800419a:	2b01      	cmp	r3, #1
 800419c:	d049      	beq.n	8004232 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	4a69      	ldr	r2, [pc, #420]	; (8004348 <I2C_Slave_STOPF+0x258>)
 80041a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd ffec 	bl	8002188 <HAL_DMA_Abort_IT>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d03d      	beq.n	8004232 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041c0:	4610      	mov	r0, r2
 80041c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041c4:	e035      	b.n	8004232 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f043 0204 	orr.w	r2, r3, #4
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe f96e 	bl	80024e0 <HAL_DMA_GetState>
 8004204:	4603      	mov	r3, r0
 8004206:	2b01      	cmp	r3, #1
 8004208:	d014      	beq.n	8004234 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420e:	4a4e      	ldr	r2, [pc, #312]	; (8004348 <I2C_Slave_STOPF+0x258>)
 8004210:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004216:	4618      	mov	r0, r3
 8004218:	f7fd ffb6 	bl	8002188 <HAL_DMA_Abort_IT>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800422c:	4610      	mov	r0, r2
 800422e:	4798      	blx	r3
 8004230:	e000      	b.n	8004234 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004232:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d03e      	beq.n	80042bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b04      	cmp	r3, #4
 800424a:	d112      	bne.n	8004272 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d112      	bne.n	80042a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f043 0204 	orr.w	r2, r3, #4
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f843 	bl	8004350 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80042ca:	e039      	b.n	8004340 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b2a      	cmp	r3, #42	; 0x2a
 80042d0:	d109      	bne.n	80042e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2228      	movs	r2, #40	; 0x28
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff f80c 	bl	80032fe <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b28      	cmp	r3, #40	; 0x28
 80042f0:	d111      	bne.n	8004316 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a15      	ldr	r2, [pc, #84]	; (800434c <I2C_Slave_STOPF+0x25c>)
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff f80d 	bl	800332e <HAL_I2C_ListenCpltCallback>
}
 8004314:	e014      	b.n	8004340 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	2b22      	cmp	r3, #34	; 0x22
 800431c:	d002      	beq.n	8004324 <I2C_Slave_STOPF+0x234>
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	2b22      	cmp	r3, #34	; 0x22
 8004322:	d10d      	bne.n	8004340 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fe ffdf 	bl	80032fe <HAL_I2C_SlaveRxCpltCallback>
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	080046b9 	.word	0x080046b9
 800434c:	ffff0000 	.word	0xffff0000

08004350 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004366:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004368:	7bbb      	ldrb	r3, [r7, #14]
 800436a:	2b10      	cmp	r3, #16
 800436c:	d002      	beq.n	8004374 <I2C_ITError+0x24>
 800436e:	7bbb      	ldrb	r3, [r7, #14]
 8004370:	2b40      	cmp	r3, #64	; 0x40
 8004372:	d10a      	bne.n	800438a <I2C_ITError+0x3a>
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b22      	cmp	r3, #34	; 0x22
 8004378:	d107      	bne.n	800438a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004388:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004390:	2b28      	cmp	r3, #40	; 0x28
 8004392:	d107      	bne.n	80043a4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2228      	movs	r2, #40	; 0x28
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043a2:	e015      	b.n	80043d0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b2:	d00a      	beq.n	80043ca <I2C_ITError+0x7a>
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	2b60      	cmp	r3, #96	; 0x60
 80043b8:	d007      	beq.n	80043ca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043de:	d162      	bne.n	80044a6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d020      	beq.n	8004440 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004402:	4a6a      	ldr	r2, [pc, #424]	; (80045ac <I2C_ITError+0x25c>)
 8004404:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440a:	4618      	mov	r0, r3
 800440c:	f7fd febc 	bl	8002188 <HAL_DMA_Abort_IT>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 8089 	beq.w	800452a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800443a:	4610      	mov	r0, r2
 800443c:	4798      	blx	r3
 800443e:	e074      	b.n	800452a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	4a59      	ldr	r2, [pc, #356]	; (80045ac <I2C_ITError+0x25c>)
 8004446:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	4618      	mov	r0, r3
 800444e:	f7fd fe9b 	bl	8002188 <HAL_DMA_Abort_IT>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d068      	beq.n	800452a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004462:	2b40      	cmp	r3, #64	; 0x40
 8004464:	d10b      	bne.n	800447e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044a0:	4610      	mov	r0, r2
 80044a2:	4798      	blx	r3
 80044a4:	e041      	b.n	800452a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b60      	cmp	r3, #96	; 0x60
 80044b0:	d125      	bne.n	80044fe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b40      	cmp	r3, #64	; 0x40
 80044cc:	d10b      	bne.n	80044e6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0201 	bic.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fe ff41 	bl	800337e <HAL_I2C_AbortCpltCallback>
 80044fc:	e015      	b.n	800452a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b40      	cmp	r3, #64	; 0x40
 800450a:	d10b      	bne.n	8004524 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7fe ff20 	bl	800336a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10e      	bne.n	8004558 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004540:	2b00      	cmp	r3, #0
 8004542:	d109      	bne.n	8004558 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800454a:	2b00      	cmp	r3, #0
 800454c:	d104      	bne.n	8004558 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004566:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b04      	cmp	r3, #4
 800457a:	d113      	bne.n	80045a4 <I2C_ITError+0x254>
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2b28      	cmp	r3, #40	; 0x28
 8004580:	d110      	bne.n	80045a4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <I2C_ITError+0x260>)
 8004586:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fe fec5 	bl	800332e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	080046b9 	.word	0x080046b9
 80045b0:	ffff0000 	.word	0xffff0000

080045b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	460b      	mov	r3, r1
 80045c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d006      	beq.n	80045de <I2C_MasterRequestWrite+0x2a>
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d003      	beq.n	80045de <I2C_MasterRequestWrite+0x2a>
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045dc:	d108      	bne.n	80045f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	e00b      	b.n	8004608 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	2b12      	cmp	r3, #18
 80045f6:	d107      	bne.n	8004608 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004606:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f8f7 	bl	8004808 <I2C_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00d      	beq.n	800463c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462e:	d103      	bne.n	8004638 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004636:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e035      	b.n	80046a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004644:	d108      	bne.n	8004658 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004646:	897b      	ldrh	r3, [r7, #10]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004654:	611a      	str	r2, [r3, #16]
 8004656:	e01b      	b.n	8004690 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004658:	897b      	ldrh	r3, [r7, #10]
 800465a:	11db      	asrs	r3, r3, #7
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f003 0306 	and.w	r3, r3, #6
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f063 030f 	orn	r3, r3, #15
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	490e      	ldr	r1, [pc, #56]	; (80046b0 <I2C_MasterRequestWrite+0xfc>)
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f940 	bl	80048fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e010      	b.n	80046a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004686:	897b      	ldrh	r3, [r7, #10]
 8004688:	b2da      	uxtb	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	4907      	ldr	r1, [pc, #28]	; (80046b4 <I2C_MasterRequestWrite+0x100>)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f930 	bl	80048fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	00010008 	.word	0x00010008
 80046b4:	00010002 	.word	0x00010002

080046b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80046d2:	4b4b      	ldr	r3, [pc, #300]	; (8004800 <I2C_DMAAbort+0x148>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	08db      	lsrs	r3, r3, #3
 80046d8:	4a4a      	ldr	r2, [pc, #296]	; (8004804 <I2C_DMAAbort+0x14c>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	0a1a      	lsrs	r2, r3, #8
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	00da      	lsls	r2, r3, #3
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f043 0220 	orr.w	r2, r3, #32
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80046fe:	e00a      	b.n	8004716 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3b01      	subs	r3, #1
 8004704:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004714:	d0ea      	beq.n	80046ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004722:	2200      	movs	r2, #0
 8004724:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	2200      	movs	r2, #0
 8004734:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004744:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2200      	movs	r2, #0
 800474a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	2200      	movs	r2, #0
 800475a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	2200      	movs	r2, #0
 800476a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0201 	bic.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b60      	cmp	r3, #96	; 0x60
 8004786:	d10e      	bne.n	80047a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2200      	movs	r2, #0
 800479c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800479e:	6978      	ldr	r0, [r7, #20]
 80047a0:	f7fe fded 	bl	800337e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047a4:	e027      	b.n	80047f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047a6:	7cfb      	ldrb	r3, [r7, #19]
 80047a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047ac:	2b28      	cmp	r3, #40	; 0x28
 80047ae:	d117      	bne.n	80047e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2200      	movs	r2, #0
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2228      	movs	r2, #40	; 0x28
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047de:	e007      	b.n	80047f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80047f0:	6978      	ldr	r0, [r7, #20]
 80047f2:	f7fe fdba 	bl	800336a <HAL_I2C_ErrorCallback>
}
 80047f6:	bf00      	nop
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20000004 	.word	0x20000004
 8004804:	14f8b589 	.word	0x14f8b589

08004808 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004818:	e048      	b.n	80048ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004820:	d044      	beq.n	80048ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004822:	f7fd fa1d 	bl	8001c60 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d302      	bcc.n	8004838 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d139      	bne.n	80048ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	0c1b      	lsrs	r3, r3, #16
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d10d      	bne.n	800485e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	43da      	mvns	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	4013      	ands	r3, r2
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	461a      	mov	r2, r3
 800485c:	e00c      	b.n	8004878 <I2C_WaitOnFlagUntilTimeout+0x70>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	43da      	mvns	r2, r3
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4013      	ands	r3, r2
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	bf0c      	ite	eq
 8004870:	2301      	moveq	r3, #1
 8004872:	2300      	movne	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	429a      	cmp	r2, r3
 800487c:	d116      	bne.n	80048ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	f043 0220 	orr.w	r2, r3, #32
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e023      	b.n	80048f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	0c1b      	lsrs	r3, r3, #16
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d10d      	bne.n	80048d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	43da      	mvns	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4013      	ands	r3, r2
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	e00c      	b.n	80048ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	43da      	mvns	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4013      	ands	r3, r2
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bf0c      	ite	eq
 80048e4:	2301      	moveq	r3, #1
 80048e6:	2300      	movne	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d093      	beq.n	800481a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800490a:	e071      	b.n	80049f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491a:	d123      	bne.n	8004964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004934:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	f043 0204 	orr.w	r2, r3, #4
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e067      	b.n	8004a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496a:	d041      	beq.n	80049f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496c:	f7fd f978 	bl	8001c60 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	429a      	cmp	r2, r3
 800497a:	d302      	bcc.n	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d136      	bne.n	80049f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	0c1b      	lsrs	r3, r3, #16
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	d10c      	bne.n	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	43da      	mvns	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4013      	ands	r3, r2
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	bf14      	ite	ne
 800499e:	2301      	movne	r3, #1
 80049a0:	2300      	moveq	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	e00b      	b.n	80049be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	43da      	mvns	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	4013      	ands	r3, r2
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bf14      	ite	ne
 80049b8:	2301      	movne	r3, #1
 80049ba:	2300      	moveq	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d016      	beq.n	80049f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	f043 0220 	orr.w	r2, r3, #32
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e021      	b.n	8004a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	0c1b      	lsrs	r3, r3, #16
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d10c      	bne.n	8004a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	43da      	mvns	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4013      	ands	r3, r2
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bf14      	ite	ne
 8004a0c:	2301      	movne	r3, #1
 8004a0e:	2300      	moveq	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	e00b      	b.n	8004a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	43da      	mvns	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	bf14      	ite	ne
 8004a26:	2301      	movne	r3, #1
 8004a28:	2300      	moveq	r3, #0
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f47f af6d 	bne.w	800490c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a48:	e034      	b.n	8004ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f8b8 	bl	8004bc0 <I2C_IsAcknowledgeFailed>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e034      	b.n	8004ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d028      	beq.n	8004ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a62:	f7fd f8fd 	bl	8001c60 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d11d      	bne.n	8004ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a82:	2b80      	cmp	r3, #128	; 0x80
 8004a84:	d016      	beq.n	8004ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	f043 0220 	orr.w	r2, r3, #32
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e007      	b.n	8004ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	2b80      	cmp	r3, #128	; 0x80
 8004ac0:	d1c3      	bne.n	8004a4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ad8:	e034      	b.n	8004b44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f870 	bl	8004bc0 <I2C_IsAcknowledgeFailed>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e034      	b.n	8004b54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d028      	beq.n	8004b44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af2:	f7fd f8b5 	bl	8001c60 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d302      	bcc.n	8004b08 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d11d      	bne.n	8004b44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d016      	beq.n	8004b44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	f043 0220 	orr.w	r2, r3, #32
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e007      	b.n	8004b54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d1c3      	bne.n	8004ada <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b68:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	08db      	lsrs	r3, r3, #3
 8004b6e:	4a13      	ldr	r2, [pc, #76]	; (8004bbc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	0a1a      	lsrs	r2, r3, #8
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d107      	bne.n	8004b9a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f043 0220 	orr.w	r2, r3, #32
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e008      	b.n	8004bac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba8:	d0e9      	beq.n	8004b7e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	20000004 	.word	0x20000004
 8004bbc:	14f8b589 	.word	0x14f8b589

08004bc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd6:	d11b      	bne.n	8004c10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004be0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	f043 0204 	orr.w	r2, r3, #4
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c2e:	d103      	bne.n	8004c38 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c36:	e007      	b.n	8004c48 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004c40:	d102      	bne.n	8004c48 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2208      	movs	r2, #8
 8004c46:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e267      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d075      	beq.n	8004d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c72:	4b88      	ldr	r3, [pc, #544]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d00c      	beq.n	8004c98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c7e:	4b85      	ldr	r3, [pc, #532]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d112      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c8a:	4b82      	ldr	r3, [pc, #520]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c96:	d10b      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c98:	4b7e      	ldr	r3, [pc, #504]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d05b      	beq.n	8004d5c <HAL_RCC_OscConfig+0x108>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d157      	bne.n	8004d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e242      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb8:	d106      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x74>
 8004cba:	4b76      	ldr	r3, [pc, #472]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a75      	ldr	r2, [pc, #468]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e01d      	b.n	8004d04 <HAL_RCC_OscConfig+0xb0>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCC_OscConfig+0x98>
 8004cd2:	4b70      	ldr	r3, [pc, #448]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a6f      	ldr	r2, [pc, #444]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	4b6d      	ldr	r3, [pc, #436]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a6c      	ldr	r2, [pc, #432]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e00b      	b.n	8004d04 <HAL_RCC_OscConfig+0xb0>
 8004cec:	4b69      	ldr	r3, [pc, #420]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a68      	ldr	r2, [pc, #416]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	4b66      	ldr	r3, [pc, #408]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a65      	ldr	r2, [pc, #404]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d013      	beq.n	8004d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0c:	f7fc ffa8 	bl	8001c60 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d14:	f7fc ffa4 	bl	8001c60 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	; 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e207      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d26:	4b5b      	ldr	r3, [pc, #364]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCC_OscConfig+0xc0>
 8004d32:	e014      	b.n	8004d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d34:	f7fc ff94 	bl	8001c60 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d3c:	f7fc ff90 	bl	8001c60 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	; 0x64
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e1f3      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4e:	4b51      	ldr	r3, [pc, #324]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0xe8>
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d063      	beq.n	8004e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d6a:	4b4a      	ldr	r3, [pc, #296]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d76:	4b47      	ldr	r3, [pc, #284]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d11c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d82:	4b44      	ldr	r3, [pc, #272]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d116      	bne.n	8004dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8e:	4b41      	ldr	r3, [pc, #260]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_RCC_OscConfig+0x152>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d001      	beq.n	8004da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e1c7      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da6:	4b3b      	ldr	r3, [pc, #236]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	4937      	ldr	r1, [pc, #220]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dba:	e03a      	b.n	8004e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d020      	beq.n	8004e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc4:	4b34      	ldr	r3, [pc, #208]	; (8004e98 <HAL_RCC_OscConfig+0x244>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dca:	f7fc ff49 	bl	8001c60 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dd2:	f7fc ff45 	bl	8001c60 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e1a8      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de4:	4b2b      	ldr	r3, [pc, #172]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df0:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4925      	ldr	r1, [pc, #148]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]
 8004e04:	e015      	b.n	8004e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e06:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <HAL_RCC_OscConfig+0x244>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0c:	f7fc ff28 	bl	8001c60 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e14:	f7fc ff24 	bl	8001c60 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e187      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e26:	4b1b      	ldr	r3, [pc, #108]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d036      	beq.n	8004eac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d016      	beq.n	8004e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e46:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <HAL_RCC_OscConfig+0x248>)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4c:	f7fc ff08 	bl	8001c60 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e54:	f7fc ff04 	bl	8001c60 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e167      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <HAL_RCC_OscConfig+0x240>)
 8004e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x200>
 8004e72:	e01b      	b.n	8004eac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e74:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <HAL_RCC_OscConfig+0x248>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e7a:	f7fc fef1 	bl	8001c60 <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e80:	e00e      	b.n	8004ea0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e82:	f7fc feed 	bl	8001c60 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d907      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e150      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
 8004e94:	40023800 	.word	0x40023800
 8004e98:	42470000 	.word	0x42470000
 8004e9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea0:	4b88      	ldr	r3, [pc, #544]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1ea      	bne.n	8004e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 8097 	beq.w	8004fe8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ebe:	4b81      	ldr	r3, [pc, #516]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10f      	bne.n	8004eea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60bb      	str	r3, [r7, #8]
 8004ece:	4b7d      	ldr	r3, [pc, #500]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	4a7c      	ldr	r2, [pc, #496]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eda:	4b7a      	ldr	r3, [pc, #488]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	60bb      	str	r3, [r7, #8]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eea:	4b77      	ldr	r3, [pc, #476]	; (80050c8 <HAL_RCC_OscConfig+0x474>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d118      	bne.n	8004f28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ef6:	4b74      	ldr	r3, [pc, #464]	; (80050c8 <HAL_RCC_OscConfig+0x474>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a73      	ldr	r2, [pc, #460]	; (80050c8 <HAL_RCC_OscConfig+0x474>)
 8004efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f02:	f7fc fead 	bl	8001c60 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f0a:	f7fc fea9 	bl	8001c60 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e10c      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f1c:	4b6a      	ldr	r3, [pc, #424]	; (80050c8 <HAL_RCC_OscConfig+0x474>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f0      	beq.n	8004f0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d106      	bne.n	8004f3e <HAL_RCC_OscConfig+0x2ea>
 8004f30:	4b64      	ldr	r3, [pc, #400]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	4a63      	ldr	r2, [pc, #396]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f3c:	e01c      	b.n	8004f78 <HAL_RCC_OscConfig+0x324>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b05      	cmp	r3, #5
 8004f44:	d10c      	bne.n	8004f60 <HAL_RCC_OscConfig+0x30c>
 8004f46:	4b5f      	ldr	r3, [pc, #380]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4a:	4a5e      	ldr	r2, [pc, #376]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004f4c:	f043 0304 	orr.w	r3, r3, #4
 8004f50:	6713      	str	r3, [r2, #112]	; 0x70
 8004f52:	4b5c      	ldr	r3, [pc, #368]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f56:	4a5b      	ldr	r2, [pc, #364]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5e:	e00b      	b.n	8004f78 <HAL_RCC_OscConfig+0x324>
 8004f60:	4b58      	ldr	r3, [pc, #352]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f64:	4a57      	ldr	r2, [pc, #348]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004f66:	f023 0301 	bic.w	r3, r3, #1
 8004f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f6c:	4b55      	ldr	r3, [pc, #340]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f70:	4a54      	ldr	r2, [pc, #336]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004f72:	f023 0304 	bic.w	r3, r3, #4
 8004f76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d015      	beq.n	8004fac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f80:	f7fc fe6e 	bl	8001c60 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f86:	e00a      	b.n	8004f9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f88:	f7fc fe6a 	bl	8001c60 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e0cb      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9e:	4b49      	ldr	r3, [pc, #292]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0ee      	beq.n	8004f88 <HAL_RCC_OscConfig+0x334>
 8004faa:	e014      	b.n	8004fd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fac:	f7fc fe58 	bl	8001c60 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb2:	e00a      	b.n	8004fca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb4:	f7fc fe54 	bl	8001c60 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e0b5      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fca:	4b3e      	ldr	r3, [pc, #248]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1ee      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d105      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fdc:	4b39      	ldr	r3, [pc, #228]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	4a38      	ldr	r2, [pc, #224]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80a1 	beq.w	8005134 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ff2:	4b34      	ldr	r3, [pc, #208]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 030c 	and.w	r3, r3, #12
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d05c      	beq.n	80050b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d141      	bne.n	800508a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005006:	4b31      	ldr	r3, [pc, #196]	; (80050cc <HAL_RCC_OscConfig+0x478>)
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500c:	f7fc fe28 	bl	8001c60 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005014:	f7fc fe24 	bl	8001c60 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e087      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005026:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69da      	ldr	r2, [r3, #28]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	019b      	lsls	r3, r3, #6
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	3b01      	subs	r3, #1
 800504c:	041b      	lsls	r3, r3, #16
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	061b      	lsls	r3, r3, #24
 8005056:	491b      	ldr	r1, [pc, #108]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 8005058:	4313      	orrs	r3, r2
 800505a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800505c:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <HAL_RCC_OscConfig+0x478>)
 800505e:	2201      	movs	r2, #1
 8005060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005062:	f7fc fdfd 	bl	8001c60 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800506a:	f7fc fdf9 	bl	8001c60 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e05c      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800507c:	4b11      	ldr	r3, [pc, #68]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0f0      	beq.n	800506a <HAL_RCC_OscConfig+0x416>
 8005088:	e054      	b.n	8005134 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800508a:	4b10      	ldr	r3, [pc, #64]	; (80050cc <HAL_RCC_OscConfig+0x478>)
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005090:	f7fc fde6 	bl	8001c60 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005098:	f7fc fde2 	bl	8001c60 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e045      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050aa:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <HAL_RCC_OscConfig+0x470>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x444>
 80050b6:	e03d      	b.n	8005134 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d107      	bne.n	80050d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e038      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
 80050c4:	40023800 	.word	0x40023800
 80050c8:	40007000 	.word	0x40007000
 80050cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050d0:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <HAL_RCC_OscConfig+0x4ec>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d028      	beq.n	8005130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d121      	bne.n	8005130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d11a      	bne.n	8005130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005100:	4013      	ands	r3, r2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005106:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005108:	4293      	cmp	r3, r2
 800510a:	d111      	bne.n	8005130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	3b01      	subs	r3, #1
 800511a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800511c:	429a      	cmp	r2, r3
 800511e:	d107      	bne.n	8005130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800512c:	429a      	cmp	r2, r3
 800512e:	d001      	beq.n	8005134 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e000      	b.n	8005136 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40023800 	.word	0x40023800

08005144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0cc      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005158:	4b68      	ldr	r3, [pc, #416]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d90c      	bls.n	8005180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005166:	4b65      	ldr	r3, [pc, #404]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800516e:	4b63      	ldr	r3, [pc, #396]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d001      	beq.n	8005180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e0b8      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d020      	beq.n	80051ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005198:	4b59      	ldr	r3, [pc, #356]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	4a58      	ldr	r2, [pc, #352]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051b0:	4b53      	ldr	r3, [pc, #332]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	4a52      	ldr	r2, [pc, #328]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80051b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051bc:	4b50      	ldr	r3, [pc, #320]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	494d      	ldr	r1, [pc, #308]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d044      	beq.n	8005264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d107      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e2:	4b47      	ldr	r3, [pc, #284]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d119      	bne.n	8005222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e07f      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d003      	beq.n	8005202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d107      	bne.n	8005212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005202:	4b3f      	ldr	r3, [pc, #252]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e06f      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005212:	4b3b      	ldr	r3, [pc, #236]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e067      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005222:	4b37      	ldr	r3, [pc, #220]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f023 0203 	bic.w	r2, r3, #3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4934      	ldr	r1, [pc, #208]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	4313      	orrs	r3, r2
 8005232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005234:	f7fc fd14 	bl	8001c60 <HAL_GetTick>
 8005238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	e00a      	b.n	8005252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800523c:	f7fc fd10 	bl	8001c60 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	; 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e04f      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005252:	4b2b      	ldr	r3, [pc, #172]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 020c 	and.w	r2, r3, #12
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	429a      	cmp	r2, r3
 8005262:	d1eb      	bne.n	800523c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005264:	4b25      	ldr	r3, [pc, #148]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d20c      	bcs.n	800528c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005272:	4b22      	ldr	r3, [pc, #136]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800527a:	4b20      	ldr	r3, [pc, #128]	; (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d001      	beq.n	800528c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e032      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d008      	beq.n	80052aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005298:	4b19      	ldr	r3, [pc, #100]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4916      	ldr	r1, [pc, #88]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d009      	beq.n	80052ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052b6:	4b12      	ldr	r3, [pc, #72]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	490e      	ldr	r1, [pc, #56]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052ca:	f000 f821 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 80052ce:	4602      	mov	r2, r0
 80052d0:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	490a      	ldr	r1, [pc, #40]	; (8005304 <HAL_RCC_ClockConfig+0x1c0>)
 80052dc:	5ccb      	ldrb	r3, [r1, r3]
 80052de:	fa22 f303 	lsr.w	r3, r2, r3
 80052e2:	4a09      	ldr	r2, [pc, #36]	; (8005308 <HAL_RCC_ClockConfig+0x1c4>)
 80052e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052e6:	4b09      	ldr	r3, [pc, #36]	; (800530c <HAL_RCC_ClockConfig+0x1c8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fc fc74 	bl	8001bd8 <HAL_InitTick>

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40023c00 	.word	0x40023c00
 8005300:	40023800 	.word	0x40023800
 8005304:	08008e78 	.word	0x08008e78
 8005308:	20000004 	.word	0x20000004
 800530c:	20000008 	.word	0x20000008

08005310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005314:	b094      	sub	sp, #80	; 0x50
 8005316:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	647b      	str	r3, [r7, #68]	; 0x44
 800531c:	2300      	movs	r3, #0
 800531e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005320:	2300      	movs	r3, #0
 8005322:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005328:	4b79      	ldr	r3, [pc, #484]	; (8005510 <HAL_RCC_GetSysClockFreq+0x200>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 030c 	and.w	r3, r3, #12
 8005330:	2b08      	cmp	r3, #8
 8005332:	d00d      	beq.n	8005350 <HAL_RCC_GetSysClockFreq+0x40>
 8005334:	2b08      	cmp	r3, #8
 8005336:	f200 80e1 	bhi.w	80054fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <HAL_RCC_GetSysClockFreq+0x34>
 800533e:	2b04      	cmp	r3, #4
 8005340:	d003      	beq.n	800534a <HAL_RCC_GetSysClockFreq+0x3a>
 8005342:	e0db      	b.n	80054fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005344:	4b73      	ldr	r3, [pc, #460]	; (8005514 <HAL_RCC_GetSysClockFreq+0x204>)
 8005346:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005348:	e0db      	b.n	8005502 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800534a:	4b73      	ldr	r3, [pc, #460]	; (8005518 <HAL_RCC_GetSysClockFreq+0x208>)
 800534c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800534e:	e0d8      	b.n	8005502 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005350:	4b6f      	ldr	r3, [pc, #444]	; (8005510 <HAL_RCC_GetSysClockFreq+0x200>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005358:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800535a:	4b6d      	ldr	r3, [pc, #436]	; (8005510 <HAL_RCC_GetSysClockFreq+0x200>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d063      	beq.n	800542e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005366:	4b6a      	ldr	r3, [pc, #424]	; (8005510 <HAL_RCC_GetSysClockFreq+0x200>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	099b      	lsrs	r3, r3, #6
 800536c:	2200      	movs	r2, #0
 800536e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005370:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005378:	633b      	str	r3, [r7, #48]	; 0x30
 800537a:	2300      	movs	r3, #0
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
 800537e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005382:	4622      	mov	r2, r4
 8005384:	462b      	mov	r3, r5
 8005386:	f04f 0000 	mov.w	r0, #0
 800538a:	f04f 0100 	mov.w	r1, #0
 800538e:	0159      	lsls	r1, r3, #5
 8005390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005394:	0150      	lsls	r0, r2, #5
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4621      	mov	r1, r4
 800539c:	1a51      	subs	r1, r2, r1
 800539e:	6139      	str	r1, [r7, #16]
 80053a0:	4629      	mov	r1, r5
 80053a2:	eb63 0301 	sbc.w	r3, r3, r1
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053b4:	4659      	mov	r1, fp
 80053b6:	018b      	lsls	r3, r1, #6
 80053b8:	4651      	mov	r1, sl
 80053ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053be:	4651      	mov	r1, sl
 80053c0:	018a      	lsls	r2, r1, #6
 80053c2:	4651      	mov	r1, sl
 80053c4:	ebb2 0801 	subs.w	r8, r2, r1
 80053c8:	4659      	mov	r1, fp
 80053ca:	eb63 0901 	sbc.w	r9, r3, r1
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053e2:	4690      	mov	r8, r2
 80053e4:	4699      	mov	r9, r3
 80053e6:	4623      	mov	r3, r4
 80053e8:	eb18 0303 	adds.w	r3, r8, r3
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	462b      	mov	r3, r5
 80053f0:	eb49 0303 	adc.w	r3, r9, r3
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005402:	4629      	mov	r1, r5
 8005404:	024b      	lsls	r3, r1, #9
 8005406:	4621      	mov	r1, r4
 8005408:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800540c:	4621      	mov	r1, r4
 800540e:	024a      	lsls	r2, r1, #9
 8005410:	4610      	mov	r0, r2
 8005412:	4619      	mov	r1, r3
 8005414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005416:	2200      	movs	r2, #0
 8005418:	62bb      	str	r3, [r7, #40]	; 0x28
 800541a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800541c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005420:	f7fb fbc2 	bl	8000ba8 <__aeabi_uldivmod>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4613      	mov	r3, r2
 800542a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800542c:	e058      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800542e:	4b38      	ldr	r3, [pc, #224]	; (8005510 <HAL_RCC_GetSysClockFreq+0x200>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	099b      	lsrs	r3, r3, #6
 8005434:	2200      	movs	r2, #0
 8005436:	4618      	mov	r0, r3
 8005438:	4611      	mov	r1, r2
 800543a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800543e:	623b      	str	r3, [r7, #32]
 8005440:	2300      	movs	r3, #0
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
 8005444:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005448:	4642      	mov	r2, r8
 800544a:	464b      	mov	r3, r9
 800544c:	f04f 0000 	mov.w	r0, #0
 8005450:	f04f 0100 	mov.w	r1, #0
 8005454:	0159      	lsls	r1, r3, #5
 8005456:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800545a:	0150      	lsls	r0, r2, #5
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4641      	mov	r1, r8
 8005462:	ebb2 0a01 	subs.w	sl, r2, r1
 8005466:	4649      	mov	r1, r9
 8005468:	eb63 0b01 	sbc.w	fp, r3, r1
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005478:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800547c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005480:	ebb2 040a 	subs.w	r4, r2, sl
 8005484:	eb63 050b 	sbc.w	r5, r3, fp
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	00eb      	lsls	r3, r5, #3
 8005492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005496:	00e2      	lsls	r2, r4, #3
 8005498:	4614      	mov	r4, r2
 800549a:	461d      	mov	r5, r3
 800549c:	4643      	mov	r3, r8
 800549e:	18e3      	adds	r3, r4, r3
 80054a0:	603b      	str	r3, [r7, #0]
 80054a2:	464b      	mov	r3, r9
 80054a4:	eb45 0303 	adc.w	r3, r5, r3
 80054a8:	607b      	str	r3, [r7, #4]
 80054aa:	f04f 0200 	mov.w	r2, #0
 80054ae:	f04f 0300 	mov.w	r3, #0
 80054b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054b6:	4629      	mov	r1, r5
 80054b8:	028b      	lsls	r3, r1, #10
 80054ba:	4621      	mov	r1, r4
 80054bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054c0:	4621      	mov	r1, r4
 80054c2:	028a      	lsls	r2, r1, #10
 80054c4:	4610      	mov	r0, r2
 80054c6:	4619      	mov	r1, r3
 80054c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ca:	2200      	movs	r2, #0
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	61fa      	str	r2, [r7, #28]
 80054d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054d4:	f7fb fb68 	bl	8000ba8 <__aeabi_uldivmod>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4613      	mov	r3, r2
 80054de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054e0:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <HAL_RCC_GetSysClockFreq+0x200>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	0c1b      	lsrs	r3, r3, #16
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	3301      	adds	r3, #1
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80054f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054fa:	e002      	b.n	8005502 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <HAL_RCC_GetSysClockFreq+0x204>)
 80054fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005504:	4618      	mov	r0, r3
 8005506:	3750      	adds	r7, #80	; 0x50
 8005508:	46bd      	mov	sp, r7
 800550a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800550e:	bf00      	nop
 8005510:	40023800 	.word	0x40023800
 8005514:	00f42400 	.word	0x00f42400
 8005518:	007a1200 	.word	0x007a1200

0800551c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005520:	4b03      	ldr	r3, [pc, #12]	; (8005530 <HAL_RCC_GetHCLKFreq+0x14>)
 8005522:	681b      	ldr	r3, [r3, #0]
}
 8005524:	4618      	mov	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	20000004 	.word	0x20000004

08005534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005538:	f7ff fff0 	bl	800551c <HAL_RCC_GetHCLKFreq>
 800553c:	4602      	mov	r2, r0
 800553e:	4b05      	ldr	r3, [pc, #20]	; (8005554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	0a9b      	lsrs	r3, r3, #10
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	4903      	ldr	r1, [pc, #12]	; (8005558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800554a:	5ccb      	ldrb	r3, [r1, r3]
 800554c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005550:	4618      	mov	r0, r3
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40023800 	.word	0x40023800
 8005558:	08008e88 	.word	0x08008e88

0800555c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005560:	f7ff ffdc 	bl	800551c <HAL_RCC_GetHCLKFreq>
 8005564:	4602      	mov	r2, r0
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	0b5b      	lsrs	r3, r3, #13
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	4903      	ldr	r1, [pc, #12]	; (8005580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005572:	5ccb      	ldrb	r3, [r1, r3]
 8005574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005578:	4618      	mov	r0, r3
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40023800 	.word	0x40023800
 8005580:	08008e88 	.word	0x08008e88

08005584 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e07b      	b.n	800568e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	2b00      	cmp	r3, #0
 800559c:	d108      	bne.n	80055b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055a6:	d009      	beq.n	80055bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	61da      	str	r2, [r3, #28]
 80055ae:	e005      	b.n	80055bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fc f8ee 	bl	80017b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005640:	ea42 0103 	orr.w	r1, r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	0c1b      	lsrs	r3, r3, #16
 800565a:	f003 0104 	and.w	r1, r3, #4
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	f003 0210 	and.w	r2, r3, #16
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800567c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	4613      	mov	r3, r2
 80056a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_SPI_Transmit_DMA+0x20>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e097      	b.n	80057e8 <HAL_SPI_Transmit_DMA+0x150>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d002      	beq.n	80056d2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80056cc:	2302      	movs	r3, #2
 80056ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056d0:	e085      	b.n	80057de <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_SPI_Transmit_DMA+0x46>
 80056d8:	88fb      	ldrh	r3, [r7, #6]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d102      	bne.n	80056e4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056e2:	e07c      	b.n	80057de <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2203      	movs	r2, #3
 80056e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	88fa      	ldrh	r2, [r7, #6]
 80056fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	88fa      	ldrh	r2, [r7, #6]
 8005702:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572a:	d10f      	bne.n	800574c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800573a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800574a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005750:	4a27      	ldr	r2, [pc, #156]	; (80057f0 <HAL_SPI_Transmit_DMA+0x158>)
 8005752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005758:	4a26      	ldr	r2, [pc, #152]	; (80057f4 <HAL_SPI_Transmit_DMA+0x15c>)
 800575a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005760:	4a25      	ldr	r2, [pc, #148]	; (80057f8 <HAL_SPI_Transmit_DMA+0x160>)
 8005762:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005768:	2200      	movs	r2, #0
 800576a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	4619      	mov	r1, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005782:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005784:	f7fc fc38 	bl	8001ff8 <HAL_DMA_Start_IT>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d008      	beq.n	80057a0 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005792:	f043 0210 	orr.w	r2, r3, #16
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800579e:	e01e      	b.n	80057de <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d007      	beq.n	80057be <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057bc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0220 	orr.w	r2, r2, #32
 80057cc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0202 	orr.w	r2, r2, #2
 80057dc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	08005ab5 	.word	0x08005ab5
 80057f4:	08005a0d 	.word	0x08005a0d
 80057f8:	08005ad1 	.word	0x08005ad1

080057fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10e      	bne.n	800583c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d004      	beq.n	800583c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
    return;
 800583a:	e0ce      	b.n	80059da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d009      	beq.n	800585a <HAL_SPI_IRQHandler+0x5e>
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584c:	2b00      	cmp	r3, #0
 800584e:	d004      	beq.n	800585a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	4798      	blx	r3
    return;
 8005858:	e0bf      	b.n	80059da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	f003 0320 	and.w	r3, r3, #32
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <HAL_SPI_IRQHandler+0x7e>
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d105      	bne.n	800587a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80b0 	beq.w	80059da <HAL_SPI_IRQHandler+0x1de>
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80aa 	beq.w	80059da <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	d023      	beq.n	80058d8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b03      	cmp	r3, #3
 800589a:	d011      	beq.n	80058c0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a0:	f043 0204 	orr.w	r2, r3, #4
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	e00b      	b.n	80058d8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058c0:	2300      	movs	r3, #0
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	693b      	ldr	r3, [r7, #16]
        return;
 80058d6:	e080      	b.n	80059da <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d014      	beq.n	800590c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e6:	f043 0201 	orr.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00c      	beq.n	8005930 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591a:	f043 0208 	orr.w	r2, r3, #8
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005922:	2300      	movs	r3, #0
 8005924:	60bb      	str	r3, [r7, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005934:	2b00      	cmp	r3, #0
 8005936:	d04f      	beq.n	80059d8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005946:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <HAL_SPI_IRQHandler+0x168>
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d034      	beq.n	80059ce <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0203 	bic.w	r2, r2, #3
 8005972:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d011      	beq.n	80059a0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005980:	4a17      	ldr	r2, [pc, #92]	; (80059e0 <HAL_SPI_IRQHandler+0x1e4>)
 8005982:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005988:	4618      	mov	r0, r3
 800598a:	f7fc fbfd 	bl	8002188 <HAL_DMA_Abort_IT>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005998:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d016      	beq.n	80059d6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ac:	4a0c      	ldr	r2, [pc, #48]	; (80059e0 <HAL_SPI_IRQHandler+0x1e4>)
 80059ae:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fc fbe7 	bl	8002188 <HAL_DMA_Abort_IT>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80059cc:	e003      	b.n	80059d6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f812 	bl	80059f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80059d4:	e000      	b.n	80059d8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80059d6:	bf00      	nop
    return;
 80059d8:	bf00      	nop
  }
}
 80059da:	3720      	adds	r7, #32
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	08005b11 	.word	0x08005b11

080059e4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a1a:	f7fc f921 	bl	8001c60 <HAL_GetTick>
 8005a1e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a2e:	d03b      	beq.n	8005aa8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0220 	bic.w	r2, r2, #32
 8005a3e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0202 	bic.w	r2, r2, #2
 8005a4e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	2164      	movs	r1, #100	; 0x64
 8005a54:	6978      	ldr	r0, [r7, #20]
 8005a56:	f000 f8f7 	bl	8005c48 <SPI_EndRxTxTransaction>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a64:	f043 0220 	orr.w	r2, r3, #32
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10a      	bne.n	8005a8a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005aa0:	6978      	ldr	r0, [r7, #20]
 8005aa2:	f7ff ffa9 	bl	80059f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005aa6:	e002      	b.n	8005aae <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005aa8:	6978      	ldr	r0, [r7, #20]
 8005aaa:	f7fb fb51 	bl	8001150 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff ff8e 	bl	80059e4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ac8:	bf00      	nop
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0203 	bic.w	r2, r2, #3
 8005aec:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af2:	f043 0210 	orr.w	r2, r3, #16
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7ff ff78 	bl	80059f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f7ff ff64 	bl	80059f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	4613      	mov	r3, r2
 8005b46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b48:	f7fc f88a 	bl	8001c60 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	4413      	add	r3, r2
 8005b56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b58:	f7fc f882 	bl	8001c60 <HAL_GetTick>
 8005b5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b5e:	4b39      	ldr	r3, [pc, #228]	; (8005c44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	015b      	lsls	r3, r3, #5
 8005b64:	0d1b      	lsrs	r3, r3, #20
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	fb02 f303 	mul.w	r3, r2, r3
 8005b6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b6e:	e054      	b.n	8005c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b76:	d050      	beq.n	8005c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b78:	f7fc f872 	bl	8001c60 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d902      	bls.n	8005b8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d13d      	bne.n	8005c0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ba6:	d111      	bne.n	8005bcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb0:	d004      	beq.n	8005bbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bba:	d107      	bne.n	8005bcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd4:	d10f      	bne.n	8005bf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e017      	b.n	8005c3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4013      	ands	r3, r2
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	bf0c      	ite	eq
 8005c2a:	2301      	moveq	r3, #1
 8005c2c:	2300      	movne	r3, #0
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d19b      	bne.n	8005b70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000004 	.word	0x20000004

08005c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f7ff ff6a 	bl	8005b38 <SPI_WaitFlagStateUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d007      	beq.n	8005c7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6e:	f043 0220 	orr.w	r2, r3, #32
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e032      	b.n	8005ce0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c7a:	4b1b      	ldr	r3, [pc, #108]	; (8005ce8 <SPI_EndRxTxTransaction+0xa0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1b      	ldr	r2, [pc, #108]	; (8005cec <SPI_EndRxTxTransaction+0xa4>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	0d5b      	lsrs	r3, r3, #21
 8005c86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c8a:	fb02 f303 	mul.w	r3, r2, r3
 8005c8e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c98:	d112      	bne.n	8005cc0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2180      	movs	r1, #128	; 0x80
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f7ff ff47 	bl	8005b38 <SPI_WaitFlagStateUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d016      	beq.n	8005cde <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb4:	f043 0220 	orr.w	r2, r3, #32
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e00f      	b.n	8005ce0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd6:	2b80      	cmp	r3, #128	; 0x80
 8005cd8:	d0f2      	beq.n	8005cc0 <SPI_EndRxTxTransaction+0x78>
 8005cda:	e000      	b.n	8005cde <SPI_EndRxTxTransaction+0x96>
        break;
 8005cdc:	bf00      	nop
  }

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	20000004 	.word	0x20000004
 8005cec:	165e9f81 	.word	0x165e9f81

08005cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e041      	b.n	8005d86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fb fdd0 	bl	80018bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4610      	mov	r0, r2
 8005d30:	f000 fa70 	bl	8006214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d001      	beq.n	8005da8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e044      	b.n	8005e32 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1e      	ldr	r2, [pc, #120]	; (8005e40 <HAL_TIM_Base_Start_IT+0xb0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d018      	beq.n	8005dfc <HAL_TIM_Base_Start_IT+0x6c>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd2:	d013      	beq.n	8005dfc <HAL_TIM_Base_Start_IT+0x6c>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a1a      	ldr	r2, [pc, #104]	; (8005e44 <HAL_TIM_Base_Start_IT+0xb4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00e      	beq.n	8005dfc <HAL_TIM_Base_Start_IT+0x6c>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a19      	ldr	r2, [pc, #100]	; (8005e48 <HAL_TIM_Base_Start_IT+0xb8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d009      	beq.n	8005dfc <HAL_TIM_Base_Start_IT+0x6c>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <HAL_TIM_Base_Start_IT+0xbc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_TIM_Base_Start_IT+0x6c>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <HAL_TIM_Base_Start_IT+0xc0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d111      	bne.n	8005e20 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2b06      	cmp	r3, #6
 8005e0c:	d010      	beq.n	8005e30 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0201 	orr.w	r2, r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1e:	e007      	b.n	8005e30 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40010000 	.word	0x40010000
 8005e44:	40000400 	.word	0x40000400
 8005e48:	40000800 	.word	0x40000800
 8005e4c:	40000c00 	.word	0x40000c00
 8005e50:	40014000 	.word	0x40014000

08005e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d020      	beq.n	8005eb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d01b      	beq.n	8005eb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0202 	mvn.w	r2, #2
 8005e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f999 	bl	80061d6 <HAL_TIM_IC_CaptureCallback>
 8005ea4:	e005      	b.n	8005eb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f98b 	bl	80061c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f99c 	bl	80061ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d020      	beq.n	8005f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01b      	beq.n	8005f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0204 	mvn.w	r2, #4
 8005ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f973 	bl	80061d6 <HAL_TIM_IC_CaptureCallback>
 8005ef0:	e005      	b.n	8005efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f965 	bl	80061c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f976 	bl	80061ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d020      	beq.n	8005f50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01b      	beq.n	8005f50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0208 	mvn.w	r2, #8
 8005f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2204      	movs	r2, #4
 8005f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f94d 	bl	80061d6 <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f93f 	bl	80061c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f950 	bl	80061ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0310 	and.w	r3, r3, #16
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d020      	beq.n	8005f9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01b      	beq.n	8005f9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0210 	mvn.w	r2, #16
 8005f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2208      	movs	r2, #8
 8005f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f927 	bl	80061d6 <HAL_TIM_IC_CaptureCallback>
 8005f88:	e005      	b.n	8005f96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f919 	bl	80061c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f92a 	bl	80061ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00c      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d007      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0201 	mvn.w	r2, #1
 8005fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fb f83c 	bl	8001038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00c      	beq.n	8005fe4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d007      	beq.n	8005fe4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fab6 	bl	8006550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00c      	beq.n	8006008 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d007      	beq.n	8006008 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f8fb 	bl	80061fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00c      	beq.n	800602c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f003 0320 	and.w	r3, r3, #32
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0220 	mvn.w	r2, #32
 8006024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fa88 	bl	800653c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800602c:	bf00      	nop
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_TIM_ConfigClockSource+0x1c>
 800604c:	2302      	movs	r3, #2
 800604e:	e0b4      	b.n	80061ba <HAL_TIM_ConfigClockSource+0x186>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800606e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006076:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006088:	d03e      	beq.n	8006108 <HAL_TIM_ConfigClockSource+0xd4>
 800608a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800608e:	f200 8087 	bhi.w	80061a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006096:	f000 8086 	beq.w	80061a6 <HAL_TIM_ConfigClockSource+0x172>
 800609a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609e:	d87f      	bhi.n	80061a0 <HAL_TIM_ConfigClockSource+0x16c>
 80060a0:	2b70      	cmp	r3, #112	; 0x70
 80060a2:	d01a      	beq.n	80060da <HAL_TIM_ConfigClockSource+0xa6>
 80060a4:	2b70      	cmp	r3, #112	; 0x70
 80060a6:	d87b      	bhi.n	80061a0 <HAL_TIM_ConfigClockSource+0x16c>
 80060a8:	2b60      	cmp	r3, #96	; 0x60
 80060aa:	d050      	beq.n	800614e <HAL_TIM_ConfigClockSource+0x11a>
 80060ac:	2b60      	cmp	r3, #96	; 0x60
 80060ae:	d877      	bhi.n	80061a0 <HAL_TIM_ConfigClockSource+0x16c>
 80060b0:	2b50      	cmp	r3, #80	; 0x50
 80060b2:	d03c      	beq.n	800612e <HAL_TIM_ConfigClockSource+0xfa>
 80060b4:	2b50      	cmp	r3, #80	; 0x50
 80060b6:	d873      	bhi.n	80061a0 <HAL_TIM_ConfigClockSource+0x16c>
 80060b8:	2b40      	cmp	r3, #64	; 0x40
 80060ba:	d058      	beq.n	800616e <HAL_TIM_ConfigClockSource+0x13a>
 80060bc:	2b40      	cmp	r3, #64	; 0x40
 80060be:	d86f      	bhi.n	80061a0 <HAL_TIM_ConfigClockSource+0x16c>
 80060c0:	2b30      	cmp	r3, #48	; 0x30
 80060c2:	d064      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x15a>
 80060c4:	2b30      	cmp	r3, #48	; 0x30
 80060c6:	d86b      	bhi.n	80061a0 <HAL_TIM_ConfigClockSource+0x16c>
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d060      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x15a>
 80060cc:	2b20      	cmp	r3, #32
 80060ce:	d867      	bhi.n	80061a0 <HAL_TIM_ConfigClockSource+0x16c>
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d05c      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x15a>
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	d05a      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x15a>
 80060d8:	e062      	b.n	80061a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060ea:	f000 f999 	bl	8006420 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	609a      	str	r2, [r3, #8]
      break;
 8006106:	e04f      	b.n	80061a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006118:	f000 f982 	bl	8006420 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689a      	ldr	r2, [r3, #8]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800612a:	609a      	str	r2, [r3, #8]
      break;
 800612c:	e03c      	b.n	80061a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800613a:	461a      	mov	r2, r3
 800613c:	f000 f8f6 	bl	800632c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2150      	movs	r1, #80	; 0x50
 8006146:	4618      	mov	r0, r3
 8006148:	f000 f94f 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 800614c:	e02c      	b.n	80061a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800615a:	461a      	mov	r2, r3
 800615c:	f000 f915 	bl	800638a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2160      	movs	r1, #96	; 0x60
 8006166:	4618      	mov	r0, r3
 8006168:	f000 f93f 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 800616c:	e01c      	b.n	80061a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800617a:	461a      	mov	r2, r3
 800617c:	f000 f8d6 	bl	800632c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2140      	movs	r1, #64	; 0x40
 8006186:	4618      	mov	r0, r3
 8006188:	f000 f92f 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 800618c:	e00c      	b.n	80061a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4619      	mov	r1, r3
 8006198:	4610      	mov	r0, r2
 800619a:	f000 f926 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 800619e:	e003      	b.n	80061a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	73fb      	strb	r3, [r7, #15]
      break;
 80061a4:	e000      	b.n	80061a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
	...

08006214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a3a      	ldr	r2, [pc, #232]	; (8006310 <TIM_Base_SetConfig+0xfc>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d00f      	beq.n	800624c <TIM_Base_SetConfig+0x38>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006232:	d00b      	beq.n	800624c <TIM_Base_SetConfig+0x38>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a37      	ldr	r2, [pc, #220]	; (8006314 <TIM_Base_SetConfig+0x100>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d007      	beq.n	800624c <TIM_Base_SetConfig+0x38>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a36      	ldr	r2, [pc, #216]	; (8006318 <TIM_Base_SetConfig+0x104>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_Base_SetConfig+0x38>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a35      	ldr	r2, [pc, #212]	; (800631c <TIM_Base_SetConfig+0x108>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d108      	bne.n	800625e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a2b      	ldr	r2, [pc, #172]	; (8006310 <TIM_Base_SetConfig+0xfc>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01b      	beq.n	800629e <TIM_Base_SetConfig+0x8a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626c:	d017      	beq.n	800629e <TIM_Base_SetConfig+0x8a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a28      	ldr	r2, [pc, #160]	; (8006314 <TIM_Base_SetConfig+0x100>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d013      	beq.n	800629e <TIM_Base_SetConfig+0x8a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a27      	ldr	r2, [pc, #156]	; (8006318 <TIM_Base_SetConfig+0x104>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00f      	beq.n	800629e <TIM_Base_SetConfig+0x8a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a26      	ldr	r2, [pc, #152]	; (800631c <TIM_Base_SetConfig+0x108>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00b      	beq.n	800629e <TIM_Base_SetConfig+0x8a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a25      	ldr	r2, [pc, #148]	; (8006320 <TIM_Base_SetConfig+0x10c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d007      	beq.n	800629e <TIM_Base_SetConfig+0x8a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a24      	ldr	r2, [pc, #144]	; (8006324 <TIM_Base_SetConfig+0x110>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d003      	beq.n	800629e <TIM_Base_SetConfig+0x8a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a23      	ldr	r2, [pc, #140]	; (8006328 <TIM_Base_SetConfig+0x114>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d108      	bne.n	80062b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a0e      	ldr	r2, [pc, #56]	; (8006310 <TIM_Base_SetConfig+0xfc>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d103      	bne.n	80062e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	691a      	ldr	r2, [r3, #16]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d105      	bne.n	8006302 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f023 0201 	bic.w	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	611a      	str	r2, [r3, #16]
  }
}
 8006302:	bf00      	nop
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	40010000 	.word	0x40010000
 8006314:	40000400 	.word	0x40000400
 8006318:	40000800 	.word	0x40000800
 800631c:	40000c00 	.word	0x40000c00
 8006320:	40014000 	.word	0x40014000
 8006324:	40014400 	.word	0x40014400
 8006328:	40014800 	.word	0x40014800

0800632c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f023 0201 	bic.w	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 030a 	bic.w	r3, r3, #10
 8006368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	621a      	str	r2, [r3, #32]
}
 800637e:	bf00      	nop
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800638a:	b480      	push	{r7}
 800638c:	b087      	sub	sp, #28
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f023 0210 	bic.w	r2, r3, #16
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	031b      	lsls	r3, r3, #12
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4313      	orrs	r3, r2
 8006408:	f043 0307 	orr.w	r3, r3, #7
 800640c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	609a      	str	r2, [r3, #8]
}
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800643a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	021a      	lsls	r2, r3, #8
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	431a      	orrs	r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4313      	orrs	r3, r2
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	609a      	str	r2, [r3, #8]
}
 8006454:	bf00      	nop
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006474:	2302      	movs	r3, #2
 8006476:	e050      	b.n	800651a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1c      	ldr	r2, [pc, #112]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d018      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c4:	d013      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a18      	ldr	r2, [pc, #96]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d00e      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a16      	ldr	r2, [pc, #88]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d009      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a15      	ldr	r2, [pc, #84]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d004      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a13      	ldr	r2, [pc, #76]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d10c      	bne.n	8006508 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	40010000 	.word	0x40010000
 800652c:	40000400 	.word	0x40000400
 8006530:	40000800 	.word	0x40000800
 8006534:	40000c00 	.word	0x40000c00
 8006538:	40014000 	.word	0x40014000

0800653c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e042      	b.n	80065fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7fb f9da 	bl	8001944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2224      	movs	r2, #36	; 0x24
 8006594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fd69 	bl	8007080 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695a      	ldr	r2, [r3, #20]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08a      	sub	sp, #40	; 0x28
 8006608:	af02      	add	r7, sp, #8
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	4613      	mov	r3, r2
 8006612:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b20      	cmp	r3, #32
 8006622:	d175      	bne.n	8006710 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_UART_Transmit+0x2c>
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e06e      	b.n	8006712 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2221      	movs	r2, #33	; 0x21
 800663e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006642:	f7fb fb0d 	bl	8001c60 <HAL_GetTick>
 8006646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	88fa      	ldrh	r2, [r7, #6]
 800664c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	88fa      	ldrh	r2, [r7, #6]
 8006652:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665c:	d108      	bne.n	8006670 <HAL_UART_Transmit+0x6c>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d104      	bne.n	8006670 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006666:	2300      	movs	r3, #0
 8006668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	e003      	b.n	8006678 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006674:	2300      	movs	r3, #0
 8006676:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006678:	e02e      	b.n	80066d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2200      	movs	r2, #0
 8006682:	2180      	movs	r1, #128	; 0x80
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fb05 	bl	8006c94 <UART_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e03a      	b.n	8006712 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10b      	bne.n	80066ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	3302      	adds	r3, #2
 80066b6:	61bb      	str	r3, [r7, #24]
 80066b8:	e007      	b.n	80066ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	781a      	ldrb	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	3301      	adds	r3, #1
 80066c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1cb      	bne.n	800667a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2200      	movs	r2, #0
 80066ea:	2140      	movs	r1, #64	; 0x40
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 fad1 	bl	8006c94 <UART_WaitOnFlagUntilTimeout>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e006      	b.n	8006712 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	e000      	b.n	8006712 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006710:	2302      	movs	r3, #2
  }
}
 8006712:	4618      	mov	r0, r3
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b0ba      	sub	sp, #232	; 0xe8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006742:	2300      	movs	r3, #0
 8006744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006748:	2300      	movs	r3, #0
 800674a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800674e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800675a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10f      	bne.n	8006782 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <HAL_UART_IRQHandler+0x66>
 800676e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fbc2 	bl	8006f04 <UART_Receive_IT>
      return;
 8006780:	e25b      	b.n	8006c3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 80de 	beq.w	8006948 <HAL_UART_IRQHandler+0x22c>
 800678c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800679c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 80d1 	beq.w	8006948 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <HAL_UART_IRQHandler+0xae>
 80067b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d005      	beq.n	80067ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	f043 0201 	orr.w	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00b      	beq.n	80067ee <HAL_UART_IRQHandler+0xd2>
 80067d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e6:	f043 0202 	orr.w	r2, r3, #2
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00b      	beq.n	8006812 <HAL_UART_IRQHandler+0xf6>
 80067fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d005      	beq.n	8006812 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680a:	f043 0204 	orr.w	r2, r3, #4
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006816:	f003 0308 	and.w	r3, r3, #8
 800681a:	2b00      	cmp	r3, #0
 800681c:	d011      	beq.n	8006842 <HAL_UART_IRQHandler+0x126>
 800681e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d105      	bne.n	8006836 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800682a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683a:	f043 0208 	orr.w	r2, r3, #8
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 81f2 	beq.w	8006c30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800684c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b00      	cmp	r3, #0
 8006856:	d008      	beq.n	800686a <HAL_UART_IRQHandler+0x14e>
 8006858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fb4d 	bl	8006f04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	bf0c      	ite	eq
 8006878:	2301      	moveq	r3, #1
 800687a:	2300      	movne	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006886:	f003 0308 	and.w	r3, r3, #8
 800688a:	2b00      	cmp	r3, #0
 800688c:	d103      	bne.n	8006896 <HAL_UART_IRQHandler+0x17a>
 800688e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d04f      	beq.n	8006936 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fa55 	bl	8006d46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a6:	2b40      	cmp	r3, #64	; 0x40
 80068a8:	d141      	bne.n	800692e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3314      	adds	r3, #20
 80068b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3314      	adds	r3, #20
 80068d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068e6:	e841 2300 	strex	r3, r2, [r1]
 80068ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1d9      	bne.n	80068aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d013      	beq.n	8006926 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006902:	4a7e      	ldr	r2, [pc, #504]	; (8006afc <HAL_UART_IRQHandler+0x3e0>)
 8006904:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690a:	4618      	mov	r0, r3
 800690c:	f7fb fc3c 	bl	8002188 <HAL_DMA_Abort_IT>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d016      	beq.n	8006944 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006920:	4610      	mov	r0, r2
 8006922:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006924:	e00e      	b.n	8006944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f99e 	bl	8006c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800692c:	e00a      	b.n	8006944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f99a 	bl	8006c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006934:	e006      	b.n	8006944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f996 	bl	8006c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006942:	e175      	b.n	8006c30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006944:	bf00      	nop
    return;
 8006946:	e173      	b.n	8006c30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694c:	2b01      	cmp	r3, #1
 800694e:	f040 814f 	bne.w	8006bf0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006956:	f003 0310 	and.w	r3, r3, #16
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 8148 	beq.w	8006bf0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 8141 	beq.w	8006bf0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800696e:	2300      	movs	r3, #0
 8006970:	60bb      	str	r3, [r7, #8]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60bb      	str	r3, [r7, #8]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	60bb      	str	r3, [r7, #8]
 8006982:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698e:	2b40      	cmp	r3, #64	; 0x40
 8006990:	f040 80b6 	bne.w	8006b00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8145 	beq.w	8006c34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069b2:	429a      	cmp	r2, r3
 80069b4:	f080 813e 	bcs.w	8006c34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ca:	f000 8088 	beq.w	8006ade <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	330c      	adds	r3, #12
 80069d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	330c      	adds	r3, #12
 80069f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80069fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1d9      	bne.n	80069ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3314      	adds	r3, #20
 8006a20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a2c:	f023 0301 	bic.w	r3, r3, #1
 8006a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3314      	adds	r3, #20
 8006a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e1      	bne.n	8006a1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3314      	adds	r3, #20
 8006a5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3314      	adds	r3, #20
 8006a76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e3      	bne.n	8006a56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aae:	f023 0310 	bic.w	r3, r3, #16
 8006ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	330c      	adds	r3, #12
 8006abc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ac0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ac2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ac6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e3      	bne.n	8006a9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fb fae5 	bl	80020a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f8c1 	bl	8006c7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006afa:	e09b      	b.n	8006c34 <HAL_UART_IRQHandler+0x518>
 8006afc:	08006e0d 	.word	0x08006e0d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 808e 	beq.w	8006c38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 8089 	beq.w	8006c38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	330c      	adds	r3, #12
 8006b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	330c      	adds	r3, #12
 8006b46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b4a:	647a      	str	r2, [r7, #68]	; 0x44
 8006b4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1e3      	bne.n	8006b26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3314      	adds	r3, #20
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	f023 0301 	bic.w	r3, r3, #1
 8006b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3314      	adds	r3, #20
 8006b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b82:	633a      	str	r2, [r7, #48]	; 0x30
 8006b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e3      	bne.n	8006b5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	330c      	adds	r3, #12
 8006baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0310 	bic.w	r3, r3, #16
 8006bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006bc8:	61fa      	str	r2, [r7, #28]
 8006bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	69b9      	ldr	r1, [r7, #24]
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e3      	bne.n	8006ba4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006be2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f847 	bl	8006c7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bee:	e023      	b.n	8006c38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d009      	beq.n	8006c10 <HAL_UART_IRQHandler+0x4f4>
 8006bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f913 	bl	8006e34 <UART_Transmit_IT>
    return;
 8006c0e:	e014      	b.n	8006c3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00e      	beq.n	8006c3a <HAL_UART_IRQHandler+0x51e>
 8006c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d008      	beq.n	8006c3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f953 	bl	8006ed4 <UART_EndTransmit_IT>
    return;
 8006c2e:	e004      	b.n	8006c3a <HAL_UART_IRQHandler+0x51e>
    return;
 8006c30:	bf00      	nop
 8006c32:	e002      	b.n	8006c3a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c34:	bf00      	nop
 8006c36:	e000      	b.n	8006c3a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c38:	bf00      	nop
  }
}
 8006c3a:	37e8      	adds	r7, #232	; 0xe8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca4:	e03b      	b.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cac:	d037      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cae:	f7fa ffd7 	bl	8001c60 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	6a3a      	ldr	r2, [r7, #32]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d302      	bcc.n	8006cc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e03a      	b.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f003 0304 	and.w	r3, r3, #4
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d023      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b80      	cmp	r3, #128	; 0x80
 8006cda:	d020      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2b40      	cmp	r3, #64	; 0x40
 8006ce0:	d01d      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0308 	and.w	r3, r3, #8
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d116      	bne.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 f81d 	bl	8006d46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2208      	movs	r2, #8
 8006d10:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e00f      	b.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4013      	ands	r3, r2
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	bf0c      	ite	eq
 8006d2e:	2301      	moveq	r3, #1
 8006d30:	2300      	movne	r3, #0
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d0b4      	beq.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b095      	sub	sp, #84	; 0x54
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	330c      	adds	r3, #12
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d58:	e853 3f00 	ldrex	r3, [r3]
 8006d5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	330c      	adds	r3, #12
 8006d6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d6e:	643a      	str	r2, [r7, #64]	; 0x40
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d76:	e841 2300 	strex	r3, r2, [r1]
 8006d7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e5      	bne.n	8006d4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3314      	adds	r3, #20
 8006d88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	e853 3f00 	ldrex	r3, [r3]
 8006d90:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	f023 0301 	bic.w	r3, r3, #1
 8006d98:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3314      	adds	r3, #20
 8006da0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006da2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006da4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006daa:	e841 2300 	strex	r3, r2, [r1]
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e5      	bne.n	8006d82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d119      	bne.n	8006df2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	330c      	adds	r3, #12
 8006dc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f023 0310 	bic.w	r3, r3, #16
 8006dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	330c      	adds	r3, #12
 8006ddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dde:	61ba      	str	r2, [r7, #24]
 8006de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	6979      	ldr	r1, [r7, #20]
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	613b      	str	r3, [r7, #16]
   return(result);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e5      	bne.n	8006dbe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2220      	movs	r2, #32
 8006df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e00:	bf00      	nop
 8006e02:	3754      	adds	r7, #84	; 0x54
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f7ff ff1e 	bl	8006c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b21      	cmp	r3, #33	; 0x21
 8006e46:	d13e      	bne.n	8006ec6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e50:	d114      	bne.n	8006e7c <UART_Transmit_IT+0x48>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d110      	bne.n	8006e7c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	1c9a      	adds	r2, r3, #2
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	621a      	str	r2, [r3, #32]
 8006e7a:	e008      	b.n	8006e8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	1c59      	adds	r1, r3, #1
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	6211      	str	r1, [r2, #32]
 8006e86:	781a      	ldrb	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	3b01      	subs	r3, #1
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10f      	bne.n	8006ec2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68da      	ldr	r2, [r3, #12]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006eb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ec0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e000      	b.n	8006ec8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ec6:	2302      	movs	r3, #2
  }
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7ff fea3 	bl	8006c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08c      	sub	sp, #48	; 0x30
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b22      	cmp	r3, #34	; 0x22
 8006f16:	f040 80ae 	bne.w	8007076 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f22:	d117      	bne.n	8006f54 <UART_Receive_IT+0x50>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d113      	bne.n	8006f54 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	1c9a      	adds	r2, r3, #2
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	629a      	str	r2, [r3, #40]	; 0x28
 8006f52:	e026      	b.n	8006fa2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f66:	d007      	beq.n	8006f78 <UART_Receive_IT+0x74>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10a      	bne.n	8006f86 <UART_Receive_IT+0x82>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d106      	bne.n	8006f86 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f82:	701a      	strb	r2, [r3, #0]
 8006f84:	e008      	b.n	8006f98 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f96:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d15d      	bne.n	8007072 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0220 	bic.w	r2, r2, #32
 8006fc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	695a      	ldr	r2, [r3, #20]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 0201 	bic.w	r2, r2, #1
 8006fe4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d135      	bne.n	8007068 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	330c      	adds	r3, #12
 8007008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	613b      	str	r3, [r7, #16]
   return(result);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f023 0310 	bic.w	r3, r3, #16
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	330c      	adds	r3, #12
 8007020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007022:	623a      	str	r2, [r7, #32]
 8007024:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	69f9      	ldr	r1, [r7, #28]
 8007028:	6a3a      	ldr	r2, [r7, #32]
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e5      	bne.n	8007002 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0310 	and.w	r3, r3, #16
 8007040:	2b10      	cmp	r3, #16
 8007042:	d10a      	bne.n	800705a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7ff fe0b 	bl	8006c7c <HAL_UARTEx_RxEventCallback>
 8007066:	e002      	b.n	800706e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7ff fdf3 	bl	8006c54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	e002      	b.n	8007078 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	e000      	b.n	8007078 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007076:	2302      	movs	r3, #2
  }
}
 8007078:	4618      	mov	r0, r3
 800707a:	3730      	adds	r7, #48	; 0x30
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007084:	b0c0      	sub	sp, #256	; 0x100
 8007086:	af00      	add	r7, sp, #0
 8007088:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800708c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800709c:	68d9      	ldr	r1, [r3, #12]
 800709e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	ea40 0301 	orr.w	r3, r0, r1
 80070a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	431a      	orrs	r2, r3
 80070b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	431a      	orrs	r2, r3
 80070c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80070d8:	f021 010c 	bic.w	r1, r1, #12
 80070dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070e6:	430b      	orrs	r3, r1
 80070e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80070f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070fa:	6999      	ldr	r1, [r3, #24]
 80070fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	ea40 0301 	orr.w	r3, r0, r1
 8007106:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	4b8f      	ldr	r3, [pc, #572]	; (800734c <UART_SetConfig+0x2cc>)
 8007110:	429a      	cmp	r2, r3
 8007112:	d005      	beq.n	8007120 <UART_SetConfig+0xa0>
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b8d      	ldr	r3, [pc, #564]	; (8007350 <UART_SetConfig+0x2d0>)
 800711c:	429a      	cmp	r2, r3
 800711e:	d104      	bne.n	800712a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007120:	f7fe fa1c 	bl	800555c <HAL_RCC_GetPCLK2Freq>
 8007124:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007128:	e003      	b.n	8007132 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800712a:	f7fe fa03 	bl	8005534 <HAL_RCC_GetPCLK1Freq>
 800712e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800713c:	f040 810c 	bne.w	8007358 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007144:	2200      	movs	r2, #0
 8007146:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800714a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800714e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007152:	4622      	mov	r2, r4
 8007154:	462b      	mov	r3, r5
 8007156:	1891      	adds	r1, r2, r2
 8007158:	65b9      	str	r1, [r7, #88]	; 0x58
 800715a:	415b      	adcs	r3, r3
 800715c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800715e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007162:	4621      	mov	r1, r4
 8007164:	eb12 0801 	adds.w	r8, r2, r1
 8007168:	4629      	mov	r1, r5
 800716a:	eb43 0901 	adc.w	r9, r3, r1
 800716e:	f04f 0200 	mov.w	r2, #0
 8007172:	f04f 0300 	mov.w	r3, #0
 8007176:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800717a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800717e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007182:	4690      	mov	r8, r2
 8007184:	4699      	mov	r9, r3
 8007186:	4623      	mov	r3, r4
 8007188:	eb18 0303 	adds.w	r3, r8, r3
 800718c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007190:	462b      	mov	r3, r5
 8007192:	eb49 0303 	adc.w	r3, r9, r3
 8007196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800719a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80071a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80071aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80071ae:	460b      	mov	r3, r1
 80071b0:	18db      	adds	r3, r3, r3
 80071b2:	653b      	str	r3, [r7, #80]	; 0x50
 80071b4:	4613      	mov	r3, r2
 80071b6:	eb42 0303 	adc.w	r3, r2, r3
 80071ba:	657b      	str	r3, [r7, #84]	; 0x54
 80071bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80071c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80071c4:	f7f9 fcf0 	bl	8000ba8 <__aeabi_uldivmod>
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4b61      	ldr	r3, [pc, #388]	; (8007354 <UART_SetConfig+0x2d4>)
 80071ce:	fba3 2302 	umull	r2, r3, r3, r2
 80071d2:	095b      	lsrs	r3, r3, #5
 80071d4:	011c      	lsls	r4, r3, #4
 80071d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80071e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80071e8:	4642      	mov	r2, r8
 80071ea:	464b      	mov	r3, r9
 80071ec:	1891      	adds	r1, r2, r2
 80071ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80071f0:	415b      	adcs	r3, r3
 80071f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071f8:	4641      	mov	r1, r8
 80071fa:	eb12 0a01 	adds.w	sl, r2, r1
 80071fe:	4649      	mov	r1, r9
 8007200:	eb43 0b01 	adc.w	fp, r3, r1
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007210:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007218:	4692      	mov	sl, r2
 800721a:	469b      	mov	fp, r3
 800721c:	4643      	mov	r3, r8
 800721e:	eb1a 0303 	adds.w	r3, sl, r3
 8007222:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007226:	464b      	mov	r3, r9
 8007228:	eb4b 0303 	adc.w	r3, fp, r3
 800722c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800723c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007240:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007244:	460b      	mov	r3, r1
 8007246:	18db      	adds	r3, r3, r3
 8007248:	643b      	str	r3, [r7, #64]	; 0x40
 800724a:	4613      	mov	r3, r2
 800724c:	eb42 0303 	adc.w	r3, r2, r3
 8007250:	647b      	str	r3, [r7, #68]	; 0x44
 8007252:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007256:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800725a:	f7f9 fca5 	bl	8000ba8 <__aeabi_uldivmod>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	4611      	mov	r1, r2
 8007264:	4b3b      	ldr	r3, [pc, #236]	; (8007354 <UART_SetConfig+0x2d4>)
 8007266:	fba3 2301 	umull	r2, r3, r3, r1
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	2264      	movs	r2, #100	; 0x64
 800726e:	fb02 f303 	mul.w	r3, r2, r3
 8007272:	1acb      	subs	r3, r1, r3
 8007274:	00db      	lsls	r3, r3, #3
 8007276:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800727a:	4b36      	ldr	r3, [pc, #216]	; (8007354 <UART_SetConfig+0x2d4>)
 800727c:	fba3 2302 	umull	r2, r3, r3, r2
 8007280:	095b      	lsrs	r3, r3, #5
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007288:	441c      	add	r4, r3
 800728a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800728e:	2200      	movs	r2, #0
 8007290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007294:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007298:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800729c:	4642      	mov	r2, r8
 800729e:	464b      	mov	r3, r9
 80072a0:	1891      	adds	r1, r2, r2
 80072a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80072a4:	415b      	adcs	r3, r3
 80072a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80072ac:	4641      	mov	r1, r8
 80072ae:	1851      	adds	r1, r2, r1
 80072b0:	6339      	str	r1, [r7, #48]	; 0x30
 80072b2:	4649      	mov	r1, r9
 80072b4:	414b      	adcs	r3, r1
 80072b6:	637b      	str	r3, [r7, #52]	; 0x34
 80072b8:	f04f 0200 	mov.w	r2, #0
 80072bc:	f04f 0300 	mov.w	r3, #0
 80072c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80072c4:	4659      	mov	r1, fp
 80072c6:	00cb      	lsls	r3, r1, #3
 80072c8:	4651      	mov	r1, sl
 80072ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072ce:	4651      	mov	r1, sl
 80072d0:	00ca      	lsls	r2, r1, #3
 80072d2:	4610      	mov	r0, r2
 80072d4:	4619      	mov	r1, r3
 80072d6:	4603      	mov	r3, r0
 80072d8:	4642      	mov	r2, r8
 80072da:	189b      	adds	r3, r3, r2
 80072dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072e0:	464b      	mov	r3, r9
 80072e2:	460a      	mov	r2, r1
 80072e4:	eb42 0303 	adc.w	r3, r2, r3
 80072e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80072fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007300:	460b      	mov	r3, r1
 8007302:	18db      	adds	r3, r3, r3
 8007304:	62bb      	str	r3, [r7, #40]	; 0x28
 8007306:	4613      	mov	r3, r2
 8007308:	eb42 0303 	adc.w	r3, r2, r3
 800730c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800730e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007312:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007316:	f7f9 fc47 	bl	8000ba8 <__aeabi_uldivmod>
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <UART_SetConfig+0x2d4>)
 8007320:	fba3 1302 	umull	r1, r3, r3, r2
 8007324:	095b      	lsrs	r3, r3, #5
 8007326:	2164      	movs	r1, #100	; 0x64
 8007328:	fb01 f303 	mul.w	r3, r1, r3
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	3332      	adds	r3, #50	; 0x32
 8007332:	4a08      	ldr	r2, [pc, #32]	; (8007354 <UART_SetConfig+0x2d4>)
 8007334:	fba2 2303 	umull	r2, r3, r2, r3
 8007338:	095b      	lsrs	r3, r3, #5
 800733a:	f003 0207 	and.w	r2, r3, #7
 800733e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4422      	add	r2, r4
 8007346:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007348:	e106      	b.n	8007558 <UART_SetConfig+0x4d8>
 800734a:	bf00      	nop
 800734c:	40011000 	.word	0x40011000
 8007350:	40011400 	.word	0x40011400
 8007354:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800735c:	2200      	movs	r2, #0
 800735e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007362:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007366:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800736a:	4642      	mov	r2, r8
 800736c:	464b      	mov	r3, r9
 800736e:	1891      	adds	r1, r2, r2
 8007370:	6239      	str	r1, [r7, #32]
 8007372:	415b      	adcs	r3, r3
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
 8007376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800737a:	4641      	mov	r1, r8
 800737c:	1854      	adds	r4, r2, r1
 800737e:	4649      	mov	r1, r9
 8007380:	eb43 0501 	adc.w	r5, r3, r1
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	00eb      	lsls	r3, r5, #3
 800738e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007392:	00e2      	lsls	r2, r4, #3
 8007394:	4614      	mov	r4, r2
 8007396:	461d      	mov	r5, r3
 8007398:	4643      	mov	r3, r8
 800739a:	18e3      	adds	r3, r4, r3
 800739c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80073a0:	464b      	mov	r3, r9
 80073a2:	eb45 0303 	adc.w	r3, r5, r3
 80073a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80073aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073ba:	f04f 0200 	mov.w	r2, #0
 80073be:	f04f 0300 	mov.w	r3, #0
 80073c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80073c6:	4629      	mov	r1, r5
 80073c8:	008b      	lsls	r3, r1, #2
 80073ca:	4621      	mov	r1, r4
 80073cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073d0:	4621      	mov	r1, r4
 80073d2:	008a      	lsls	r2, r1, #2
 80073d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80073d8:	f7f9 fbe6 	bl	8000ba8 <__aeabi_uldivmod>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4b60      	ldr	r3, [pc, #384]	; (8007564 <UART_SetConfig+0x4e4>)
 80073e2:	fba3 2302 	umull	r2, r3, r3, r2
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	011c      	lsls	r4, r3, #4
 80073ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80073f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80073f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80073fc:	4642      	mov	r2, r8
 80073fe:	464b      	mov	r3, r9
 8007400:	1891      	adds	r1, r2, r2
 8007402:	61b9      	str	r1, [r7, #24]
 8007404:	415b      	adcs	r3, r3
 8007406:	61fb      	str	r3, [r7, #28]
 8007408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800740c:	4641      	mov	r1, r8
 800740e:	1851      	adds	r1, r2, r1
 8007410:	6139      	str	r1, [r7, #16]
 8007412:	4649      	mov	r1, r9
 8007414:	414b      	adcs	r3, r1
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	f04f 0200 	mov.w	r2, #0
 800741c:	f04f 0300 	mov.w	r3, #0
 8007420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007424:	4659      	mov	r1, fp
 8007426:	00cb      	lsls	r3, r1, #3
 8007428:	4651      	mov	r1, sl
 800742a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800742e:	4651      	mov	r1, sl
 8007430:	00ca      	lsls	r2, r1, #3
 8007432:	4610      	mov	r0, r2
 8007434:	4619      	mov	r1, r3
 8007436:	4603      	mov	r3, r0
 8007438:	4642      	mov	r2, r8
 800743a:	189b      	adds	r3, r3, r2
 800743c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007440:	464b      	mov	r3, r9
 8007442:	460a      	mov	r2, r1
 8007444:	eb42 0303 	adc.w	r3, r2, r3
 8007448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800744c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	67bb      	str	r3, [r7, #120]	; 0x78
 8007456:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007458:	f04f 0200 	mov.w	r2, #0
 800745c:	f04f 0300 	mov.w	r3, #0
 8007460:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007464:	4649      	mov	r1, r9
 8007466:	008b      	lsls	r3, r1, #2
 8007468:	4641      	mov	r1, r8
 800746a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800746e:	4641      	mov	r1, r8
 8007470:	008a      	lsls	r2, r1, #2
 8007472:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007476:	f7f9 fb97 	bl	8000ba8 <__aeabi_uldivmod>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4611      	mov	r1, r2
 8007480:	4b38      	ldr	r3, [pc, #224]	; (8007564 <UART_SetConfig+0x4e4>)
 8007482:	fba3 2301 	umull	r2, r3, r3, r1
 8007486:	095b      	lsrs	r3, r3, #5
 8007488:	2264      	movs	r2, #100	; 0x64
 800748a:	fb02 f303 	mul.w	r3, r2, r3
 800748e:	1acb      	subs	r3, r1, r3
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	3332      	adds	r3, #50	; 0x32
 8007494:	4a33      	ldr	r2, [pc, #204]	; (8007564 <UART_SetConfig+0x4e4>)
 8007496:	fba2 2303 	umull	r2, r3, r2, r3
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074a0:	441c      	add	r4, r3
 80074a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074a6:	2200      	movs	r2, #0
 80074a8:	673b      	str	r3, [r7, #112]	; 0x70
 80074aa:	677a      	str	r2, [r7, #116]	; 0x74
 80074ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80074b0:	4642      	mov	r2, r8
 80074b2:	464b      	mov	r3, r9
 80074b4:	1891      	adds	r1, r2, r2
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	415b      	adcs	r3, r3
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074c0:	4641      	mov	r1, r8
 80074c2:	1851      	adds	r1, r2, r1
 80074c4:	6039      	str	r1, [r7, #0]
 80074c6:	4649      	mov	r1, r9
 80074c8:	414b      	adcs	r3, r1
 80074ca:	607b      	str	r3, [r7, #4]
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80074d8:	4659      	mov	r1, fp
 80074da:	00cb      	lsls	r3, r1, #3
 80074dc:	4651      	mov	r1, sl
 80074de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074e2:	4651      	mov	r1, sl
 80074e4:	00ca      	lsls	r2, r1, #3
 80074e6:	4610      	mov	r0, r2
 80074e8:	4619      	mov	r1, r3
 80074ea:	4603      	mov	r3, r0
 80074ec:	4642      	mov	r2, r8
 80074ee:	189b      	adds	r3, r3, r2
 80074f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80074f2:	464b      	mov	r3, r9
 80074f4:	460a      	mov	r2, r1
 80074f6:	eb42 0303 	adc.w	r3, r2, r3
 80074fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	663b      	str	r3, [r7, #96]	; 0x60
 8007506:	667a      	str	r2, [r7, #100]	; 0x64
 8007508:	f04f 0200 	mov.w	r2, #0
 800750c:	f04f 0300 	mov.w	r3, #0
 8007510:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007514:	4649      	mov	r1, r9
 8007516:	008b      	lsls	r3, r1, #2
 8007518:	4641      	mov	r1, r8
 800751a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800751e:	4641      	mov	r1, r8
 8007520:	008a      	lsls	r2, r1, #2
 8007522:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007526:	f7f9 fb3f 	bl	8000ba8 <__aeabi_uldivmod>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4b0d      	ldr	r3, [pc, #52]	; (8007564 <UART_SetConfig+0x4e4>)
 8007530:	fba3 1302 	umull	r1, r3, r3, r2
 8007534:	095b      	lsrs	r3, r3, #5
 8007536:	2164      	movs	r1, #100	; 0x64
 8007538:	fb01 f303 	mul.w	r3, r1, r3
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	3332      	adds	r3, #50	; 0x32
 8007542:	4a08      	ldr	r2, [pc, #32]	; (8007564 <UART_SetConfig+0x4e4>)
 8007544:	fba2 2303 	umull	r2, r3, r2, r3
 8007548:	095b      	lsrs	r3, r3, #5
 800754a:	f003 020f 	and.w	r2, r3, #15
 800754e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4422      	add	r2, r4
 8007556:	609a      	str	r2, [r3, #8]
}
 8007558:	bf00      	nop
 800755a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800755e:	46bd      	mov	sp, r7
 8007560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007564:	51eb851f 	.word	0x51eb851f

08007568 <pow>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	ed2d 8b02 	vpush	{d8}
 800756e:	eeb0 8a40 	vmov.f32	s16, s0
 8007572:	eef0 8a60 	vmov.f32	s17, s1
 8007576:	ec55 4b11 	vmov	r4, r5, d1
 800757a:	f000 f8b9 	bl	80076f0 <__ieee754_pow>
 800757e:	4622      	mov	r2, r4
 8007580:	462b      	mov	r3, r5
 8007582:	4620      	mov	r0, r4
 8007584:	4629      	mov	r1, r5
 8007586:	ec57 6b10 	vmov	r6, r7, d0
 800758a:	f7f9 fad7 	bl	8000b3c <__aeabi_dcmpun>
 800758e:	2800      	cmp	r0, #0
 8007590:	d13b      	bne.n	800760a <pow+0xa2>
 8007592:	ec51 0b18 	vmov	r0, r1, d8
 8007596:	2200      	movs	r2, #0
 8007598:	2300      	movs	r3, #0
 800759a:	f7f9 fa9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800759e:	b1b8      	cbz	r0, 80075d0 <pow+0x68>
 80075a0:	2200      	movs	r2, #0
 80075a2:	2300      	movs	r3, #0
 80075a4:	4620      	mov	r0, r4
 80075a6:	4629      	mov	r1, r5
 80075a8:	f7f9 fa96 	bl	8000ad8 <__aeabi_dcmpeq>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d146      	bne.n	800763e <pow+0xd6>
 80075b0:	ec45 4b10 	vmov	d0, r4, r5
 80075b4:	f000 f848 	bl	8007648 <finite>
 80075b8:	b338      	cbz	r0, 800760a <pow+0xa2>
 80075ba:	2200      	movs	r2, #0
 80075bc:	2300      	movs	r3, #0
 80075be:	4620      	mov	r0, r4
 80075c0:	4629      	mov	r1, r5
 80075c2:	f7f9 fa93 	bl	8000aec <__aeabi_dcmplt>
 80075c6:	b300      	cbz	r0, 800760a <pow+0xa2>
 80075c8:	f000 ff8a 	bl	80084e0 <__errno>
 80075cc:	2322      	movs	r3, #34	; 0x22
 80075ce:	e01b      	b.n	8007608 <pow+0xa0>
 80075d0:	ec47 6b10 	vmov	d0, r6, r7
 80075d4:	f000 f838 	bl	8007648 <finite>
 80075d8:	b9e0      	cbnz	r0, 8007614 <pow+0xac>
 80075da:	eeb0 0a48 	vmov.f32	s0, s16
 80075de:	eef0 0a68 	vmov.f32	s1, s17
 80075e2:	f000 f831 	bl	8007648 <finite>
 80075e6:	b1a8      	cbz	r0, 8007614 <pow+0xac>
 80075e8:	ec45 4b10 	vmov	d0, r4, r5
 80075ec:	f000 f82c 	bl	8007648 <finite>
 80075f0:	b180      	cbz	r0, 8007614 <pow+0xac>
 80075f2:	4632      	mov	r2, r6
 80075f4:	463b      	mov	r3, r7
 80075f6:	4630      	mov	r0, r6
 80075f8:	4639      	mov	r1, r7
 80075fa:	f7f9 fa9f 	bl	8000b3c <__aeabi_dcmpun>
 80075fe:	2800      	cmp	r0, #0
 8007600:	d0e2      	beq.n	80075c8 <pow+0x60>
 8007602:	f000 ff6d 	bl	80084e0 <__errno>
 8007606:	2321      	movs	r3, #33	; 0x21
 8007608:	6003      	str	r3, [r0, #0]
 800760a:	ecbd 8b02 	vpop	{d8}
 800760e:	ec47 6b10 	vmov	d0, r6, r7
 8007612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007614:	2200      	movs	r2, #0
 8007616:	2300      	movs	r3, #0
 8007618:	4630      	mov	r0, r6
 800761a:	4639      	mov	r1, r7
 800761c:	f7f9 fa5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007620:	2800      	cmp	r0, #0
 8007622:	d0f2      	beq.n	800760a <pow+0xa2>
 8007624:	eeb0 0a48 	vmov.f32	s0, s16
 8007628:	eef0 0a68 	vmov.f32	s1, s17
 800762c:	f000 f80c 	bl	8007648 <finite>
 8007630:	2800      	cmp	r0, #0
 8007632:	d0ea      	beq.n	800760a <pow+0xa2>
 8007634:	ec45 4b10 	vmov	d0, r4, r5
 8007638:	f000 f806 	bl	8007648 <finite>
 800763c:	e7c3      	b.n	80075c6 <pow+0x5e>
 800763e:	4f01      	ldr	r7, [pc, #4]	; (8007644 <pow+0xdc>)
 8007640:	2600      	movs	r6, #0
 8007642:	e7e2      	b.n	800760a <pow+0xa2>
 8007644:	3ff00000 	.word	0x3ff00000

08007648 <finite>:
 8007648:	b082      	sub	sp, #8
 800764a:	ed8d 0b00 	vstr	d0, [sp]
 800764e:	9801      	ldr	r0, [sp, #4]
 8007650:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007654:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007658:	0fc0      	lsrs	r0, r0, #31
 800765a:	b002      	add	sp, #8
 800765c:	4770      	bx	lr
	...

08007660 <round>:
 8007660:	ec53 2b10 	vmov	r2, r3, d0
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800766a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800766e:	2813      	cmp	r0, #19
 8007670:	ee10 5a10 	vmov	r5, s0
 8007674:	4619      	mov	r1, r3
 8007676:	dc18      	bgt.n	80076aa <round+0x4a>
 8007678:	2800      	cmp	r0, #0
 800767a:	da09      	bge.n	8007690 <round+0x30>
 800767c:	3001      	adds	r0, #1
 800767e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8007682:	d103      	bne.n	800768c <round+0x2c>
 8007684:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007688:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800768c:	2300      	movs	r3, #0
 800768e:	e02a      	b.n	80076e6 <round+0x86>
 8007690:	4c16      	ldr	r4, [pc, #88]	; (80076ec <round+0x8c>)
 8007692:	4104      	asrs	r4, r0
 8007694:	ea03 0604 	and.w	r6, r3, r4
 8007698:	4316      	orrs	r6, r2
 800769a:	d011      	beq.n	80076c0 <round+0x60>
 800769c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80076a0:	4103      	asrs	r3, r0
 80076a2:	440b      	add	r3, r1
 80076a4:	ea23 0104 	bic.w	r1, r3, r4
 80076a8:	e7f0      	b.n	800768c <round+0x2c>
 80076aa:	2833      	cmp	r0, #51	; 0x33
 80076ac:	dd0b      	ble.n	80076c6 <round+0x66>
 80076ae:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80076b2:	d105      	bne.n	80076c0 <round+0x60>
 80076b4:	ee10 0a10 	vmov	r0, s0
 80076b8:	f7f8 fdf0 	bl	800029c <__adddf3>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	ec43 2b10 	vmov	d0, r2, r3
 80076c4:	bd70      	pop	{r4, r5, r6, pc}
 80076c6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80076ca:	f04f 34ff 	mov.w	r4, #4294967295
 80076ce:	40f4      	lsrs	r4, r6
 80076d0:	4214      	tst	r4, r2
 80076d2:	d0f5      	beq.n	80076c0 <round+0x60>
 80076d4:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 80076d8:	2301      	movs	r3, #1
 80076da:	4083      	lsls	r3, r0
 80076dc:	195b      	adds	r3, r3, r5
 80076de:	bf28      	it	cs
 80076e0:	3101      	addcs	r1, #1
 80076e2:	ea23 0304 	bic.w	r3, r3, r4
 80076e6:	461a      	mov	r2, r3
 80076e8:	460b      	mov	r3, r1
 80076ea:	e7e9      	b.n	80076c0 <round+0x60>
 80076ec:	000fffff 	.word	0x000fffff

080076f0 <__ieee754_pow>:
 80076f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	ed2d 8b06 	vpush	{d8-d10}
 80076f8:	b089      	sub	sp, #36	; 0x24
 80076fa:	ed8d 1b00 	vstr	d1, [sp]
 80076fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007702:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007706:	ea58 0102 	orrs.w	r1, r8, r2
 800770a:	ec57 6b10 	vmov	r6, r7, d0
 800770e:	d115      	bne.n	800773c <__ieee754_pow+0x4c>
 8007710:	19b3      	adds	r3, r6, r6
 8007712:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007716:	4152      	adcs	r2, r2
 8007718:	4299      	cmp	r1, r3
 800771a:	4b89      	ldr	r3, [pc, #548]	; (8007940 <__ieee754_pow+0x250>)
 800771c:	4193      	sbcs	r3, r2
 800771e:	f080 84d1 	bcs.w	80080c4 <__ieee754_pow+0x9d4>
 8007722:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007726:	4630      	mov	r0, r6
 8007728:	4639      	mov	r1, r7
 800772a:	f7f8 fdb7 	bl	800029c <__adddf3>
 800772e:	ec41 0b10 	vmov	d0, r0, r1
 8007732:	b009      	add	sp, #36	; 0x24
 8007734:	ecbd 8b06 	vpop	{d8-d10}
 8007738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773c:	4b81      	ldr	r3, [pc, #516]	; (8007944 <__ieee754_pow+0x254>)
 800773e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007742:	429c      	cmp	r4, r3
 8007744:	ee10 aa10 	vmov	sl, s0
 8007748:	463d      	mov	r5, r7
 800774a:	dc06      	bgt.n	800775a <__ieee754_pow+0x6a>
 800774c:	d101      	bne.n	8007752 <__ieee754_pow+0x62>
 800774e:	2e00      	cmp	r6, #0
 8007750:	d1e7      	bne.n	8007722 <__ieee754_pow+0x32>
 8007752:	4598      	cmp	r8, r3
 8007754:	dc01      	bgt.n	800775a <__ieee754_pow+0x6a>
 8007756:	d10f      	bne.n	8007778 <__ieee754_pow+0x88>
 8007758:	b172      	cbz	r2, 8007778 <__ieee754_pow+0x88>
 800775a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800775e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007762:	ea55 050a 	orrs.w	r5, r5, sl
 8007766:	d1dc      	bne.n	8007722 <__ieee754_pow+0x32>
 8007768:	e9dd 3200 	ldrd	r3, r2, [sp]
 800776c:	18db      	adds	r3, r3, r3
 800776e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007772:	4152      	adcs	r2, r2
 8007774:	429d      	cmp	r5, r3
 8007776:	e7d0      	b.n	800771a <__ieee754_pow+0x2a>
 8007778:	2d00      	cmp	r5, #0
 800777a:	da3b      	bge.n	80077f4 <__ieee754_pow+0x104>
 800777c:	4b72      	ldr	r3, [pc, #456]	; (8007948 <__ieee754_pow+0x258>)
 800777e:	4598      	cmp	r8, r3
 8007780:	dc51      	bgt.n	8007826 <__ieee754_pow+0x136>
 8007782:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007786:	4598      	cmp	r8, r3
 8007788:	f340 84ab 	ble.w	80080e2 <__ieee754_pow+0x9f2>
 800778c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007790:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007794:	2b14      	cmp	r3, #20
 8007796:	dd0f      	ble.n	80077b8 <__ieee754_pow+0xc8>
 8007798:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800779c:	fa22 f103 	lsr.w	r1, r2, r3
 80077a0:	fa01 f303 	lsl.w	r3, r1, r3
 80077a4:	4293      	cmp	r3, r2
 80077a6:	f040 849c 	bne.w	80080e2 <__ieee754_pow+0x9f2>
 80077aa:	f001 0101 	and.w	r1, r1, #1
 80077ae:	f1c1 0302 	rsb	r3, r1, #2
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	b182      	cbz	r2, 80077d8 <__ieee754_pow+0xe8>
 80077b6:	e05f      	b.n	8007878 <__ieee754_pow+0x188>
 80077b8:	2a00      	cmp	r2, #0
 80077ba:	d15b      	bne.n	8007874 <__ieee754_pow+0x184>
 80077bc:	f1c3 0314 	rsb	r3, r3, #20
 80077c0:	fa48 f103 	asr.w	r1, r8, r3
 80077c4:	fa01 f303 	lsl.w	r3, r1, r3
 80077c8:	4543      	cmp	r3, r8
 80077ca:	f040 8487 	bne.w	80080dc <__ieee754_pow+0x9ec>
 80077ce:	f001 0101 	and.w	r1, r1, #1
 80077d2:	f1c1 0302 	rsb	r3, r1, #2
 80077d6:	9304      	str	r3, [sp, #16]
 80077d8:	4b5c      	ldr	r3, [pc, #368]	; (800794c <__ieee754_pow+0x25c>)
 80077da:	4598      	cmp	r8, r3
 80077dc:	d132      	bne.n	8007844 <__ieee754_pow+0x154>
 80077de:	f1b9 0f00 	cmp.w	r9, #0
 80077e2:	f280 8477 	bge.w	80080d4 <__ieee754_pow+0x9e4>
 80077e6:	4959      	ldr	r1, [pc, #356]	; (800794c <__ieee754_pow+0x25c>)
 80077e8:	4632      	mov	r2, r6
 80077ea:	463b      	mov	r3, r7
 80077ec:	2000      	movs	r0, #0
 80077ee:	f7f9 f835 	bl	800085c <__aeabi_ddiv>
 80077f2:	e79c      	b.n	800772e <__ieee754_pow+0x3e>
 80077f4:	2300      	movs	r3, #0
 80077f6:	9304      	str	r3, [sp, #16]
 80077f8:	2a00      	cmp	r2, #0
 80077fa:	d13d      	bne.n	8007878 <__ieee754_pow+0x188>
 80077fc:	4b51      	ldr	r3, [pc, #324]	; (8007944 <__ieee754_pow+0x254>)
 80077fe:	4598      	cmp	r8, r3
 8007800:	d1ea      	bne.n	80077d8 <__ieee754_pow+0xe8>
 8007802:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007806:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800780a:	ea53 030a 	orrs.w	r3, r3, sl
 800780e:	f000 8459 	beq.w	80080c4 <__ieee754_pow+0x9d4>
 8007812:	4b4f      	ldr	r3, [pc, #316]	; (8007950 <__ieee754_pow+0x260>)
 8007814:	429c      	cmp	r4, r3
 8007816:	dd08      	ble.n	800782a <__ieee754_pow+0x13a>
 8007818:	f1b9 0f00 	cmp.w	r9, #0
 800781c:	f2c0 8456 	blt.w	80080cc <__ieee754_pow+0x9dc>
 8007820:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007824:	e783      	b.n	800772e <__ieee754_pow+0x3e>
 8007826:	2302      	movs	r3, #2
 8007828:	e7e5      	b.n	80077f6 <__ieee754_pow+0x106>
 800782a:	f1b9 0f00 	cmp.w	r9, #0
 800782e:	f04f 0000 	mov.w	r0, #0
 8007832:	f04f 0100 	mov.w	r1, #0
 8007836:	f6bf af7a 	bge.w	800772e <__ieee754_pow+0x3e>
 800783a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800783e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007842:	e774      	b.n	800772e <__ieee754_pow+0x3e>
 8007844:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007848:	d106      	bne.n	8007858 <__ieee754_pow+0x168>
 800784a:	4632      	mov	r2, r6
 800784c:	463b      	mov	r3, r7
 800784e:	4630      	mov	r0, r6
 8007850:	4639      	mov	r1, r7
 8007852:	f7f8 fed9 	bl	8000608 <__aeabi_dmul>
 8007856:	e76a      	b.n	800772e <__ieee754_pow+0x3e>
 8007858:	4b3e      	ldr	r3, [pc, #248]	; (8007954 <__ieee754_pow+0x264>)
 800785a:	4599      	cmp	r9, r3
 800785c:	d10c      	bne.n	8007878 <__ieee754_pow+0x188>
 800785e:	2d00      	cmp	r5, #0
 8007860:	db0a      	blt.n	8007878 <__ieee754_pow+0x188>
 8007862:	ec47 6b10 	vmov	d0, r6, r7
 8007866:	b009      	add	sp, #36	; 0x24
 8007868:	ecbd 8b06 	vpop	{d8-d10}
 800786c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007870:	f000 bd20 	b.w	80082b4 <__ieee754_sqrt>
 8007874:	2300      	movs	r3, #0
 8007876:	9304      	str	r3, [sp, #16]
 8007878:	ec47 6b10 	vmov	d0, r6, r7
 800787c:	f000 fc62 	bl	8008144 <fabs>
 8007880:	ec51 0b10 	vmov	r0, r1, d0
 8007884:	f1ba 0f00 	cmp.w	sl, #0
 8007888:	d129      	bne.n	80078de <__ieee754_pow+0x1ee>
 800788a:	b124      	cbz	r4, 8007896 <__ieee754_pow+0x1a6>
 800788c:	4b2f      	ldr	r3, [pc, #188]	; (800794c <__ieee754_pow+0x25c>)
 800788e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007892:	429a      	cmp	r2, r3
 8007894:	d123      	bne.n	80078de <__ieee754_pow+0x1ee>
 8007896:	f1b9 0f00 	cmp.w	r9, #0
 800789a:	da05      	bge.n	80078a8 <__ieee754_pow+0x1b8>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	2000      	movs	r0, #0
 80078a2:	492a      	ldr	r1, [pc, #168]	; (800794c <__ieee754_pow+0x25c>)
 80078a4:	f7f8 ffda 	bl	800085c <__aeabi_ddiv>
 80078a8:	2d00      	cmp	r5, #0
 80078aa:	f6bf af40 	bge.w	800772e <__ieee754_pow+0x3e>
 80078ae:	9b04      	ldr	r3, [sp, #16]
 80078b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80078b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80078b8:	431c      	orrs	r4, r3
 80078ba:	d108      	bne.n	80078ce <__ieee754_pow+0x1de>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4610      	mov	r0, r2
 80078c2:	4619      	mov	r1, r3
 80078c4:	f7f8 fce8 	bl	8000298 <__aeabi_dsub>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	e78f      	b.n	80077ee <__ieee754_pow+0xfe>
 80078ce:	9b04      	ldr	r3, [sp, #16]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	f47f af2c 	bne.w	800772e <__ieee754_pow+0x3e>
 80078d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078da:	4619      	mov	r1, r3
 80078dc:	e727      	b.n	800772e <__ieee754_pow+0x3e>
 80078de:	0feb      	lsrs	r3, r5, #31
 80078e0:	3b01      	subs	r3, #1
 80078e2:	9306      	str	r3, [sp, #24]
 80078e4:	9a06      	ldr	r2, [sp, #24]
 80078e6:	9b04      	ldr	r3, [sp, #16]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	d102      	bne.n	80078f2 <__ieee754_pow+0x202>
 80078ec:	4632      	mov	r2, r6
 80078ee:	463b      	mov	r3, r7
 80078f0:	e7e6      	b.n	80078c0 <__ieee754_pow+0x1d0>
 80078f2:	4b19      	ldr	r3, [pc, #100]	; (8007958 <__ieee754_pow+0x268>)
 80078f4:	4598      	cmp	r8, r3
 80078f6:	f340 80fb 	ble.w	8007af0 <__ieee754_pow+0x400>
 80078fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80078fe:	4598      	cmp	r8, r3
 8007900:	4b13      	ldr	r3, [pc, #76]	; (8007950 <__ieee754_pow+0x260>)
 8007902:	dd0c      	ble.n	800791e <__ieee754_pow+0x22e>
 8007904:	429c      	cmp	r4, r3
 8007906:	dc0f      	bgt.n	8007928 <__ieee754_pow+0x238>
 8007908:	f1b9 0f00 	cmp.w	r9, #0
 800790c:	da0f      	bge.n	800792e <__ieee754_pow+0x23e>
 800790e:	2000      	movs	r0, #0
 8007910:	b009      	add	sp, #36	; 0x24
 8007912:	ecbd 8b06 	vpop	{d8-d10}
 8007916:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791a:	f000 bcc2 	b.w	80082a2 <__math_oflow>
 800791e:	429c      	cmp	r4, r3
 8007920:	dbf2      	blt.n	8007908 <__ieee754_pow+0x218>
 8007922:	4b0a      	ldr	r3, [pc, #40]	; (800794c <__ieee754_pow+0x25c>)
 8007924:	429c      	cmp	r4, r3
 8007926:	dd19      	ble.n	800795c <__ieee754_pow+0x26c>
 8007928:	f1b9 0f00 	cmp.w	r9, #0
 800792c:	dcef      	bgt.n	800790e <__ieee754_pow+0x21e>
 800792e:	2000      	movs	r0, #0
 8007930:	b009      	add	sp, #36	; 0x24
 8007932:	ecbd 8b06 	vpop	{d8-d10}
 8007936:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800793a:	f000 bca9 	b.w	8008290 <__math_uflow>
 800793e:	bf00      	nop
 8007940:	fff00000 	.word	0xfff00000
 8007944:	7ff00000 	.word	0x7ff00000
 8007948:	433fffff 	.word	0x433fffff
 800794c:	3ff00000 	.word	0x3ff00000
 8007950:	3fefffff 	.word	0x3fefffff
 8007954:	3fe00000 	.word	0x3fe00000
 8007958:	41e00000 	.word	0x41e00000
 800795c:	4b60      	ldr	r3, [pc, #384]	; (8007ae0 <__ieee754_pow+0x3f0>)
 800795e:	2200      	movs	r2, #0
 8007960:	f7f8 fc9a 	bl	8000298 <__aeabi_dsub>
 8007964:	a354      	add	r3, pc, #336	; (adr r3, 8007ab8 <__ieee754_pow+0x3c8>)
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	4604      	mov	r4, r0
 800796c:	460d      	mov	r5, r1
 800796e:	f7f8 fe4b 	bl	8000608 <__aeabi_dmul>
 8007972:	a353      	add	r3, pc, #332	; (adr r3, 8007ac0 <__ieee754_pow+0x3d0>)
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	4606      	mov	r6, r0
 800797a:	460f      	mov	r7, r1
 800797c:	4620      	mov	r0, r4
 800797e:	4629      	mov	r1, r5
 8007980:	f7f8 fe42 	bl	8000608 <__aeabi_dmul>
 8007984:	4b57      	ldr	r3, [pc, #348]	; (8007ae4 <__ieee754_pow+0x3f4>)
 8007986:	4682      	mov	sl, r0
 8007988:	468b      	mov	fp, r1
 800798a:	2200      	movs	r2, #0
 800798c:	4620      	mov	r0, r4
 800798e:	4629      	mov	r1, r5
 8007990:	f7f8 fe3a 	bl	8000608 <__aeabi_dmul>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	a14b      	add	r1, pc, #300	; (adr r1, 8007ac8 <__ieee754_pow+0x3d8>)
 800799a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800799e:	f7f8 fc7b 	bl	8000298 <__aeabi_dsub>
 80079a2:	4622      	mov	r2, r4
 80079a4:	462b      	mov	r3, r5
 80079a6:	f7f8 fe2f 	bl	8000608 <__aeabi_dmul>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	2000      	movs	r0, #0
 80079b0:	494d      	ldr	r1, [pc, #308]	; (8007ae8 <__ieee754_pow+0x3f8>)
 80079b2:	f7f8 fc71 	bl	8000298 <__aeabi_dsub>
 80079b6:	4622      	mov	r2, r4
 80079b8:	4680      	mov	r8, r0
 80079ba:	4689      	mov	r9, r1
 80079bc:	462b      	mov	r3, r5
 80079be:	4620      	mov	r0, r4
 80079c0:	4629      	mov	r1, r5
 80079c2:	f7f8 fe21 	bl	8000608 <__aeabi_dmul>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4640      	mov	r0, r8
 80079cc:	4649      	mov	r1, r9
 80079ce:	f7f8 fe1b 	bl	8000608 <__aeabi_dmul>
 80079d2:	a33f      	add	r3, pc, #252	; (adr r3, 8007ad0 <__ieee754_pow+0x3e0>)
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	f7f8 fe16 	bl	8000608 <__aeabi_dmul>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4650      	mov	r0, sl
 80079e2:	4659      	mov	r1, fp
 80079e4:	f7f8 fc58 	bl	8000298 <__aeabi_dsub>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	4680      	mov	r8, r0
 80079ee:	4689      	mov	r9, r1
 80079f0:	4630      	mov	r0, r6
 80079f2:	4639      	mov	r1, r7
 80079f4:	f7f8 fc52 	bl	800029c <__adddf3>
 80079f8:	2000      	movs	r0, #0
 80079fa:	4632      	mov	r2, r6
 80079fc:	463b      	mov	r3, r7
 80079fe:	4604      	mov	r4, r0
 8007a00:	460d      	mov	r5, r1
 8007a02:	f7f8 fc49 	bl	8000298 <__aeabi_dsub>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	f7f8 fc43 	bl	8000298 <__aeabi_dsub>
 8007a12:	9b04      	ldr	r3, [sp, #16]
 8007a14:	9a06      	ldr	r2, [sp, #24]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	4682      	mov	sl, r0
 8007a1c:	468b      	mov	fp, r1
 8007a1e:	f040 81e7 	bne.w	8007df0 <__ieee754_pow+0x700>
 8007a22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007ad8 <__ieee754_pow+0x3e8>
 8007a26:	eeb0 8a47 	vmov.f32	s16, s14
 8007a2a:	eef0 8a67 	vmov.f32	s17, s15
 8007a2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007a32:	2600      	movs	r6, #0
 8007a34:	4632      	mov	r2, r6
 8007a36:	463b      	mov	r3, r7
 8007a38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a3c:	f7f8 fc2c 	bl	8000298 <__aeabi_dsub>
 8007a40:	4622      	mov	r2, r4
 8007a42:	462b      	mov	r3, r5
 8007a44:	f7f8 fde0 	bl	8000608 <__aeabi_dmul>
 8007a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a4c:	4680      	mov	r8, r0
 8007a4e:	4689      	mov	r9, r1
 8007a50:	4650      	mov	r0, sl
 8007a52:	4659      	mov	r1, fp
 8007a54:	f7f8 fdd8 	bl	8000608 <__aeabi_dmul>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4640      	mov	r0, r8
 8007a5e:	4649      	mov	r1, r9
 8007a60:	f7f8 fc1c 	bl	800029c <__adddf3>
 8007a64:	4632      	mov	r2, r6
 8007a66:	463b      	mov	r3, r7
 8007a68:	4680      	mov	r8, r0
 8007a6a:	4689      	mov	r9, r1
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	4629      	mov	r1, r5
 8007a70:	f7f8 fdca 	bl	8000608 <__aeabi_dmul>
 8007a74:	460b      	mov	r3, r1
 8007a76:	4604      	mov	r4, r0
 8007a78:	460d      	mov	r5, r1
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	4640      	mov	r0, r8
 8007a80:	f7f8 fc0c 	bl	800029c <__adddf3>
 8007a84:	4b19      	ldr	r3, [pc, #100]	; (8007aec <__ieee754_pow+0x3fc>)
 8007a86:	4299      	cmp	r1, r3
 8007a88:	ec45 4b19 	vmov	d9, r4, r5
 8007a8c:	4606      	mov	r6, r0
 8007a8e:	460f      	mov	r7, r1
 8007a90:	468b      	mov	fp, r1
 8007a92:	f340 82f0 	ble.w	8008076 <__ieee754_pow+0x986>
 8007a96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007a9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007a9e:	4303      	orrs	r3, r0
 8007aa0:	f000 81e4 	beq.w	8007e6c <__ieee754_pow+0x77c>
 8007aa4:	ec51 0b18 	vmov	r0, r1, d8
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f7f9 f81e 	bl	8000aec <__aeabi_dcmplt>
 8007ab0:	3800      	subs	r0, #0
 8007ab2:	bf18      	it	ne
 8007ab4:	2001      	movne	r0, #1
 8007ab6:	e72b      	b.n	8007910 <__ieee754_pow+0x220>
 8007ab8:	60000000 	.word	0x60000000
 8007abc:	3ff71547 	.word	0x3ff71547
 8007ac0:	f85ddf44 	.word	0xf85ddf44
 8007ac4:	3e54ae0b 	.word	0x3e54ae0b
 8007ac8:	55555555 	.word	0x55555555
 8007acc:	3fd55555 	.word	0x3fd55555
 8007ad0:	652b82fe 	.word	0x652b82fe
 8007ad4:	3ff71547 	.word	0x3ff71547
 8007ad8:	00000000 	.word	0x00000000
 8007adc:	bff00000 	.word	0xbff00000
 8007ae0:	3ff00000 	.word	0x3ff00000
 8007ae4:	3fd00000 	.word	0x3fd00000
 8007ae8:	3fe00000 	.word	0x3fe00000
 8007aec:	408fffff 	.word	0x408fffff
 8007af0:	4bd5      	ldr	r3, [pc, #852]	; (8007e48 <__ieee754_pow+0x758>)
 8007af2:	402b      	ands	r3, r5
 8007af4:	2200      	movs	r2, #0
 8007af6:	b92b      	cbnz	r3, 8007b04 <__ieee754_pow+0x414>
 8007af8:	4bd4      	ldr	r3, [pc, #848]	; (8007e4c <__ieee754_pow+0x75c>)
 8007afa:	f7f8 fd85 	bl	8000608 <__aeabi_dmul>
 8007afe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007b02:	460c      	mov	r4, r1
 8007b04:	1523      	asrs	r3, r4, #20
 8007b06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007b0a:	4413      	add	r3, r2
 8007b0c:	9305      	str	r3, [sp, #20]
 8007b0e:	4bd0      	ldr	r3, [pc, #832]	; (8007e50 <__ieee754_pow+0x760>)
 8007b10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007b14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007b18:	429c      	cmp	r4, r3
 8007b1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007b1e:	dd08      	ble.n	8007b32 <__ieee754_pow+0x442>
 8007b20:	4bcc      	ldr	r3, [pc, #816]	; (8007e54 <__ieee754_pow+0x764>)
 8007b22:	429c      	cmp	r4, r3
 8007b24:	f340 8162 	ble.w	8007dec <__ieee754_pow+0x6fc>
 8007b28:	9b05      	ldr	r3, [sp, #20]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	9305      	str	r3, [sp, #20]
 8007b2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007b32:	2400      	movs	r4, #0
 8007b34:	00e3      	lsls	r3, r4, #3
 8007b36:	9307      	str	r3, [sp, #28]
 8007b38:	4bc7      	ldr	r3, [pc, #796]	; (8007e58 <__ieee754_pow+0x768>)
 8007b3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b3e:	ed93 7b00 	vldr	d7, [r3]
 8007b42:	4629      	mov	r1, r5
 8007b44:	ec53 2b17 	vmov	r2, r3, d7
 8007b48:	eeb0 9a47 	vmov.f32	s18, s14
 8007b4c:	eef0 9a67 	vmov.f32	s19, s15
 8007b50:	4682      	mov	sl, r0
 8007b52:	f7f8 fba1 	bl	8000298 <__aeabi_dsub>
 8007b56:	4652      	mov	r2, sl
 8007b58:	4606      	mov	r6, r0
 8007b5a:	460f      	mov	r7, r1
 8007b5c:	462b      	mov	r3, r5
 8007b5e:	ec51 0b19 	vmov	r0, r1, d9
 8007b62:	f7f8 fb9b 	bl	800029c <__adddf3>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	49bb      	ldr	r1, [pc, #748]	; (8007e5c <__ieee754_pow+0x76c>)
 8007b6e:	f7f8 fe75 	bl	800085c <__aeabi_ddiv>
 8007b72:	ec41 0b1a 	vmov	d10, r0, r1
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	4639      	mov	r1, r7
 8007b7e:	f7f8 fd43 	bl	8000608 <__aeabi_dmul>
 8007b82:	2300      	movs	r3, #0
 8007b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b88:	9302      	str	r3, [sp, #8]
 8007b8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b8e:	46ab      	mov	fp, r5
 8007b90:	106d      	asrs	r5, r5, #1
 8007b92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007b96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007b9a:	ec41 0b18 	vmov	d8, r0, r1
 8007b9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	4640      	mov	r0, r8
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	4614      	mov	r4, r2
 8007baa:	461d      	mov	r5, r3
 8007bac:	f7f8 fd2c 	bl	8000608 <__aeabi_dmul>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	f7f8 fb6e 	bl	8000298 <__aeabi_dsub>
 8007bbc:	ec53 2b19 	vmov	r2, r3, d9
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	460f      	mov	r7, r1
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	f7f8 fb66 	bl	8000298 <__aeabi_dsub>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4650      	mov	r0, sl
 8007bd2:	4659      	mov	r1, fp
 8007bd4:	f7f8 fb60 	bl	8000298 <__aeabi_dsub>
 8007bd8:	4642      	mov	r2, r8
 8007bda:	464b      	mov	r3, r9
 8007bdc:	f7f8 fd14 	bl	8000608 <__aeabi_dmul>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4630      	mov	r0, r6
 8007be6:	4639      	mov	r1, r7
 8007be8:	f7f8 fb56 	bl	8000298 <__aeabi_dsub>
 8007bec:	ec53 2b1a 	vmov	r2, r3, d10
 8007bf0:	f7f8 fd0a 	bl	8000608 <__aeabi_dmul>
 8007bf4:	ec53 2b18 	vmov	r2, r3, d8
 8007bf8:	ec41 0b19 	vmov	d9, r0, r1
 8007bfc:	ec51 0b18 	vmov	r0, r1, d8
 8007c00:	f7f8 fd02 	bl	8000608 <__aeabi_dmul>
 8007c04:	a37c      	add	r3, pc, #496	; (adr r3, 8007df8 <__ieee754_pow+0x708>)
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	460d      	mov	r5, r1
 8007c0e:	f7f8 fcfb 	bl	8000608 <__aeabi_dmul>
 8007c12:	a37b      	add	r3, pc, #492	; (adr r3, 8007e00 <__ieee754_pow+0x710>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f7f8 fb40 	bl	800029c <__adddf3>
 8007c1c:	4622      	mov	r2, r4
 8007c1e:	462b      	mov	r3, r5
 8007c20:	f7f8 fcf2 	bl	8000608 <__aeabi_dmul>
 8007c24:	a378      	add	r3, pc, #480	; (adr r3, 8007e08 <__ieee754_pow+0x718>)
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	f7f8 fb37 	bl	800029c <__adddf3>
 8007c2e:	4622      	mov	r2, r4
 8007c30:	462b      	mov	r3, r5
 8007c32:	f7f8 fce9 	bl	8000608 <__aeabi_dmul>
 8007c36:	a376      	add	r3, pc, #472	; (adr r3, 8007e10 <__ieee754_pow+0x720>)
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	f7f8 fb2e 	bl	800029c <__adddf3>
 8007c40:	4622      	mov	r2, r4
 8007c42:	462b      	mov	r3, r5
 8007c44:	f7f8 fce0 	bl	8000608 <__aeabi_dmul>
 8007c48:	a373      	add	r3, pc, #460	; (adr r3, 8007e18 <__ieee754_pow+0x728>)
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	f7f8 fb25 	bl	800029c <__adddf3>
 8007c52:	4622      	mov	r2, r4
 8007c54:	462b      	mov	r3, r5
 8007c56:	f7f8 fcd7 	bl	8000608 <__aeabi_dmul>
 8007c5a:	a371      	add	r3, pc, #452	; (adr r3, 8007e20 <__ieee754_pow+0x730>)
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	f7f8 fb1c 	bl	800029c <__adddf3>
 8007c64:	4622      	mov	r2, r4
 8007c66:	4606      	mov	r6, r0
 8007c68:	460f      	mov	r7, r1
 8007c6a:	462b      	mov	r3, r5
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	4629      	mov	r1, r5
 8007c70:	f7f8 fcca 	bl	8000608 <__aeabi_dmul>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	4630      	mov	r0, r6
 8007c7a:	4639      	mov	r1, r7
 8007c7c:	f7f8 fcc4 	bl	8000608 <__aeabi_dmul>
 8007c80:	4642      	mov	r2, r8
 8007c82:	4604      	mov	r4, r0
 8007c84:	460d      	mov	r5, r1
 8007c86:	464b      	mov	r3, r9
 8007c88:	ec51 0b18 	vmov	r0, r1, d8
 8007c8c:	f7f8 fb06 	bl	800029c <__adddf3>
 8007c90:	ec53 2b19 	vmov	r2, r3, d9
 8007c94:	f7f8 fcb8 	bl	8000608 <__aeabi_dmul>
 8007c98:	4622      	mov	r2, r4
 8007c9a:	462b      	mov	r3, r5
 8007c9c:	f7f8 fafe 	bl	800029c <__adddf3>
 8007ca0:	4642      	mov	r2, r8
 8007ca2:	4682      	mov	sl, r0
 8007ca4:	468b      	mov	fp, r1
 8007ca6:	464b      	mov	r3, r9
 8007ca8:	4640      	mov	r0, r8
 8007caa:	4649      	mov	r1, r9
 8007cac:	f7f8 fcac 	bl	8000608 <__aeabi_dmul>
 8007cb0:	4b6b      	ldr	r3, [pc, #428]	; (8007e60 <__ieee754_pow+0x770>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	460f      	mov	r7, r1
 8007cb8:	f7f8 faf0 	bl	800029c <__adddf3>
 8007cbc:	4652      	mov	r2, sl
 8007cbe:	465b      	mov	r3, fp
 8007cc0:	f7f8 faec 	bl	800029c <__adddf3>
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	460d      	mov	r5, r1
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4640      	mov	r0, r8
 8007cd0:	4649      	mov	r1, r9
 8007cd2:	f7f8 fc99 	bl	8000608 <__aeabi_dmul>
 8007cd6:	4b62      	ldr	r3, [pc, #392]	; (8007e60 <__ieee754_pow+0x770>)
 8007cd8:	4680      	mov	r8, r0
 8007cda:	4689      	mov	r9, r1
 8007cdc:	2200      	movs	r2, #0
 8007cde:	4620      	mov	r0, r4
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	f7f8 fad9 	bl	8000298 <__aeabi_dsub>
 8007ce6:	4632      	mov	r2, r6
 8007ce8:	463b      	mov	r3, r7
 8007cea:	f7f8 fad5 	bl	8000298 <__aeabi_dsub>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4650      	mov	r0, sl
 8007cf4:	4659      	mov	r1, fp
 8007cf6:	f7f8 facf 	bl	8000298 <__aeabi_dsub>
 8007cfa:	ec53 2b18 	vmov	r2, r3, d8
 8007cfe:	f7f8 fc83 	bl	8000608 <__aeabi_dmul>
 8007d02:	4622      	mov	r2, r4
 8007d04:	4606      	mov	r6, r0
 8007d06:	460f      	mov	r7, r1
 8007d08:	462b      	mov	r3, r5
 8007d0a:	ec51 0b19 	vmov	r0, r1, d9
 8007d0e:	f7f8 fc7b 	bl	8000608 <__aeabi_dmul>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	4630      	mov	r0, r6
 8007d18:	4639      	mov	r1, r7
 8007d1a:	f7f8 fabf 	bl	800029c <__adddf3>
 8007d1e:	4606      	mov	r6, r0
 8007d20:	460f      	mov	r7, r1
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4640      	mov	r0, r8
 8007d28:	4649      	mov	r1, r9
 8007d2a:	f7f8 fab7 	bl	800029c <__adddf3>
 8007d2e:	a33e      	add	r3, pc, #248	; (adr r3, 8007e28 <__ieee754_pow+0x738>)
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	2000      	movs	r0, #0
 8007d36:	4604      	mov	r4, r0
 8007d38:	460d      	mov	r5, r1
 8007d3a:	f7f8 fc65 	bl	8000608 <__aeabi_dmul>
 8007d3e:	4642      	mov	r2, r8
 8007d40:	ec41 0b18 	vmov	d8, r0, r1
 8007d44:	464b      	mov	r3, r9
 8007d46:	4620      	mov	r0, r4
 8007d48:	4629      	mov	r1, r5
 8007d4a:	f7f8 faa5 	bl	8000298 <__aeabi_dsub>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4630      	mov	r0, r6
 8007d54:	4639      	mov	r1, r7
 8007d56:	f7f8 fa9f 	bl	8000298 <__aeabi_dsub>
 8007d5a:	a335      	add	r3, pc, #212	; (adr r3, 8007e30 <__ieee754_pow+0x740>)
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	f7f8 fc52 	bl	8000608 <__aeabi_dmul>
 8007d64:	a334      	add	r3, pc, #208	; (adr r3, 8007e38 <__ieee754_pow+0x748>)
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	4606      	mov	r6, r0
 8007d6c:	460f      	mov	r7, r1
 8007d6e:	4620      	mov	r0, r4
 8007d70:	4629      	mov	r1, r5
 8007d72:	f7f8 fc49 	bl	8000608 <__aeabi_dmul>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	f7f8 fa8d 	bl	800029c <__adddf3>
 8007d82:	9a07      	ldr	r2, [sp, #28]
 8007d84:	4b37      	ldr	r3, [pc, #220]	; (8007e64 <__ieee754_pow+0x774>)
 8007d86:	4413      	add	r3, r2
 8007d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8c:	f7f8 fa86 	bl	800029c <__adddf3>
 8007d90:	4682      	mov	sl, r0
 8007d92:	9805      	ldr	r0, [sp, #20]
 8007d94:	468b      	mov	fp, r1
 8007d96:	f7f8 fbcd 	bl	8000534 <__aeabi_i2d>
 8007d9a:	9a07      	ldr	r2, [sp, #28]
 8007d9c:	4b32      	ldr	r3, [pc, #200]	; (8007e68 <__ieee754_pow+0x778>)
 8007d9e:	4413      	add	r3, r2
 8007da0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007da4:	4606      	mov	r6, r0
 8007da6:	460f      	mov	r7, r1
 8007da8:	4652      	mov	r2, sl
 8007daa:	465b      	mov	r3, fp
 8007dac:	ec51 0b18 	vmov	r0, r1, d8
 8007db0:	f7f8 fa74 	bl	800029c <__adddf3>
 8007db4:	4642      	mov	r2, r8
 8007db6:	464b      	mov	r3, r9
 8007db8:	f7f8 fa70 	bl	800029c <__adddf3>
 8007dbc:	4632      	mov	r2, r6
 8007dbe:	463b      	mov	r3, r7
 8007dc0:	f7f8 fa6c 	bl	800029c <__adddf3>
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	4632      	mov	r2, r6
 8007dc8:	463b      	mov	r3, r7
 8007dca:	4604      	mov	r4, r0
 8007dcc:	460d      	mov	r5, r1
 8007dce:	f7f8 fa63 	bl	8000298 <__aeabi_dsub>
 8007dd2:	4642      	mov	r2, r8
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	f7f8 fa5f 	bl	8000298 <__aeabi_dsub>
 8007dda:	ec53 2b18 	vmov	r2, r3, d8
 8007dde:	f7f8 fa5b 	bl	8000298 <__aeabi_dsub>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4650      	mov	r0, sl
 8007de8:	4659      	mov	r1, fp
 8007dea:	e610      	b.n	8007a0e <__ieee754_pow+0x31e>
 8007dec:	2401      	movs	r4, #1
 8007dee:	e6a1      	b.n	8007b34 <__ieee754_pow+0x444>
 8007df0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007e40 <__ieee754_pow+0x750>
 8007df4:	e617      	b.n	8007a26 <__ieee754_pow+0x336>
 8007df6:	bf00      	nop
 8007df8:	4a454eef 	.word	0x4a454eef
 8007dfc:	3fca7e28 	.word	0x3fca7e28
 8007e00:	93c9db65 	.word	0x93c9db65
 8007e04:	3fcd864a 	.word	0x3fcd864a
 8007e08:	a91d4101 	.word	0xa91d4101
 8007e0c:	3fd17460 	.word	0x3fd17460
 8007e10:	518f264d 	.word	0x518f264d
 8007e14:	3fd55555 	.word	0x3fd55555
 8007e18:	db6fabff 	.word	0xdb6fabff
 8007e1c:	3fdb6db6 	.word	0x3fdb6db6
 8007e20:	33333303 	.word	0x33333303
 8007e24:	3fe33333 	.word	0x3fe33333
 8007e28:	e0000000 	.word	0xe0000000
 8007e2c:	3feec709 	.word	0x3feec709
 8007e30:	dc3a03fd 	.word	0xdc3a03fd
 8007e34:	3feec709 	.word	0x3feec709
 8007e38:	145b01f5 	.word	0x145b01f5
 8007e3c:	be3e2fe0 	.word	0xbe3e2fe0
 8007e40:	00000000 	.word	0x00000000
 8007e44:	3ff00000 	.word	0x3ff00000
 8007e48:	7ff00000 	.word	0x7ff00000
 8007e4c:	43400000 	.word	0x43400000
 8007e50:	0003988e 	.word	0x0003988e
 8007e54:	000bb679 	.word	0x000bb679
 8007e58:	08008e98 	.word	0x08008e98
 8007e5c:	3ff00000 	.word	0x3ff00000
 8007e60:	40080000 	.word	0x40080000
 8007e64:	08008eb8 	.word	0x08008eb8
 8007e68:	08008ea8 	.word	0x08008ea8
 8007e6c:	a3b3      	add	r3, pc, #716	; (adr r3, 800813c <__ieee754_pow+0xa4c>)
 8007e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e72:	4640      	mov	r0, r8
 8007e74:	4649      	mov	r1, r9
 8007e76:	f7f8 fa11 	bl	800029c <__adddf3>
 8007e7a:	4622      	mov	r2, r4
 8007e7c:	ec41 0b1a 	vmov	d10, r0, r1
 8007e80:	462b      	mov	r3, r5
 8007e82:	4630      	mov	r0, r6
 8007e84:	4639      	mov	r1, r7
 8007e86:	f7f8 fa07 	bl	8000298 <__aeabi_dsub>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	ec51 0b1a 	vmov	r0, r1, d10
 8007e92:	f7f8 fe49 	bl	8000b28 <__aeabi_dcmpgt>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	f47f ae04 	bne.w	8007aa4 <__ieee754_pow+0x3b4>
 8007e9c:	4aa2      	ldr	r2, [pc, #648]	; (8008128 <__ieee754_pow+0xa38>)
 8007e9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	f340 8107 	ble.w	80080b6 <__ieee754_pow+0x9c6>
 8007ea8:	151b      	asrs	r3, r3, #20
 8007eaa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007eae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007eb2:	fa4a fa03 	asr.w	sl, sl, r3
 8007eb6:	44da      	add	sl, fp
 8007eb8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007ebc:	489b      	ldr	r0, [pc, #620]	; (800812c <__ieee754_pow+0xa3c>)
 8007ebe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007ec2:	4108      	asrs	r0, r1
 8007ec4:	ea00 030a 	and.w	r3, r0, sl
 8007ec8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007ecc:	f1c1 0114 	rsb	r1, r1, #20
 8007ed0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007ed4:	fa4a fa01 	asr.w	sl, sl, r1
 8007ed8:	f1bb 0f00 	cmp.w	fp, #0
 8007edc:	f04f 0200 	mov.w	r2, #0
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	bfb8      	it	lt
 8007ee6:	f1ca 0a00 	rsblt	sl, sl, #0
 8007eea:	f7f8 f9d5 	bl	8000298 <__aeabi_dsub>
 8007eee:	ec41 0b19 	vmov	d9, r0, r1
 8007ef2:	4642      	mov	r2, r8
 8007ef4:	464b      	mov	r3, r9
 8007ef6:	ec51 0b19 	vmov	r0, r1, d9
 8007efa:	f7f8 f9cf 	bl	800029c <__adddf3>
 8007efe:	a37a      	add	r3, pc, #488	; (adr r3, 80080e8 <__ieee754_pow+0x9f8>)
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	2000      	movs	r0, #0
 8007f06:	4604      	mov	r4, r0
 8007f08:	460d      	mov	r5, r1
 8007f0a:	f7f8 fb7d 	bl	8000608 <__aeabi_dmul>
 8007f0e:	ec53 2b19 	vmov	r2, r3, d9
 8007f12:	4606      	mov	r6, r0
 8007f14:	460f      	mov	r7, r1
 8007f16:	4620      	mov	r0, r4
 8007f18:	4629      	mov	r1, r5
 8007f1a:	f7f8 f9bd 	bl	8000298 <__aeabi_dsub>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4640      	mov	r0, r8
 8007f24:	4649      	mov	r1, r9
 8007f26:	f7f8 f9b7 	bl	8000298 <__aeabi_dsub>
 8007f2a:	a371      	add	r3, pc, #452	; (adr r3, 80080f0 <__ieee754_pow+0xa00>)
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	f7f8 fb6a 	bl	8000608 <__aeabi_dmul>
 8007f34:	a370      	add	r3, pc, #448	; (adr r3, 80080f8 <__ieee754_pow+0xa08>)
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	4680      	mov	r8, r0
 8007f3c:	4689      	mov	r9, r1
 8007f3e:	4620      	mov	r0, r4
 8007f40:	4629      	mov	r1, r5
 8007f42:	f7f8 fb61 	bl	8000608 <__aeabi_dmul>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	f7f8 f9a5 	bl	800029c <__adddf3>
 8007f52:	4604      	mov	r4, r0
 8007f54:	460d      	mov	r5, r1
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	f7f8 f99d 	bl	800029c <__adddf3>
 8007f62:	4632      	mov	r2, r6
 8007f64:	463b      	mov	r3, r7
 8007f66:	4680      	mov	r8, r0
 8007f68:	4689      	mov	r9, r1
 8007f6a:	f7f8 f995 	bl	8000298 <__aeabi_dsub>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4620      	mov	r0, r4
 8007f74:	4629      	mov	r1, r5
 8007f76:	f7f8 f98f 	bl	8000298 <__aeabi_dsub>
 8007f7a:	4642      	mov	r2, r8
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	460f      	mov	r7, r1
 8007f80:	464b      	mov	r3, r9
 8007f82:	4640      	mov	r0, r8
 8007f84:	4649      	mov	r1, r9
 8007f86:	f7f8 fb3f 	bl	8000608 <__aeabi_dmul>
 8007f8a:	a35d      	add	r3, pc, #372	; (adr r3, 8008100 <__ieee754_pow+0xa10>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	4604      	mov	r4, r0
 8007f92:	460d      	mov	r5, r1
 8007f94:	f7f8 fb38 	bl	8000608 <__aeabi_dmul>
 8007f98:	a35b      	add	r3, pc, #364	; (adr r3, 8008108 <__ieee754_pow+0xa18>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f7f8 f97b 	bl	8000298 <__aeabi_dsub>
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	462b      	mov	r3, r5
 8007fa6:	f7f8 fb2f 	bl	8000608 <__aeabi_dmul>
 8007faa:	a359      	add	r3, pc, #356	; (adr r3, 8008110 <__ieee754_pow+0xa20>)
 8007fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb0:	f7f8 f974 	bl	800029c <__adddf3>
 8007fb4:	4622      	mov	r2, r4
 8007fb6:	462b      	mov	r3, r5
 8007fb8:	f7f8 fb26 	bl	8000608 <__aeabi_dmul>
 8007fbc:	a356      	add	r3, pc, #344	; (adr r3, 8008118 <__ieee754_pow+0xa28>)
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f7f8 f969 	bl	8000298 <__aeabi_dsub>
 8007fc6:	4622      	mov	r2, r4
 8007fc8:	462b      	mov	r3, r5
 8007fca:	f7f8 fb1d 	bl	8000608 <__aeabi_dmul>
 8007fce:	a354      	add	r3, pc, #336	; (adr r3, 8008120 <__ieee754_pow+0xa30>)
 8007fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd4:	f7f8 f962 	bl	800029c <__adddf3>
 8007fd8:	4622      	mov	r2, r4
 8007fda:	462b      	mov	r3, r5
 8007fdc:	f7f8 fb14 	bl	8000608 <__aeabi_dmul>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4640      	mov	r0, r8
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	f7f8 f956 	bl	8000298 <__aeabi_dsub>
 8007fec:	4604      	mov	r4, r0
 8007fee:	460d      	mov	r5, r1
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4640      	mov	r0, r8
 8007ff6:	4649      	mov	r1, r9
 8007ff8:	f7f8 fb06 	bl	8000608 <__aeabi_dmul>
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	ec41 0b19 	vmov	d9, r0, r1
 8008002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008006:	4620      	mov	r0, r4
 8008008:	4629      	mov	r1, r5
 800800a:	f7f8 f945 	bl	8000298 <__aeabi_dsub>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	ec51 0b19 	vmov	r0, r1, d9
 8008016:	f7f8 fc21 	bl	800085c <__aeabi_ddiv>
 800801a:	4632      	mov	r2, r6
 800801c:	4604      	mov	r4, r0
 800801e:	460d      	mov	r5, r1
 8008020:	463b      	mov	r3, r7
 8008022:	4640      	mov	r0, r8
 8008024:	4649      	mov	r1, r9
 8008026:	f7f8 faef 	bl	8000608 <__aeabi_dmul>
 800802a:	4632      	mov	r2, r6
 800802c:	463b      	mov	r3, r7
 800802e:	f7f8 f935 	bl	800029c <__adddf3>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	4620      	mov	r0, r4
 8008038:	4629      	mov	r1, r5
 800803a:	f7f8 f92d 	bl	8000298 <__aeabi_dsub>
 800803e:	4642      	mov	r2, r8
 8008040:	464b      	mov	r3, r9
 8008042:	f7f8 f929 	bl	8000298 <__aeabi_dsub>
 8008046:	460b      	mov	r3, r1
 8008048:	4602      	mov	r2, r0
 800804a:	4939      	ldr	r1, [pc, #228]	; (8008130 <__ieee754_pow+0xa40>)
 800804c:	2000      	movs	r0, #0
 800804e:	f7f8 f923 	bl	8000298 <__aeabi_dsub>
 8008052:	ec41 0b10 	vmov	d0, r0, r1
 8008056:	ee10 3a90 	vmov	r3, s1
 800805a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800805e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008062:	da2b      	bge.n	80080bc <__ieee754_pow+0x9cc>
 8008064:	4650      	mov	r0, sl
 8008066:	f000 f877 	bl	8008158 <scalbn>
 800806a:	ec51 0b10 	vmov	r0, r1, d0
 800806e:	ec53 2b18 	vmov	r2, r3, d8
 8008072:	f7ff bbee 	b.w	8007852 <__ieee754_pow+0x162>
 8008076:	4b2f      	ldr	r3, [pc, #188]	; (8008134 <__ieee754_pow+0xa44>)
 8008078:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800807c:	429e      	cmp	r6, r3
 800807e:	f77f af0d 	ble.w	8007e9c <__ieee754_pow+0x7ac>
 8008082:	4b2d      	ldr	r3, [pc, #180]	; (8008138 <__ieee754_pow+0xa48>)
 8008084:	440b      	add	r3, r1
 8008086:	4303      	orrs	r3, r0
 8008088:	d009      	beq.n	800809e <__ieee754_pow+0x9ae>
 800808a:	ec51 0b18 	vmov	r0, r1, d8
 800808e:	2200      	movs	r2, #0
 8008090:	2300      	movs	r3, #0
 8008092:	f7f8 fd2b 	bl	8000aec <__aeabi_dcmplt>
 8008096:	3800      	subs	r0, #0
 8008098:	bf18      	it	ne
 800809a:	2001      	movne	r0, #1
 800809c:	e448      	b.n	8007930 <__ieee754_pow+0x240>
 800809e:	4622      	mov	r2, r4
 80080a0:	462b      	mov	r3, r5
 80080a2:	f7f8 f8f9 	bl	8000298 <__aeabi_dsub>
 80080a6:	4642      	mov	r2, r8
 80080a8:	464b      	mov	r3, r9
 80080aa:	f7f8 fd33 	bl	8000b14 <__aeabi_dcmpge>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f43f aef4 	beq.w	8007e9c <__ieee754_pow+0x7ac>
 80080b4:	e7e9      	b.n	800808a <__ieee754_pow+0x99a>
 80080b6:	f04f 0a00 	mov.w	sl, #0
 80080ba:	e71a      	b.n	8007ef2 <__ieee754_pow+0x802>
 80080bc:	ec51 0b10 	vmov	r0, r1, d0
 80080c0:	4619      	mov	r1, r3
 80080c2:	e7d4      	b.n	800806e <__ieee754_pow+0x97e>
 80080c4:	491a      	ldr	r1, [pc, #104]	; (8008130 <__ieee754_pow+0xa40>)
 80080c6:	2000      	movs	r0, #0
 80080c8:	f7ff bb31 	b.w	800772e <__ieee754_pow+0x3e>
 80080cc:	2000      	movs	r0, #0
 80080ce:	2100      	movs	r1, #0
 80080d0:	f7ff bb2d 	b.w	800772e <__ieee754_pow+0x3e>
 80080d4:	4630      	mov	r0, r6
 80080d6:	4639      	mov	r1, r7
 80080d8:	f7ff bb29 	b.w	800772e <__ieee754_pow+0x3e>
 80080dc:	9204      	str	r2, [sp, #16]
 80080de:	f7ff bb7b 	b.w	80077d8 <__ieee754_pow+0xe8>
 80080e2:	2300      	movs	r3, #0
 80080e4:	f7ff bb65 	b.w	80077b2 <__ieee754_pow+0xc2>
 80080e8:	00000000 	.word	0x00000000
 80080ec:	3fe62e43 	.word	0x3fe62e43
 80080f0:	fefa39ef 	.word	0xfefa39ef
 80080f4:	3fe62e42 	.word	0x3fe62e42
 80080f8:	0ca86c39 	.word	0x0ca86c39
 80080fc:	be205c61 	.word	0xbe205c61
 8008100:	72bea4d0 	.word	0x72bea4d0
 8008104:	3e663769 	.word	0x3e663769
 8008108:	c5d26bf1 	.word	0xc5d26bf1
 800810c:	3ebbbd41 	.word	0x3ebbbd41
 8008110:	af25de2c 	.word	0xaf25de2c
 8008114:	3f11566a 	.word	0x3f11566a
 8008118:	16bebd93 	.word	0x16bebd93
 800811c:	3f66c16c 	.word	0x3f66c16c
 8008120:	5555553e 	.word	0x5555553e
 8008124:	3fc55555 	.word	0x3fc55555
 8008128:	3fe00000 	.word	0x3fe00000
 800812c:	fff00000 	.word	0xfff00000
 8008130:	3ff00000 	.word	0x3ff00000
 8008134:	4090cbff 	.word	0x4090cbff
 8008138:	3f6f3400 	.word	0x3f6f3400
 800813c:	652b82fe 	.word	0x652b82fe
 8008140:	3c971547 	.word	0x3c971547

08008144 <fabs>:
 8008144:	ec51 0b10 	vmov	r0, r1, d0
 8008148:	ee10 2a10 	vmov	r2, s0
 800814c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008150:	ec43 2b10 	vmov	d0, r2, r3
 8008154:	4770      	bx	lr
	...

08008158 <scalbn>:
 8008158:	b570      	push	{r4, r5, r6, lr}
 800815a:	ec55 4b10 	vmov	r4, r5, d0
 800815e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008162:	4606      	mov	r6, r0
 8008164:	462b      	mov	r3, r5
 8008166:	b999      	cbnz	r1, 8008190 <scalbn+0x38>
 8008168:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800816c:	4323      	orrs	r3, r4
 800816e:	d03f      	beq.n	80081f0 <scalbn+0x98>
 8008170:	4b35      	ldr	r3, [pc, #212]	; (8008248 <scalbn+0xf0>)
 8008172:	4629      	mov	r1, r5
 8008174:	ee10 0a10 	vmov	r0, s0
 8008178:	2200      	movs	r2, #0
 800817a:	f7f8 fa45 	bl	8000608 <__aeabi_dmul>
 800817e:	4b33      	ldr	r3, [pc, #204]	; (800824c <scalbn+0xf4>)
 8008180:	429e      	cmp	r6, r3
 8008182:	4604      	mov	r4, r0
 8008184:	460d      	mov	r5, r1
 8008186:	da10      	bge.n	80081aa <scalbn+0x52>
 8008188:	a327      	add	r3, pc, #156	; (adr r3, 8008228 <scalbn+0xd0>)
 800818a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818e:	e01f      	b.n	80081d0 <scalbn+0x78>
 8008190:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008194:	4291      	cmp	r1, r2
 8008196:	d10c      	bne.n	80081b2 <scalbn+0x5a>
 8008198:	ee10 2a10 	vmov	r2, s0
 800819c:	4620      	mov	r0, r4
 800819e:	4629      	mov	r1, r5
 80081a0:	f7f8 f87c 	bl	800029c <__adddf3>
 80081a4:	4604      	mov	r4, r0
 80081a6:	460d      	mov	r5, r1
 80081a8:	e022      	b.n	80081f0 <scalbn+0x98>
 80081aa:	460b      	mov	r3, r1
 80081ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80081b0:	3936      	subs	r1, #54	; 0x36
 80081b2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80081b6:	4296      	cmp	r6, r2
 80081b8:	dd0d      	ble.n	80081d6 <scalbn+0x7e>
 80081ba:	2d00      	cmp	r5, #0
 80081bc:	a11c      	add	r1, pc, #112	; (adr r1, 8008230 <scalbn+0xd8>)
 80081be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081c2:	da02      	bge.n	80081ca <scalbn+0x72>
 80081c4:	a11c      	add	r1, pc, #112	; (adr r1, 8008238 <scalbn+0xe0>)
 80081c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ca:	a319      	add	r3, pc, #100	; (adr r3, 8008230 <scalbn+0xd8>)
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f7f8 fa1a 	bl	8000608 <__aeabi_dmul>
 80081d4:	e7e6      	b.n	80081a4 <scalbn+0x4c>
 80081d6:	1872      	adds	r2, r6, r1
 80081d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80081dc:	428a      	cmp	r2, r1
 80081de:	dcec      	bgt.n	80081ba <scalbn+0x62>
 80081e0:	2a00      	cmp	r2, #0
 80081e2:	dd08      	ble.n	80081f6 <scalbn+0x9e>
 80081e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80081f0:	ec45 4b10 	vmov	d0, r4, r5
 80081f4:	bd70      	pop	{r4, r5, r6, pc}
 80081f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80081fa:	da08      	bge.n	800820e <scalbn+0xb6>
 80081fc:	2d00      	cmp	r5, #0
 80081fe:	a10a      	add	r1, pc, #40	; (adr r1, 8008228 <scalbn+0xd0>)
 8008200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008204:	dac0      	bge.n	8008188 <scalbn+0x30>
 8008206:	a10e      	add	r1, pc, #56	; (adr r1, 8008240 <scalbn+0xe8>)
 8008208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800820c:	e7bc      	b.n	8008188 <scalbn+0x30>
 800820e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008212:	3236      	adds	r2, #54	; 0x36
 8008214:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008218:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800821c:	4620      	mov	r0, r4
 800821e:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <scalbn+0xf8>)
 8008220:	2200      	movs	r2, #0
 8008222:	e7d5      	b.n	80081d0 <scalbn+0x78>
 8008224:	f3af 8000 	nop.w
 8008228:	c2f8f359 	.word	0xc2f8f359
 800822c:	01a56e1f 	.word	0x01a56e1f
 8008230:	8800759c 	.word	0x8800759c
 8008234:	7e37e43c 	.word	0x7e37e43c
 8008238:	8800759c 	.word	0x8800759c
 800823c:	fe37e43c 	.word	0xfe37e43c
 8008240:	c2f8f359 	.word	0xc2f8f359
 8008244:	81a56e1f 	.word	0x81a56e1f
 8008248:	43500000 	.word	0x43500000
 800824c:	ffff3cb0 	.word	0xffff3cb0
 8008250:	3c900000 	.word	0x3c900000

08008254 <with_errno>:
 8008254:	b570      	push	{r4, r5, r6, lr}
 8008256:	4604      	mov	r4, r0
 8008258:	460d      	mov	r5, r1
 800825a:	4616      	mov	r6, r2
 800825c:	f000 f940 	bl	80084e0 <__errno>
 8008260:	4629      	mov	r1, r5
 8008262:	6006      	str	r6, [r0, #0]
 8008264:	4620      	mov	r0, r4
 8008266:	bd70      	pop	{r4, r5, r6, pc}

08008268 <xflow>:
 8008268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800826a:	4614      	mov	r4, r2
 800826c:	461d      	mov	r5, r3
 800826e:	b108      	cbz	r0, 8008274 <xflow+0xc>
 8008270:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008274:	e9cd 2300 	strd	r2, r3, [sp]
 8008278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800827c:	4620      	mov	r0, r4
 800827e:	4629      	mov	r1, r5
 8008280:	f7f8 f9c2 	bl	8000608 <__aeabi_dmul>
 8008284:	2222      	movs	r2, #34	; 0x22
 8008286:	b003      	add	sp, #12
 8008288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800828c:	f7ff bfe2 	b.w	8008254 <with_errno>

08008290 <__math_uflow>:
 8008290:	b508      	push	{r3, lr}
 8008292:	2200      	movs	r2, #0
 8008294:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008298:	f7ff ffe6 	bl	8008268 <xflow>
 800829c:	ec41 0b10 	vmov	d0, r0, r1
 80082a0:	bd08      	pop	{r3, pc}

080082a2 <__math_oflow>:
 80082a2:	b508      	push	{r3, lr}
 80082a4:	2200      	movs	r2, #0
 80082a6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80082aa:	f7ff ffdd 	bl	8008268 <xflow>
 80082ae:	ec41 0b10 	vmov	d0, r0, r1
 80082b2:	bd08      	pop	{r3, pc}

080082b4 <__ieee754_sqrt>:
 80082b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b8:	ec55 4b10 	vmov	r4, r5, d0
 80082bc:	4e67      	ldr	r6, [pc, #412]	; (800845c <__ieee754_sqrt+0x1a8>)
 80082be:	43ae      	bics	r6, r5
 80082c0:	ee10 0a10 	vmov	r0, s0
 80082c4:	ee10 2a10 	vmov	r2, s0
 80082c8:	4629      	mov	r1, r5
 80082ca:	462b      	mov	r3, r5
 80082cc:	d10d      	bne.n	80082ea <__ieee754_sqrt+0x36>
 80082ce:	f7f8 f99b 	bl	8000608 <__aeabi_dmul>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	4620      	mov	r0, r4
 80082d8:	4629      	mov	r1, r5
 80082da:	f7f7 ffdf 	bl	800029c <__adddf3>
 80082de:	4604      	mov	r4, r0
 80082e0:	460d      	mov	r5, r1
 80082e2:	ec45 4b10 	vmov	d0, r4, r5
 80082e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ea:	2d00      	cmp	r5, #0
 80082ec:	dc0b      	bgt.n	8008306 <__ieee754_sqrt+0x52>
 80082ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80082f2:	4326      	orrs	r6, r4
 80082f4:	d0f5      	beq.n	80082e2 <__ieee754_sqrt+0x2e>
 80082f6:	b135      	cbz	r5, 8008306 <__ieee754_sqrt+0x52>
 80082f8:	f7f7 ffce 	bl	8000298 <__aeabi_dsub>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	f7f8 faac 	bl	800085c <__aeabi_ddiv>
 8008304:	e7eb      	b.n	80082de <__ieee754_sqrt+0x2a>
 8008306:	1509      	asrs	r1, r1, #20
 8008308:	f000 808d 	beq.w	8008426 <__ieee754_sqrt+0x172>
 800830c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008310:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008318:	07c9      	lsls	r1, r1, #31
 800831a:	bf5c      	itt	pl
 800831c:	005b      	lslpl	r3, r3, #1
 800831e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008322:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008326:	bf58      	it	pl
 8008328:	0052      	lslpl	r2, r2, #1
 800832a:	2500      	movs	r5, #0
 800832c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008330:	1076      	asrs	r6, r6, #1
 8008332:	0052      	lsls	r2, r2, #1
 8008334:	f04f 0e16 	mov.w	lr, #22
 8008338:	46ac      	mov	ip, r5
 800833a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800833e:	eb0c 0001 	add.w	r0, ip, r1
 8008342:	4298      	cmp	r0, r3
 8008344:	bfde      	ittt	le
 8008346:	1a1b      	suble	r3, r3, r0
 8008348:	eb00 0c01 	addle.w	ip, r0, r1
 800834c:	186d      	addle	r5, r5, r1
 800834e:	005b      	lsls	r3, r3, #1
 8008350:	f1be 0e01 	subs.w	lr, lr, #1
 8008354:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008358:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800835c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008360:	d1ed      	bne.n	800833e <__ieee754_sqrt+0x8a>
 8008362:	4674      	mov	r4, lr
 8008364:	2720      	movs	r7, #32
 8008366:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800836a:	4563      	cmp	r3, ip
 800836c:	eb01 000e 	add.w	r0, r1, lr
 8008370:	dc02      	bgt.n	8008378 <__ieee754_sqrt+0xc4>
 8008372:	d113      	bne.n	800839c <__ieee754_sqrt+0xe8>
 8008374:	4290      	cmp	r0, r2
 8008376:	d811      	bhi.n	800839c <__ieee754_sqrt+0xe8>
 8008378:	2800      	cmp	r0, #0
 800837a:	eb00 0e01 	add.w	lr, r0, r1
 800837e:	da57      	bge.n	8008430 <__ieee754_sqrt+0x17c>
 8008380:	f1be 0f00 	cmp.w	lr, #0
 8008384:	db54      	blt.n	8008430 <__ieee754_sqrt+0x17c>
 8008386:	f10c 0801 	add.w	r8, ip, #1
 800838a:	eba3 030c 	sub.w	r3, r3, ip
 800838e:	4290      	cmp	r0, r2
 8008390:	bf88      	it	hi
 8008392:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008396:	1a12      	subs	r2, r2, r0
 8008398:	440c      	add	r4, r1
 800839a:	46c4      	mov	ip, r8
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	3f01      	subs	r7, #1
 80083a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80083a4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80083a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80083ac:	d1dd      	bne.n	800836a <__ieee754_sqrt+0xb6>
 80083ae:	4313      	orrs	r3, r2
 80083b0:	d01b      	beq.n	80083ea <__ieee754_sqrt+0x136>
 80083b2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008460 <__ieee754_sqrt+0x1ac>
 80083b6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008464 <__ieee754_sqrt+0x1b0>
 80083ba:	e9da 0100 	ldrd	r0, r1, [sl]
 80083be:	e9db 2300 	ldrd	r2, r3, [fp]
 80083c2:	f7f7 ff69 	bl	8000298 <__aeabi_dsub>
 80083c6:	e9da 8900 	ldrd	r8, r9, [sl]
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	4640      	mov	r0, r8
 80083d0:	4649      	mov	r1, r9
 80083d2:	f7f8 fb95 	bl	8000b00 <__aeabi_dcmple>
 80083d6:	b140      	cbz	r0, 80083ea <__ieee754_sqrt+0x136>
 80083d8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80083dc:	e9da 0100 	ldrd	r0, r1, [sl]
 80083e0:	e9db 2300 	ldrd	r2, r3, [fp]
 80083e4:	d126      	bne.n	8008434 <__ieee754_sqrt+0x180>
 80083e6:	3501      	adds	r5, #1
 80083e8:	463c      	mov	r4, r7
 80083ea:	106a      	asrs	r2, r5, #1
 80083ec:	0863      	lsrs	r3, r4, #1
 80083ee:	07e9      	lsls	r1, r5, #31
 80083f0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80083f4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80083f8:	bf48      	it	mi
 80083fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80083fe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008402:	461c      	mov	r4, r3
 8008404:	e76d      	b.n	80082e2 <__ieee754_sqrt+0x2e>
 8008406:	0ad3      	lsrs	r3, r2, #11
 8008408:	3815      	subs	r0, #21
 800840a:	0552      	lsls	r2, r2, #21
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0fa      	beq.n	8008406 <__ieee754_sqrt+0x152>
 8008410:	02dc      	lsls	r4, r3, #11
 8008412:	d50a      	bpl.n	800842a <__ieee754_sqrt+0x176>
 8008414:	f1c1 0420 	rsb	r4, r1, #32
 8008418:	fa22 f404 	lsr.w	r4, r2, r4
 800841c:	1e4d      	subs	r5, r1, #1
 800841e:	408a      	lsls	r2, r1
 8008420:	4323      	orrs	r3, r4
 8008422:	1b41      	subs	r1, r0, r5
 8008424:	e772      	b.n	800830c <__ieee754_sqrt+0x58>
 8008426:	4608      	mov	r0, r1
 8008428:	e7f0      	b.n	800840c <__ieee754_sqrt+0x158>
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	3101      	adds	r1, #1
 800842e:	e7ef      	b.n	8008410 <__ieee754_sqrt+0x15c>
 8008430:	46e0      	mov	r8, ip
 8008432:	e7aa      	b.n	800838a <__ieee754_sqrt+0xd6>
 8008434:	f7f7 ff32 	bl	800029c <__adddf3>
 8008438:	e9da 8900 	ldrd	r8, r9, [sl]
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4640      	mov	r0, r8
 8008442:	4649      	mov	r1, r9
 8008444:	f7f8 fb52 	bl	8000aec <__aeabi_dcmplt>
 8008448:	b120      	cbz	r0, 8008454 <__ieee754_sqrt+0x1a0>
 800844a:	1ca0      	adds	r0, r4, #2
 800844c:	bf08      	it	eq
 800844e:	3501      	addeq	r5, #1
 8008450:	3402      	adds	r4, #2
 8008452:	e7ca      	b.n	80083ea <__ieee754_sqrt+0x136>
 8008454:	3401      	adds	r4, #1
 8008456:	f024 0401 	bic.w	r4, r4, #1
 800845a:	e7c6      	b.n	80083ea <__ieee754_sqrt+0x136>
 800845c:	7ff00000 	.word	0x7ff00000
 8008460:	20000010 	.word	0x20000010
 8008464:	20000018 	.word	0x20000018

08008468 <sniprintf>:
 8008468:	b40c      	push	{r2, r3}
 800846a:	b530      	push	{r4, r5, lr}
 800846c:	4b17      	ldr	r3, [pc, #92]	; (80084cc <sniprintf+0x64>)
 800846e:	1e0c      	subs	r4, r1, #0
 8008470:	681d      	ldr	r5, [r3, #0]
 8008472:	b09d      	sub	sp, #116	; 0x74
 8008474:	da08      	bge.n	8008488 <sniprintf+0x20>
 8008476:	238b      	movs	r3, #139	; 0x8b
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	f04f 30ff 	mov.w	r0, #4294967295
 800847e:	b01d      	add	sp, #116	; 0x74
 8008480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008484:	b002      	add	sp, #8
 8008486:	4770      	bx	lr
 8008488:	f44f 7302 	mov.w	r3, #520	; 0x208
 800848c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008490:	bf14      	ite	ne
 8008492:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008496:	4623      	moveq	r3, r4
 8008498:	9304      	str	r3, [sp, #16]
 800849a:	9307      	str	r3, [sp, #28]
 800849c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80084a0:	9002      	str	r0, [sp, #8]
 80084a2:	9006      	str	r0, [sp, #24]
 80084a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80084a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80084aa:	ab21      	add	r3, sp, #132	; 0x84
 80084ac:	a902      	add	r1, sp, #8
 80084ae:	4628      	mov	r0, r5
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	f000 f993 	bl	80087dc <_svfiprintf_r>
 80084b6:	1c43      	adds	r3, r0, #1
 80084b8:	bfbc      	itt	lt
 80084ba:	238b      	movlt	r3, #139	; 0x8b
 80084bc:	602b      	strlt	r3, [r5, #0]
 80084be:	2c00      	cmp	r4, #0
 80084c0:	d0dd      	beq.n	800847e <sniprintf+0x16>
 80084c2:	9b02      	ldr	r3, [sp, #8]
 80084c4:	2200      	movs	r2, #0
 80084c6:	701a      	strb	r2, [r3, #0]
 80084c8:	e7d9      	b.n	800847e <sniprintf+0x16>
 80084ca:	bf00      	nop
 80084cc:	2000006c 	.word	0x2000006c

080084d0 <memset>:
 80084d0:	4402      	add	r2, r0
 80084d2:	4603      	mov	r3, r0
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d100      	bne.n	80084da <memset+0xa>
 80084d8:	4770      	bx	lr
 80084da:	f803 1b01 	strb.w	r1, [r3], #1
 80084de:	e7f9      	b.n	80084d4 <memset+0x4>

080084e0 <__errno>:
 80084e0:	4b01      	ldr	r3, [pc, #4]	; (80084e8 <__errno+0x8>)
 80084e2:	6818      	ldr	r0, [r3, #0]
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	2000006c 	.word	0x2000006c

080084ec <__libc_init_array>:
 80084ec:	b570      	push	{r4, r5, r6, lr}
 80084ee:	4d0d      	ldr	r5, [pc, #52]	; (8008524 <__libc_init_array+0x38>)
 80084f0:	4c0d      	ldr	r4, [pc, #52]	; (8008528 <__libc_init_array+0x3c>)
 80084f2:	1b64      	subs	r4, r4, r5
 80084f4:	10a4      	asrs	r4, r4, #2
 80084f6:	2600      	movs	r6, #0
 80084f8:	42a6      	cmp	r6, r4
 80084fa:	d109      	bne.n	8008510 <__libc_init_array+0x24>
 80084fc:	4d0b      	ldr	r5, [pc, #44]	; (800852c <__libc_init_array+0x40>)
 80084fe:	4c0c      	ldr	r4, [pc, #48]	; (8008530 <__libc_init_array+0x44>)
 8008500:	f000 fc6a 	bl	8008dd8 <_init>
 8008504:	1b64      	subs	r4, r4, r5
 8008506:	10a4      	asrs	r4, r4, #2
 8008508:	2600      	movs	r6, #0
 800850a:	42a6      	cmp	r6, r4
 800850c:	d105      	bne.n	800851a <__libc_init_array+0x2e>
 800850e:	bd70      	pop	{r4, r5, r6, pc}
 8008510:	f855 3b04 	ldr.w	r3, [r5], #4
 8008514:	4798      	blx	r3
 8008516:	3601      	adds	r6, #1
 8008518:	e7ee      	b.n	80084f8 <__libc_init_array+0xc>
 800851a:	f855 3b04 	ldr.w	r3, [r5], #4
 800851e:	4798      	blx	r3
 8008520:	3601      	adds	r6, #1
 8008522:	e7f2      	b.n	800850a <__libc_init_array+0x1e>
 8008524:	08008f04 	.word	0x08008f04
 8008528:	08008f04 	.word	0x08008f04
 800852c:	08008f04 	.word	0x08008f04
 8008530:	08008f08 	.word	0x08008f08

08008534 <__retarget_lock_acquire_recursive>:
 8008534:	4770      	bx	lr

08008536 <__retarget_lock_release_recursive>:
 8008536:	4770      	bx	lr

08008538 <_free_r>:
 8008538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800853a:	2900      	cmp	r1, #0
 800853c:	d044      	beq.n	80085c8 <_free_r+0x90>
 800853e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008542:	9001      	str	r0, [sp, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	f1a1 0404 	sub.w	r4, r1, #4
 800854a:	bfb8      	it	lt
 800854c:	18e4      	addlt	r4, r4, r3
 800854e:	f000 f8df 	bl	8008710 <__malloc_lock>
 8008552:	4a1e      	ldr	r2, [pc, #120]	; (80085cc <_free_r+0x94>)
 8008554:	9801      	ldr	r0, [sp, #4]
 8008556:	6813      	ldr	r3, [r2, #0]
 8008558:	b933      	cbnz	r3, 8008568 <_free_r+0x30>
 800855a:	6063      	str	r3, [r4, #4]
 800855c:	6014      	str	r4, [r2, #0]
 800855e:	b003      	add	sp, #12
 8008560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008564:	f000 b8da 	b.w	800871c <__malloc_unlock>
 8008568:	42a3      	cmp	r3, r4
 800856a:	d908      	bls.n	800857e <_free_r+0x46>
 800856c:	6825      	ldr	r5, [r4, #0]
 800856e:	1961      	adds	r1, r4, r5
 8008570:	428b      	cmp	r3, r1
 8008572:	bf01      	itttt	eq
 8008574:	6819      	ldreq	r1, [r3, #0]
 8008576:	685b      	ldreq	r3, [r3, #4]
 8008578:	1949      	addeq	r1, r1, r5
 800857a:	6021      	streq	r1, [r4, #0]
 800857c:	e7ed      	b.n	800855a <_free_r+0x22>
 800857e:	461a      	mov	r2, r3
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	b10b      	cbz	r3, 8008588 <_free_r+0x50>
 8008584:	42a3      	cmp	r3, r4
 8008586:	d9fa      	bls.n	800857e <_free_r+0x46>
 8008588:	6811      	ldr	r1, [r2, #0]
 800858a:	1855      	adds	r5, r2, r1
 800858c:	42a5      	cmp	r5, r4
 800858e:	d10b      	bne.n	80085a8 <_free_r+0x70>
 8008590:	6824      	ldr	r4, [r4, #0]
 8008592:	4421      	add	r1, r4
 8008594:	1854      	adds	r4, r2, r1
 8008596:	42a3      	cmp	r3, r4
 8008598:	6011      	str	r1, [r2, #0]
 800859a:	d1e0      	bne.n	800855e <_free_r+0x26>
 800859c:	681c      	ldr	r4, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	6053      	str	r3, [r2, #4]
 80085a2:	440c      	add	r4, r1
 80085a4:	6014      	str	r4, [r2, #0]
 80085a6:	e7da      	b.n	800855e <_free_r+0x26>
 80085a8:	d902      	bls.n	80085b0 <_free_r+0x78>
 80085aa:	230c      	movs	r3, #12
 80085ac:	6003      	str	r3, [r0, #0]
 80085ae:	e7d6      	b.n	800855e <_free_r+0x26>
 80085b0:	6825      	ldr	r5, [r4, #0]
 80085b2:	1961      	adds	r1, r4, r5
 80085b4:	428b      	cmp	r3, r1
 80085b6:	bf04      	itt	eq
 80085b8:	6819      	ldreq	r1, [r3, #0]
 80085ba:	685b      	ldreq	r3, [r3, #4]
 80085bc:	6063      	str	r3, [r4, #4]
 80085be:	bf04      	itt	eq
 80085c0:	1949      	addeq	r1, r1, r5
 80085c2:	6021      	streq	r1, [r4, #0]
 80085c4:	6054      	str	r4, [r2, #4]
 80085c6:	e7ca      	b.n	800855e <_free_r+0x26>
 80085c8:	b003      	add	sp, #12
 80085ca:	bd30      	pop	{r4, r5, pc}
 80085cc:	200007c4 	.word	0x200007c4

080085d0 <sbrk_aligned>:
 80085d0:	b570      	push	{r4, r5, r6, lr}
 80085d2:	4e0e      	ldr	r6, [pc, #56]	; (800860c <sbrk_aligned+0x3c>)
 80085d4:	460c      	mov	r4, r1
 80085d6:	6831      	ldr	r1, [r6, #0]
 80085d8:	4605      	mov	r5, r0
 80085da:	b911      	cbnz	r1, 80085e2 <sbrk_aligned+0x12>
 80085dc:	f000 fba6 	bl	8008d2c <_sbrk_r>
 80085e0:	6030      	str	r0, [r6, #0]
 80085e2:	4621      	mov	r1, r4
 80085e4:	4628      	mov	r0, r5
 80085e6:	f000 fba1 	bl	8008d2c <_sbrk_r>
 80085ea:	1c43      	adds	r3, r0, #1
 80085ec:	d00a      	beq.n	8008604 <sbrk_aligned+0x34>
 80085ee:	1cc4      	adds	r4, r0, #3
 80085f0:	f024 0403 	bic.w	r4, r4, #3
 80085f4:	42a0      	cmp	r0, r4
 80085f6:	d007      	beq.n	8008608 <sbrk_aligned+0x38>
 80085f8:	1a21      	subs	r1, r4, r0
 80085fa:	4628      	mov	r0, r5
 80085fc:	f000 fb96 	bl	8008d2c <_sbrk_r>
 8008600:	3001      	adds	r0, #1
 8008602:	d101      	bne.n	8008608 <sbrk_aligned+0x38>
 8008604:	f04f 34ff 	mov.w	r4, #4294967295
 8008608:	4620      	mov	r0, r4
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	200007c8 	.word	0x200007c8

08008610 <_malloc_r>:
 8008610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008614:	1ccd      	adds	r5, r1, #3
 8008616:	f025 0503 	bic.w	r5, r5, #3
 800861a:	3508      	adds	r5, #8
 800861c:	2d0c      	cmp	r5, #12
 800861e:	bf38      	it	cc
 8008620:	250c      	movcc	r5, #12
 8008622:	2d00      	cmp	r5, #0
 8008624:	4607      	mov	r7, r0
 8008626:	db01      	blt.n	800862c <_malloc_r+0x1c>
 8008628:	42a9      	cmp	r1, r5
 800862a:	d905      	bls.n	8008638 <_malloc_r+0x28>
 800862c:	230c      	movs	r3, #12
 800862e:	603b      	str	r3, [r7, #0]
 8008630:	2600      	movs	r6, #0
 8008632:	4630      	mov	r0, r6
 8008634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008638:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800870c <_malloc_r+0xfc>
 800863c:	f000 f868 	bl	8008710 <__malloc_lock>
 8008640:	f8d8 3000 	ldr.w	r3, [r8]
 8008644:	461c      	mov	r4, r3
 8008646:	bb5c      	cbnz	r4, 80086a0 <_malloc_r+0x90>
 8008648:	4629      	mov	r1, r5
 800864a:	4638      	mov	r0, r7
 800864c:	f7ff ffc0 	bl	80085d0 <sbrk_aligned>
 8008650:	1c43      	adds	r3, r0, #1
 8008652:	4604      	mov	r4, r0
 8008654:	d155      	bne.n	8008702 <_malloc_r+0xf2>
 8008656:	f8d8 4000 	ldr.w	r4, [r8]
 800865a:	4626      	mov	r6, r4
 800865c:	2e00      	cmp	r6, #0
 800865e:	d145      	bne.n	80086ec <_malloc_r+0xdc>
 8008660:	2c00      	cmp	r4, #0
 8008662:	d048      	beq.n	80086f6 <_malloc_r+0xe6>
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	4631      	mov	r1, r6
 8008668:	4638      	mov	r0, r7
 800866a:	eb04 0903 	add.w	r9, r4, r3
 800866e:	f000 fb5d 	bl	8008d2c <_sbrk_r>
 8008672:	4581      	cmp	r9, r0
 8008674:	d13f      	bne.n	80086f6 <_malloc_r+0xe6>
 8008676:	6821      	ldr	r1, [r4, #0]
 8008678:	1a6d      	subs	r5, r5, r1
 800867a:	4629      	mov	r1, r5
 800867c:	4638      	mov	r0, r7
 800867e:	f7ff ffa7 	bl	80085d0 <sbrk_aligned>
 8008682:	3001      	adds	r0, #1
 8008684:	d037      	beq.n	80086f6 <_malloc_r+0xe6>
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	442b      	add	r3, r5
 800868a:	6023      	str	r3, [r4, #0]
 800868c:	f8d8 3000 	ldr.w	r3, [r8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d038      	beq.n	8008706 <_malloc_r+0xf6>
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	42a2      	cmp	r2, r4
 8008698:	d12b      	bne.n	80086f2 <_malloc_r+0xe2>
 800869a:	2200      	movs	r2, #0
 800869c:	605a      	str	r2, [r3, #4]
 800869e:	e00f      	b.n	80086c0 <_malloc_r+0xb0>
 80086a0:	6822      	ldr	r2, [r4, #0]
 80086a2:	1b52      	subs	r2, r2, r5
 80086a4:	d41f      	bmi.n	80086e6 <_malloc_r+0xd6>
 80086a6:	2a0b      	cmp	r2, #11
 80086a8:	d917      	bls.n	80086da <_malloc_r+0xca>
 80086aa:	1961      	adds	r1, r4, r5
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	6025      	str	r5, [r4, #0]
 80086b0:	bf18      	it	ne
 80086b2:	6059      	strne	r1, [r3, #4]
 80086b4:	6863      	ldr	r3, [r4, #4]
 80086b6:	bf08      	it	eq
 80086b8:	f8c8 1000 	streq.w	r1, [r8]
 80086bc:	5162      	str	r2, [r4, r5]
 80086be:	604b      	str	r3, [r1, #4]
 80086c0:	4638      	mov	r0, r7
 80086c2:	f104 060b 	add.w	r6, r4, #11
 80086c6:	f000 f829 	bl	800871c <__malloc_unlock>
 80086ca:	f026 0607 	bic.w	r6, r6, #7
 80086ce:	1d23      	adds	r3, r4, #4
 80086d0:	1af2      	subs	r2, r6, r3
 80086d2:	d0ae      	beq.n	8008632 <_malloc_r+0x22>
 80086d4:	1b9b      	subs	r3, r3, r6
 80086d6:	50a3      	str	r3, [r4, r2]
 80086d8:	e7ab      	b.n	8008632 <_malloc_r+0x22>
 80086da:	42a3      	cmp	r3, r4
 80086dc:	6862      	ldr	r2, [r4, #4]
 80086de:	d1dd      	bne.n	800869c <_malloc_r+0x8c>
 80086e0:	f8c8 2000 	str.w	r2, [r8]
 80086e4:	e7ec      	b.n	80086c0 <_malloc_r+0xb0>
 80086e6:	4623      	mov	r3, r4
 80086e8:	6864      	ldr	r4, [r4, #4]
 80086ea:	e7ac      	b.n	8008646 <_malloc_r+0x36>
 80086ec:	4634      	mov	r4, r6
 80086ee:	6876      	ldr	r6, [r6, #4]
 80086f0:	e7b4      	b.n	800865c <_malloc_r+0x4c>
 80086f2:	4613      	mov	r3, r2
 80086f4:	e7cc      	b.n	8008690 <_malloc_r+0x80>
 80086f6:	230c      	movs	r3, #12
 80086f8:	603b      	str	r3, [r7, #0]
 80086fa:	4638      	mov	r0, r7
 80086fc:	f000 f80e 	bl	800871c <__malloc_unlock>
 8008700:	e797      	b.n	8008632 <_malloc_r+0x22>
 8008702:	6025      	str	r5, [r4, #0]
 8008704:	e7dc      	b.n	80086c0 <_malloc_r+0xb0>
 8008706:	605b      	str	r3, [r3, #4]
 8008708:	deff      	udf	#255	; 0xff
 800870a:	bf00      	nop
 800870c:	200007c4 	.word	0x200007c4

08008710 <__malloc_lock>:
 8008710:	4801      	ldr	r0, [pc, #4]	; (8008718 <__malloc_lock+0x8>)
 8008712:	f7ff bf0f 	b.w	8008534 <__retarget_lock_acquire_recursive>
 8008716:	bf00      	nop
 8008718:	200007c0 	.word	0x200007c0

0800871c <__malloc_unlock>:
 800871c:	4801      	ldr	r0, [pc, #4]	; (8008724 <__malloc_unlock+0x8>)
 800871e:	f7ff bf0a 	b.w	8008536 <__retarget_lock_release_recursive>
 8008722:	bf00      	nop
 8008724:	200007c0 	.word	0x200007c0

08008728 <__ssputs_r>:
 8008728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800872c:	688e      	ldr	r6, [r1, #8]
 800872e:	461f      	mov	r7, r3
 8008730:	42be      	cmp	r6, r7
 8008732:	680b      	ldr	r3, [r1, #0]
 8008734:	4682      	mov	sl, r0
 8008736:	460c      	mov	r4, r1
 8008738:	4690      	mov	r8, r2
 800873a:	d82c      	bhi.n	8008796 <__ssputs_r+0x6e>
 800873c:	898a      	ldrh	r2, [r1, #12]
 800873e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008742:	d026      	beq.n	8008792 <__ssputs_r+0x6a>
 8008744:	6965      	ldr	r5, [r4, #20]
 8008746:	6909      	ldr	r1, [r1, #16]
 8008748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800874c:	eba3 0901 	sub.w	r9, r3, r1
 8008750:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008754:	1c7b      	adds	r3, r7, #1
 8008756:	444b      	add	r3, r9
 8008758:	106d      	asrs	r5, r5, #1
 800875a:	429d      	cmp	r5, r3
 800875c:	bf38      	it	cc
 800875e:	461d      	movcc	r5, r3
 8008760:	0553      	lsls	r3, r2, #21
 8008762:	d527      	bpl.n	80087b4 <__ssputs_r+0x8c>
 8008764:	4629      	mov	r1, r5
 8008766:	f7ff ff53 	bl	8008610 <_malloc_r>
 800876a:	4606      	mov	r6, r0
 800876c:	b360      	cbz	r0, 80087c8 <__ssputs_r+0xa0>
 800876e:	6921      	ldr	r1, [r4, #16]
 8008770:	464a      	mov	r2, r9
 8008772:	f000 faeb 	bl	8008d4c <memcpy>
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800877c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008780:	81a3      	strh	r3, [r4, #12]
 8008782:	6126      	str	r6, [r4, #16]
 8008784:	6165      	str	r5, [r4, #20]
 8008786:	444e      	add	r6, r9
 8008788:	eba5 0509 	sub.w	r5, r5, r9
 800878c:	6026      	str	r6, [r4, #0]
 800878e:	60a5      	str	r5, [r4, #8]
 8008790:	463e      	mov	r6, r7
 8008792:	42be      	cmp	r6, r7
 8008794:	d900      	bls.n	8008798 <__ssputs_r+0x70>
 8008796:	463e      	mov	r6, r7
 8008798:	6820      	ldr	r0, [r4, #0]
 800879a:	4632      	mov	r2, r6
 800879c:	4641      	mov	r1, r8
 800879e:	f000 faab 	bl	8008cf8 <memmove>
 80087a2:	68a3      	ldr	r3, [r4, #8]
 80087a4:	1b9b      	subs	r3, r3, r6
 80087a6:	60a3      	str	r3, [r4, #8]
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	4433      	add	r3, r6
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	2000      	movs	r0, #0
 80087b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b4:	462a      	mov	r2, r5
 80087b6:	f000 fad7 	bl	8008d68 <_realloc_r>
 80087ba:	4606      	mov	r6, r0
 80087bc:	2800      	cmp	r0, #0
 80087be:	d1e0      	bne.n	8008782 <__ssputs_r+0x5a>
 80087c0:	6921      	ldr	r1, [r4, #16]
 80087c2:	4650      	mov	r0, sl
 80087c4:	f7ff feb8 	bl	8008538 <_free_r>
 80087c8:	230c      	movs	r3, #12
 80087ca:	f8ca 3000 	str.w	r3, [sl]
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087d4:	81a3      	strh	r3, [r4, #12]
 80087d6:	f04f 30ff 	mov.w	r0, #4294967295
 80087da:	e7e9      	b.n	80087b0 <__ssputs_r+0x88>

080087dc <_svfiprintf_r>:
 80087dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	4698      	mov	r8, r3
 80087e2:	898b      	ldrh	r3, [r1, #12]
 80087e4:	061b      	lsls	r3, r3, #24
 80087e6:	b09d      	sub	sp, #116	; 0x74
 80087e8:	4607      	mov	r7, r0
 80087ea:	460d      	mov	r5, r1
 80087ec:	4614      	mov	r4, r2
 80087ee:	d50e      	bpl.n	800880e <_svfiprintf_r+0x32>
 80087f0:	690b      	ldr	r3, [r1, #16]
 80087f2:	b963      	cbnz	r3, 800880e <_svfiprintf_r+0x32>
 80087f4:	2140      	movs	r1, #64	; 0x40
 80087f6:	f7ff ff0b 	bl	8008610 <_malloc_r>
 80087fa:	6028      	str	r0, [r5, #0]
 80087fc:	6128      	str	r0, [r5, #16]
 80087fe:	b920      	cbnz	r0, 800880a <_svfiprintf_r+0x2e>
 8008800:	230c      	movs	r3, #12
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	f04f 30ff 	mov.w	r0, #4294967295
 8008808:	e0d0      	b.n	80089ac <_svfiprintf_r+0x1d0>
 800880a:	2340      	movs	r3, #64	; 0x40
 800880c:	616b      	str	r3, [r5, #20]
 800880e:	2300      	movs	r3, #0
 8008810:	9309      	str	r3, [sp, #36]	; 0x24
 8008812:	2320      	movs	r3, #32
 8008814:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008818:	f8cd 800c 	str.w	r8, [sp, #12]
 800881c:	2330      	movs	r3, #48	; 0x30
 800881e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80089c4 <_svfiprintf_r+0x1e8>
 8008822:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008826:	f04f 0901 	mov.w	r9, #1
 800882a:	4623      	mov	r3, r4
 800882c:	469a      	mov	sl, r3
 800882e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008832:	b10a      	cbz	r2, 8008838 <_svfiprintf_r+0x5c>
 8008834:	2a25      	cmp	r2, #37	; 0x25
 8008836:	d1f9      	bne.n	800882c <_svfiprintf_r+0x50>
 8008838:	ebba 0b04 	subs.w	fp, sl, r4
 800883c:	d00b      	beq.n	8008856 <_svfiprintf_r+0x7a>
 800883e:	465b      	mov	r3, fp
 8008840:	4622      	mov	r2, r4
 8008842:	4629      	mov	r1, r5
 8008844:	4638      	mov	r0, r7
 8008846:	f7ff ff6f 	bl	8008728 <__ssputs_r>
 800884a:	3001      	adds	r0, #1
 800884c:	f000 80a9 	beq.w	80089a2 <_svfiprintf_r+0x1c6>
 8008850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008852:	445a      	add	r2, fp
 8008854:	9209      	str	r2, [sp, #36]	; 0x24
 8008856:	f89a 3000 	ldrb.w	r3, [sl]
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 80a1 	beq.w	80089a2 <_svfiprintf_r+0x1c6>
 8008860:	2300      	movs	r3, #0
 8008862:	f04f 32ff 	mov.w	r2, #4294967295
 8008866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800886a:	f10a 0a01 	add.w	sl, sl, #1
 800886e:	9304      	str	r3, [sp, #16]
 8008870:	9307      	str	r3, [sp, #28]
 8008872:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008876:	931a      	str	r3, [sp, #104]	; 0x68
 8008878:	4654      	mov	r4, sl
 800887a:	2205      	movs	r2, #5
 800887c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008880:	4850      	ldr	r0, [pc, #320]	; (80089c4 <_svfiprintf_r+0x1e8>)
 8008882:	f7f7 fcb5 	bl	80001f0 <memchr>
 8008886:	9a04      	ldr	r2, [sp, #16]
 8008888:	b9d8      	cbnz	r0, 80088c2 <_svfiprintf_r+0xe6>
 800888a:	06d0      	lsls	r0, r2, #27
 800888c:	bf44      	itt	mi
 800888e:	2320      	movmi	r3, #32
 8008890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008894:	0711      	lsls	r1, r2, #28
 8008896:	bf44      	itt	mi
 8008898:	232b      	movmi	r3, #43	; 0x2b
 800889a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800889e:	f89a 3000 	ldrb.w	r3, [sl]
 80088a2:	2b2a      	cmp	r3, #42	; 0x2a
 80088a4:	d015      	beq.n	80088d2 <_svfiprintf_r+0xf6>
 80088a6:	9a07      	ldr	r2, [sp, #28]
 80088a8:	4654      	mov	r4, sl
 80088aa:	2000      	movs	r0, #0
 80088ac:	f04f 0c0a 	mov.w	ip, #10
 80088b0:	4621      	mov	r1, r4
 80088b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088b6:	3b30      	subs	r3, #48	; 0x30
 80088b8:	2b09      	cmp	r3, #9
 80088ba:	d94d      	bls.n	8008958 <_svfiprintf_r+0x17c>
 80088bc:	b1b0      	cbz	r0, 80088ec <_svfiprintf_r+0x110>
 80088be:	9207      	str	r2, [sp, #28]
 80088c0:	e014      	b.n	80088ec <_svfiprintf_r+0x110>
 80088c2:	eba0 0308 	sub.w	r3, r0, r8
 80088c6:	fa09 f303 	lsl.w	r3, r9, r3
 80088ca:	4313      	orrs	r3, r2
 80088cc:	9304      	str	r3, [sp, #16]
 80088ce:	46a2      	mov	sl, r4
 80088d0:	e7d2      	b.n	8008878 <_svfiprintf_r+0x9c>
 80088d2:	9b03      	ldr	r3, [sp, #12]
 80088d4:	1d19      	adds	r1, r3, #4
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	9103      	str	r1, [sp, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	bfbb      	ittet	lt
 80088de:	425b      	neglt	r3, r3
 80088e0:	f042 0202 	orrlt.w	r2, r2, #2
 80088e4:	9307      	strge	r3, [sp, #28]
 80088e6:	9307      	strlt	r3, [sp, #28]
 80088e8:	bfb8      	it	lt
 80088ea:	9204      	strlt	r2, [sp, #16]
 80088ec:	7823      	ldrb	r3, [r4, #0]
 80088ee:	2b2e      	cmp	r3, #46	; 0x2e
 80088f0:	d10c      	bne.n	800890c <_svfiprintf_r+0x130>
 80088f2:	7863      	ldrb	r3, [r4, #1]
 80088f4:	2b2a      	cmp	r3, #42	; 0x2a
 80088f6:	d134      	bne.n	8008962 <_svfiprintf_r+0x186>
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	1d1a      	adds	r2, r3, #4
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	9203      	str	r2, [sp, #12]
 8008900:	2b00      	cmp	r3, #0
 8008902:	bfb8      	it	lt
 8008904:	f04f 33ff 	movlt.w	r3, #4294967295
 8008908:	3402      	adds	r4, #2
 800890a:	9305      	str	r3, [sp, #20]
 800890c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80089d4 <_svfiprintf_r+0x1f8>
 8008910:	7821      	ldrb	r1, [r4, #0]
 8008912:	2203      	movs	r2, #3
 8008914:	4650      	mov	r0, sl
 8008916:	f7f7 fc6b 	bl	80001f0 <memchr>
 800891a:	b138      	cbz	r0, 800892c <_svfiprintf_r+0x150>
 800891c:	9b04      	ldr	r3, [sp, #16]
 800891e:	eba0 000a 	sub.w	r0, r0, sl
 8008922:	2240      	movs	r2, #64	; 0x40
 8008924:	4082      	lsls	r2, r0
 8008926:	4313      	orrs	r3, r2
 8008928:	3401      	adds	r4, #1
 800892a:	9304      	str	r3, [sp, #16]
 800892c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008930:	4825      	ldr	r0, [pc, #148]	; (80089c8 <_svfiprintf_r+0x1ec>)
 8008932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008936:	2206      	movs	r2, #6
 8008938:	f7f7 fc5a 	bl	80001f0 <memchr>
 800893c:	2800      	cmp	r0, #0
 800893e:	d038      	beq.n	80089b2 <_svfiprintf_r+0x1d6>
 8008940:	4b22      	ldr	r3, [pc, #136]	; (80089cc <_svfiprintf_r+0x1f0>)
 8008942:	bb1b      	cbnz	r3, 800898c <_svfiprintf_r+0x1b0>
 8008944:	9b03      	ldr	r3, [sp, #12]
 8008946:	3307      	adds	r3, #7
 8008948:	f023 0307 	bic.w	r3, r3, #7
 800894c:	3308      	adds	r3, #8
 800894e:	9303      	str	r3, [sp, #12]
 8008950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008952:	4433      	add	r3, r6
 8008954:	9309      	str	r3, [sp, #36]	; 0x24
 8008956:	e768      	b.n	800882a <_svfiprintf_r+0x4e>
 8008958:	fb0c 3202 	mla	r2, ip, r2, r3
 800895c:	460c      	mov	r4, r1
 800895e:	2001      	movs	r0, #1
 8008960:	e7a6      	b.n	80088b0 <_svfiprintf_r+0xd4>
 8008962:	2300      	movs	r3, #0
 8008964:	3401      	adds	r4, #1
 8008966:	9305      	str	r3, [sp, #20]
 8008968:	4619      	mov	r1, r3
 800896a:	f04f 0c0a 	mov.w	ip, #10
 800896e:	4620      	mov	r0, r4
 8008970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008974:	3a30      	subs	r2, #48	; 0x30
 8008976:	2a09      	cmp	r2, #9
 8008978:	d903      	bls.n	8008982 <_svfiprintf_r+0x1a6>
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0c6      	beq.n	800890c <_svfiprintf_r+0x130>
 800897e:	9105      	str	r1, [sp, #20]
 8008980:	e7c4      	b.n	800890c <_svfiprintf_r+0x130>
 8008982:	fb0c 2101 	mla	r1, ip, r1, r2
 8008986:	4604      	mov	r4, r0
 8008988:	2301      	movs	r3, #1
 800898a:	e7f0      	b.n	800896e <_svfiprintf_r+0x192>
 800898c:	ab03      	add	r3, sp, #12
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	462a      	mov	r2, r5
 8008992:	4b0f      	ldr	r3, [pc, #60]	; (80089d0 <_svfiprintf_r+0x1f4>)
 8008994:	a904      	add	r1, sp, #16
 8008996:	4638      	mov	r0, r7
 8008998:	f3af 8000 	nop.w
 800899c:	1c42      	adds	r2, r0, #1
 800899e:	4606      	mov	r6, r0
 80089a0:	d1d6      	bne.n	8008950 <_svfiprintf_r+0x174>
 80089a2:	89ab      	ldrh	r3, [r5, #12]
 80089a4:	065b      	lsls	r3, r3, #25
 80089a6:	f53f af2d 	bmi.w	8008804 <_svfiprintf_r+0x28>
 80089aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ac:	b01d      	add	sp, #116	; 0x74
 80089ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b2:	ab03      	add	r3, sp, #12
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	462a      	mov	r2, r5
 80089b8:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <_svfiprintf_r+0x1f4>)
 80089ba:	a904      	add	r1, sp, #16
 80089bc:	4638      	mov	r0, r7
 80089be:	f000 f879 	bl	8008ab4 <_printf_i>
 80089c2:	e7eb      	b.n	800899c <_svfiprintf_r+0x1c0>
 80089c4:	08008ec8 	.word	0x08008ec8
 80089c8:	08008ed2 	.word	0x08008ed2
 80089cc:	00000000 	.word	0x00000000
 80089d0:	08008729 	.word	0x08008729
 80089d4:	08008ece 	.word	0x08008ece

080089d8 <_printf_common>:
 80089d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089dc:	4616      	mov	r6, r2
 80089de:	4699      	mov	r9, r3
 80089e0:	688a      	ldr	r2, [r1, #8]
 80089e2:	690b      	ldr	r3, [r1, #16]
 80089e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089e8:	4293      	cmp	r3, r2
 80089ea:	bfb8      	it	lt
 80089ec:	4613      	movlt	r3, r2
 80089ee:	6033      	str	r3, [r6, #0]
 80089f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089f4:	4607      	mov	r7, r0
 80089f6:	460c      	mov	r4, r1
 80089f8:	b10a      	cbz	r2, 80089fe <_printf_common+0x26>
 80089fa:	3301      	adds	r3, #1
 80089fc:	6033      	str	r3, [r6, #0]
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	0699      	lsls	r1, r3, #26
 8008a02:	bf42      	ittt	mi
 8008a04:	6833      	ldrmi	r3, [r6, #0]
 8008a06:	3302      	addmi	r3, #2
 8008a08:	6033      	strmi	r3, [r6, #0]
 8008a0a:	6825      	ldr	r5, [r4, #0]
 8008a0c:	f015 0506 	ands.w	r5, r5, #6
 8008a10:	d106      	bne.n	8008a20 <_printf_common+0x48>
 8008a12:	f104 0a19 	add.w	sl, r4, #25
 8008a16:	68e3      	ldr	r3, [r4, #12]
 8008a18:	6832      	ldr	r2, [r6, #0]
 8008a1a:	1a9b      	subs	r3, r3, r2
 8008a1c:	42ab      	cmp	r3, r5
 8008a1e:	dc26      	bgt.n	8008a6e <_printf_common+0x96>
 8008a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a24:	1e13      	subs	r3, r2, #0
 8008a26:	6822      	ldr	r2, [r4, #0]
 8008a28:	bf18      	it	ne
 8008a2a:	2301      	movne	r3, #1
 8008a2c:	0692      	lsls	r2, r2, #26
 8008a2e:	d42b      	bmi.n	8008a88 <_printf_common+0xb0>
 8008a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a34:	4649      	mov	r1, r9
 8008a36:	4638      	mov	r0, r7
 8008a38:	47c0      	blx	r8
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	d01e      	beq.n	8008a7c <_printf_common+0xa4>
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	6922      	ldr	r2, [r4, #16]
 8008a42:	f003 0306 	and.w	r3, r3, #6
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	bf02      	ittt	eq
 8008a4a:	68e5      	ldreq	r5, [r4, #12]
 8008a4c:	6833      	ldreq	r3, [r6, #0]
 8008a4e:	1aed      	subeq	r5, r5, r3
 8008a50:	68a3      	ldr	r3, [r4, #8]
 8008a52:	bf0c      	ite	eq
 8008a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a58:	2500      	movne	r5, #0
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	bfc4      	itt	gt
 8008a5e:	1a9b      	subgt	r3, r3, r2
 8008a60:	18ed      	addgt	r5, r5, r3
 8008a62:	2600      	movs	r6, #0
 8008a64:	341a      	adds	r4, #26
 8008a66:	42b5      	cmp	r5, r6
 8008a68:	d11a      	bne.n	8008aa0 <_printf_common+0xc8>
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	e008      	b.n	8008a80 <_printf_common+0xa8>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	4652      	mov	r2, sl
 8008a72:	4649      	mov	r1, r9
 8008a74:	4638      	mov	r0, r7
 8008a76:	47c0      	blx	r8
 8008a78:	3001      	adds	r0, #1
 8008a7a:	d103      	bne.n	8008a84 <_printf_common+0xac>
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a84:	3501      	adds	r5, #1
 8008a86:	e7c6      	b.n	8008a16 <_printf_common+0x3e>
 8008a88:	18e1      	adds	r1, r4, r3
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	2030      	movs	r0, #48	; 0x30
 8008a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a92:	4422      	add	r2, r4
 8008a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a9c:	3302      	adds	r3, #2
 8008a9e:	e7c7      	b.n	8008a30 <_printf_common+0x58>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	4622      	mov	r2, r4
 8008aa4:	4649      	mov	r1, r9
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	47c0      	blx	r8
 8008aaa:	3001      	adds	r0, #1
 8008aac:	d0e6      	beq.n	8008a7c <_printf_common+0xa4>
 8008aae:	3601      	adds	r6, #1
 8008ab0:	e7d9      	b.n	8008a66 <_printf_common+0x8e>
	...

08008ab4 <_printf_i>:
 8008ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab8:	7e0f      	ldrb	r7, [r1, #24]
 8008aba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008abc:	2f78      	cmp	r7, #120	; 0x78
 8008abe:	4691      	mov	r9, r2
 8008ac0:	4680      	mov	r8, r0
 8008ac2:	460c      	mov	r4, r1
 8008ac4:	469a      	mov	sl, r3
 8008ac6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008aca:	d807      	bhi.n	8008adc <_printf_i+0x28>
 8008acc:	2f62      	cmp	r7, #98	; 0x62
 8008ace:	d80a      	bhi.n	8008ae6 <_printf_i+0x32>
 8008ad0:	2f00      	cmp	r7, #0
 8008ad2:	f000 80d4 	beq.w	8008c7e <_printf_i+0x1ca>
 8008ad6:	2f58      	cmp	r7, #88	; 0x58
 8008ad8:	f000 80c0 	beq.w	8008c5c <_printf_i+0x1a8>
 8008adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ae4:	e03a      	b.n	8008b5c <_printf_i+0xa8>
 8008ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008aea:	2b15      	cmp	r3, #21
 8008aec:	d8f6      	bhi.n	8008adc <_printf_i+0x28>
 8008aee:	a101      	add	r1, pc, #4	; (adr r1, 8008af4 <_printf_i+0x40>)
 8008af0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008af4:	08008b4d 	.word	0x08008b4d
 8008af8:	08008b61 	.word	0x08008b61
 8008afc:	08008add 	.word	0x08008add
 8008b00:	08008add 	.word	0x08008add
 8008b04:	08008add 	.word	0x08008add
 8008b08:	08008add 	.word	0x08008add
 8008b0c:	08008b61 	.word	0x08008b61
 8008b10:	08008add 	.word	0x08008add
 8008b14:	08008add 	.word	0x08008add
 8008b18:	08008add 	.word	0x08008add
 8008b1c:	08008add 	.word	0x08008add
 8008b20:	08008c65 	.word	0x08008c65
 8008b24:	08008b8d 	.word	0x08008b8d
 8008b28:	08008c1f 	.word	0x08008c1f
 8008b2c:	08008add 	.word	0x08008add
 8008b30:	08008add 	.word	0x08008add
 8008b34:	08008c87 	.word	0x08008c87
 8008b38:	08008add 	.word	0x08008add
 8008b3c:	08008b8d 	.word	0x08008b8d
 8008b40:	08008add 	.word	0x08008add
 8008b44:	08008add 	.word	0x08008add
 8008b48:	08008c27 	.word	0x08008c27
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	1d1a      	adds	r2, r3, #4
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	602a      	str	r2, [r5, #0]
 8008b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e09f      	b.n	8008ca0 <_printf_i+0x1ec>
 8008b60:	6820      	ldr	r0, [r4, #0]
 8008b62:	682b      	ldr	r3, [r5, #0]
 8008b64:	0607      	lsls	r7, r0, #24
 8008b66:	f103 0104 	add.w	r1, r3, #4
 8008b6a:	6029      	str	r1, [r5, #0]
 8008b6c:	d501      	bpl.n	8008b72 <_printf_i+0xbe>
 8008b6e:	681e      	ldr	r6, [r3, #0]
 8008b70:	e003      	b.n	8008b7a <_printf_i+0xc6>
 8008b72:	0646      	lsls	r6, r0, #25
 8008b74:	d5fb      	bpl.n	8008b6e <_printf_i+0xba>
 8008b76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	da03      	bge.n	8008b86 <_printf_i+0xd2>
 8008b7e:	232d      	movs	r3, #45	; 0x2d
 8008b80:	4276      	negs	r6, r6
 8008b82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b86:	485a      	ldr	r0, [pc, #360]	; (8008cf0 <_printf_i+0x23c>)
 8008b88:	230a      	movs	r3, #10
 8008b8a:	e012      	b.n	8008bb2 <_printf_i+0xfe>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	6820      	ldr	r0, [r4, #0]
 8008b90:	1d19      	adds	r1, r3, #4
 8008b92:	6029      	str	r1, [r5, #0]
 8008b94:	0605      	lsls	r5, r0, #24
 8008b96:	d501      	bpl.n	8008b9c <_printf_i+0xe8>
 8008b98:	681e      	ldr	r6, [r3, #0]
 8008b9a:	e002      	b.n	8008ba2 <_printf_i+0xee>
 8008b9c:	0641      	lsls	r1, r0, #25
 8008b9e:	d5fb      	bpl.n	8008b98 <_printf_i+0xe4>
 8008ba0:	881e      	ldrh	r6, [r3, #0]
 8008ba2:	4853      	ldr	r0, [pc, #332]	; (8008cf0 <_printf_i+0x23c>)
 8008ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ba6:	bf0c      	ite	eq
 8008ba8:	2308      	moveq	r3, #8
 8008baa:	230a      	movne	r3, #10
 8008bac:	2100      	movs	r1, #0
 8008bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bb2:	6865      	ldr	r5, [r4, #4]
 8008bb4:	60a5      	str	r5, [r4, #8]
 8008bb6:	2d00      	cmp	r5, #0
 8008bb8:	bfa2      	ittt	ge
 8008bba:	6821      	ldrge	r1, [r4, #0]
 8008bbc:	f021 0104 	bicge.w	r1, r1, #4
 8008bc0:	6021      	strge	r1, [r4, #0]
 8008bc2:	b90e      	cbnz	r6, 8008bc8 <_printf_i+0x114>
 8008bc4:	2d00      	cmp	r5, #0
 8008bc6:	d04b      	beq.n	8008c60 <_printf_i+0x1ac>
 8008bc8:	4615      	mov	r5, r2
 8008bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bce:	fb03 6711 	mls	r7, r3, r1, r6
 8008bd2:	5dc7      	ldrb	r7, [r0, r7]
 8008bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008bd8:	4637      	mov	r7, r6
 8008bda:	42bb      	cmp	r3, r7
 8008bdc:	460e      	mov	r6, r1
 8008bde:	d9f4      	bls.n	8008bca <_printf_i+0x116>
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d10b      	bne.n	8008bfc <_printf_i+0x148>
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	07de      	lsls	r6, r3, #31
 8008be8:	d508      	bpl.n	8008bfc <_printf_i+0x148>
 8008bea:	6923      	ldr	r3, [r4, #16]
 8008bec:	6861      	ldr	r1, [r4, #4]
 8008bee:	4299      	cmp	r1, r3
 8008bf0:	bfde      	ittt	le
 8008bf2:	2330      	movle	r3, #48	; 0x30
 8008bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bfc:	1b52      	subs	r2, r2, r5
 8008bfe:	6122      	str	r2, [r4, #16]
 8008c00:	f8cd a000 	str.w	sl, [sp]
 8008c04:	464b      	mov	r3, r9
 8008c06:	aa03      	add	r2, sp, #12
 8008c08:	4621      	mov	r1, r4
 8008c0a:	4640      	mov	r0, r8
 8008c0c:	f7ff fee4 	bl	80089d8 <_printf_common>
 8008c10:	3001      	adds	r0, #1
 8008c12:	d14a      	bne.n	8008caa <_printf_i+0x1f6>
 8008c14:	f04f 30ff 	mov.w	r0, #4294967295
 8008c18:	b004      	add	sp, #16
 8008c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	f043 0320 	orr.w	r3, r3, #32
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	4833      	ldr	r0, [pc, #204]	; (8008cf4 <_printf_i+0x240>)
 8008c28:	2778      	movs	r7, #120	; 0x78
 8008c2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	6829      	ldr	r1, [r5, #0]
 8008c32:	061f      	lsls	r7, r3, #24
 8008c34:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c38:	d402      	bmi.n	8008c40 <_printf_i+0x18c>
 8008c3a:	065f      	lsls	r7, r3, #25
 8008c3c:	bf48      	it	mi
 8008c3e:	b2b6      	uxthmi	r6, r6
 8008c40:	07df      	lsls	r7, r3, #31
 8008c42:	bf48      	it	mi
 8008c44:	f043 0320 	orrmi.w	r3, r3, #32
 8008c48:	6029      	str	r1, [r5, #0]
 8008c4a:	bf48      	it	mi
 8008c4c:	6023      	strmi	r3, [r4, #0]
 8008c4e:	b91e      	cbnz	r6, 8008c58 <_printf_i+0x1a4>
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	f023 0320 	bic.w	r3, r3, #32
 8008c56:	6023      	str	r3, [r4, #0]
 8008c58:	2310      	movs	r3, #16
 8008c5a:	e7a7      	b.n	8008bac <_printf_i+0xf8>
 8008c5c:	4824      	ldr	r0, [pc, #144]	; (8008cf0 <_printf_i+0x23c>)
 8008c5e:	e7e4      	b.n	8008c2a <_printf_i+0x176>
 8008c60:	4615      	mov	r5, r2
 8008c62:	e7bd      	b.n	8008be0 <_printf_i+0x12c>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	6826      	ldr	r6, [r4, #0]
 8008c68:	6961      	ldr	r1, [r4, #20]
 8008c6a:	1d18      	adds	r0, r3, #4
 8008c6c:	6028      	str	r0, [r5, #0]
 8008c6e:	0635      	lsls	r5, r6, #24
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	d501      	bpl.n	8008c78 <_printf_i+0x1c4>
 8008c74:	6019      	str	r1, [r3, #0]
 8008c76:	e002      	b.n	8008c7e <_printf_i+0x1ca>
 8008c78:	0670      	lsls	r0, r6, #25
 8008c7a:	d5fb      	bpl.n	8008c74 <_printf_i+0x1c0>
 8008c7c:	8019      	strh	r1, [r3, #0]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	6123      	str	r3, [r4, #16]
 8008c82:	4615      	mov	r5, r2
 8008c84:	e7bc      	b.n	8008c00 <_printf_i+0x14c>
 8008c86:	682b      	ldr	r3, [r5, #0]
 8008c88:	1d1a      	adds	r2, r3, #4
 8008c8a:	602a      	str	r2, [r5, #0]
 8008c8c:	681d      	ldr	r5, [r3, #0]
 8008c8e:	6862      	ldr	r2, [r4, #4]
 8008c90:	2100      	movs	r1, #0
 8008c92:	4628      	mov	r0, r5
 8008c94:	f7f7 faac 	bl	80001f0 <memchr>
 8008c98:	b108      	cbz	r0, 8008c9e <_printf_i+0x1ea>
 8008c9a:	1b40      	subs	r0, r0, r5
 8008c9c:	6060      	str	r0, [r4, #4]
 8008c9e:	6863      	ldr	r3, [r4, #4]
 8008ca0:	6123      	str	r3, [r4, #16]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ca8:	e7aa      	b.n	8008c00 <_printf_i+0x14c>
 8008caa:	6923      	ldr	r3, [r4, #16]
 8008cac:	462a      	mov	r2, r5
 8008cae:	4649      	mov	r1, r9
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	47d0      	blx	sl
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d0ad      	beq.n	8008c14 <_printf_i+0x160>
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	079b      	lsls	r3, r3, #30
 8008cbc:	d413      	bmi.n	8008ce6 <_printf_i+0x232>
 8008cbe:	68e0      	ldr	r0, [r4, #12]
 8008cc0:	9b03      	ldr	r3, [sp, #12]
 8008cc2:	4298      	cmp	r0, r3
 8008cc4:	bfb8      	it	lt
 8008cc6:	4618      	movlt	r0, r3
 8008cc8:	e7a6      	b.n	8008c18 <_printf_i+0x164>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	4632      	mov	r2, r6
 8008cce:	4649      	mov	r1, r9
 8008cd0:	4640      	mov	r0, r8
 8008cd2:	47d0      	blx	sl
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d09d      	beq.n	8008c14 <_printf_i+0x160>
 8008cd8:	3501      	adds	r5, #1
 8008cda:	68e3      	ldr	r3, [r4, #12]
 8008cdc:	9903      	ldr	r1, [sp, #12]
 8008cde:	1a5b      	subs	r3, r3, r1
 8008ce0:	42ab      	cmp	r3, r5
 8008ce2:	dcf2      	bgt.n	8008cca <_printf_i+0x216>
 8008ce4:	e7eb      	b.n	8008cbe <_printf_i+0x20a>
 8008ce6:	2500      	movs	r5, #0
 8008ce8:	f104 0619 	add.w	r6, r4, #25
 8008cec:	e7f5      	b.n	8008cda <_printf_i+0x226>
 8008cee:	bf00      	nop
 8008cf0:	08008ed9 	.word	0x08008ed9
 8008cf4:	08008eea 	.word	0x08008eea

08008cf8 <memmove>:
 8008cf8:	4288      	cmp	r0, r1
 8008cfa:	b510      	push	{r4, lr}
 8008cfc:	eb01 0402 	add.w	r4, r1, r2
 8008d00:	d902      	bls.n	8008d08 <memmove+0x10>
 8008d02:	4284      	cmp	r4, r0
 8008d04:	4623      	mov	r3, r4
 8008d06:	d807      	bhi.n	8008d18 <memmove+0x20>
 8008d08:	1e43      	subs	r3, r0, #1
 8008d0a:	42a1      	cmp	r1, r4
 8008d0c:	d008      	beq.n	8008d20 <memmove+0x28>
 8008d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d16:	e7f8      	b.n	8008d0a <memmove+0x12>
 8008d18:	4402      	add	r2, r0
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	428a      	cmp	r2, r1
 8008d1e:	d100      	bne.n	8008d22 <memmove+0x2a>
 8008d20:	bd10      	pop	{r4, pc}
 8008d22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d2a:	e7f7      	b.n	8008d1c <memmove+0x24>

08008d2c <_sbrk_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4d06      	ldr	r5, [pc, #24]	; (8008d48 <_sbrk_r+0x1c>)
 8008d30:	2300      	movs	r3, #0
 8008d32:	4604      	mov	r4, r0
 8008d34:	4608      	mov	r0, r1
 8008d36:	602b      	str	r3, [r5, #0]
 8008d38:	f7f8 feba 	bl	8001ab0 <_sbrk>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d102      	bne.n	8008d46 <_sbrk_r+0x1a>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	b103      	cbz	r3, 8008d46 <_sbrk_r+0x1a>
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	200007bc 	.word	0x200007bc

08008d4c <memcpy>:
 8008d4c:	440a      	add	r2, r1
 8008d4e:	4291      	cmp	r1, r2
 8008d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d54:	d100      	bne.n	8008d58 <memcpy+0xc>
 8008d56:	4770      	bx	lr
 8008d58:	b510      	push	{r4, lr}
 8008d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d62:	4291      	cmp	r1, r2
 8008d64:	d1f9      	bne.n	8008d5a <memcpy+0xe>
 8008d66:	bd10      	pop	{r4, pc}

08008d68 <_realloc_r>:
 8008d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6c:	4680      	mov	r8, r0
 8008d6e:	4614      	mov	r4, r2
 8008d70:	460e      	mov	r6, r1
 8008d72:	b921      	cbnz	r1, 8008d7e <_realloc_r+0x16>
 8008d74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d78:	4611      	mov	r1, r2
 8008d7a:	f7ff bc49 	b.w	8008610 <_malloc_r>
 8008d7e:	b92a      	cbnz	r2, 8008d8c <_realloc_r+0x24>
 8008d80:	f7ff fbda 	bl	8008538 <_free_r>
 8008d84:	4625      	mov	r5, r4
 8008d86:	4628      	mov	r0, r5
 8008d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d8c:	f000 f81b 	bl	8008dc6 <_malloc_usable_size_r>
 8008d90:	4284      	cmp	r4, r0
 8008d92:	4607      	mov	r7, r0
 8008d94:	d802      	bhi.n	8008d9c <_realloc_r+0x34>
 8008d96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d9a:	d812      	bhi.n	8008dc2 <_realloc_r+0x5a>
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	4640      	mov	r0, r8
 8008da0:	f7ff fc36 	bl	8008610 <_malloc_r>
 8008da4:	4605      	mov	r5, r0
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d0ed      	beq.n	8008d86 <_realloc_r+0x1e>
 8008daa:	42bc      	cmp	r4, r7
 8008dac:	4622      	mov	r2, r4
 8008dae:	4631      	mov	r1, r6
 8008db0:	bf28      	it	cs
 8008db2:	463a      	movcs	r2, r7
 8008db4:	f7ff ffca 	bl	8008d4c <memcpy>
 8008db8:	4631      	mov	r1, r6
 8008dba:	4640      	mov	r0, r8
 8008dbc:	f7ff fbbc 	bl	8008538 <_free_r>
 8008dc0:	e7e1      	b.n	8008d86 <_realloc_r+0x1e>
 8008dc2:	4635      	mov	r5, r6
 8008dc4:	e7df      	b.n	8008d86 <_realloc_r+0x1e>

08008dc6 <_malloc_usable_size_r>:
 8008dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dca:	1f18      	subs	r0, r3, #4
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	bfbc      	itt	lt
 8008dd0:	580b      	ldrlt	r3, [r1, r0]
 8008dd2:	18c0      	addlt	r0, r0, r3
 8008dd4:	4770      	bx	lr
	...

08008dd8 <_init>:
 8008dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dda:	bf00      	nop
 8008ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dde:	bc08      	pop	{r3}
 8008de0:	469e      	mov	lr, r3
 8008de2:	4770      	bx	lr

08008de4 <_fini>:
 8008de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de6:	bf00      	nop
 8008de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dea:	bc08      	pop	{r3}
 8008dec:	469e      	mov	lr, r3
 8008dee:	4770      	bx	lr
