
Redoing B-5 Tx-Pot-LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f54  08005f54  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005f54  08005f54  00015f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f5c  08005f5c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f5c  08005f5c  00015f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  20000088  08005fec  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  08005fec  00020844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f90a  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023b6  00000000  00000000  0002fa05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00031dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b91  00000000  00000000  00032c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018139  00000000  00000000  00033819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011630  00000000  00000000  0004b952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099f07  00000000  00000000  0005cf82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004434  00000000  00000000  000f6e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000fb2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ecc 	.word	0x08005ecc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08005ecc 	.word	0x08005ecc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2iz>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000610:	d215      	bcs.n	800063e <__aeabi_d2iz+0x36>
 8000612:	d511      	bpl.n	8000638 <__aeabi_d2iz+0x30>
 8000614:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000618:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800061c:	d912      	bls.n	8000644 <__aeabi_d2iz+0x3c>
 800061e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800062a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800062e:	fa23 f002 	lsr.w	r0, r3, r2
 8000632:	bf18      	it	ne
 8000634:	4240      	negne	r0, r0
 8000636:	4770      	bx	lr
 8000638:	f04f 0000 	mov.w	r0, #0
 800063c:	4770      	bx	lr
 800063e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000642:	d105      	bne.n	8000650 <__aeabi_d2iz+0x48>
 8000644:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000648:	bf08      	it	eq
 800064a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b970 	b.w	8000950 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9e08      	ldr	r6, [sp, #32]
 800068e:	460d      	mov	r5, r1
 8000690:	4604      	mov	r4, r0
 8000692:	460f      	mov	r7, r1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d14a      	bne.n	800072e <__udivmoddi4+0xa6>
 8000698:	428a      	cmp	r2, r1
 800069a:	4694      	mov	ip, r2
 800069c:	d965      	bls.n	800076a <__udivmoddi4+0xe2>
 800069e:	fab2 f382 	clz	r3, r2
 80006a2:	b143      	cbz	r3, 80006b6 <__udivmoddi4+0x2e>
 80006a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80006a8:	f1c3 0220 	rsb	r2, r3, #32
 80006ac:	409f      	lsls	r7, r3
 80006ae:	fa20 f202 	lsr.w	r2, r0, r2
 80006b2:	4317      	orrs	r7, r2
 80006b4:	409c      	lsls	r4, r3
 80006b6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006ba:	fa1f f58c 	uxth.w	r5, ip
 80006be:	fbb7 f1fe 	udiv	r1, r7, lr
 80006c2:	0c22      	lsrs	r2, r4, #16
 80006c4:	fb0e 7711 	mls	r7, lr, r1, r7
 80006c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006cc:	fb01 f005 	mul.w	r0, r1, r5
 80006d0:	4290      	cmp	r0, r2
 80006d2:	d90a      	bls.n	80006ea <__udivmoddi4+0x62>
 80006d4:	eb1c 0202 	adds.w	r2, ip, r2
 80006d8:	f101 37ff 	add.w	r7, r1, #4294967295
 80006dc:	f080 811c 	bcs.w	8000918 <__udivmoddi4+0x290>
 80006e0:	4290      	cmp	r0, r2
 80006e2:	f240 8119 	bls.w	8000918 <__udivmoddi4+0x290>
 80006e6:	3902      	subs	r1, #2
 80006e8:	4462      	add	r2, ip
 80006ea:	1a12      	subs	r2, r2, r0
 80006ec:	b2a4      	uxth	r4, r4
 80006ee:	fbb2 f0fe 	udiv	r0, r2, lr
 80006f2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006fa:	fb00 f505 	mul.w	r5, r0, r5
 80006fe:	42a5      	cmp	r5, r4
 8000700:	d90a      	bls.n	8000718 <__udivmoddi4+0x90>
 8000702:	eb1c 0404 	adds.w	r4, ip, r4
 8000706:	f100 32ff 	add.w	r2, r0, #4294967295
 800070a:	f080 8107 	bcs.w	800091c <__udivmoddi4+0x294>
 800070e:	42a5      	cmp	r5, r4
 8000710:	f240 8104 	bls.w	800091c <__udivmoddi4+0x294>
 8000714:	4464      	add	r4, ip
 8000716:	3802      	subs	r0, #2
 8000718:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800071c:	1b64      	subs	r4, r4, r5
 800071e:	2100      	movs	r1, #0
 8000720:	b11e      	cbz	r6, 800072a <__udivmoddi4+0xa2>
 8000722:	40dc      	lsrs	r4, r3
 8000724:	2300      	movs	r3, #0
 8000726:	e9c6 4300 	strd	r4, r3, [r6]
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	428b      	cmp	r3, r1
 8000730:	d908      	bls.n	8000744 <__udivmoddi4+0xbc>
 8000732:	2e00      	cmp	r6, #0
 8000734:	f000 80ed 	beq.w	8000912 <__udivmoddi4+0x28a>
 8000738:	2100      	movs	r1, #0
 800073a:	e9c6 0500 	strd	r0, r5, [r6]
 800073e:	4608      	mov	r0, r1
 8000740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000744:	fab3 f183 	clz	r1, r3
 8000748:	2900      	cmp	r1, #0
 800074a:	d149      	bne.n	80007e0 <__udivmoddi4+0x158>
 800074c:	42ab      	cmp	r3, r5
 800074e:	d302      	bcc.n	8000756 <__udivmoddi4+0xce>
 8000750:	4282      	cmp	r2, r0
 8000752:	f200 80f8 	bhi.w	8000946 <__udivmoddi4+0x2be>
 8000756:	1a84      	subs	r4, r0, r2
 8000758:	eb65 0203 	sbc.w	r2, r5, r3
 800075c:	2001      	movs	r0, #1
 800075e:	4617      	mov	r7, r2
 8000760:	2e00      	cmp	r6, #0
 8000762:	d0e2      	beq.n	800072a <__udivmoddi4+0xa2>
 8000764:	e9c6 4700 	strd	r4, r7, [r6]
 8000768:	e7df      	b.n	800072a <__udivmoddi4+0xa2>
 800076a:	b902      	cbnz	r2, 800076e <__udivmoddi4+0xe6>
 800076c:	deff      	udf	#255	; 0xff
 800076e:	fab2 f382 	clz	r3, r2
 8000772:	2b00      	cmp	r3, #0
 8000774:	f040 8090 	bne.w	8000898 <__udivmoddi4+0x210>
 8000778:	1a8a      	subs	r2, r1, r2
 800077a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800077e:	fa1f fe8c 	uxth.w	lr, ip
 8000782:	2101      	movs	r1, #1
 8000784:	fbb2 f5f7 	udiv	r5, r2, r7
 8000788:	fb07 2015 	mls	r0, r7, r5, r2
 800078c:	0c22      	lsrs	r2, r4, #16
 800078e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000792:	fb0e f005 	mul.w	r0, lr, r5
 8000796:	4290      	cmp	r0, r2
 8000798:	d908      	bls.n	80007ac <__udivmoddi4+0x124>
 800079a:	eb1c 0202 	adds.w	r2, ip, r2
 800079e:	f105 38ff 	add.w	r8, r5, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0x122>
 80007a4:	4290      	cmp	r0, r2
 80007a6:	f200 80cb 	bhi.w	8000940 <__udivmoddi4+0x2b8>
 80007aa:	4645      	mov	r5, r8
 80007ac:	1a12      	subs	r2, r2, r0
 80007ae:	b2a4      	uxth	r4, r4
 80007b0:	fbb2 f0f7 	udiv	r0, r2, r7
 80007b4:	fb07 2210 	mls	r2, r7, r0, r2
 80007b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007bc:	fb0e fe00 	mul.w	lr, lr, r0
 80007c0:	45a6      	cmp	lr, r4
 80007c2:	d908      	bls.n	80007d6 <__udivmoddi4+0x14e>
 80007c4:	eb1c 0404 	adds.w	r4, ip, r4
 80007c8:	f100 32ff 	add.w	r2, r0, #4294967295
 80007cc:	d202      	bcs.n	80007d4 <__udivmoddi4+0x14c>
 80007ce:	45a6      	cmp	lr, r4
 80007d0:	f200 80bb 	bhi.w	800094a <__udivmoddi4+0x2c2>
 80007d4:	4610      	mov	r0, r2
 80007d6:	eba4 040e 	sub.w	r4, r4, lr
 80007da:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007de:	e79f      	b.n	8000720 <__udivmoddi4+0x98>
 80007e0:	f1c1 0720 	rsb	r7, r1, #32
 80007e4:	408b      	lsls	r3, r1
 80007e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80007ee:	fa05 f401 	lsl.w	r4, r5, r1
 80007f2:	fa20 f307 	lsr.w	r3, r0, r7
 80007f6:	40fd      	lsrs	r5, r7
 80007f8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007fc:	4323      	orrs	r3, r4
 80007fe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000802:	fa1f fe8c 	uxth.w	lr, ip
 8000806:	fb09 5518 	mls	r5, r9, r8, r5
 800080a:	0c1c      	lsrs	r4, r3, #16
 800080c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000810:	fb08 f50e 	mul.w	r5, r8, lr
 8000814:	42a5      	cmp	r5, r4
 8000816:	fa02 f201 	lsl.w	r2, r2, r1
 800081a:	fa00 f001 	lsl.w	r0, r0, r1
 800081e:	d90b      	bls.n	8000838 <__udivmoddi4+0x1b0>
 8000820:	eb1c 0404 	adds.w	r4, ip, r4
 8000824:	f108 3aff 	add.w	sl, r8, #4294967295
 8000828:	f080 8088 	bcs.w	800093c <__udivmoddi4+0x2b4>
 800082c:	42a5      	cmp	r5, r4
 800082e:	f240 8085 	bls.w	800093c <__udivmoddi4+0x2b4>
 8000832:	f1a8 0802 	sub.w	r8, r8, #2
 8000836:	4464      	add	r4, ip
 8000838:	1b64      	subs	r4, r4, r5
 800083a:	b29d      	uxth	r5, r3
 800083c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000840:	fb09 4413 	mls	r4, r9, r3, r4
 8000844:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000848:	fb03 fe0e 	mul.w	lr, r3, lr
 800084c:	45a6      	cmp	lr, r4
 800084e:	d908      	bls.n	8000862 <__udivmoddi4+0x1da>
 8000850:	eb1c 0404 	adds.w	r4, ip, r4
 8000854:	f103 35ff 	add.w	r5, r3, #4294967295
 8000858:	d26c      	bcs.n	8000934 <__udivmoddi4+0x2ac>
 800085a:	45a6      	cmp	lr, r4
 800085c:	d96a      	bls.n	8000934 <__udivmoddi4+0x2ac>
 800085e:	3b02      	subs	r3, #2
 8000860:	4464      	add	r4, ip
 8000862:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000866:	fba3 9502 	umull	r9, r5, r3, r2
 800086a:	eba4 040e 	sub.w	r4, r4, lr
 800086e:	42ac      	cmp	r4, r5
 8000870:	46c8      	mov	r8, r9
 8000872:	46ae      	mov	lr, r5
 8000874:	d356      	bcc.n	8000924 <__udivmoddi4+0x29c>
 8000876:	d053      	beq.n	8000920 <__udivmoddi4+0x298>
 8000878:	b156      	cbz	r6, 8000890 <__udivmoddi4+0x208>
 800087a:	ebb0 0208 	subs.w	r2, r0, r8
 800087e:	eb64 040e 	sbc.w	r4, r4, lr
 8000882:	fa04 f707 	lsl.w	r7, r4, r7
 8000886:	40ca      	lsrs	r2, r1
 8000888:	40cc      	lsrs	r4, r1
 800088a:	4317      	orrs	r7, r2
 800088c:	e9c6 7400 	strd	r7, r4, [r6]
 8000890:	4618      	mov	r0, r3
 8000892:	2100      	movs	r1, #0
 8000894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000898:	f1c3 0120 	rsb	r1, r3, #32
 800089c:	fa02 fc03 	lsl.w	ip, r2, r3
 80008a0:	fa20 f201 	lsr.w	r2, r0, r1
 80008a4:	fa25 f101 	lsr.w	r1, r5, r1
 80008a8:	409d      	lsls	r5, r3
 80008aa:	432a      	orrs	r2, r5
 80008ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008b0:	fa1f fe8c 	uxth.w	lr, ip
 80008b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80008b8:	fb07 1510 	mls	r5, r7, r0, r1
 80008bc:	0c11      	lsrs	r1, r2, #16
 80008be:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008c2:	fb00 f50e 	mul.w	r5, r0, lr
 80008c6:	428d      	cmp	r5, r1
 80008c8:	fa04 f403 	lsl.w	r4, r4, r3
 80008cc:	d908      	bls.n	80008e0 <__udivmoddi4+0x258>
 80008ce:	eb1c 0101 	adds.w	r1, ip, r1
 80008d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008d6:	d22f      	bcs.n	8000938 <__udivmoddi4+0x2b0>
 80008d8:	428d      	cmp	r5, r1
 80008da:	d92d      	bls.n	8000938 <__udivmoddi4+0x2b0>
 80008dc:	3802      	subs	r0, #2
 80008de:	4461      	add	r1, ip
 80008e0:	1b49      	subs	r1, r1, r5
 80008e2:	b292      	uxth	r2, r2
 80008e4:	fbb1 f5f7 	udiv	r5, r1, r7
 80008e8:	fb07 1115 	mls	r1, r7, r5, r1
 80008ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008f0:	fb05 f10e 	mul.w	r1, r5, lr
 80008f4:	4291      	cmp	r1, r2
 80008f6:	d908      	bls.n	800090a <__udivmoddi4+0x282>
 80008f8:	eb1c 0202 	adds.w	r2, ip, r2
 80008fc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000900:	d216      	bcs.n	8000930 <__udivmoddi4+0x2a8>
 8000902:	4291      	cmp	r1, r2
 8000904:	d914      	bls.n	8000930 <__udivmoddi4+0x2a8>
 8000906:	3d02      	subs	r5, #2
 8000908:	4462      	add	r2, ip
 800090a:	1a52      	subs	r2, r2, r1
 800090c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000910:	e738      	b.n	8000784 <__udivmoddi4+0xfc>
 8000912:	4631      	mov	r1, r6
 8000914:	4630      	mov	r0, r6
 8000916:	e708      	b.n	800072a <__udivmoddi4+0xa2>
 8000918:	4639      	mov	r1, r7
 800091a:	e6e6      	b.n	80006ea <__udivmoddi4+0x62>
 800091c:	4610      	mov	r0, r2
 800091e:	e6fb      	b.n	8000718 <__udivmoddi4+0x90>
 8000920:	4548      	cmp	r0, r9
 8000922:	d2a9      	bcs.n	8000878 <__udivmoddi4+0x1f0>
 8000924:	ebb9 0802 	subs.w	r8, r9, r2
 8000928:	eb65 0e0c 	sbc.w	lr, r5, ip
 800092c:	3b01      	subs	r3, #1
 800092e:	e7a3      	b.n	8000878 <__udivmoddi4+0x1f0>
 8000930:	4645      	mov	r5, r8
 8000932:	e7ea      	b.n	800090a <__udivmoddi4+0x282>
 8000934:	462b      	mov	r3, r5
 8000936:	e794      	b.n	8000862 <__udivmoddi4+0x1da>
 8000938:	4640      	mov	r0, r8
 800093a:	e7d1      	b.n	80008e0 <__udivmoddi4+0x258>
 800093c:	46d0      	mov	r8, sl
 800093e:	e77b      	b.n	8000838 <__udivmoddi4+0x1b0>
 8000940:	3d02      	subs	r5, #2
 8000942:	4462      	add	r2, ip
 8000944:	e732      	b.n	80007ac <__udivmoddi4+0x124>
 8000946:	4608      	mov	r0, r1
 8000948:	e70a      	b.n	8000760 <__udivmoddi4+0xd8>
 800094a:	4464      	add	r4, ip
 800094c:	3802      	subs	r0, #2
 800094e:	e742      	b.n	80007d6 <__udivmoddi4+0x14e>

08000950 <__aeabi_idiv0>:
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <DWT_Delay_Init+0x58>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	4a13      	ldr	r2, [pc, #76]	; (80009ac <DWT_Delay_Init+0x58>)
 800095e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000962:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <DWT_Delay_Init+0x58>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	4a10      	ldr	r2, [pc, #64]	; (80009ac <DWT_Delay_Init+0x58>)
 800096a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800096e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <DWT_Delay_Init+0x5c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <DWT_Delay_Init+0x5c>)
 8000976:	f023 0301 	bic.w	r3, r3, #1
 800097a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <DWT_Delay_Init+0x5c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <DWT_Delay_Init+0x5c>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <DWT_Delay_Init+0x5c>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800098e:	bf00      	nop
    __ASM volatile ("NOP");
 8000990:	bf00      	nop
    __ASM volatile ("NOP");
 8000992:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <DWT_Delay_Init+0x5c>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800099c:	2300      	movs	r3, #0
 800099e:	e000      	b.n	80009a2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80009a0:	2301      	movs	r3, #1
    }
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000edf0 	.word	0xe000edf0
 80009b0:	e0001000 	.word	0xe0001000

080009b4 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <DWT_Delay_us+0x48>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80009c2:	f003 f937 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <DWT_Delay_us+0x4c>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	0c9b      	lsrs	r3, r3, #18
 80009d0:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	fb02 f303 	mul.w	r3, r2, r3
 80009da:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80009dc:	bf00      	nop
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <DWT_Delay_us+0x48>)
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	1ad2      	subs	r2, r2, r3
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	1acb      	subs	r3, r1, r3
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d3f6      	bcc.n	80009de <DWT_Delay_us+0x2a>
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	e0001000 	.word	0xe0001000
 8000a00:	431bde83 	.word	0x431bde83

08000a04 <lcd_enable>:


//  LCD code


void lcd_enable(){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	4807      	ldr	r0, [pc, #28]	; (8000a2c <lcd_enable+0x28>)
 8000a0e:	f002 fc93 	bl	8003338 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8000a12:	2032      	movs	r0, #50	; 0x32
 8000a14:	f7ff ffce 	bl	80009b4 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <lcd_enable+0x28>)
 8000a1e:	f002 fc8b 	bl	8003338 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8000a22:	2032      	movs	r0, #50	; 0x32
 8000a24:	f7ff ffc6 	bl	80009b4 <DWT_Delay_us>
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40020400 	.word	0x40020400

08000a30 <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	461a      	mov	r2, r3
 8000a44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a48:	4816      	ldr	r0, [pc, #88]	; (8000aa4 <lcd_write4+0x74>)
 8000a4a:	f002 fc75 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	105b      	asrs	r3, r3, #1
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a60:	4810      	ldr	r0, [pc, #64]	; (8000aa4 <lcd_write4+0x74>)
 8000a62:	f002 fc69 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	109b      	asrs	r3, r3, #2
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	461a      	mov	r2, r3
 8000a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a78:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <lcd_write4+0x74>)
 8000a7a:	f002 fc5d 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	10db      	asrs	r3, r3, #3
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <lcd_write4+0x74>)
 8000a92:	f002 fc51 	bl	8003338 <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 8000a96:	f7ff ffb5 	bl	8000a04 <lcd_enable>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40020400 	.word	0x40020400

08000aa8 <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	091b      	lsrs	r3, r3, #4
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ffb9 	bl	8000a30 <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ffb5 	bl	8000a30 <lcd_write4>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 8000ada:	2200      	movs	r2, #0
 8000adc:	2104      	movs	r1, #4
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <lcd_command+0x24>)
 8000ae0:	f002 fc2a 	bl	8003338 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ffde 	bl	8000aa8 <lcd_write>
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40020400 	.word	0x40020400

08000af8 <lcd_data>:
	lcd_command(LCD_CLEAR_COMMAND);
	DWT_Delay_us(2000);
}

//  send data to the LCD
void lcd_data(uint8_t byte){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 8000b02:	2201      	movs	r2, #1
 8000b04:	2104      	movs	r1, #4
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <lcd_data+0x24>)
 8000b08:	f002 fc16 	bl	8003338 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ffca 	bl	8000aa8 <lcd_write>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40020400 	.word	0x40020400

08000b20 <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	460a      	mov	r2, r1
 8000b2a:	71fb      	strb	r3, [r7, #7]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	3301      	adds	r3, #1
 8000b34:	79ba      	ldrb	r2, [r7, #6]
 8000b36:	3201      	adds	r2, #1
 8000b38:	fb02 f303 	mul.w	r3, r2, r3
 8000b3c:	2b4f      	cmp	r3, #79	; 0x4f
 8000b3e:	dc10      	bgt.n	8000b62 <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 8000b40:	79bb      	ldrb	r3, [r7, #6]
 8000b42:	461a      	mov	r2, r3
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4413      	add	r3, r2
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	b25b      	sxtb	r3, r3
 8000b54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b58:	b25b      	sxtb	r3, r3
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ffb7 	bl	8000ad0 <lcd_command>
	}
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff fb34 	bl	80001e0 <strlen>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 8000b7c:	e006      	b.n	8000b8c <lcd_print+0x22>
		lcd_data(*string++);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ffb6 	bl	8000af8 <lcd_data>
	while (size--){
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	1e5a      	subs	r2, r3, #1
 8000b90:	60fa      	str	r2, [r7, #12]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1f3      	bne.n	8000b7e <lcd_print+0x14>
	}
}
 8000b96:	bf00      	nop
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <lcd_println>:

void lcd_println(char string[], uint8_t row){
 8000ba0:	b5b0      	push	{r4, r5, r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <lcd_println+0x6c>)
 8000bae:	f107 0408 	add.w	r4, r7, #8
 8000bb2:	461d      	mov	r5, r3
 8000bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb8:	682b      	ldr	r3, [r5, #0]
 8000bba:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff fb0f 	bl	80001e0 <strlen>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	2b10      	cmp	r3, #16
 8000bca:	dd0c      	ble.n	8000be6 <lcd_println+0x46>
		size = 16;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	61fb      	str	r3, [r7, #28]

	while (size--){
 8000bd0:	e009      	b.n	8000be6 <lcd_println+0x46>
		line[size] = string[size];
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	7819      	ldrb	r1, [r3, #0]
 8000bda:	f107 0208 	add.w	r2, r7, #8
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	4413      	add	r3, r2
 8000be2:	460a      	mov	r2, r1
 8000be4:	701a      	strb	r2, [r3, #0]
	while (size--){
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	1e5a      	subs	r2, r3, #1
 8000bea:	61fa      	str	r2, [r7, #28]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1f0      	bne.n	8000bd2 <lcd_println+0x32>
	}
	setCursor(0, row);
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f7ff ff93 	bl	8000b20 <setCursor>
	lcd_print(line);
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ffb3 	bl	8000b6a <lcd_print>
}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c0c:	08005ee4 	.word	0x08005ee4

08000c10 <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff4c 	bl	8000ad0 <lcd_command>
	for (int i = 0; i<8; i++){
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	e009      	b.n	8000c52 <writeCustomChar+0x42>
		lcd_data(map[i]);	
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff56 	bl	8000af8 <lcd_data>
	for (int i = 0; i<8; i++){
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2b07      	cmp	r3, #7
 8000c56:	ddf2      	ble.n	8000c3e <writeCustomChar+0x2e>
	}
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 8000c68:	490a      	ldr	r1, [pc, #40]	; (8000c94 <loadCustomChars+0x30>)
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff ffd0 	bl	8000c10 <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 8000c70:	4909      	ldr	r1, [pc, #36]	; (8000c98 <loadCustomChars+0x34>)
 8000c72:	2002      	movs	r0, #2
 8000c74:	f7ff ffcc 	bl	8000c10 <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 8000c78:	4908      	ldr	r1, [pc, #32]	; (8000c9c <loadCustomChars+0x38>)
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	f7ff ffc8 	bl	8000c10 <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <loadCustomChars+0x3c>)
 8000c82:	2004      	movs	r0, #4
 8000c84:	f7ff ffc4 	bl	8000c10 <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 8000c88:	4906      	ldr	r1, [pc, #24]	; (8000ca4 <loadCustomChars+0x40>)
 8000c8a:	2005      	movs	r0, #5
 8000c8c:	f7ff ffc0 	bl	8000c10 <writeCustomChar>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000000 	.word	0x20000000
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000010 	.word	0x20000010
 8000ca0:	20000018 	.word	0x20000018
 8000ca4:	20000020 	.word	0x20000020

08000ca8 <lcd_drawBar>:

void lcd_drawBar(int value){ //draws a bar using custom characters and spaces
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	setCursor(0,1); //bar is placed in the bottom row
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f7ff ff34 	bl	8000b20 <setCursor>

	if (value>80)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b50      	cmp	r3, #80	; 0x50
 8000cbc:	dd01      	ble.n	8000cc2 <lcd_drawBar+0x1a>
		value = 80;
 8000cbe:	2350      	movs	r3, #80	; 0x50
 8000cc0:	607b      	str	r3, [r7, #4]
	int quotient = value / 5;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a25      	ldr	r2, [pc, #148]	; (8000d5c <lcd_drawBar+0xb4>)
 8000cc6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cca:	1052      	asrs	r2, r2, #1
 8000ccc:	17db      	asrs	r3, r3, #31
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	613b      	str	r3, [r7, #16]
	int modulo = value % 5;
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <lcd_drawBar+0xb4>)
 8000cd6:	fb83 1302 	smull	r1, r3, r3, r2
 8000cda:	1059      	asrs	r1, r3, #1
 8000cdc:	17d3      	asrs	r3, r2, #31
 8000cde:	1ac9      	subs	r1, r1, r3
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	60fb      	str	r3, [r7, #12]
	
	int i = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
	
	while (i<quotient){ //we write the required number of CHAR_5_5
 8000cee:	e007      	b.n	8000d00 <lcd_drawBar+0x58>
		bar[i] = CHAR_5_5;
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <lcd_drawBar+0xb8>)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2205      	movs	r2, #5
 8000cf8:	701a      	strb	r2, [r3, #0]
		i++;
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
	while (i<quotient){ //we write the required number of CHAR_5_5
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dbf3      	blt.n	8000cf0 <lcd_drawBar+0x48>
	}
	if (i < 16){
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2b0f      	cmp	r3, #15
 8000d0c:	dc1b      	bgt.n	8000d46 <lcd_drawBar+0x9e>
	if (modulo == 0) bar[i] = ' '; //then we either place a space
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d105      	bne.n	8000d20 <lcd_drawBar+0x78>
 8000d14:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <lcd_drawBar+0xb8>)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	4413      	add	r3, r2
 8000d1a:	2220      	movs	r2, #32
 8000d1c:	701a      	strb	r2, [r3, #0]
 8000d1e:	e006      	b.n	8000d2e <lcd_drawBar+0x86>
	else {
		bar[i] = CHAR_1_5 + modulo -1; //or the correct partial block
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	b2d9      	uxtb	r1, r3
 8000d24:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <lcd_drawBar+0xb8>)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	4413      	add	r3, r2
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
	}
	i++;
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3301      	adds	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
	}
	while (i<16){ //and we fill the remainder with spaces
 8000d34:	e007      	b.n	8000d46 <lcd_drawBar+0x9e>
		bar[i] = ' ';
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <lcd_drawBar+0xb8>)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	2220      	movs	r2, #32
 8000d3e:	701a      	strb	r2, [r3, #0]
		i++;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	3301      	adds	r3, #1
 8000d44:	617b      	str	r3, [r7, #20]
	while (i<16){ //and we fill the remainder with spaces
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	ddf4      	ble.n	8000d36 <lcd_drawBar+0x8e>
	}
	lcd_print(bar); //finally we write to the LCD
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <lcd_drawBar+0xb8>)
 8000d4e:	f7ff ff0c 	bl	8000b6a <lcd_print>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	66666667 	.word	0x66666667
 8000d60:	200000a4 	.word	0x200000a4

08000d64 <lcd_initialize>:

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 8000d68:	2032      	movs	r0, #50	; 0x32
 8000d6a:	f000 ffaf 	bl	8001ccc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2104      	movs	r1, #4
 8000d72:	4824      	ldr	r0, [pc, #144]	; (8000e04 <lcd_initialize+0xa0>)
 8000d74:	f002 fae0 	bl	8003338 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	4821      	ldr	r0, [pc, #132]	; (8000e04 <lcd_initialize+0xa0>)
 8000d7e:	f002 fadb 	bl	8003338 <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 8000d82:	f7ff fde7 	bl	8000954 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 8000d86:	2003      	movs	r0, #3
 8000d88:	f7ff fe52 	bl	8000a30 <lcd_write4>
	HAL_Delay(5);
 8000d8c:	2005      	movs	r0, #5
 8000d8e:	f000 ff9d 	bl	8001ccc <HAL_Delay>
	lcd_write4(0x03);
 8000d92:	2003      	movs	r0, #3
 8000d94:	f7ff fe4c 	bl	8000a30 <lcd_write4>
	HAL_Delay(5);
 8000d98:	2005      	movs	r0, #5
 8000d9a:	f000 ff97 	bl	8001ccc <HAL_Delay>
	lcd_write4(0x03);
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f7ff fe46 	bl	8000a30 <lcd_write4>
	HAL_Delay(5);
 8000da4:	2005      	movs	r0, #5
 8000da6:	f000 ff91 	bl	8001ccc <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 8000daa:	2002      	movs	r0, #2
 8000dac:	f7ff fe40 	bl	8000a30 <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 8000db0:	2028      	movs	r0, #40	; 0x28
 8000db2:	f7ff fe79 	bl	8000aa8 <lcd_write>
	HAL_Delay(5);
 8000db6:	2005      	movs	r0, #5
 8000db8:	f000 ff88 	bl	8001ccc <HAL_Delay>
	lcd_write(0x08); //display off;
 8000dbc:	2008      	movs	r0, #8
 8000dbe:	f7ff fe73 	bl	8000aa8 <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f7ff fe70 	bl	8000aa8 <lcd_write>
	HAL_Delay(5);
 8000dc8:	2005      	movs	r0, #5
 8000dca:	f000 ff7f 	bl	8001ccc <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 8000dce:	2006      	movs	r0, #6
 8000dd0:	f7ff fe6a 	bl	8000aa8 <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	480b      	ldr	r0, [pc, #44]	; (8000e08 <lcd_initialize+0xa4>)
 8000dda:	f002 faad 	bl	8003338 <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <lcd_initialize+0xa8>)
 8000de0:	220c      	movs	r2, #12
 8000de2:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <lcd_initialize+0xa8>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fe5d 	bl	8000aa8 <lcd_write>
	lcd_write(0x02); //go home
 8000dee:	2002      	movs	r0, #2
 8000df0:	f7ff fe5a 	bl	8000aa8 <lcd_write>
	HAL_Delay(2);
 8000df4:	2002      	movs	r0, #2
 8000df6:	f000 ff69 	bl	8001ccc <HAL_Delay>
	loadCustomChars();
 8000dfa:	f7ff ff33 	bl	8000c64 <loadCustomChars>

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40020400 	.word	0x40020400
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	200000b4 	.word	0x200000b4

08000e10 <lcd_backlight_ON>:

void lcd_backlight_ON(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2110      	movs	r1, #16
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <lcd_backlight_ON+0x14>)
 8000e1a:	f002 fa8d 	bl	8003338 <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40020000 	.word	0x40020000

08000e28 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t pot_val = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a44      	ldr	r2, [pc, #272]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	f040 8082 	bne.w	8000f3e <HAL_TIM_PeriodElapsedCallback+0x116>
		static int8_t parity = 0; //parity bit memorization
		static int8_t tim_on = 0; //status of the timer
		static uint8_t data = 0; //byte to be sent
		uint8_t bit_tx; //bit to transmit

		if (bit_counter == -1) { //start bit
 8000e3a:	4b43      	ldr	r3, [pc, #268]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000e3c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d109      	bne.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x32>
			data = dequeue(&tx_queue); //get the full byte to be sent
 8000e46:	4841      	ldr	r0, [pc, #260]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000e48:	f000 fc28 	bl	800169c <dequeue>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4b3f      	ldr	r3, [pc, #252]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000e52:	701a      	strb	r2, [r3, #0]
			bit_tx = 0; //transmit 0
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	e02f      	b.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x92>
		} else if (bit_counter < 7) { //7 bit of data transmission
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000e5c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e60:	2b06      	cmp	r3, #6
 8000e62:	dc19      	bgt.n	8000e98 <HAL_TIM_PeriodElapsedCallback+0x70>
			bit_tx = data & 0b00000001; //extract first bit
 8000e64:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
			data = data >> 1; //shift data for next transmission
 8000e6e:	4b38      	ldr	r3, [pc, #224]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	085b      	lsrs	r3, r3, #1
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000e78:	701a      	strb	r2, [r3, #0]
			if (bit_tx)
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d01c      	beq.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x92>
				parity = !parity; //calculate parity (if a 1 is found switch parity)
 8000e80:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000e82:	f993 3000 	ldrsb.w	r3, [r3]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	bf0c      	ite	eq
 8000e8a:	2301      	moveq	r3, #1
 8000e8c:	2300      	movne	r3, #0
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	b25a      	sxtb	r2, r3
 8000e92:	4b30      	ldr	r3, [pc, #192]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	e010      	b.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x92>
		} else if (bit_counter == 7) { //partity bit transmission
 8000e98:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000e9a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e9e:	2b07      	cmp	r3, #7
 8000ea0:	d104      	bne.n	8000eac <HAL_TIM_PeriodElapsedCallback+0x84>
			bit_tx = parity;
 8000ea2:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000ea4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	e006      	b.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x92>
		} else if (bit_counter == 8) { //last transmission
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000eae:	f993 3000 	ldrsb.w	r3, [r3]
 8000eb2:	2b08      	cmp	r3, #8
 8000eb4:	d101      	bne.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x92>
			bit_tx = 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]
		}

		//transmission section
		if (bit_tx && tim_on) { //to transmit 1 turn off PWM
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00c      	beq.n	8000eda <HAL_TIM_PeriodElapsedCallback+0xb2>
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000ec2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d007      	beq.n	8000eda <HAL_TIM_PeriodElapsedCallback+0xb2>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000eca:	2108      	movs	r1, #8
 8000ecc:	4823      	ldr	r0, [pc, #140]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ece:	f003 f8cf 	bl	8004070 <HAL_TIM_PWM_Stop>
			tim_on = 0;
 8000ed2:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	e00e      	b.n	8000ef8 <HAL_TIM_PeriodElapsedCallback+0xd0>

		} else if (!bit_tx && !tim_on) { //to transmit 0 turn on PWM
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10b      	bne.n	8000ef8 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000ee2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d106      	bne.n	8000ef8 <HAL_TIM_PeriodElapsedCallback+0xd0>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000eea:	2108      	movs	r1, #8
 8000eec:	481b      	ldr	r0, [pc, #108]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000eee:	f003 f80f 	bl	8003f10 <HAL_TIM_PWM_Start>
			tim_on = 1;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
		}

		if (bit_counter >= 8) { //reset variables for next transmission
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000efa:	f993 3000 	ldrsb.w	r3, [r3]
 8000efe:	2b07      	cmp	r3, #7
 8000f00:	dd12      	ble.n	8000f28 <HAL_TIM_PeriodElapsedCallback+0x100>
			bit_counter = -1;
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f04:	22ff      	movs	r2, #255	; 0xff
 8000f06:	701a      	strb	r2, [r3, #0]
			parity = 0;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
			if (isEmpty(&tx_queue)){ //if there is nothing more to transmit stop timer
 8000f0e:	480f      	ldr	r0, [pc, #60]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f10:	f000 fb84 	bl	800161c <isEmpty>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d010      	beq.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0x114>
				HAL_TIM_Base_Stop_IT(&htim1);
 8000f1a:	480a      	ldr	r0, [pc, #40]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f1c:	f002 ff70 	bl	8003e00 <HAL_TIM_Base_Stop_IT>
				transmitting = 0;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
			}
			return;
 8000f26:	e009      	b.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0x114>
		}

		bit_counter++;
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	3301      	adds	r3, #1
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	b25a      	sxtb	r2, r3
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f38:	701a      	strb	r2, [r3, #0]
 8000f3a:	e000      	b.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0x116>
			return;
 8000f3c:	bf00      	nop


	}
}
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000560 	.word	0x20000560
 8000f48:	20000028 	.word	0x20000028
 8000f4c:	2000067c 	.word	0x2000067c
 8000f50:	200006f1 	.word	0x200006f1
 8000f54:	200006f2 	.word	0x200006f2
 8000f58:	200006f3 	.word	0x200006f3
 8000f5c:	200005a8 	.word	0x200005a8
 8000f60:	200006ec 	.word	0x200006ec

08000f64 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	PRINT("Pot: %d", pot_val);
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <HAL_ADC_ConvCpltCallback+0x94>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4a22      	ldr	r2, [pc, #136]	; (8000ffc <HAL_ADC_ConvCpltCallback+0x98>)
 8000f72:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8000f76:	4822      	ldr	r0, [pc, #136]	; (8001000 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000f78:	f004 faf0 	bl	800555c <sniprintf>
 8000f7c:	4820      	ldr	r0, [pc, #128]	; (8001000 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000f7e:	f7ff f92f 	bl	80001e0 <strlen>
 8000f82:	4603      	mov	r3, r0
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	2364      	movs	r3, #100	; 0x64
 8000f88:	491d      	ldr	r1, [pc, #116]	; (8001000 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000f8a:	481e      	ldr	r0, [pc, #120]	; (8001004 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000f8c:	f003 ff29 	bl	8004de2 <HAL_UART_Transmit>
	lcd_println(aux_str, 0);
 8000f90:	2100      	movs	r1, #0
 8000f92:	481b      	ldr	r0, [pc, #108]	; (8001000 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000f94:	f7ff fe04 	bl	8000ba0 <lcd_println>
	lcd_drawBar(round((float)pot_val/255*80));
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <HAL_ADC_ConvCpltCallback+0x94>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fa4:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001008 <HAL_ADC_ConvCpltCallback+0xa4>
 8000fa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fac:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800100c <HAL_ADC_ConvCpltCallback+0xa8>
 8000fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb4:	ee17 0a90 	vmov	r0, s15
 8000fb8:	f7ff face 	bl	8000558 <__aeabi_f2d>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	ec43 2b10 	vmov	d0, r2, r3
 8000fc4:	f004 fa82 	bl	80054cc <round>
 8000fc8:	ec53 2b10 	vmov	r2, r3, d0
 8000fcc:	4610      	mov	r0, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f7ff fb1a 	bl	8000608 <__aeabi_d2iz>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fe66 	bl	8000ca8 <lcd_drawBar>
	transmit(pot_val);
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_ADC_ConvCpltCallback+0x94>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fb87 	bl	80016f4 <transmit>

	HAL_ADC_Start_DMA(&hadc1, &pot_val, 1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4903      	ldr	r1, [pc, #12]	; (8000ff8 <HAL_ADC_ConvCpltCallback+0x94>)
 8000fea:	4809      	ldr	r0, [pc, #36]	; (8001010 <HAL_ADC_ConvCpltCallback+0xac>)
 8000fec:	f000 ffe6 	bl	8001fbc <HAL_ADC_Start_DMA>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200006f0 	.word	0x200006f0
 8000ffc:	08005ef8 	.word	0x08005ef8
 8001000:	200000b8 	.word	0x200000b8
 8001004:	20000638 	.word	0x20000638
 8001008:	437f0000 	.word	0x437f0000
 800100c:	42a00000 	.word	0x42a00000
 8001010:	200004b8 	.word	0x200004b8

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	init_queue(&tx_queue);
 8001018:	4810      	ldr	r0, [pc, #64]	; (800105c <main+0x48>)
 800101a:	f000 fadb 	bl	80015d4 <init_queue>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101e:	f000 fde3 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001022:	f000 f823 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001026:	f000 fa3b 	bl	80014a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800102a:	f000 fa19 	bl	8001460 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800102e:	f000 f9ed 	bl	800140c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001032:	f000 f929 	bl	8001288 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001036:	f000 f99b 	bl	8001370 <MX_TIM3_Init>
  MX_TIM1_Init();
 800103a:	f000 f8d5 	bl	80011e8 <MX_TIM1_Init>
  MX_ADC1_Init();
 800103e:	f000 f881 	bl	8001144 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  lcd_initialize();
 8001042:	f7ff fe8f 	bl	8000d64 <lcd_initialize>
  lcd_backlight_ON();
 8001046:	f7ff fee3 	bl	8000e10 <lcd_backlight_ON>
  HAL_TIM_Base_Start_IT(&htim3);
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <main+0x4c>)
 800104c:	f002 fe76 	bl	8003d3c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, &pot_val, 1);
 8001050:	2201      	movs	r2, #1
 8001052:	4904      	ldr	r1, [pc, #16]	; (8001064 <main+0x50>)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <main+0x54>)
 8001056:	f000 ffb1 	bl	8001fbc <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800105a:	e7fe      	b.n	800105a <main+0x46>
 800105c:	2000067c 	.word	0x2000067c
 8001060:	200005f0 	.word	0x200005f0
 8001064:	200006f0 	.word	0x200006f0
 8001068:	200004b8 	.word	0x200004b8

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	; 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f004 faa2 	bl	80055c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b29      	ldr	r3, [pc, #164]	; (800113c <SystemClock_Config+0xd0>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a28      	ldr	r2, [pc, #160]	; (800113c <SystemClock_Config+0xd0>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b26      	ldr	r3, [pc, #152]	; (800113c <SystemClock_Config+0xd0>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <SystemClock_Config+0xd4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010b8:	4a21      	ldr	r2, [pc, #132]	; (8001140 <SystemClock_Config+0xd4>)
 80010ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <SystemClock_Config+0xd4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010cc:	2302      	movs	r3, #2
 80010ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d4:	2310      	movs	r3, #16
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d8:	2302      	movs	r3, #2
 80010da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010dc:	2300      	movs	r3, #0
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010e0:	2310      	movs	r3, #16
 80010e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010ea:	2304      	movs	r3, #4
 80010ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ee:	2307      	movs	r3, #7
 80010f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 f938 	bl	800336c <HAL_RCC_OscConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001102:	f000 fb15 	bl	8001730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001106:	230f      	movs	r3, #15
 8001108:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110a:	2302      	movs	r3, #2
 800110c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001116:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2102      	movs	r1, #2
 8001122:	4618      	mov	r0, r3
 8001124:	f002 fb9a 	bl	800385c <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800112e:	f000 faff 	bl	8001730 <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3750      	adds	r7, #80	; 0x50
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <MX_ADC1_Init+0x9c>)
 8001158:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <MX_ADC1_Init+0xa0>)
 800115a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <MX_ADC1_Init+0x9c>)
 800115e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001162:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <MX_ADC1_Init+0x9c>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_ADC1_Init+0x9c>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_ADC1_Init+0x9c>)
 8001172:	2200      	movs	r2, #0
 8001174:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_ADC1_Init+0x9c>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_ADC1_Init+0x9c>)
 8001180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001184:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_ADC1_Init+0x9c>)
 8001188:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_ADC1_Init+0x9c>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_ADC1_Init+0x9c>)
 8001196:	2201      	movs	r2, #1
 8001198:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_ADC1_Init+0x9c>)
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_ADC1_Init+0x9c>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <MX_ADC1_Init+0x9c>)
 80011aa:	f000 fdb3 	bl	8001d14 <HAL_ADC_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80011b4:	f000 fabc 	bl	8001730 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011c0:	2307      	movs	r3, #7
 80011c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_ADC1_Init+0x9c>)
 80011ca:	f001 f805 	bl	80021d8 <HAL_ADC_ConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011d4:	f000 faac 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200004b8 	.word	0x200004b8
 80011e4:	40012000 	.word	0x40012000

080011e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	463b      	mov	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_TIM1_Init+0x98>)
 8001206:	4a1f      	ldr	r2, [pc, #124]	; (8001284 <MX_TIM1_Init+0x9c>)
 8001208:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 69;
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_TIM1_Init+0x98>)
 800120c:	2245      	movs	r2, #69	; 0x45
 800120e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <MX_TIM1_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_TIM1_Init+0x98>)
 8001218:	f240 12f3 	movw	r2, #499	; 0x1f3
 800121c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_TIM1_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_TIM1_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <MX_TIM1_Init+0x98>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001230:	4813      	ldr	r0, [pc, #76]	; (8001280 <MX_TIM1_Init+0x98>)
 8001232:	f002 fd33 	bl	8003c9c <HAL_TIM_Base_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800123c:	f000 fa78 	bl	8001730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001244:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	4619      	mov	r1, r3
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <MX_TIM1_Init+0x98>)
 800124e:	f003 f93d 	bl	80044cc <HAL_TIM_ConfigClockSource>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001258:	f000 fa6a 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_TIM1_Init+0x98>)
 800126a:	f003 fceb 	bl	8004c44 <HAL_TIMEx_MasterConfigSynchronization>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001274:	f000 fa5c 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000560 	.word	0x20000560
 8001284:	40010000 	.word	0x40010000

08001288 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08e      	sub	sp, #56	; 0x38
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
 80012b4:	615a      	str	r2, [r3, #20]
 80012b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b8:	4b2c      	ldr	r3, [pc, #176]	; (800136c <MX_TIM2_Init+0xe4>)
 80012ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 80012c0:	4b2a      	ldr	r3, [pc, #168]	; (800136c <MX_TIM2_Init+0xe4>)
 80012c2:	2223      	movs	r2, #35	; 0x23
 80012c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c6:	4b29      	ldr	r3, [pc, #164]	; (800136c <MX_TIM2_Init+0xe4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60;
 80012cc:	4b27      	ldr	r3, [pc, #156]	; (800136c <MX_TIM2_Init+0xe4>)
 80012ce:	223c      	movs	r2, #60	; 0x3c
 80012d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <MX_TIM2_Init+0xe4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <MX_TIM2_Init+0xe4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012de:	4823      	ldr	r0, [pc, #140]	; (800136c <MX_TIM2_Init+0xe4>)
 80012e0:	f002 fcdc 	bl	8003c9c <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80012ea:	f000 fa21 	bl	8001730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f8:	4619      	mov	r1, r3
 80012fa:	481c      	ldr	r0, [pc, #112]	; (800136c <MX_TIM2_Init+0xe4>)
 80012fc:	f003 f8e6 	bl	80044cc <HAL_TIM_ConfigClockSource>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001306:	f000 fa13 	bl	8001730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800130a:	4818      	ldr	r0, [pc, #96]	; (800136c <MX_TIM2_Init+0xe4>)
 800130c:	f002 fda7 	bl	8003e5e <HAL_TIM_PWM_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001316:	f000 fa0b 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	4619      	mov	r1, r3
 8001328:	4810      	ldr	r0, [pc, #64]	; (800136c <MX_TIM2_Init+0xe4>)
 800132a:	f003 fc8b 	bl	8004c44 <HAL_TIMEx_MasterConfigSynchronization>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001334:	f000 f9fc 	bl	8001730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001338:	2360      	movs	r3, #96	; 0x60
 800133a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30;
 800133c:	231e      	movs	r3, #30
 800133e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2208      	movs	r2, #8
 800134c:	4619      	mov	r1, r3
 800134e:	4807      	ldr	r0, [pc, #28]	; (800136c <MX_TIM2_Init+0xe4>)
 8001350:	f002 fffa 	bl	8004348 <HAL_TIM_PWM_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800135a:	f000 f9e9 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800135e:	4803      	ldr	r0, [pc, #12]	; (800136c <MX_TIM2_Init+0xe4>)
 8001360:	f000 faf4 	bl	800194c <HAL_TIM_MspPostInit>

}
 8001364:	bf00      	nop
 8001366:	3738      	adds	r7, #56	; 0x38
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200005a8 	.word	0x200005a8

08001370 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001384:	463b      	mov	r3, r7
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <MX_TIM3_Init+0x94>)
 800138e:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <MX_TIM3_Init+0x98>)
 8001390:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001392:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_TIM3_Init+0x94>)
 8001394:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001398:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_TIM3_Init+0x94>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_TIM3_Init+0x94>)
 80013a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80013a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_TIM3_Init+0x94>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <MX_TIM3_Init+0x94>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013b4:	4813      	ldr	r0, [pc, #76]	; (8001404 <MX_TIM3_Init+0x94>)
 80013b6:	f002 fc71 	bl	8003c9c <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80013c0:	f000 f9b6 	bl	8001730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	4619      	mov	r1, r3
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <MX_TIM3_Init+0x94>)
 80013d2:	f003 f87b 	bl	80044cc <HAL_TIM_ConfigClockSource>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80013dc:	f000 f9a8 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013e0:	2320      	movs	r3, #32
 80013e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_TIM3_Init+0x94>)
 80013ee:	f003 fc29 	bl	8004c44 <HAL_TIMEx_MasterConfigSynchronization>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013f8:	f000 f99a 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200005f0 	.word	0x200005f0
 8001408:	40000400 	.word	0x40000400

0800140c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <MX_USART2_UART_Init+0x50>)
 8001414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800141c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001444:	f003 fc80 	bl	8004d48 <HAL_UART_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800144e:	f000 f96f 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000638 	.word	0x20000638
 800145c:	40004400 	.word	0x40004400

08001460 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_DMA_Init+0x3c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a0b      	ldr	r2, [pc, #44]	; (800149c <MX_DMA_Init+0x3c>)
 8001470:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_DMA_Init+0x3c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	2038      	movs	r0, #56	; 0x38
 8001488:	f001 fa2b 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800148c:	2038      	movs	r0, #56	; 0x38
 800148e:	f001 fa44 	bl	800291a <HAL_NVIC_EnableIRQ>

}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b42      	ldr	r3, [pc, #264]	; (80015c4 <MX_GPIO_Init+0x124>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a41      	ldr	r2, [pc, #260]	; (80015c4 <MX_GPIO_Init+0x124>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <MX_GPIO_Init+0x124>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <MX_GPIO_Init+0x124>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a3a      	ldr	r2, [pc, #232]	; (80015c4 <MX_GPIO_Init+0x124>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <MX_GPIO_Init+0x124>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <MX_GPIO_Init+0x124>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a33      	ldr	r2, [pc, #204]	; (80015c4 <MX_GPIO_Init+0x124>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <MX_GPIO_Init+0x124>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <MX_GPIO_Init+0x124>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a2c      	ldr	r2, [pc, #176]	; (80015c4 <MX_GPIO_Init+0x124>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <MX_GPIO_Init+0x124>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2130      	movs	r1, #48	; 0x30
 800152a:	4827      	ldr	r0, [pc, #156]	; (80015c8 <MX_GPIO_Init+0x128>)
 800152c:	f001 ff04 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001530:	2200      	movs	r2, #0
 8001532:	f24f 0106 	movw	r1, #61446	; 0xf006
 8001536:	4825      	ldr	r0, [pc, #148]	; (80015cc <MX_GPIO_Init+0x12c>)
 8001538:	f001 fefe 	bl	8003338 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001542:	4823      	ldr	r0, [pc, #140]	; (80015d0 <MX_GPIO_Init+0x130>)
 8001544:	f001 fef8 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12;
 8001548:	f243 030c 	movw	r3, #12300	; 0x300c
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	481c      	ldr	r0, [pc, #112]	; (80015d0 <MX_GPIO_Init+0x130>)
 800155e:	f001 fd67 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001562:	2330      	movs	r3, #48	; 0x30
 8001564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4813      	ldr	r0, [pc, #76]	; (80015c8 <MX_GPIO_Init+0x128>)
 800157a:	f001 fd59 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800157e:	f24f 0306 	movw	r3, #61446	; 0xf006
 8001582:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <MX_GPIO_Init+0x12c>)
 8001598:	f001 fd4a 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800159c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_GPIO_Init+0x130>)
 80015b6:	f001 fd3b 	bl	8003030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40020800 	.word	0x40020800

080015d4 <init_queue>:

/* USER CODE BEGIN 4 */
void init_queue(struct Queue* q){
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	q->front = 0;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	665a      	str	r2, [r3, #100]	; 0x64
	q->rear = QUEUE_SIZE - 1;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2263      	movs	r2, #99	; 0x63
 80015e6:	669a      	str	r2, [r3, #104]	; 0x68
	q->size = 0;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <isFull>:
int isFull(struct Queue *queue) {
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
	return queue->size == QUEUE_SIZE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	bf0c      	ite	eq
 800160a:	2301      	moveq	r3, #1
 800160c:	2300      	movne	r3, #0
 800160e:	b2db      	uxtb	r3, r3
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <isEmpty>:

int isEmpty(struct Queue *queue) {
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	return (queue->size == 0);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf0c      	ite	eq
 800162c:	2301      	moveq	r3, #1
 800162e:	2300      	movne	r3, #0
 8001630:	b2db      	uxtb	r3, r3
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <enqueue>:

int enqueue(struct Queue *queue, uint8_t item) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
	if (isFull(queue))
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ffd4 	bl	80015fa <isFull>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <enqueue+0x1c>
		return 0;
 8001658:	2300      	movs	r3, #0
 800165a:	e019      	b.n	8001690 <enqueue+0x50>
	queue->rear = (queue->rear + 1) % QUEUE_SIZE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <enqueue+0x58>)
 8001664:	fb83 1302 	smull	r1, r3, r3, r2
 8001668:	1159      	asrs	r1, r3, #5
 800166a:	17d3      	asrs	r3, r2, #31
 800166c:	1acb      	subs	r3, r1, r3
 800166e:	2164      	movs	r1, #100	; 0x64
 8001670:	fb01 f303 	mul.w	r3, r1, r3
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6693      	str	r3, [r2, #104]	; 0x68
	queue->items[queue->rear] = item;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	78f9      	ldrb	r1, [r7, #3]
 8001682:	54d1      	strb	r1, [r2, r3]
	queue->size = queue->size + 1;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	66da      	str	r2, [r3, #108]	; 0x6c
	return 1;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	51eb851f 	.word	0x51eb851f

0800169c <dequeue>:

uint8_t dequeue(struct Queue *queue) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	if (isEmpty(queue))
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ffb9 	bl	800161c <isEmpty>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <dequeue+0x18>
		Error_Handler(); //if dequeue with empty queue return error!
 80016b0:	f000 f83e 	bl	8001730 <Error_Handler>

	uint8_t item = queue->items[queue->front];
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	5cd3      	ldrb	r3, [r2, r3]
 80016bc:	73fb      	strb	r3, [r7, #15]
	queue->front = (queue->front + 1) % QUEUE_SIZE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <dequeue+0x54>)
 80016c6:	fb83 1302 	smull	r1, r3, r3, r2
 80016ca:	1159      	asrs	r1, r3, #5
 80016cc:	17d3      	asrs	r3, r2, #31
 80016ce:	1acb      	subs	r3, r1, r3
 80016d0:	2164      	movs	r1, #100	; 0x64
 80016d2:	fb01 f303 	mul.w	r3, r1, r3
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6653      	str	r3, [r2, #100]	; 0x64
	queue->size = queue->size - 1;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016e0:	1e5a      	subs	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	66da      	str	r2, [r3, #108]	; 0x6c
	return item;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	51eb851f 	.word	0x51eb851f

080016f4 <transmit>:
{
    if (isEmpty(queue)) Error_Handler();
    return &(queue->items[queue->front]);
}

void transmit(uint8_t value) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
	enqueue(&tx_queue, value);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	4619      	mov	r1, r3
 8001702:	4808      	ldr	r0, [pc, #32]	; (8001724 <transmit+0x30>)
 8001704:	f7ff ff9c 	bl	8001640 <enqueue>
	if(!transmitting){
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <transmit+0x34>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d105      	bne.n	800171c <transmit+0x28>
		HAL_TIM_Base_Start_IT(&htim1);
 8001710:	4806      	ldr	r0, [pc, #24]	; (800172c <transmit+0x38>)
 8001712:	f002 fb13 	bl	8003d3c <HAL_TIM_Base_Start_IT>
		transmitting = 1;
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <transmit+0x34>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
	}
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	2000067c 	.word	0x2000067c
 8001728:	200006ec 	.word	0x200006ec
 800172c:	20000560 	.word	0x20000560

08001730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001738:	e7fe      	b.n	8001738 <Error_Handler+0x8>
	...

0800173c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_MspInit+0x4c>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <HAL_MspInit+0x4c>)
 800174c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <HAL_MspInit+0x4c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_MspInit+0x4c>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a08      	ldr	r2, [pc, #32]	; (8001788 <HAL_MspInit+0x4c>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_MspInit+0x4c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800177a:	2007      	movs	r0, #7
 800177c:	f001 f8a6 	bl	80028cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40023800 	.word	0x40023800

0800178c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a32      	ldr	r2, [pc, #200]	; (8001874 <HAL_ADC_MspInit+0xe8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d15e      	bne.n	800186c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b31      	ldr	r3, [pc, #196]	; (8001878 <HAL_ADC_MspInit+0xec>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	4a30      	ldr	r2, [pc, #192]	; (8001878 <HAL_ADC_MspInit+0xec>)
 80017b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017bc:	6453      	str	r3, [r2, #68]	; 0x44
 80017be:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <HAL_ADC_MspInit+0xec>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <HAL_ADC_MspInit+0xec>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a29      	ldr	r2, [pc, #164]	; (8001878 <HAL_ADC_MspInit+0xec>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_ADC_MspInit+0xec>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017e6:	2302      	movs	r3, #2
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ea:	2303      	movs	r3, #3
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	4820      	ldr	r0, [pc, #128]	; (800187c <HAL_ADC_MspInit+0xf0>)
 80017fa:	f001 fc19 	bl	8003030 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_ADC_MspInit+0xf4>)
 8001800:	4a20      	ldr	r2, [pc, #128]	; (8001884 <HAL_ADC_MspInit+0xf8>)
 8001802:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001804:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <HAL_ADC_MspInit+0xf4>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_ADC_MspInit+0xf4>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_ADC_MspInit+0xf4>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_ADC_MspInit+0xf4>)
 8001818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800181c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <HAL_ADC_MspInit+0xf4>)
 8001820:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001824:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <HAL_ADC_MspInit+0xf4>)
 8001828:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <HAL_ADC_MspInit+0xf4>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_ADC_MspInit+0xf4>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_ADC_MspInit+0xf4>)
 800183c:	2200      	movs	r2, #0
 800183e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001840:	480f      	ldr	r0, [pc, #60]	; (8001880 <HAL_ADC_MspInit+0xf4>)
 8001842:	f001 f885 	bl	8002950 <HAL_DMA_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800184c:	f7ff ff70 	bl	8001730 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <HAL_ADC_MspInit+0xf4>)
 8001854:	639a      	str	r2, [r3, #56]	; 0x38
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <HAL_ADC_MspInit+0xf4>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	2012      	movs	r0, #18
 8001862:	f001 f83e 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001866:	2012      	movs	r0, #18
 8001868:	f001 f857 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	; 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40012000 	.word	0x40012000
 8001878:	40023800 	.word	0x40023800
 800187c:	40020000 	.word	0x40020000
 8001880:	20000500 	.word	0x20000500
 8001884:	40026410 	.word	0x40026410

08001888 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a2a      	ldr	r2, [pc, #168]	; (8001940 <HAL_TIM_Base_MspInit+0xb8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d116      	bne.n	80018c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	4b29      	ldr	r3, [pc, #164]	; (8001944 <HAL_TIM_Base_MspInit+0xbc>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a28      	ldr	r2, [pc, #160]	; (8001944 <HAL_TIM_Base_MspInit+0xbc>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <HAL_TIM_Base_MspInit+0xbc>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	2019      	movs	r0, #25
 80018bc:	f001 f811 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018c0:	2019      	movs	r0, #25
 80018c2:	f001 f82a 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018c6:	e036      	b.n	8001936 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d0:	d116      	bne.n	8001900 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_TIM_Base_MspInit+0xbc>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <HAL_TIM_Base_MspInit+0xbc>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_TIM_Base_MspInit+0xbc>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	201c      	movs	r0, #28
 80018f4:	f000 fff5 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018f8:	201c      	movs	r0, #28
 80018fa:	f001 f80e 	bl	800291a <HAL_NVIC_EnableIRQ>
}
 80018fe:	e01a      	b.n	8001936 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a10      	ldr	r2, [pc, #64]	; (8001948 <HAL_TIM_Base_MspInit+0xc0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d115      	bne.n	8001936 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_TIM_Base_MspInit+0xbc>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a0c      	ldr	r2, [pc, #48]	; (8001944 <HAL_TIM_Base_MspInit+0xbc>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_TIM_Base_MspInit+0xbc>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	201d      	movs	r0, #29
 800192c:	f000 ffd9 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001930:	201d      	movs	r0, #29
 8001932:	f000 fff2 	bl	800291a <HAL_NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40010000 	.word	0x40010000
 8001944:	40023800 	.word	0x40023800
 8001948:	40000400 	.word	0x40000400

0800194c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196c:	d11e      	bne.n	80019ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_TIM_MspPostInit+0x68>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <HAL_TIM_MspPostInit+0x68>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_TIM_MspPostInit+0x68>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800198a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800198e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800199c:	2301      	movs	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	4619      	mov	r1, r3
 80019a6:	4804      	ldr	r0, [pc, #16]	; (80019b8 <HAL_TIM_MspPostInit+0x6c>)
 80019a8:	f001 fb42 	bl	8003030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020400 	.word	0x40020400

080019bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a19      	ldr	r2, [pc, #100]	; (8001a40 <HAL_UART_MspInit+0x84>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d12b      	bne.n	8001a36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_UART_MspInit+0x88>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <HAL_UART_MspInit+0x88>)
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_UART_MspInit+0x88>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_UART_MspInit+0x88>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_UART_MspInit+0x88>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_UART_MspInit+0x88>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a16:	230c      	movs	r3, #12
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a26:	2307      	movs	r3, #7
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <HAL_UART_MspInit+0x8c>)
 8001a32:	f001 fafd 	bl	8003030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	; 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40004400 	.word	0x40004400
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020000 	.word	0x40020000

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <NMI_Handler+0x4>

08001a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <MemManage_Handler+0x4>

08001a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <BusFault_Handler+0x4>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <UsageFault_Handler+0x4>

08001a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a98:	f000 f8f8 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <ADC_IRQHandler+0x10>)
 8001aa6:	f000 f978 	bl	8001d9a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200004b8 	.word	0x200004b8

08001ab4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001aba:	f002 fb3d 	bl	8004138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000560 	.word	0x20000560

08001ac8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <TIM2_IRQHandler+0x10>)
 8001ace:	f002 fb33 	bl	8004138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200005a8 	.word	0x200005a8

08001adc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <TIM3_IRQHandler+0x10>)
 8001ae2:	f002 fb29 	bl	8004138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200005f0 	.word	0x200005f0

08001af0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <DMA2_Stream0_IRQHandler+0x10>)
 8001af6:	f001 f831 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000500 	.word	0x20000500

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f003 fd4e 	bl	80055d4 <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20018000 	.word	0x20018000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	200006f4 	.word	0x200006f4
 8001b6c:	20000848 	.word	0x20000848

08001b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <SystemInit+0x20>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <SystemInit+0x20>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b9a:	490e      	ldr	r1, [pc, #56]	; (8001bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bb0:	4c0b      	ldr	r4, [pc, #44]	; (8001be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bbe:	f7ff ffd7 	bl	8001b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f003 fd0d 	bl	80055e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7ff fa25 	bl	8001014 <main>
  bx  lr    
 8001bca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001bd8:	08005f64 	.word	0x08005f64
  ldr r2, =_sbss
 8001bdc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001be0:	20000844 	.word	0x20000844

08001be4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <DMA1_Stream0_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <HAL_Init+0x40>)
 8001bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_Init+0x40>)
 8001bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_Init+0x40>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 fe5b 	bl	80028cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f000 f808 	bl	8001c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1c:	f7ff fd8e 	bl	800173c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_InitTick+0x54>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_InitTick+0x58>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fe73 	bl	8002936 <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f000 fe3b 	bl	80028e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <HAL_InitTick+0x5c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2000002c 	.word	0x2000002c
 8001c84:	20000034 	.word	0x20000034
 8001c88:	20000030 	.word	0x20000030

08001c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_IncTick+0x20>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000034 	.word	0x20000034
 8001cb0:	200006f8 	.word	0x200006f8

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	200006f8 	.word	0x200006f8

08001ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff ffee 	bl	8001cb4 <HAL_GetTick>
 8001cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d005      	beq.n	8001cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_Delay+0x44>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cf2:	bf00      	nop
 8001cf4:	f7ff ffde 	bl	8001cb4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d8f7      	bhi.n	8001cf4 <HAL_Delay+0x28>
  {
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000034 	.word	0x20000034

08001d14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e033      	b.n	8001d92 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fd2a 	bl	800178c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d118      	bne.n	8001d84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d5a:	f023 0302 	bic.w	r3, r3, #2
 8001d5e:	f043 0202 	orr.w	r2, r3, #2
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fb58 	bl	800241c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f023 0303 	bic.w	r3, r3, #3
 8001d7a:	f043 0201 	orr.w	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
 8001d82:	e001      	b.n	8001d88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d049      	beq.n	8001e64 <HAL_ADC_IRQHandler+0xca>
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d046      	beq.n	8001e64 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d105      	bne.n	8001dee <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d12b      	bne.n	8001e54 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d127      	bne.n	8001e54 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d006      	beq.n	8001e20 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d119      	bne.n	8001e54 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0220 	bic.w	r2, r2, #32
 8001e2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d105      	bne.n	8001e54 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f043 0201 	orr.w	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff f885 	bl	8000f64 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f06f 0212 	mvn.w	r2, #18
 8001e62:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e72:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d057      	beq.n	8001f2a <HAL_ADC_IRQHandler+0x190>
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d054      	beq.n	8001f2a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d105      	bne.n	8001e98 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d139      	bne.n	8001f1a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d006      	beq.n	8001ec2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d12b      	bne.n	8001f1a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d124      	bne.n	8001f1a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d11d      	bne.n	8001f1a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d119      	bne.n	8001f1a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d105      	bne.n	8001f1a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fbfc 	bl	8002718 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 020c 	mvn.w	r2, #12
 8001f28:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f38:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d017      	beq.n	8001f70 <HAL_ADC_IRQHandler+0x1d6>
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d014      	beq.n	8001f70 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d10d      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f925 	bl	80021b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f06f 0201 	mvn.w	r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f7e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d015      	beq.n	8001fb2 <HAL_ADC_IRQHandler+0x218>
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d012      	beq.n	8001fb2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	f043 0202 	orr.w	r2, r3, #2
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0220 	mvn.w	r2, #32
 8001fa0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f90e 	bl	80021c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0220 	mvn.w	r2, #32
 8001fb0:	601a      	str	r2, [r3, #0]
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Start_DMA+0x1e>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e0ce      	b.n	8002178 <HAL_ADC_Start_DMA+0x1bc>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d018      	beq.n	8002022 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002000:	4b5f      	ldr	r3, [pc, #380]	; (8002180 <HAL_ADC_Start_DMA+0x1c4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a5f      	ldr	r2, [pc, #380]	; (8002184 <HAL_ADC_Start_DMA+0x1c8>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0c9a      	lsrs	r2, r3, #18
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002014:	e002      	b.n	800201c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	3b01      	subs	r3, #1
 800201a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f9      	bne.n	8002016 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002030:	d107      	bne.n	8002042 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002040:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b01      	cmp	r3, #1
 800204e:	f040 8086 	bne.w	800215e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800207c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002090:	d106      	bne.n	80020a0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f023 0206 	bic.w	r2, r3, #6
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
 800209e:	e002      	b.n	80020a6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ae:	4b36      	ldr	r3, [pc, #216]	; (8002188 <HAL_ADC_Start_DMA+0x1cc>)
 80020b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b6:	4a35      	ldr	r2, [pc, #212]	; (800218c <HAL_ADC_Start_DMA+0x1d0>)
 80020b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	4a34      	ldr	r2, [pc, #208]	; (8002190 <HAL_ADC_Start_DMA+0x1d4>)
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	4a33      	ldr	r2, [pc, #204]	; (8002194 <HAL_ADC_Start_DMA+0x1d8>)
 80020c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80020e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	334c      	adds	r3, #76	; 0x4c
 80020fe:	4619      	mov	r1, r3
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f000 fcd2 	bl	8002aac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10f      	bne.n	8002134 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d129      	bne.n	8002176 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	e020      	b.n	8002176 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a17      	ldr	r2, [pc, #92]	; (8002198 <HAL_ADC_Start_DMA+0x1dc>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d11b      	bne.n	8002176 <HAL_ADC_Start_DMA+0x1ba>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d114      	bne.n	8002176 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	e00b      	b.n	8002176 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f043 0210 	orr.w	r2, r3, #16
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000002c 	.word	0x2000002c
 8002184:	431bde83 	.word	0x431bde83
 8002188:	40012300 	.word	0x40012300
 800218c:	08002615 	.word	0x08002615
 8002190:	080026cf 	.word	0x080026cf
 8002194:	080026eb 	.word	0x080026eb
 8002198:	40012000 	.word	0x40012000

0800219c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1c>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e105      	b.n	8002400 <HAL_ADC_ConfigChannel+0x228>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b09      	cmp	r3, #9
 8002202:	d925      	bls.n	8002250 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68d9      	ldr	r1, [r3, #12]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	4613      	mov	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4413      	add	r3, r2
 8002218:	3b1e      	subs	r3, #30
 800221a:	2207      	movs	r2, #7
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43da      	mvns	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	400a      	ands	r2, r1
 8002228:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68d9      	ldr	r1, [r3, #12]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	4618      	mov	r0, r3
 800223c:	4603      	mov	r3, r0
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4403      	add	r3, r0
 8002242:	3b1e      	subs	r3, #30
 8002244:	409a      	lsls	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	e022      	b.n	8002296 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6919      	ldr	r1, [r3, #16]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	2207      	movs	r2, #7
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	400a      	ands	r2, r1
 8002272:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6919      	ldr	r1, [r3, #16]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	4618      	mov	r0, r3
 8002286:	4603      	mov	r3, r0
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4403      	add	r3, r0
 800228c:	409a      	lsls	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b06      	cmp	r3, #6
 800229c:	d824      	bhi.n	80022e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	3b05      	subs	r3, #5
 80022b0:	221f      	movs	r2, #31
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	400a      	ands	r2, r1
 80022be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	4618      	mov	r0, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	3b05      	subs	r3, #5
 80022da:	fa00 f203 	lsl.w	r2, r0, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	635a      	str	r2, [r3, #52]	; 0x34
 80022e6:	e04c      	b.n	8002382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	d824      	bhi.n	800233a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	3b23      	subs	r3, #35	; 0x23
 8002302:	221f      	movs	r2, #31
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43da      	mvns	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	400a      	ands	r2, r1
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	b29b      	uxth	r3, r3
 800231e:	4618      	mov	r0, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	3b23      	subs	r3, #35	; 0x23
 800232c:	fa00 f203 	lsl.w	r2, r0, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
 8002338:	e023      	b.n	8002382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	3b41      	subs	r3, #65	; 0x41
 800234c:	221f      	movs	r2, #31
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	400a      	ands	r2, r1
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	4618      	mov	r0, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	3b41      	subs	r3, #65	; 0x41
 8002376:	fa00 f203 	lsl.w	r2, r0, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002382:	4b22      	ldr	r3, [pc, #136]	; (800240c <HAL_ADC_ConfigChannel+0x234>)
 8002384:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a21      	ldr	r2, [pc, #132]	; (8002410 <HAL_ADC_ConfigChannel+0x238>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d109      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x1cc>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b12      	cmp	r3, #18
 8002396:	d105      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a19      	ldr	r2, [pc, #100]	; (8002410 <HAL_ADC_ConfigChannel+0x238>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d123      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x21e>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b10      	cmp	r3, #16
 80023b4:	d003      	beq.n	80023be <HAL_ADC_ConfigChannel+0x1e6>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b11      	cmp	r3, #17
 80023bc:	d11b      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b10      	cmp	r3, #16
 80023d0:	d111      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_ADC_ConfigChannel+0x23c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a10      	ldr	r2, [pc, #64]	; (8002418 <HAL_ADC_ConfigChannel+0x240>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	0c9a      	lsrs	r2, r3, #18
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023e8:	e002      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f9      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	40012300 	.word	0x40012300
 8002410:	40012000 	.word	0x40012000
 8002414:	2000002c 	.word	0x2000002c
 8002418:	431bde83 	.word	0x431bde83

0800241c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002424:	4b79      	ldr	r3, [pc, #484]	; (800260c <ADC_Init+0x1f0>)
 8002426:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	431a      	orrs	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002450:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	021a      	lsls	r2, r3, #8
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002474:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002496:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6899      	ldr	r1, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	4a58      	ldr	r2, [pc, #352]	; (8002610 <ADC_Init+0x1f4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d022      	beq.n	80024fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6899      	ldr	r1, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	e00f      	b.n	800251a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002508:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002518:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0202 	bic.w	r2, r2, #2
 8002528:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6899      	ldr	r1, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7e1b      	ldrb	r3, [r3, #24]
 8002534:	005a      	lsls	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01b      	beq.n	8002580 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002556:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002566:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6859      	ldr	r1, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	3b01      	subs	r3, #1
 8002574:	035a      	lsls	r2, r3, #13
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	e007      	b.n	8002590 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800258e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	051a      	lsls	r2, r3, #20
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6899      	ldr	r1, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025d2:	025a      	lsls	r2, r3, #9
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6899      	ldr	r1, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	029a      	lsls	r2, r3, #10
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	609a      	str	r2, [r3, #8]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	40012300 	.word	0x40012300
 8002610:	0f000001 	.word	0x0f000001

08002614 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800262a:	2b00      	cmp	r3, #0
 800262c:	d13c      	bne.n	80026a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d12b      	bne.n	80026a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800264c:	2b00      	cmp	r3, #0
 800264e:	d127      	bne.n	80026a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002668:	2b00      	cmp	r3, #0
 800266a:	d119      	bne.n	80026a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0220 	bic.w	r2, r2, #32
 800267a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d105      	bne.n	80026a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f043 0201 	orr.w	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f7fe fc5f 	bl	8000f64 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026a6:	e00e      	b.n	80026c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7ff fd85 	bl	80021c4 <HAL_ADC_ErrorCallback>
}
 80026ba:	e004      	b.n	80026c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4798      	blx	r3
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f7ff fd5d 	bl	800219c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2240      	movs	r2, #64	; 0x40
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f043 0204 	orr.w	r2, r3, #4
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f7ff fd5a 	bl	80021c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <__NVIC_EnableIRQ+0x38>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	; (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
         );
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002898:	d301      	bcc.n	800289e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289a:	2301      	movs	r3, #1
 800289c:	e00f      	b.n	80028be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <SysTick_Config+0x40>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a6:	210f      	movs	r1, #15
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	f7ff ff8e 	bl	80027cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <SysTick_Config+0x40>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <SysTick_Config+0x40>)
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000e010 	.word	0xe000e010

080028cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff29 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f4:	f7ff ff3e 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7ff ff8e 	bl	8002820 <NVIC_EncodePriority>
 8002904:	4602      	mov	r2, r0
 8002906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff5d 	bl	80027cc <__NVIC_SetPriority>
}
 8002912:	bf00      	nop
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff31 	bl	8002790 <__NVIC_EnableIRQ>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ffa2 	bl	8002888 <SysTick_Config>
 8002944:	4603      	mov	r3, r0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800295c:	f7ff f9aa 	bl	8001cb4 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e099      	b.n	8002aa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800298c:	e00f      	b.n	80029ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800298e:	f7ff f991 	bl	8001cb4 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b05      	cmp	r3, #5
 800299a:	d908      	bls.n	80029ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2203      	movs	r2, #3
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e078      	b.n	8002aa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1e8      	bne.n	800298e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <HAL_DMA_Init+0x158>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d107      	bne.n	8002a18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	4313      	orrs	r3, r2
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f023 0307 	bic.w	r3, r3, #7
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d117      	bne.n	8002a72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00e      	beq.n	8002a72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fa6f 	bl	8002f38 <DMA_CheckFifoParam>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e016      	b.n	8002aa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fa26 	bl	8002ecc <DMA_CalcBaseAndBitshift>
 8002a80:	4603      	mov	r3, r0
 8002a82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a88:	223f      	movs	r2, #63	; 0x3f
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	f010803f 	.word	0xf010803f

08002aac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_DMA_Start_IT+0x26>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e040      	b.n	8002b54 <HAL_DMA_Start_IT+0xa8>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d12f      	bne.n	8002b46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f9b8 	bl	8002e70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	223f      	movs	r2, #63	; 0x3f
 8002b06:	409a      	lsls	r2, r3
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0216 	orr.w	r2, r2, #22
 8002b1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0208 	orr.w	r2, r2, #8
 8002b32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	e005      	b.n	8002b52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b68:	4b8e      	ldr	r3, [pc, #568]	; (8002da4 <HAL_DMA_IRQHandler+0x248>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a8e      	ldr	r2, [pc, #568]	; (8002da8 <HAL_DMA_IRQHandler+0x24c>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	0a9b      	lsrs	r3, r3, #10
 8002b74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	2208      	movs	r2, #8
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01a      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0204 	bic.w	r2, r2, #4
 8002bae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	2201      	movs	r2, #1
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d012      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2201      	movs	r2, #1
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	f043 0202 	orr.w	r2, r3, #2
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	2204      	movs	r2, #4
 8002c04:	409a      	lsls	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d012      	beq.n	8002c34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	2204      	movs	r2, #4
 8002c22:	409a      	lsls	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	f043 0204 	orr.w	r2, r3, #4
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	2210      	movs	r2, #16
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d043      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d03c      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	2210      	movs	r2, #16
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d018      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d108      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d024      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
 8002c8a:	e01f      	b.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01b      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
 8002c9c:	e016      	b.n	8002ccc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d107      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0208 	bic.w	r2, r2, #8
 8002cba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 808f 	beq.w	8002dfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 8087 	beq.w	8002dfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d136      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0216 	bic.w	r2, r2, #22
 8002d14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d103      	bne.n	8002d36 <HAL_DMA_IRQHandler+0x1da>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0208 	bic.w	r2, r2, #8
 8002d44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	223f      	movs	r2, #63	; 0x3f
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d07e      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
        }
        return;
 8002d72:	e079      	b.n	8002e68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01d      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10d      	bne.n	8002dac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d031      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
 8002da0:	e02c      	b.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
 8002da2:	bf00      	nop
 8002da4:	2000002c 	.word	0x2000002c
 8002da8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d023      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
 8002dbc:	e01e      	b.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10f      	bne.n	8002dec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0210 	bic.w	r2, r2, #16
 8002dda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d032      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d022      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2205      	movs	r2, #5
 8002e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d307      	bcc.n	8002e44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f2      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x2cc>
 8002e42:	e000      	b.n	8002e46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
 8002e66:	e000      	b.n	8002e6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e68:	bf00      	nop
    }
  }
}
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d108      	bne.n	8002eb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002eae:	e007      	b.n	8002ec0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	60da      	str	r2, [r3, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	3b10      	subs	r3, #16
 8002edc:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <DMA_CalcBaseAndBitshift+0x64>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ee6:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <DMA_CalcBaseAndBitshift+0x68>)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d909      	bls.n	8002f0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	1d1a      	adds	r2, r3, #4
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	659a      	str	r2, [r3, #88]	; 0x58
 8002f0c:	e007      	b.n	8002f1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f16:	f023 0303 	bic.w	r3, r3, #3
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	aaaaaaab 	.word	0xaaaaaaab
 8002f34:	08005f18 	.word	0x08005f18

08002f38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d11f      	bne.n	8002f92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d856      	bhi.n	8003006 <DMA_CheckFifoParam+0xce>
 8002f58:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <DMA_CheckFifoParam+0x28>)
 8002f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5e:	bf00      	nop
 8002f60:	08002f71 	.word	0x08002f71
 8002f64:	08002f83 	.word	0x08002f83
 8002f68:	08002f71 	.word	0x08002f71
 8002f6c:	08003007 	.word	0x08003007
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d046      	beq.n	800300a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f80:	e043      	b.n	800300a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f8a:	d140      	bne.n	800300e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f90:	e03d      	b.n	800300e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f9a:	d121      	bne.n	8002fe0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d837      	bhi.n	8003012 <DMA_CheckFifoParam+0xda>
 8002fa2:	a201      	add	r2, pc, #4	; (adr r2, 8002fa8 <DMA_CheckFifoParam+0x70>)
 8002fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa8:	08002fb9 	.word	0x08002fb9
 8002fac:	08002fbf 	.word	0x08002fbf
 8002fb0:	08002fb9 	.word	0x08002fb9
 8002fb4:	08002fd1 	.word	0x08002fd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
      break;
 8002fbc:	e030      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d025      	beq.n	8003016 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fce:	e022      	b.n	8003016 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fd8:	d11f      	bne.n	800301a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fde:	e01c      	b.n	800301a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d903      	bls.n	8002fee <DMA_CheckFifoParam+0xb6>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d003      	beq.n	8002ff4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fec:	e018      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff2:	e015      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00e      	beq.n	800301e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      break;
 8003004:	e00b      	b.n	800301e <DMA_CheckFifoParam+0xe6>
      break;
 8003006:	bf00      	nop
 8003008:	e00a      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 800300a:	bf00      	nop
 800300c:	e008      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 800300e:	bf00      	nop
 8003010:	e006      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 8003012:	bf00      	nop
 8003014:	e004      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 8003016:	bf00      	nop
 8003018:	e002      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;   
 800301a:	bf00      	nop
 800301c:	e000      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 800301e:	bf00      	nop
    }
  } 
  
  return status; 
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop

08003030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003030:	b480      	push	{r7}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	e159      	b.n	8003300 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800304c:	2201      	movs	r2, #1
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	429a      	cmp	r2, r3
 8003066:	f040 8148 	bne.w	80032fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d005      	beq.n	8003082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800307e:	2b02      	cmp	r3, #2
 8003080:	d130      	bne.n	80030e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2203      	movs	r2, #3
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b8:	2201      	movs	r2, #1
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 0201 	and.w	r2, r3, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d017      	beq.n	8003120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	2203      	movs	r2, #3
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d123      	bne.n	8003174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	08da      	lsrs	r2, r3, #3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3208      	adds	r2, #8
 8003134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	220f      	movs	r2, #15
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	08da      	lsrs	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3208      	adds	r2, #8
 800316e:	69b9      	ldr	r1, [r7, #24]
 8003170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0203 	and.w	r2, r3, #3
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80a2 	beq.w	80032fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	4b57      	ldr	r3, [pc, #348]	; (8003318 <HAL_GPIO_Init+0x2e8>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	4a56      	ldr	r2, [pc, #344]	; (8003318 <HAL_GPIO_Init+0x2e8>)
 80031c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031c4:	6453      	str	r3, [r2, #68]	; 0x44
 80031c6:	4b54      	ldr	r3, [pc, #336]	; (8003318 <HAL_GPIO_Init+0x2e8>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031d2:	4a52      	ldr	r2, [pc, #328]	; (800331c <HAL_GPIO_Init+0x2ec>)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	089b      	lsrs	r3, r3, #2
 80031d8:	3302      	adds	r3, #2
 80031da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	220f      	movs	r2, #15
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a49      	ldr	r2, [pc, #292]	; (8003320 <HAL_GPIO_Init+0x2f0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d019      	beq.n	8003232 <HAL_GPIO_Init+0x202>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a48      	ldr	r2, [pc, #288]	; (8003324 <HAL_GPIO_Init+0x2f4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_GPIO_Init+0x1fe>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a47      	ldr	r2, [pc, #284]	; (8003328 <HAL_GPIO_Init+0x2f8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00d      	beq.n	800322a <HAL_GPIO_Init+0x1fa>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a46      	ldr	r2, [pc, #280]	; (800332c <HAL_GPIO_Init+0x2fc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <HAL_GPIO_Init+0x1f6>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a45      	ldr	r2, [pc, #276]	; (8003330 <HAL_GPIO_Init+0x300>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <HAL_GPIO_Init+0x1f2>
 800321e:	2304      	movs	r3, #4
 8003220:	e008      	b.n	8003234 <HAL_GPIO_Init+0x204>
 8003222:	2307      	movs	r3, #7
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x204>
 8003226:	2303      	movs	r3, #3
 8003228:	e004      	b.n	8003234 <HAL_GPIO_Init+0x204>
 800322a:	2302      	movs	r3, #2
 800322c:	e002      	b.n	8003234 <HAL_GPIO_Init+0x204>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_GPIO_Init+0x204>
 8003232:	2300      	movs	r3, #0
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	f002 0203 	and.w	r2, r2, #3
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4093      	lsls	r3, r2
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003244:	4935      	ldr	r1, [pc, #212]	; (800331c <HAL_GPIO_Init+0x2ec>)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3302      	adds	r3, #2
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003252:	4b38      	ldr	r3, [pc, #224]	; (8003334 <HAL_GPIO_Init+0x304>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003276:	4a2f      	ldr	r2, [pc, #188]	; (8003334 <HAL_GPIO_Init+0x304>)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800327c:	4b2d      	ldr	r3, [pc, #180]	; (8003334 <HAL_GPIO_Init+0x304>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032a0:	4a24      	ldr	r2, [pc, #144]	; (8003334 <HAL_GPIO_Init+0x304>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032a6:	4b23      	ldr	r3, [pc, #140]	; (8003334 <HAL_GPIO_Init+0x304>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ca:	4a1a      	ldr	r2, [pc, #104]	; (8003334 <HAL_GPIO_Init+0x304>)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032d0:	4b18      	ldr	r3, [pc, #96]	; (8003334 <HAL_GPIO_Init+0x304>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032f4:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <HAL_GPIO_Init+0x304>)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3301      	adds	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	f67f aea2 	bls.w	800304c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3724      	adds	r7, #36	; 0x24
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800
 800331c:	40013800 	.word	0x40013800
 8003320:	40020000 	.word	0x40020000
 8003324:	40020400 	.word	0x40020400
 8003328:	40020800 	.word	0x40020800
 800332c:	40020c00 	.word	0x40020c00
 8003330:	40021000 	.word	0x40021000
 8003334:	40013c00 	.word	0x40013c00

08003338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
 8003344:	4613      	mov	r3, r2
 8003346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003348:	787b      	ldrb	r3, [r7, #1]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800334e:	887a      	ldrh	r2, [r7, #2]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003354:	e003      	b.n	800335e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003356:	887b      	ldrh	r3, [r7, #2]
 8003358:	041a      	lsls	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	619a      	str	r2, [r3, #24]
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e267      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d075      	beq.n	8003476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800338a:	4b88      	ldr	r3, [pc, #544]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b04      	cmp	r3, #4
 8003394:	d00c      	beq.n	80033b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003396:	4b85      	ldr	r3, [pc, #532]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d112      	bne.n	80033c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a2:	4b82      	ldr	r3, [pc, #520]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ae:	d10b      	bne.n	80033c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b0:	4b7e      	ldr	r3, [pc, #504]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d05b      	beq.n	8003474 <HAL_RCC_OscConfig+0x108>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d157      	bne.n	8003474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e242      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d0:	d106      	bne.n	80033e0 <HAL_RCC_OscConfig+0x74>
 80033d2:	4b76      	ldr	r3, [pc, #472]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a75      	ldr	r2, [pc, #468]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e01d      	b.n	800341c <HAL_RCC_OscConfig+0xb0>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e8:	d10c      	bne.n	8003404 <HAL_RCC_OscConfig+0x98>
 80033ea:	4b70      	ldr	r3, [pc, #448]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a6f      	ldr	r2, [pc, #444]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	4b6d      	ldr	r3, [pc, #436]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a6c      	ldr	r2, [pc, #432]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80033fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	e00b      	b.n	800341c <HAL_RCC_OscConfig+0xb0>
 8003404:	4b69      	ldr	r3, [pc, #420]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a68      	ldr	r2, [pc, #416]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 800340a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	4b66      	ldr	r3, [pc, #408]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a65      	ldr	r2, [pc, #404]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d013      	beq.n	800344c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fe fc46 	bl	8001cb4 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800342c:	f7fe fc42 	bl	8001cb4 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e207      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	4b5b      	ldr	r3, [pc, #364]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0xc0>
 800344a:	e014      	b.n	8003476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe fc32 	bl	8001cb4 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003454:	f7fe fc2e 	bl	8001cb4 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e1f3      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003466:	4b51      	ldr	r3, [pc, #324]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0xe8>
 8003472:	e000      	b.n	8003476 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d063      	beq.n	800354a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003482:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800348e:	4b47      	ldr	r3, [pc, #284]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003496:	2b08      	cmp	r3, #8
 8003498:	d11c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349a:	4b44      	ldr	r3, [pc, #272]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d116      	bne.n	80034d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a6:	4b41      	ldr	r3, [pc, #260]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_RCC_OscConfig+0x152>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d001      	beq.n	80034be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e1c7      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034be:	4b3b      	ldr	r3, [pc, #236]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4937      	ldr	r1, [pc, #220]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d2:	e03a      	b.n	800354a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d020      	beq.n	800351e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034dc:	4b34      	ldr	r3, [pc, #208]	; (80035b0 <HAL_RCC_OscConfig+0x244>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e2:	f7fe fbe7 	bl	8001cb4 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ea:	f7fe fbe3 	bl	8001cb4 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e1a8      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fc:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003508:	4b28      	ldr	r3, [pc, #160]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4925      	ldr	r1, [pc, #148]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003518:	4313      	orrs	r3, r2
 800351a:	600b      	str	r3, [r1, #0]
 800351c:	e015      	b.n	800354a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800351e:	4b24      	ldr	r3, [pc, #144]	; (80035b0 <HAL_RCC_OscConfig+0x244>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fe fbc6 	bl	8001cb4 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800352c:	f7fe fbc2 	bl	8001cb4 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e187      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353e:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d036      	beq.n	80035c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d016      	beq.n	800358c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355e:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <HAL_RCC_OscConfig+0x248>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003564:	f7fe fba6 	bl	8001cb4 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800356c:	f7fe fba2 	bl	8001cb4 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e167      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357e:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_OscConfig+0x240>)
 8003580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x200>
 800358a:	e01b      	b.n	80035c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800358c:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_RCC_OscConfig+0x248>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003592:	f7fe fb8f 	bl	8001cb4 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003598:	e00e      	b.n	80035b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800359a:	f7fe fb8b 	bl	8001cb4 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d907      	bls.n	80035b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e150      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
 80035ac:	40023800 	.word	0x40023800
 80035b0:	42470000 	.word	0x42470000
 80035b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	4b88      	ldr	r3, [pc, #544]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80035ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1ea      	bne.n	800359a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8097 	beq.w	8003700 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d6:	4b81      	ldr	r3, [pc, #516]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10f      	bne.n	8003602 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	4b7d      	ldr	r3, [pc, #500]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	4a7c      	ldr	r2, [pc, #496]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f0:	6413      	str	r3, [r2, #64]	; 0x40
 80035f2:	4b7a      	ldr	r3, [pc, #488]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fe:	2301      	movs	r3, #1
 8003600:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003602:	4b77      	ldr	r3, [pc, #476]	; (80037e0 <HAL_RCC_OscConfig+0x474>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d118      	bne.n	8003640 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360e:	4b74      	ldr	r3, [pc, #464]	; (80037e0 <HAL_RCC_OscConfig+0x474>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a73      	ldr	r2, [pc, #460]	; (80037e0 <HAL_RCC_OscConfig+0x474>)
 8003614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361a:	f7fe fb4b 	bl	8001cb4 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003622:	f7fe fb47 	bl	8001cb4 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e10c      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003634:	4b6a      	ldr	r3, [pc, #424]	; (80037e0 <HAL_RCC_OscConfig+0x474>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d106      	bne.n	8003656 <HAL_RCC_OscConfig+0x2ea>
 8003648:	4b64      	ldr	r3, [pc, #400]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	4a63      	ldr	r2, [pc, #396]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6713      	str	r3, [r2, #112]	; 0x70
 8003654:	e01c      	b.n	8003690 <HAL_RCC_OscConfig+0x324>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b05      	cmp	r3, #5
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x30c>
 800365e:	4b5f      	ldr	r3, [pc, #380]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	4a5e      	ldr	r2, [pc, #376]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 8003664:	f043 0304 	orr.w	r3, r3, #4
 8003668:	6713      	str	r3, [r2, #112]	; 0x70
 800366a:	4b5c      	ldr	r3, [pc, #368]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a5b      	ldr	r2, [pc, #364]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
 8003676:	e00b      	b.n	8003690 <HAL_RCC_OscConfig+0x324>
 8003678:	4b58      	ldr	r3, [pc, #352]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	4a57      	ldr	r2, [pc, #348]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	6713      	str	r3, [r2, #112]	; 0x70
 8003684:	4b55      	ldr	r3, [pc, #340]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a54      	ldr	r2, [pc, #336]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 800368a:	f023 0304 	bic.w	r3, r3, #4
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d015      	beq.n	80036c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003698:	f7fe fb0c 	bl	8001cb4 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7fe fb08 	bl	8001cb4 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e0cb      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b6:	4b49      	ldr	r3, [pc, #292]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0ee      	beq.n	80036a0 <HAL_RCC_OscConfig+0x334>
 80036c2:	e014      	b.n	80036ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c4:	f7fe faf6 	bl	8001cb4 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ca:	e00a      	b.n	80036e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036cc:	f7fe faf2 	bl	8001cb4 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e0b5      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e2:	4b3e      	ldr	r3, [pc, #248]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1ee      	bne.n	80036cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f4:	4b39      	ldr	r3, [pc, #228]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	4a38      	ldr	r2, [pc, #224]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80036fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80a1 	beq.w	800384c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800370a:	4b34      	ldr	r3, [pc, #208]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b08      	cmp	r3, #8
 8003714:	d05c      	beq.n	80037d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d141      	bne.n	80037a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371e:	4b31      	ldr	r3, [pc, #196]	; (80037e4 <HAL_RCC_OscConfig+0x478>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7fe fac6 	bl	8001cb4 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800372c:	f7fe fac2 	bl	8001cb4 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e087      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	4b27      	ldr	r3, [pc, #156]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69da      	ldr	r2, [r3, #28]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	019b      	lsls	r3, r3, #6
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	3b01      	subs	r3, #1
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	061b      	lsls	r3, r3, #24
 800376e:	491b      	ldr	r1, [pc, #108]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_RCC_OscConfig+0x478>)
 8003776:	2201      	movs	r2, #1
 8003778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377a:	f7fe fa9b 	bl	8001cb4 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003782:	f7fe fa97 	bl	8001cb4 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e05c      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x416>
 80037a0:	e054      	b.n	800384c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <HAL_RCC_OscConfig+0x478>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fe fa84 	bl	8001cb4 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fe fa80 	bl	8001cb4 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e045      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_RCC_OscConfig+0x470>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x444>
 80037ce:	e03d      	b.n	800384c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e038      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40007000 	.word	0x40007000
 80037e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <HAL_RCC_OscConfig+0x4ec>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d028      	beq.n	8003848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d121      	bne.n	8003848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d11a      	bne.n	8003848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003818:	4013      	ands	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800381e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003820:	4293      	cmp	r3, r2
 8003822:	d111      	bne.n	8003848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	3b01      	subs	r3, #1
 8003832:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d107      	bne.n	8003848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800

0800385c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e0cc      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003870:	4b68      	ldr	r3, [pc, #416]	; (8003a14 <HAL_RCC_ClockConfig+0x1b8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d90c      	bls.n	8003898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387e:	4b65      	ldr	r3, [pc, #404]	; (8003a14 <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003886:	4b63      	ldr	r3, [pc, #396]	; (8003a14 <HAL_RCC_ClockConfig+0x1b8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0b8      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d020      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b0:	4b59      	ldr	r3, [pc, #356]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4a58      	ldr	r2, [pc, #352]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c8:	4b53      	ldr	r3, [pc, #332]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a52      	ldr	r2, [pc, #328]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d4:	4b50      	ldr	r3, [pc, #320]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	494d      	ldr	r1, [pc, #308]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d044      	beq.n	800397c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d107      	bne.n	800390a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d119      	bne.n	800393a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e07f      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d003      	beq.n	800391a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003916:	2b03      	cmp	r3, #3
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391a:	4b3f      	ldr	r3, [pc, #252]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d109      	bne.n	800393a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e06f      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392a:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e067      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393a:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f023 0203 	bic.w	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	4934      	ldr	r1, [pc, #208]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	4313      	orrs	r3, r2
 800394a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800394c:	f7fe f9b2 	bl	8001cb4 <HAL_GetTick>
 8003950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003952:	e00a      	b.n	800396a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003954:	f7fe f9ae 	bl	8001cb4 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003962:	4293      	cmp	r3, r2
 8003964:	d901      	bls.n	800396a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e04f      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396a:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 020c 	and.w	r2, r3, #12
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	429a      	cmp	r2, r3
 800397a:	d1eb      	bne.n	8003954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800397c:	4b25      	ldr	r3, [pc, #148]	; (8003a14 <HAL_RCC_ClockConfig+0x1b8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d20c      	bcs.n	80039a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398a:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_RCC_ClockConfig+0x1b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e032      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4916      	ldr	r1, [pc, #88]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	490e      	ldr	r1, [pc, #56]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039e2:	f000 f821 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80039e6:	4602      	mov	r2, r0
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	490a      	ldr	r1, [pc, #40]	; (8003a1c <HAL_RCC_ClockConfig+0x1c0>)
 80039f4:	5ccb      	ldrb	r3, [r1, r3]
 80039f6:	fa22 f303 	lsr.w	r3, r2, r3
 80039fa:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe f912 	bl	8001c2c <HAL_InitTick>

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40023c00 	.word	0x40023c00
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	08005f00 	.word	0x08005f00
 8003a20:	2000002c 	.word	0x2000002c
 8003a24:	20000030 	.word	0x20000030

08003a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a2c:	b094      	sub	sp, #80	; 0x50
 8003a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	647b      	str	r3, [r7, #68]	; 0x44
 8003a34:	2300      	movs	r3, #0
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a38:	2300      	movs	r3, #0
 8003a3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a40:	4b79      	ldr	r3, [pc, #484]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 030c 	and.w	r3, r3, #12
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d00d      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x40>
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	f200 80e1 	bhi.w	8003c14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x34>
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d003      	beq.n	8003a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a5a:	e0db      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a5c:	4b73      	ldr	r3, [pc, #460]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a60:	e0db      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a62:	4b73      	ldr	r3, [pc, #460]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a66:	e0d8      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a68:	4b6f      	ldr	r3, [pc, #444]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a72:	4b6d      	ldr	r3, [pc, #436]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d063      	beq.n	8003b46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7e:	4b6a      	ldr	r3, [pc, #424]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	099b      	lsrs	r3, r3, #6
 8003a84:	2200      	movs	r2, #0
 8003a86:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a90:	633b      	str	r3, [r7, #48]	; 0x30
 8003a92:	2300      	movs	r3, #0
 8003a94:	637b      	str	r3, [r7, #52]	; 0x34
 8003a96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a9a:	4622      	mov	r2, r4
 8003a9c:	462b      	mov	r3, r5
 8003a9e:	f04f 0000 	mov.w	r0, #0
 8003aa2:	f04f 0100 	mov.w	r1, #0
 8003aa6:	0159      	lsls	r1, r3, #5
 8003aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aac:	0150      	lsls	r0, r2, #5
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	1a51      	subs	r1, r2, r1
 8003ab6:	6139      	str	r1, [r7, #16]
 8003ab8:	4629      	mov	r1, r5
 8003aba:	eb63 0301 	sbc.w	r3, r3, r1
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003acc:	4659      	mov	r1, fp
 8003ace:	018b      	lsls	r3, r1, #6
 8003ad0:	4651      	mov	r1, sl
 8003ad2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ad6:	4651      	mov	r1, sl
 8003ad8:	018a      	lsls	r2, r1, #6
 8003ada:	4651      	mov	r1, sl
 8003adc:	ebb2 0801 	subs.w	r8, r2, r1
 8003ae0:	4659      	mov	r1, fp
 8003ae2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003afa:	4690      	mov	r8, r2
 8003afc:	4699      	mov	r9, r3
 8003afe:	4623      	mov	r3, r4
 8003b00:	eb18 0303 	adds.w	r3, r8, r3
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	462b      	mov	r3, r5
 8003b08:	eb49 0303 	adc.w	r3, r9, r3
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	024b      	lsls	r3, r1, #9
 8003b1e:	4621      	mov	r1, r4
 8003b20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b24:	4621      	mov	r1, r4
 8003b26:	024a      	lsls	r2, r1, #9
 8003b28:	4610      	mov	r0, r2
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b2e:	2200      	movs	r2, #0
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b38:	f7fc fd8e 	bl	8000658 <__aeabi_uldivmod>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4613      	mov	r3, r2
 8003b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b44:	e058      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b46:	4b38      	ldr	r3, [pc, #224]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	099b      	lsrs	r3, r3, #6
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	4611      	mov	r1, r2
 8003b52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b56:	623b      	str	r3, [r7, #32]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b60:	4642      	mov	r2, r8
 8003b62:	464b      	mov	r3, r9
 8003b64:	f04f 0000 	mov.w	r0, #0
 8003b68:	f04f 0100 	mov.w	r1, #0
 8003b6c:	0159      	lsls	r1, r3, #5
 8003b6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b72:	0150      	lsls	r0, r2, #5
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4641      	mov	r1, r8
 8003b7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b7e:	4649      	mov	r1, r9
 8003b80:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b98:	ebb2 040a 	subs.w	r4, r2, sl
 8003b9c:	eb63 050b 	sbc.w	r5, r3, fp
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	00eb      	lsls	r3, r5, #3
 8003baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bae:	00e2      	lsls	r2, r4, #3
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	461d      	mov	r5, r3
 8003bb4:	4643      	mov	r3, r8
 8003bb6:	18e3      	adds	r3, r4, r3
 8003bb8:	603b      	str	r3, [r7, #0]
 8003bba:	464b      	mov	r3, r9
 8003bbc:	eb45 0303 	adc.w	r3, r5, r3
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bce:	4629      	mov	r1, r5
 8003bd0:	028b      	lsls	r3, r1, #10
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd8:	4621      	mov	r1, r4
 8003bda:	028a      	lsls	r2, r1, #10
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be2:	2200      	movs	r2, #0
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	61fa      	str	r2, [r7, #28]
 8003be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bec:	f7fc fd34 	bl	8000658 <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	0c1b      	lsrs	r3, r3, #16
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	3301      	adds	r3, #1
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c12:	e002      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3750      	adds	r7, #80	; 0x50
 8003c20:	46bd      	mov	sp, r7
 8003c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	00f42400 	.word	0x00f42400
 8003c30:	007a1200 	.word	0x007a1200

08003c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c38:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	2000002c 	.word	0x2000002c

08003c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c50:	f7ff fff0 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	0a9b      	lsrs	r3, r3, #10
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	4903      	ldr	r1, [pc, #12]	; (8003c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	08005f10 	.word	0x08005f10

08003c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c78:	f7ff ffdc 	bl	8003c34 <HAL_RCC_GetHCLKFreq>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	0b5b      	lsrs	r3, r3, #13
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	4903      	ldr	r1, [pc, #12]	; (8003c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c8a:	5ccb      	ldrb	r3, [r1, r3]
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40023800 	.word	0x40023800
 8003c98:	08005f10 	.word	0x08005f10

08003c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e041      	b.n	8003d32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fd fde0 	bl	8001888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f000 fce6 	bl	80046ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d001      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e044      	b.n	8003dde <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <HAL_TIM_Base_Start_IT+0xb0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d018      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x6c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7e:	d013      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x6c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1a      	ldr	r2, [pc, #104]	; (8003df0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00e      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x6c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d009      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x6c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d004      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x6c>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <HAL_TIM_Base_Start_IT+0xc0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d111      	bne.n	8003dcc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b06      	cmp	r3, #6
 8003db8:	d010      	beq.n	8003ddc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dca:	e007      	b.n	8003ddc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40010000 	.word	0x40010000
 8003df0:	40000400 	.word	0x40000400
 8003df4:	40000800 	.word	0x40000800
 8003df8:	40000c00 	.word	0x40000c00
 8003dfc:	40014000 	.word	0x40014000

08003e00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6a1a      	ldr	r2, [r3, #32]
 8003e1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10f      	bne.n	8003e48 <HAL_TIM_Base_Stop_IT+0x48>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6a1a      	ldr	r2, [r3, #32]
 8003e2e:	f240 4344 	movw	r3, #1092	; 0x444
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d107      	bne.n	8003e48 <HAL_TIM_Base_Stop_IT+0x48>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e041      	b.n	8003ef4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f839 	bl	8003efc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	f000 fc05 	bl	80046ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d109      	bne.n	8003f34 <HAL_TIM_PWM_Start+0x24>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	bf14      	ite	ne
 8003f2c:	2301      	movne	r3, #1
 8003f2e:	2300      	moveq	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	e022      	b.n	8003f7a <HAL_TIM_PWM_Start+0x6a>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d109      	bne.n	8003f4e <HAL_TIM_PWM_Start+0x3e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	bf14      	ite	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	2300      	moveq	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	e015      	b.n	8003f7a <HAL_TIM_PWM_Start+0x6a>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d109      	bne.n	8003f68 <HAL_TIM_PWM_Start+0x58>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e008      	b.n	8003f7a <HAL_TIM_PWM_Start+0x6a>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	bf14      	ite	ne
 8003f74:	2301      	movne	r3, #1
 8003f76:	2300      	moveq	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e068      	b.n	8004054 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d104      	bne.n	8003f92 <HAL_TIM_PWM_Start+0x82>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f90:	e013      	b.n	8003fba <HAL_TIM_PWM_Start+0xaa>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d104      	bne.n	8003fa2 <HAL_TIM_PWM_Start+0x92>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa0:	e00b      	b.n	8003fba <HAL_TIM_PWM_Start+0xaa>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d104      	bne.n	8003fb2 <HAL_TIM_PWM_Start+0xa2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb0:	e003      	b.n	8003fba <HAL_TIM_PWM_Start+0xaa>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	6839      	ldr	r1, [r7, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fe18 	bl	8004bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a23      	ldr	r2, [pc, #140]	; (800405c <HAL_TIM_PWM_Start+0x14c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d107      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1d      	ldr	r2, [pc, #116]	; (800405c <HAL_TIM_PWM_Start+0x14c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d018      	beq.n	800401e <HAL_TIM_PWM_Start+0x10e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d013      	beq.n	800401e <HAL_TIM_PWM_Start+0x10e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a19      	ldr	r2, [pc, #100]	; (8004060 <HAL_TIM_PWM_Start+0x150>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00e      	beq.n	800401e <HAL_TIM_PWM_Start+0x10e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a17      	ldr	r2, [pc, #92]	; (8004064 <HAL_TIM_PWM_Start+0x154>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d009      	beq.n	800401e <HAL_TIM_PWM_Start+0x10e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a16      	ldr	r2, [pc, #88]	; (8004068 <HAL_TIM_PWM_Start+0x158>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d004      	beq.n	800401e <HAL_TIM_PWM_Start+0x10e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a14      	ldr	r2, [pc, #80]	; (800406c <HAL_TIM_PWM_Start+0x15c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d111      	bne.n	8004042 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b06      	cmp	r3, #6
 800402e:	d010      	beq.n	8004052 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004040:	e007      	b.n	8004052 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0201 	orr.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40010000 	.word	0x40010000
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40000c00 	.word	0x40000c00
 800406c:	40014000 	.word	0x40014000

08004070 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2200      	movs	r2, #0
 8004080:	6839      	ldr	r1, [r7, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fdb8 	bl	8004bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a29      	ldr	r2, [pc, #164]	; (8004134 <HAL_TIM_PWM_Stop+0xc4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d117      	bne.n	80040c2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a1a      	ldr	r2, [r3, #32]
 8004098:	f241 1311 	movw	r3, #4369	; 0x1111
 800409c:	4013      	ands	r3, r2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10f      	bne.n	80040c2 <HAL_TIM_PWM_Stop+0x52>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	f240 4344 	movw	r3, #1092	; 0x444
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d107      	bne.n	80040c2 <HAL_TIM_PWM_Stop+0x52>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6a1a      	ldr	r2, [r3, #32]
 80040c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80040cc:	4013      	ands	r3, r2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10f      	bne.n	80040f2 <HAL_TIM_PWM_Stop+0x82>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6a1a      	ldr	r2, [r3, #32]
 80040d8:	f240 4344 	movw	r3, #1092	; 0x444
 80040dc:	4013      	ands	r3, r2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d107      	bne.n	80040f2 <HAL_TIM_PWM_Stop+0x82>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_PWM_Stop+0x92>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004100:	e013      	b.n	800412a <HAL_TIM_PWM_Stop+0xba>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b04      	cmp	r3, #4
 8004106:	d104      	bne.n	8004112 <HAL_TIM_PWM_Stop+0xa2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004110:	e00b      	b.n	800412a <HAL_TIM_PWM_Stop+0xba>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d104      	bne.n	8004122 <HAL_TIM_PWM_Stop+0xb2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004120:	e003      	b.n	800412a <HAL_TIM_PWM_Stop+0xba>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40010000 	.word	0x40010000

08004138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b02      	cmp	r3, #2
 800414c:	d122      	bne.n	8004194 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b02      	cmp	r3, #2
 800415a:	d11b      	bne.n	8004194 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0202 	mvn.w	r2, #2
 8004164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fa77 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 8004180:	e005      	b.n	800418e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fa69 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fa7a 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d122      	bne.n	80041e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d11b      	bne.n	80041e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0204 	mvn.w	r2, #4
 80041b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fa4d 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 80041d4:	e005      	b.n	80041e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fa3f 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fa50 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d122      	bne.n	800423c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b08      	cmp	r3, #8
 8004202:	d11b      	bne.n	800423c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0208 	mvn.w	r2, #8
 800420c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2204      	movs	r2, #4
 8004212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fa23 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 8004228:	e005      	b.n	8004236 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fa15 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fa26 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	2b10      	cmp	r3, #16
 8004248:	d122      	bne.n	8004290 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	2b10      	cmp	r3, #16
 8004256:	d11b      	bne.n	8004290 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0210 	mvn.w	r2, #16
 8004260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2208      	movs	r2, #8
 8004266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f9f9 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 800427c:	e005      	b.n	800428a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f9eb 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f9fc 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b01      	cmp	r3, #1
 800429c:	d10e      	bne.n	80042bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d107      	bne.n	80042bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0201 	mvn.w	r2, #1
 80042b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fc fdb6 	bl	8000e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c6:	2b80      	cmp	r3, #128	; 0x80
 80042c8:	d10e      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d4:	2b80      	cmp	r3, #128	; 0x80
 80042d6:	d107      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fd26 	bl	8004d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d10e      	bne.n	8004314 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b40      	cmp	r3, #64	; 0x40
 8004302:	d107      	bne.n	8004314 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800430c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f9c1 	bl	8004696 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b20      	cmp	r3, #32
 8004320:	d10e      	bne.n	8004340 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b20      	cmp	r3, #32
 800432e:	d107      	bne.n	8004340 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0220 	mvn.w	r2, #32
 8004338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fcf0 	bl	8004d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004362:	2302      	movs	r3, #2
 8004364:	e0ae      	b.n	80044c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b0c      	cmp	r3, #12
 8004372:	f200 809f 	bhi.w	80044b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004376:	a201      	add	r2, pc, #4	; (adr r2, 800437c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437c:	080043b1 	.word	0x080043b1
 8004380:	080044b5 	.word	0x080044b5
 8004384:	080044b5 	.word	0x080044b5
 8004388:	080044b5 	.word	0x080044b5
 800438c:	080043f1 	.word	0x080043f1
 8004390:	080044b5 	.word	0x080044b5
 8004394:	080044b5 	.word	0x080044b5
 8004398:	080044b5 	.word	0x080044b5
 800439c:	08004433 	.word	0x08004433
 80043a0:	080044b5 	.word	0x080044b5
 80043a4:	080044b5 	.word	0x080044b5
 80043a8:	080044b5 	.word	0x080044b5
 80043ac:	08004473 	.word	0x08004473
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 f9f8 	bl	80047ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0208 	orr.w	r2, r2, #8
 80043ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0204 	bic.w	r2, r2, #4
 80043da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6999      	ldr	r1, [r3, #24]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	619a      	str	r2, [r3, #24]
      break;
 80043ee:	e064      	b.n	80044ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fa3e 	bl	8004878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800440a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6999      	ldr	r1, [r3, #24]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	021a      	lsls	r2, r3, #8
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	619a      	str	r2, [r3, #24]
      break;
 8004430:	e043      	b.n	80044ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fa89 	bl	8004950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0208 	orr.w	r2, r2, #8
 800444c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0204 	bic.w	r2, r2, #4
 800445c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69d9      	ldr	r1, [r3, #28]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	61da      	str	r2, [r3, #28]
      break;
 8004470:	e023      	b.n	80044ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fad3 	bl	8004a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800448c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69d9      	ldr	r1, [r3, #28]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	021a      	lsls	r2, r3, #8
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	61da      	str	r2, [r3, #28]
      break;
 80044b2:	e002      	b.n	80044ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	75fb      	strb	r3, [r7, #23]
      break;
 80044b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_TIM_ConfigClockSource+0x1c>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e0b4      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x186>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800450e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004520:	d03e      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0xd4>
 8004522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004526:	f200 8087 	bhi.w	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 800452a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452e:	f000 8086 	beq.w	800463e <HAL_TIM_ConfigClockSource+0x172>
 8004532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004536:	d87f      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004538:	2b70      	cmp	r3, #112	; 0x70
 800453a:	d01a      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0xa6>
 800453c:	2b70      	cmp	r3, #112	; 0x70
 800453e:	d87b      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004540:	2b60      	cmp	r3, #96	; 0x60
 8004542:	d050      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x11a>
 8004544:	2b60      	cmp	r3, #96	; 0x60
 8004546:	d877      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004548:	2b50      	cmp	r3, #80	; 0x50
 800454a:	d03c      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0xfa>
 800454c:	2b50      	cmp	r3, #80	; 0x50
 800454e:	d873      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004550:	2b40      	cmp	r3, #64	; 0x40
 8004552:	d058      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x13a>
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	d86f      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004558:	2b30      	cmp	r3, #48	; 0x30
 800455a:	d064      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15a>
 800455c:	2b30      	cmp	r3, #48	; 0x30
 800455e:	d86b      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004560:	2b20      	cmp	r3, #32
 8004562:	d060      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15a>
 8004564:	2b20      	cmp	r3, #32
 8004566:	d867      	bhi.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
 8004568:	2b00      	cmp	r3, #0
 800456a:	d05c      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15a>
 800456c:	2b10      	cmp	r3, #16
 800456e:	d05a      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x15a>
 8004570:	e062      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6899      	ldr	r1, [r3, #8]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f000 fb19 	bl	8004bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004594:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	609a      	str	r2, [r3, #8]
      break;
 800459e:	e04f      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	6899      	ldr	r1, [r3, #8]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f000 fb02 	bl	8004bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045c2:	609a      	str	r2, [r3, #8]
      break;
 80045c4:	e03c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6859      	ldr	r1, [r3, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f000 fa76 	bl	8004ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2150      	movs	r1, #80	; 0x50
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 facf 	bl	8004b82 <TIM_ITRx_SetConfig>
      break;
 80045e4:	e02c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6859      	ldr	r1, [r3, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f000 fa95 	bl	8004b22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2160      	movs	r1, #96	; 0x60
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fabf 	bl	8004b82 <TIM_ITRx_SetConfig>
      break;
 8004604:	e01c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	461a      	mov	r2, r3
 8004614:	f000 fa56 	bl	8004ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2140      	movs	r1, #64	; 0x40
 800461e:	4618      	mov	r0, r3
 8004620:	f000 faaf 	bl	8004b82 <TIM_ITRx_SetConfig>
      break;
 8004624:	e00c      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f000 faa6 	bl	8004b82 <TIM_ITRx_SetConfig>
      break;
 8004636:	e003      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
      break;
 800463c:	e000      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800463e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004650:	7bfb      	ldrb	r3, [r7, #15]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a34      	ldr	r2, [pc, #208]	; (8004790 <TIM_Base_SetConfig+0xe4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00f      	beq.n	80046e4 <TIM_Base_SetConfig+0x38>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ca:	d00b      	beq.n	80046e4 <TIM_Base_SetConfig+0x38>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a31      	ldr	r2, [pc, #196]	; (8004794 <TIM_Base_SetConfig+0xe8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d007      	beq.n	80046e4 <TIM_Base_SetConfig+0x38>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a30      	ldr	r2, [pc, #192]	; (8004798 <TIM_Base_SetConfig+0xec>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <TIM_Base_SetConfig+0x38>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a2f      	ldr	r2, [pc, #188]	; (800479c <TIM_Base_SetConfig+0xf0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d108      	bne.n	80046f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a25      	ldr	r2, [pc, #148]	; (8004790 <TIM_Base_SetConfig+0xe4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01b      	beq.n	8004736 <TIM_Base_SetConfig+0x8a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004704:	d017      	beq.n	8004736 <TIM_Base_SetConfig+0x8a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a22      	ldr	r2, [pc, #136]	; (8004794 <TIM_Base_SetConfig+0xe8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <TIM_Base_SetConfig+0x8a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a21      	ldr	r2, [pc, #132]	; (8004798 <TIM_Base_SetConfig+0xec>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00f      	beq.n	8004736 <TIM_Base_SetConfig+0x8a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a20      	ldr	r2, [pc, #128]	; (800479c <TIM_Base_SetConfig+0xf0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <TIM_Base_SetConfig+0x8a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <TIM_Base_SetConfig+0xf4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <TIM_Base_SetConfig+0x8a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <TIM_Base_SetConfig+0xf8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <TIM_Base_SetConfig+0x8a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <TIM_Base_SetConfig+0xfc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d108      	bne.n	8004748 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a08      	ldr	r2, [pc, #32]	; (8004790 <TIM_Base_SetConfig+0xe4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d103      	bne.n	800477c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	615a      	str	r2, [r3, #20]
}
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40010000 	.word	0x40010000
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800
 800479c:	40000c00 	.word	0x40000c00
 80047a0:	40014000 	.word	0x40014000
 80047a4:	40014400 	.word	0x40014400
 80047a8:	40014800 	.word	0x40014800

080047ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f023 0201 	bic.w	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f023 0302 	bic.w	r3, r3, #2
 80047f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <TIM_OC1_SetConfig+0xc8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d10c      	bne.n	8004822 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f023 0308 	bic.w	r3, r3, #8
 800480e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f023 0304 	bic.w	r3, r3, #4
 8004820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a13      	ldr	r2, [pc, #76]	; (8004874 <TIM_OC1_SetConfig+0xc8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d111      	bne.n	800484e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	621a      	str	r2, [r3, #32]
}
 8004868:	bf00      	nop
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	40010000 	.word	0x40010000

08004878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f023 0210 	bic.w	r2, r3, #16
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f023 0320 	bic.w	r3, r3, #32
 80048c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a1e      	ldr	r2, [pc, #120]	; (800494c <TIM_OC2_SetConfig+0xd4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d10d      	bne.n	80048f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a15      	ldr	r2, [pc, #84]	; (800494c <TIM_OC2_SetConfig+0xd4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d113      	bne.n	8004924 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004902:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800490a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	621a      	str	r2, [r3, #32]
}
 800493e:	bf00      	nop
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40010000 	.word	0x40010000

08004950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0303 	bic.w	r3, r3, #3
 8004986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a1d      	ldr	r2, [pc, #116]	; (8004a20 <TIM_OC3_SetConfig+0xd0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d10d      	bne.n	80049ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	021b      	lsls	r3, r3, #8
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <TIM_OC3_SetConfig+0xd0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d113      	bne.n	80049fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	621a      	str	r2, [r3, #32]
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	40010000 	.word	0x40010000

08004a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	031b      	lsls	r3, r3, #12
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a10      	ldr	r2, [pc, #64]	; (8004ac0 <TIM_OC4_SetConfig+0x9c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d109      	bne.n	8004a98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	019b      	lsls	r3, r3, #6
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40010000 	.word	0x40010000

08004ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f023 0201 	bic.w	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f023 030a 	bic.w	r3, r3, #10
 8004b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	621a      	str	r2, [r3, #32]
}
 8004b16:	bf00      	nop
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b087      	sub	sp, #28
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	f023 0210 	bic.w	r2, r3, #16
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	031b      	lsls	r3, r3, #12
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	621a      	str	r2, [r3, #32]
}
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b085      	sub	sp, #20
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f043 0307 	orr.w	r3, r3, #7
 8004ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	609a      	str	r2, [r3, #8]
}
 8004bac:	bf00      	nop
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	021a      	lsls	r2, r3, #8
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	609a      	str	r2, [r3, #8]
}
 8004bec:	bf00      	nop
 8004bee:	371c      	adds	r7, #28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a1a      	ldr	r2, [r3, #32]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	401a      	ands	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a1a      	ldr	r2, [r3, #32]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 031f 	and.w	r3, r3, #31
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c30:	431a      	orrs	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	621a      	str	r2, [r3, #32]
}
 8004c36:	bf00      	nop
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
	...

08004c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e050      	b.n	8004cfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d018      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca8:	d013      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00e      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a16      	ldr	r2, [pc, #88]	; (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d009      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a15      	ldr	r2, [pc, #84]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d10c      	bne.n	8004cec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40010000 	.word	0x40010000
 8004d10:	40000400 	.word	0x40000400
 8004d14:	40000800 	.word	0x40000800
 8004d18:	40000c00 	.word	0x40000c00
 8004d1c:	40014000 	.word	0x40014000

08004d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e03f      	b.n	8004dda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d106      	bne.n	8004d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fc fe24 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2224      	movs	r2, #36	; 0x24
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f929 	bl	8004fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695a      	ldr	r2, [r3, #20]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b08a      	sub	sp, #40	; 0x28
 8004de6:	af02      	add	r7, sp, #8
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	603b      	str	r3, [r7, #0]
 8004dee:	4613      	mov	r3, r2
 8004df0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d17c      	bne.n	8004efc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_UART_Transmit+0x2c>
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e075      	b.n	8004efe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_UART_Transmit+0x3e>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e06e      	b.n	8004efe <HAL_UART_Transmit+0x11c>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2221      	movs	r2, #33	; 0x21
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e36:	f7fc ff3d 	bl	8001cb4 <HAL_GetTick>
 8004e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	88fa      	ldrh	r2, [r7, #6]
 8004e40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	88fa      	ldrh	r2, [r7, #6]
 8004e46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e50:	d108      	bne.n	8004e64 <HAL_UART_Transmit+0x82>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d104      	bne.n	8004e64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	e003      	b.n	8004e6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e74:	e02a      	b.n	8004ecc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2180      	movs	r1, #128	; 0x80
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f840 	bl	8004f06 <UART_WaitOnFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e036      	b.n	8004efe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10b      	bne.n	8004eae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ea4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	61bb      	str	r3, [r7, #24]
 8004eac:	e007      	b.n	8004ebe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1cf      	bne.n	8004e76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2200      	movs	r2, #0
 8004ede:	2140      	movs	r1, #64	; 0x40
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f810 	bl	8004f06 <UART_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e006      	b.n	8004efe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e000      	b.n	8004efe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
  }
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b090      	sub	sp, #64	; 0x40
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	603b      	str	r3, [r7, #0]
 8004f12:	4613      	mov	r3, r2
 8004f14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f16:	e050      	b.n	8004fba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1e:	d04c      	beq.n	8004fba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d007      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f26:	f7fc fec5 	bl	8001cb4 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d241      	bcs.n	8004fba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	330c      	adds	r3, #12
 8004f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	330c      	adds	r3, #12
 8004f54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f56:	637a      	str	r2, [r7, #52]	; 0x34
 8004f58:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e5      	bne.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3314      	adds	r3, #20
 8004f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f023 0301 	bic.w	r3, r3, #1
 8004f80:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3314      	adds	r3, #20
 8004f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f8a:	623a      	str	r2, [r7, #32]
 8004f8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	69f9      	ldr	r1, [r7, #28]
 8004f90:	6a3a      	ldr	r2, [r7, #32]
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e5      	bne.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e00f      	b.n	8004fda <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	bf0c      	ite	eq
 8004fca:	2301      	moveq	r3, #1
 8004fcc:	2300      	movne	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d09f      	beq.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3740      	adds	r7, #64	; 0x40
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe8:	b0c0      	sub	sp, #256	; 0x100
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005000:	68d9      	ldr	r1, [r3, #12]
 8005002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	ea40 0301 	orr.w	r3, r0, r1
 800500c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	431a      	orrs	r2, r3
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	431a      	orrs	r2, r3
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800503c:	f021 010c 	bic.w	r1, r1, #12
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800504a:	430b      	orrs	r3, r1
 800504c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505e:	6999      	ldr	r1, [r3, #24]
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	ea40 0301 	orr.w	r3, r0, r1
 800506a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b8f      	ldr	r3, [pc, #572]	; (80052b0 <UART_SetConfig+0x2cc>)
 8005074:	429a      	cmp	r2, r3
 8005076:	d005      	beq.n	8005084 <UART_SetConfig+0xa0>
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b8d      	ldr	r3, [pc, #564]	; (80052b4 <UART_SetConfig+0x2d0>)
 8005080:	429a      	cmp	r2, r3
 8005082:	d104      	bne.n	800508e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005084:	f7fe fdf6 	bl	8003c74 <HAL_RCC_GetPCLK2Freq>
 8005088:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800508c:	e003      	b.n	8005096 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800508e:	f7fe fddd 	bl	8003c4c <HAL_RCC_GetPCLK1Freq>
 8005092:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a0:	f040 810c 	bne.w	80052bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050b6:	4622      	mov	r2, r4
 80050b8:	462b      	mov	r3, r5
 80050ba:	1891      	adds	r1, r2, r2
 80050bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80050be:	415b      	adcs	r3, r3
 80050c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050c6:	4621      	mov	r1, r4
 80050c8:	eb12 0801 	adds.w	r8, r2, r1
 80050cc:	4629      	mov	r1, r5
 80050ce:	eb43 0901 	adc.w	r9, r3, r1
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050e6:	4690      	mov	r8, r2
 80050e8:	4699      	mov	r9, r3
 80050ea:	4623      	mov	r3, r4
 80050ec:	eb18 0303 	adds.w	r3, r8, r3
 80050f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050f4:	462b      	mov	r3, r5
 80050f6:	eb49 0303 	adc.w	r3, r9, r3
 80050fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800510a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800510e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005112:	460b      	mov	r3, r1
 8005114:	18db      	adds	r3, r3, r3
 8005116:	653b      	str	r3, [r7, #80]	; 0x50
 8005118:	4613      	mov	r3, r2
 800511a:	eb42 0303 	adc.w	r3, r2, r3
 800511e:	657b      	str	r3, [r7, #84]	; 0x54
 8005120:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005124:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005128:	f7fb fa96 	bl	8000658 <__aeabi_uldivmod>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4b61      	ldr	r3, [pc, #388]	; (80052b8 <UART_SetConfig+0x2d4>)
 8005132:	fba3 2302 	umull	r2, r3, r3, r2
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	011c      	lsls	r4, r3, #4
 800513a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800513e:	2200      	movs	r2, #0
 8005140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005144:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005148:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800514c:	4642      	mov	r2, r8
 800514e:	464b      	mov	r3, r9
 8005150:	1891      	adds	r1, r2, r2
 8005152:	64b9      	str	r1, [r7, #72]	; 0x48
 8005154:	415b      	adcs	r3, r3
 8005156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005158:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800515c:	4641      	mov	r1, r8
 800515e:	eb12 0a01 	adds.w	sl, r2, r1
 8005162:	4649      	mov	r1, r9
 8005164:	eb43 0b01 	adc.w	fp, r3, r1
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005174:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005178:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800517c:	4692      	mov	sl, r2
 800517e:	469b      	mov	fp, r3
 8005180:	4643      	mov	r3, r8
 8005182:	eb1a 0303 	adds.w	r3, sl, r3
 8005186:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800518a:	464b      	mov	r3, r9
 800518c:	eb4b 0303 	adc.w	r3, fp, r3
 8005190:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051a8:	460b      	mov	r3, r1
 80051aa:	18db      	adds	r3, r3, r3
 80051ac:	643b      	str	r3, [r7, #64]	; 0x40
 80051ae:	4613      	mov	r3, r2
 80051b0:	eb42 0303 	adc.w	r3, r2, r3
 80051b4:	647b      	str	r3, [r7, #68]	; 0x44
 80051b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051be:	f7fb fa4b 	bl	8000658 <__aeabi_uldivmod>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4611      	mov	r1, r2
 80051c8:	4b3b      	ldr	r3, [pc, #236]	; (80052b8 <UART_SetConfig+0x2d4>)
 80051ca:	fba3 2301 	umull	r2, r3, r3, r1
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	2264      	movs	r2, #100	; 0x64
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	1acb      	subs	r3, r1, r3
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051de:	4b36      	ldr	r3, [pc, #216]	; (80052b8 <UART_SetConfig+0x2d4>)
 80051e0:	fba3 2302 	umull	r2, r3, r3, r2
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051ec:	441c      	add	r4, r3
 80051ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80051fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005200:	4642      	mov	r2, r8
 8005202:	464b      	mov	r3, r9
 8005204:	1891      	adds	r1, r2, r2
 8005206:	63b9      	str	r1, [r7, #56]	; 0x38
 8005208:	415b      	adcs	r3, r3
 800520a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800520c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005210:	4641      	mov	r1, r8
 8005212:	1851      	adds	r1, r2, r1
 8005214:	6339      	str	r1, [r7, #48]	; 0x30
 8005216:	4649      	mov	r1, r9
 8005218:	414b      	adcs	r3, r1
 800521a:	637b      	str	r3, [r7, #52]	; 0x34
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005228:	4659      	mov	r1, fp
 800522a:	00cb      	lsls	r3, r1, #3
 800522c:	4651      	mov	r1, sl
 800522e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005232:	4651      	mov	r1, sl
 8005234:	00ca      	lsls	r2, r1, #3
 8005236:	4610      	mov	r0, r2
 8005238:	4619      	mov	r1, r3
 800523a:	4603      	mov	r3, r0
 800523c:	4642      	mov	r2, r8
 800523e:	189b      	adds	r3, r3, r2
 8005240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005244:	464b      	mov	r3, r9
 8005246:	460a      	mov	r2, r1
 8005248:	eb42 0303 	adc.w	r3, r2, r3
 800524c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800525c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005260:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005264:	460b      	mov	r3, r1
 8005266:	18db      	adds	r3, r3, r3
 8005268:	62bb      	str	r3, [r7, #40]	; 0x28
 800526a:	4613      	mov	r3, r2
 800526c:	eb42 0303 	adc.w	r3, r2, r3
 8005270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005276:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800527a:	f7fb f9ed 	bl	8000658 <__aeabi_uldivmod>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <UART_SetConfig+0x2d4>)
 8005284:	fba3 1302 	umull	r1, r3, r3, r2
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	2164      	movs	r1, #100	; 0x64
 800528c:	fb01 f303 	mul.w	r3, r1, r3
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	3332      	adds	r3, #50	; 0x32
 8005296:	4a08      	ldr	r2, [pc, #32]	; (80052b8 <UART_SetConfig+0x2d4>)
 8005298:	fba2 2303 	umull	r2, r3, r2, r3
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	f003 0207 	and.w	r2, r3, #7
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4422      	add	r2, r4
 80052aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052ac:	e106      	b.n	80054bc <UART_SetConfig+0x4d8>
 80052ae:	bf00      	nop
 80052b0:	40011000 	.word	0x40011000
 80052b4:	40011400 	.word	0x40011400
 80052b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052ce:	4642      	mov	r2, r8
 80052d0:	464b      	mov	r3, r9
 80052d2:	1891      	adds	r1, r2, r2
 80052d4:	6239      	str	r1, [r7, #32]
 80052d6:	415b      	adcs	r3, r3
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
 80052da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052de:	4641      	mov	r1, r8
 80052e0:	1854      	adds	r4, r2, r1
 80052e2:	4649      	mov	r1, r9
 80052e4:	eb43 0501 	adc.w	r5, r3, r1
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	00eb      	lsls	r3, r5, #3
 80052f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052f6:	00e2      	lsls	r2, r4, #3
 80052f8:	4614      	mov	r4, r2
 80052fa:	461d      	mov	r5, r3
 80052fc:	4643      	mov	r3, r8
 80052fe:	18e3      	adds	r3, r4, r3
 8005300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005304:	464b      	mov	r3, r9
 8005306:	eb45 0303 	adc.w	r3, r5, r3
 800530a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800530e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800531a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800532a:	4629      	mov	r1, r5
 800532c:	008b      	lsls	r3, r1, #2
 800532e:	4621      	mov	r1, r4
 8005330:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005334:	4621      	mov	r1, r4
 8005336:	008a      	lsls	r2, r1, #2
 8005338:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800533c:	f7fb f98c 	bl	8000658 <__aeabi_uldivmod>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4b60      	ldr	r3, [pc, #384]	; (80054c8 <UART_SetConfig+0x4e4>)
 8005346:	fba3 2302 	umull	r2, r3, r3, r2
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	011c      	lsls	r4, r3, #4
 800534e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005352:	2200      	movs	r2, #0
 8005354:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005358:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800535c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005360:	4642      	mov	r2, r8
 8005362:	464b      	mov	r3, r9
 8005364:	1891      	adds	r1, r2, r2
 8005366:	61b9      	str	r1, [r7, #24]
 8005368:	415b      	adcs	r3, r3
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005370:	4641      	mov	r1, r8
 8005372:	1851      	adds	r1, r2, r1
 8005374:	6139      	str	r1, [r7, #16]
 8005376:	4649      	mov	r1, r9
 8005378:	414b      	adcs	r3, r1
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005388:	4659      	mov	r1, fp
 800538a:	00cb      	lsls	r3, r1, #3
 800538c:	4651      	mov	r1, sl
 800538e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005392:	4651      	mov	r1, sl
 8005394:	00ca      	lsls	r2, r1, #3
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	4603      	mov	r3, r0
 800539c:	4642      	mov	r2, r8
 800539e:	189b      	adds	r3, r3, r2
 80053a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053a4:	464b      	mov	r3, r9
 80053a6:	460a      	mov	r2, r1
 80053a8:	eb42 0303 	adc.w	r3, r2, r3
 80053ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80053ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053c8:	4649      	mov	r1, r9
 80053ca:	008b      	lsls	r3, r1, #2
 80053cc:	4641      	mov	r1, r8
 80053ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053d2:	4641      	mov	r1, r8
 80053d4:	008a      	lsls	r2, r1, #2
 80053d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053da:	f7fb f93d 	bl	8000658 <__aeabi_uldivmod>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	4b38      	ldr	r3, [pc, #224]	; (80054c8 <UART_SetConfig+0x4e4>)
 80053e6:	fba3 2301 	umull	r2, r3, r3, r1
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	2264      	movs	r2, #100	; 0x64
 80053ee:	fb02 f303 	mul.w	r3, r2, r3
 80053f2:	1acb      	subs	r3, r1, r3
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	3332      	adds	r3, #50	; 0x32
 80053f8:	4a33      	ldr	r2, [pc, #204]	; (80054c8 <UART_SetConfig+0x4e4>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005404:	441c      	add	r4, r3
 8005406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800540a:	2200      	movs	r2, #0
 800540c:	673b      	str	r3, [r7, #112]	; 0x70
 800540e:	677a      	str	r2, [r7, #116]	; 0x74
 8005410:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005414:	4642      	mov	r2, r8
 8005416:	464b      	mov	r3, r9
 8005418:	1891      	adds	r1, r2, r2
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	415b      	adcs	r3, r3
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005424:	4641      	mov	r1, r8
 8005426:	1851      	adds	r1, r2, r1
 8005428:	6039      	str	r1, [r7, #0]
 800542a:	4649      	mov	r1, r9
 800542c:	414b      	adcs	r3, r1
 800542e:	607b      	str	r3, [r7, #4]
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800543c:	4659      	mov	r1, fp
 800543e:	00cb      	lsls	r3, r1, #3
 8005440:	4651      	mov	r1, sl
 8005442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005446:	4651      	mov	r1, sl
 8005448:	00ca      	lsls	r2, r1, #3
 800544a:	4610      	mov	r0, r2
 800544c:	4619      	mov	r1, r3
 800544e:	4603      	mov	r3, r0
 8005450:	4642      	mov	r2, r8
 8005452:	189b      	adds	r3, r3, r2
 8005454:	66bb      	str	r3, [r7, #104]	; 0x68
 8005456:	464b      	mov	r3, r9
 8005458:	460a      	mov	r2, r1
 800545a:	eb42 0303 	adc.w	r3, r2, r3
 800545e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	663b      	str	r3, [r7, #96]	; 0x60
 800546a:	667a      	str	r2, [r7, #100]	; 0x64
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005478:	4649      	mov	r1, r9
 800547a:	008b      	lsls	r3, r1, #2
 800547c:	4641      	mov	r1, r8
 800547e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005482:	4641      	mov	r1, r8
 8005484:	008a      	lsls	r2, r1, #2
 8005486:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800548a:	f7fb f8e5 	bl	8000658 <__aeabi_uldivmod>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4b0d      	ldr	r3, [pc, #52]	; (80054c8 <UART_SetConfig+0x4e4>)
 8005494:	fba3 1302 	umull	r1, r3, r3, r2
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	2164      	movs	r1, #100	; 0x64
 800549c:	fb01 f303 	mul.w	r3, r1, r3
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	3332      	adds	r3, #50	; 0x32
 80054a6:	4a08      	ldr	r2, [pc, #32]	; (80054c8 <UART_SetConfig+0x4e4>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	095b      	lsrs	r3, r3, #5
 80054ae:	f003 020f 	and.w	r2, r3, #15
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4422      	add	r2, r4
 80054ba:	609a      	str	r2, [r3, #8]
}
 80054bc:	bf00      	nop
 80054be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054c2:	46bd      	mov	sp, r7
 80054c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c8:	51eb851f 	.word	0x51eb851f

080054cc <round>:
 80054cc:	ec53 2b10 	vmov	r2, r3, d0
 80054d0:	b570      	push	{r4, r5, r6, lr}
 80054d2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80054d6:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80054da:	2813      	cmp	r0, #19
 80054dc:	ee10 5a10 	vmov	r5, s0
 80054e0:	4619      	mov	r1, r3
 80054e2:	dc18      	bgt.n	8005516 <round+0x4a>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	da09      	bge.n	80054fc <round+0x30>
 80054e8:	3001      	adds	r0, #1
 80054ea:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 80054ee:	d103      	bne.n	80054f8 <round+0x2c>
 80054f0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80054f4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80054f8:	2300      	movs	r3, #0
 80054fa:	e02a      	b.n	8005552 <round+0x86>
 80054fc:	4c16      	ldr	r4, [pc, #88]	; (8005558 <round+0x8c>)
 80054fe:	4104      	asrs	r4, r0
 8005500:	ea03 0604 	and.w	r6, r3, r4
 8005504:	4316      	orrs	r6, r2
 8005506:	d011      	beq.n	800552c <round+0x60>
 8005508:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800550c:	4103      	asrs	r3, r0
 800550e:	440b      	add	r3, r1
 8005510:	ea23 0104 	bic.w	r1, r3, r4
 8005514:	e7f0      	b.n	80054f8 <round+0x2c>
 8005516:	2833      	cmp	r0, #51	; 0x33
 8005518:	dd0b      	ble.n	8005532 <round+0x66>
 800551a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800551e:	d105      	bne.n	800552c <round+0x60>
 8005520:	ee10 0a10 	vmov	r0, s0
 8005524:	f7fa feba 	bl	800029c <__adddf3>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	ec43 2b10 	vmov	d0, r2, r3
 8005530:	bd70      	pop	{r4, r5, r6, pc}
 8005532:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8005536:	f04f 34ff 	mov.w	r4, #4294967295
 800553a:	40f4      	lsrs	r4, r6
 800553c:	4214      	tst	r4, r2
 800553e:	d0f5      	beq.n	800552c <round+0x60>
 8005540:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8005544:	2301      	movs	r3, #1
 8005546:	4083      	lsls	r3, r0
 8005548:	195b      	adds	r3, r3, r5
 800554a:	bf28      	it	cs
 800554c:	3101      	addcs	r1, #1
 800554e:	ea23 0304 	bic.w	r3, r3, r4
 8005552:	461a      	mov	r2, r3
 8005554:	460b      	mov	r3, r1
 8005556:	e7e9      	b.n	800552c <round+0x60>
 8005558:	000fffff 	.word	0x000fffff

0800555c <sniprintf>:
 800555c:	b40c      	push	{r2, r3}
 800555e:	b530      	push	{r4, r5, lr}
 8005560:	4b17      	ldr	r3, [pc, #92]	; (80055c0 <sniprintf+0x64>)
 8005562:	1e0c      	subs	r4, r1, #0
 8005564:	681d      	ldr	r5, [r3, #0]
 8005566:	b09d      	sub	sp, #116	; 0x74
 8005568:	da08      	bge.n	800557c <sniprintf+0x20>
 800556a:	238b      	movs	r3, #139	; 0x8b
 800556c:	602b      	str	r3, [r5, #0]
 800556e:	f04f 30ff 	mov.w	r0, #4294967295
 8005572:	b01d      	add	sp, #116	; 0x74
 8005574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005578:	b002      	add	sp, #8
 800557a:	4770      	bx	lr
 800557c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005580:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005584:	bf14      	ite	ne
 8005586:	f104 33ff 	addne.w	r3, r4, #4294967295
 800558a:	4623      	moveq	r3, r4
 800558c:	9304      	str	r3, [sp, #16]
 800558e:	9307      	str	r3, [sp, #28]
 8005590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005594:	9002      	str	r0, [sp, #8]
 8005596:	9006      	str	r0, [sp, #24]
 8005598:	f8ad 3016 	strh.w	r3, [sp, #22]
 800559c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800559e:	ab21      	add	r3, sp, #132	; 0x84
 80055a0:	a902      	add	r1, sp, #8
 80055a2:	4628      	mov	r0, r5
 80055a4:	9301      	str	r3, [sp, #4]
 80055a6:	f000 f993 	bl	80058d0 <_svfiprintf_r>
 80055aa:	1c43      	adds	r3, r0, #1
 80055ac:	bfbc      	itt	lt
 80055ae:	238b      	movlt	r3, #139	; 0x8b
 80055b0:	602b      	strlt	r3, [r5, #0]
 80055b2:	2c00      	cmp	r4, #0
 80055b4:	d0dd      	beq.n	8005572 <sniprintf+0x16>
 80055b6:	9b02      	ldr	r3, [sp, #8]
 80055b8:	2200      	movs	r2, #0
 80055ba:	701a      	strb	r2, [r3, #0]
 80055bc:	e7d9      	b.n	8005572 <sniprintf+0x16>
 80055be:	bf00      	nop
 80055c0:	20000084 	.word	0x20000084

080055c4 <memset>:
 80055c4:	4402      	add	r2, r0
 80055c6:	4603      	mov	r3, r0
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d100      	bne.n	80055ce <memset+0xa>
 80055cc:	4770      	bx	lr
 80055ce:	f803 1b01 	strb.w	r1, [r3], #1
 80055d2:	e7f9      	b.n	80055c8 <memset+0x4>

080055d4 <__errno>:
 80055d4:	4b01      	ldr	r3, [pc, #4]	; (80055dc <__errno+0x8>)
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000084 	.word	0x20000084

080055e0 <__libc_init_array>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	4d0d      	ldr	r5, [pc, #52]	; (8005618 <__libc_init_array+0x38>)
 80055e4:	4c0d      	ldr	r4, [pc, #52]	; (800561c <__libc_init_array+0x3c>)
 80055e6:	1b64      	subs	r4, r4, r5
 80055e8:	10a4      	asrs	r4, r4, #2
 80055ea:	2600      	movs	r6, #0
 80055ec:	42a6      	cmp	r6, r4
 80055ee:	d109      	bne.n	8005604 <__libc_init_array+0x24>
 80055f0:	4d0b      	ldr	r5, [pc, #44]	; (8005620 <__libc_init_array+0x40>)
 80055f2:	4c0c      	ldr	r4, [pc, #48]	; (8005624 <__libc_init_array+0x44>)
 80055f4:	f000 fc6a 	bl	8005ecc <_init>
 80055f8:	1b64      	subs	r4, r4, r5
 80055fa:	10a4      	asrs	r4, r4, #2
 80055fc:	2600      	movs	r6, #0
 80055fe:	42a6      	cmp	r6, r4
 8005600:	d105      	bne.n	800560e <__libc_init_array+0x2e>
 8005602:	bd70      	pop	{r4, r5, r6, pc}
 8005604:	f855 3b04 	ldr.w	r3, [r5], #4
 8005608:	4798      	blx	r3
 800560a:	3601      	adds	r6, #1
 800560c:	e7ee      	b.n	80055ec <__libc_init_array+0xc>
 800560e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005612:	4798      	blx	r3
 8005614:	3601      	adds	r6, #1
 8005616:	e7f2      	b.n	80055fe <__libc_init_array+0x1e>
 8005618:	08005f5c 	.word	0x08005f5c
 800561c:	08005f5c 	.word	0x08005f5c
 8005620:	08005f5c 	.word	0x08005f5c
 8005624:	08005f60 	.word	0x08005f60

08005628 <__retarget_lock_acquire_recursive>:
 8005628:	4770      	bx	lr

0800562a <__retarget_lock_release_recursive>:
 800562a:	4770      	bx	lr

0800562c <_free_r>:
 800562c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800562e:	2900      	cmp	r1, #0
 8005630:	d044      	beq.n	80056bc <_free_r+0x90>
 8005632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005636:	9001      	str	r0, [sp, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	f1a1 0404 	sub.w	r4, r1, #4
 800563e:	bfb8      	it	lt
 8005640:	18e4      	addlt	r4, r4, r3
 8005642:	f000 f8df 	bl	8005804 <__malloc_lock>
 8005646:	4a1e      	ldr	r2, [pc, #120]	; (80056c0 <_free_r+0x94>)
 8005648:	9801      	ldr	r0, [sp, #4]
 800564a:	6813      	ldr	r3, [r2, #0]
 800564c:	b933      	cbnz	r3, 800565c <_free_r+0x30>
 800564e:	6063      	str	r3, [r4, #4]
 8005650:	6014      	str	r4, [r2, #0]
 8005652:	b003      	add	sp, #12
 8005654:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005658:	f000 b8da 	b.w	8005810 <__malloc_unlock>
 800565c:	42a3      	cmp	r3, r4
 800565e:	d908      	bls.n	8005672 <_free_r+0x46>
 8005660:	6825      	ldr	r5, [r4, #0]
 8005662:	1961      	adds	r1, r4, r5
 8005664:	428b      	cmp	r3, r1
 8005666:	bf01      	itttt	eq
 8005668:	6819      	ldreq	r1, [r3, #0]
 800566a:	685b      	ldreq	r3, [r3, #4]
 800566c:	1949      	addeq	r1, r1, r5
 800566e:	6021      	streq	r1, [r4, #0]
 8005670:	e7ed      	b.n	800564e <_free_r+0x22>
 8005672:	461a      	mov	r2, r3
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	b10b      	cbz	r3, 800567c <_free_r+0x50>
 8005678:	42a3      	cmp	r3, r4
 800567a:	d9fa      	bls.n	8005672 <_free_r+0x46>
 800567c:	6811      	ldr	r1, [r2, #0]
 800567e:	1855      	adds	r5, r2, r1
 8005680:	42a5      	cmp	r5, r4
 8005682:	d10b      	bne.n	800569c <_free_r+0x70>
 8005684:	6824      	ldr	r4, [r4, #0]
 8005686:	4421      	add	r1, r4
 8005688:	1854      	adds	r4, r2, r1
 800568a:	42a3      	cmp	r3, r4
 800568c:	6011      	str	r1, [r2, #0]
 800568e:	d1e0      	bne.n	8005652 <_free_r+0x26>
 8005690:	681c      	ldr	r4, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	6053      	str	r3, [r2, #4]
 8005696:	440c      	add	r4, r1
 8005698:	6014      	str	r4, [r2, #0]
 800569a:	e7da      	b.n	8005652 <_free_r+0x26>
 800569c:	d902      	bls.n	80056a4 <_free_r+0x78>
 800569e:	230c      	movs	r3, #12
 80056a0:	6003      	str	r3, [r0, #0]
 80056a2:	e7d6      	b.n	8005652 <_free_r+0x26>
 80056a4:	6825      	ldr	r5, [r4, #0]
 80056a6:	1961      	adds	r1, r4, r5
 80056a8:	428b      	cmp	r3, r1
 80056aa:	bf04      	itt	eq
 80056ac:	6819      	ldreq	r1, [r3, #0]
 80056ae:	685b      	ldreq	r3, [r3, #4]
 80056b0:	6063      	str	r3, [r4, #4]
 80056b2:	bf04      	itt	eq
 80056b4:	1949      	addeq	r1, r1, r5
 80056b6:	6021      	streq	r1, [r4, #0]
 80056b8:	6054      	str	r4, [r2, #4]
 80056ba:	e7ca      	b.n	8005652 <_free_r+0x26>
 80056bc:	b003      	add	sp, #12
 80056be:	bd30      	pop	{r4, r5, pc}
 80056c0:	2000083c 	.word	0x2000083c

080056c4 <sbrk_aligned>:
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	4e0e      	ldr	r6, [pc, #56]	; (8005700 <sbrk_aligned+0x3c>)
 80056c8:	460c      	mov	r4, r1
 80056ca:	6831      	ldr	r1, [r6, #0]
 80056cc:	4605      	mov	r5, r0
 80056ce:	b911      	cbnz	r1, 80056d6 <sbrk_aligned+0x12>
 80056d0:	f000 fba6 	bl	8005e20 <_sbrk_r>
 80056d4:	6030      	str	r0, [r6, #0]
 80056d6:	4621      	mov	r1, r4
 80056d8:	4628      	mov	r0, r5
 80056da:	f000 fba1 	bl	8005e20 <_sbrk_r>
 80056de:	1c43      	adds	r3, r0, #1
 80056e0:	d00a      	beq.n	80056f8 <sbrk_aligned+0x34>
 80056e2:	1cc4      	adds	r4, r0, #3
 80056e4:	f024 0403 	bic.w	r4, r4, #3
 80056e8:	42a0      	cmp	r0, r4
 80056ea:	d007      	beq.n	80056fc <sbrk_aligned+0x38>
 80056ec:	1a21      	subs	r1, r4, r0
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 fb96 	bl	8005e20 <_sbrk_r>
 80056f4:	3001      	adds	r0, #1
 80056f6:	d101      	bne.n	80056fc <sbrk_aligned+0x38>
 80056f8:	f04f 34ff 	mov.w	r4, #4294967295
 80056fc:	4620      	mov	r0, r4
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	20000840 	.word	0x20000840

08005704 <_malloc_r>:
 8005704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005708:	1ccd      	adds	r5, r1, #3
 800570a:	f025 0503 	bic.w	r5, r5, #3
 800570e:	3508      	adds	r5, #8
 8005710:	2d0c      	cmp	r5, #12
 8005712:	bf38      	it	cc
 8005714:	250c      	movcc	r5, #12
 8005716:	2d00      	cmp	r5, #0
 8005718:	4607      	mov	r7, r0
 800571a:	db01      	blt.n	8005720 <_malloc_r+0x1c>
 800571c:	42a9      	cmp	r1, r5
 800571e:	d905      	bls.n	800572c <_malloc_r+0x28>
 8005720:	230c      	movs	r3, #12
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	2600      	movs	r6, #0
 8005726:	4630      	mov	r0, r6
 8005728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800572c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005800 <_malloc_r+0xfc>
 8005730:	f000 f868 	bl	8005804 <__malloc_lock>
 8005734:	f8d8 3000 	ldr.w	r3, [r8]
 8005738:	461c      	mov	r4, r3
 800573a:	bb5c      	cbnz	r4, 8005794 <_malloc_r+0x90>
 800573c:	4629      	mov	r1, r5
 800573e:	4638      	mov	r0, r7
 8005740:	f7ff ffc0 	bl	80056c4 <sbrk_aligned>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	4604      	mov	r4, r0
 8005748:	d155      	bne.n	80057f6 <_malloc_r+0xf2>
 800574a:	f8d8 4000 	ldr.w	r4, [r8]
 800574e:	4626      	mov	r6, r4
 8005750:	2e00      	cmp	r6, #0
 8005752:	d145      	bne.n	80057e0 <_malloc_r+0xdc>
 8005754:	2c00      	cmp	r4, #0
 8005756:	d048      	beq.n	80057ea <_malloc_r+0xe6>
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	4631      	mov	r1, r6
 800575c:	4638      	mov	r0, r7
 800575e:	eb04 0903 	add.w	r9, r4, r3
 8005762:	f000 fb5d 	bl	8005e20 <_sbrk_r>
 8005766:	4581      	cmp	r9, r0
 8005768:	d13f      	bne.n	80057ea <_malloc_r+0xe6>
 800576a:	6821      	ldr	r1, [r4, #0]
 800576c:	1a6d      	subs	r5, r5, r1
 800576e:	4629      	mov	r1, r5
 8005770:	4638      	mov	r0, r7
 8005772:	f7ff ffa7 	bl	80056c4 <sbrk_aligned>
 8005776:	3001      	adds	r0, #1
 8005778:	d037      	beq.n	80057ea <_malloc_r+0xe6>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	442b      	add	r3, r5
 800577e:	6023      	str	r3, [r4, #0]
 8005780:	f8d8 3000 	ldr.w	r3, [r8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d038      	beq.n	80057fa <_malloc_r+0xf6>
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	42a2      	cmp	r2, r4
 800578c:	d12b      	bne.n	80057e6 <_malloc_r+0xe2>
 800578e:	2200      	movs	r2, #0
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	e00f      	b.n	80057b4 <_malloc_r+0xb0>
 8005794:	6822      	ldr	r2, [r4, #0]
 8005796:	1b52      	subs	r2, r2, r5
 8005798:	d41f      	bmi.n	80057da <_malloc_r+0xd6>
 800579a:	2a0b      	cmp	r2, #11
 800579c:	d917      	bls.n	80057ce <_malloc_r+0xca>
 800579e:	1961      	adds	r1, r4, r5
 80057a0:	42a3      	cmp	r3, r4
 80057a2:	6025      	str	r5, [r4, #0]
 80057a4:	bf18      	it	ne
 80057a6:	6059      	strne	r1, [r3, #4]
 80057a8:	6863      	ldr	r3, [r4, #4]
 80057aa:	bf08      	it	eq
 80057ac:	f8c8 1000 	streq.w	r1, [r8]
 80057b0:	5162      	str	r2, [r4, r5]
 80057b2:	604b      	str	r3, [r1, #4]
 80057b4:	4638      	mov	r0, r7
 80057b6:	f104 060b 	add.w	r6, r4, #11
 80057ba:	f000 f829 	bl	8005810 <__malloc_unlock>
 80057be:	f026 0607 	bic.w	r6, r6, #7
 80057c2:	1d23      	adds	r3, r4, #4
 80057c4:	1af2      	subs	r2, r6, r3
 80057c6:	d0ae      	beq.n	8005726 <_malloc_r+0x22>
 80057c8:	1b9b      	subs	r3, r3, r6
 80057ca:	50a3      	str	r3, [r4, r2]
 80057cc:	e7ab      	b.n	8005726 <_malloc_r+0x22>
 80057ce:	42a3      	cmp	r3, r4
 80057d0:	6862      	ldr	r2, [r4, #4]
 80057d2:	d1dd      	bne.n	8005790 <_malloc_r+0x8c>
 80057d4:	f8c8 2000 	str.w	r2, [r8]
 80057d8:	e7ec      	b.n	80057b4 <_malloc_r+0xb0>
 80057da:	4623      	mov	r3, r4
 80057dc:	6864      	ldr	r4, [r4, #4]
 80057de:	e7ac      	b.n	800573a <_malloc_r+0x36>
 80057e0:	4634      	mov	r4, r6
 80057e2:	6876      	ldr	r6, [r6, #4]
 80057e4:	e7b4      	b.n	8005750 <_malloc_r+0x4c>
 80057e6:	4613      	mov	r3, r2
 80057e8:	e7cc      	b.n	8005784 <_malloc_r+0x80>
 80057ea:	230c      	movs	r3, #12
 80057ec:	603b      	str	r3, [r7, #0]
 80057ee:	4638      	mov	r0, r7
 80057f0:	f000 f80e 	bl	8005810 <__malloc_unlock>
 80057f4:	e797      	b.n	8005726 <_malloc_r+0x22>
 80057f6:	6025      	str	r5, [r4, #0]
 80057f8:	e7dc      	b.n	80057b4 <_malloc_r+0xb0>
 80057fa:	605b      	str	r3, [r3, #4]
 80057fc:	deff      	udf	#255	; 0xff
 80057fe:	bf00      	nop
 8005800:	2000083c 	.word	0x2000083c

08005804 <__malloc_lock>:
 8005804:	4801      	ldr	r0, [pc, #4]	; (800580c <__malloc_lock+0x8>)
 8005806:	f7ff bf0f 	b.w	8005628 <__retarget_lock_acquire_recursive>
 800580a:	bf00      	nop
 800580c:	20000838 	.word	0x20000838

08005810 <__malloc_unlock>:
 8005810:	4801      	ldr	r0, [pc, #4]	; (8005818 <__malloc_unlock+0x8>)
 8005812:	f7ff bf0a 	b.w	800562a <__retarget_lock_release_recursive>
 8005816:	bf00      	nop
 8005818:	20000838 	.word	0x20000838

0800581c <__ssputs_r>:
 800581c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005820:	688e      	ldr	r6, [r1, #8]
 8005822:	461f      	mov	r7, r3
 8005824:	42be      	cmp	r6, r7
 8005826:	680b      	ldr	r3, [r1, #0]
 8005828:	4682      	mov	sl, r0
 800582a:	460c      	mov	r4, r1
 800582c:	4690      	mov	r8, r2
 800582e:	d82c      	bhi.n	800588a <__ssputs_r+0x6e>
 8005830:	898a      	ldrh	r2, [r1, #12]
 8005832:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005836:	d026      	beq.n	8005886 <__ssputs_r+0x6a>
 8005838:	6965      	ldr	r5, [r4, #20]
 800583a:	6909      	ldr	r1, [r1, #16]
 800583c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005840:	eba3 0901 	sub.w	r9, r3, r1
 8005844:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005848:	1c7b      	adds	r3, r7, #1
 800584a:	444b      	add	r3, r9
 800584c:	106d      	asrs	r5, r5, #1
 800584e:	429d      	cmp	r5, r3
 8005850:	bf38      	it	cc
 8005852:	461d      	movcc	r5, r3
 8005854:	0553      	lsls	r3, r2, #21
 8005856:	d527      	bpl.n	80058a8 <__ssputs_r+0x8c>
 8005858:	4629      	mov	r1, r5
 800585a:	f7ff ff53 	bl	8005704 <_malloc_r>
 800585e:	4606      	mov	r6, r0
 8005860:	b360      	cbz	r0, 80058bc <__ssputs_r+0xa0>
 8005862:	6921      	ldr	r1, [r4, #16]
 8005864:	464a      	mov	r2, r9
 8005866:	f000 faeb 	bl	8005e40 <memcpy>
 800586a:	89a3      	ldrh	r3, [r4, #12]
 800586c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005874:	81a3      	strh	r3, [r4, #12]
 8005876:	6126      	str	r6, [r4, #16]
 8005878:	6165      	str	r5, [r4, #20]
 800587a:	444e      	add	r6, r9
 800587c:	eba5 0509 	sub.w	r5, r5, r9
 8005880:	6026      	str	r6, [r4, #0]
 8005882:	60a5      	str	r5, [r4, #8]
 8005884:	463e      	mov	r6, r7
 8005886:	42be      	cmp	r6, r7
 8005888:	d900      	bls.n	800588c <__ssputs_r+0x70>
 800588a:	463e      	mov	r6, r7
 800588c:	6820      	ldr	r0, [r4, #0]
 800588e:	4632      	mov	r2, r6
 8005890:	4641      	mov	r1, r8
 8005892:	f000 faab 	bl	8005dec <memmove>
 8005896:	68a3      	ldr	r3, [r4, #8]
 8005898:	1b9b      	subs	r3, r3, r6
 800589a:	60a3      	str	r3, [r4, #8]
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	4433      	add	r3, r6
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	2000      	movs	r0, #0
 80058a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a8:	462a      	mov	r2, r5
 80058aa:	f000 fad7 	bl	8005e5c <_realloc_r>
 80058ae:	4606      	mov	r6, r0
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d1e0      	bne.n	8005876 <__ssputs_r+0x5a>
 80058b4:	6921      	ldr	r1, [r4, #16]
 80058b6:	4650      	mov	r0, sl
 80058b8:	f7ff feb8 	bl	800562c <_free_r>
 80058bc:	230c      	movs	r3, #12
 80058be:	f8ca 3000 	str.w	r3, [sl]
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c8:	81a3      	strh	r3, [r4, #12]
 80058ca:	f04f 30ff 	mov.w	r0, #4294967295
 80058ce:	e7e9      	b.n	80058a4 <__ssputs_r+0x88>

080058d0 <_svfiprintf_r>:
 80058d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d4:	4698      	mov	r8, r3
 80058d6:	898b      	ldrh	r3, [r1, #12]
 80058d8:	061b      	lsls	r3, r3, #24
 80058da:	b09d      	sub	sp, #116	; 0x74
 80058dc:	4607      	mov	r7, r0
 80058de:	460d      	mov	r5, r1
 80058e0:	4614      	mov	r4, r2
 80058e2:	d50e      	bpl.n	8005902 <_svfiprintf_r+0x32>
 80058e4:	690b      	ldr	r3, [r1, #16]
 80058e6:	b963      	cbnz	r3, 8005902 <_svfiprintf_r+0x32>
 80058e8:	2140      	movs	r1, #64	; 0x40
 80058ea:	f7ff ff0b 	bl	8005704 <_malloc_r>
 80058ee:	6028      	str	r0, [r5, #0]
 80058f0:	6128      	str	r0, [r5, #16]
 80058f2:	b920      	cbnz	r0, 80058fe <_svfiprintf_r+0x2e>
 80058f4:	230c      	movs	r3, #12
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	f04f 30ff 	mov.w	r0, #4294967295
 80058fc:	e0d0      	b.n	8005aa0 <_svfiprintf_r+0x1d0>
 80058fe:	2340      	movs	r3, #64	; 0x40
 8005900:	616b      	str	r3, [r5, #20]
 8005902:	2300      	movs	r3, #0
 8005904:	9309      	str	r3, [sp, #36]	; 0x24
 8005906:	2320      	movs	r3, #32
 8005908:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800590c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005910:	2330      	movs	r3, #48	; 0x30
 8005912:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005ab8 <_svfiprintf_r+0x1e8>
 8005916:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800591a:	f04f 0901 	mov.w	r9, #1
 800591e:	4623      	mov	r3, r4
 8005920:	469a      	mov	sl, r3
 8005922:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005926:	b10a      	cbz	r2, 800592c <_svfiprintf_r+0x5c>
 8005928:	2a25      	cmp	r2, #37	; 0x25
 800592a:	d1f9      	bne.n	8005920 <_svfiprintf_r+0x50>
 800592c:	ebba 0b04 	subs.w	fp, sl, r4
 8005930:	d00b      	beq.n	800594a <_svfiprintf_r+0x7a>
 8005932:	465b      	mov	r3, fp
 8005934:	4622      	mov	r2, r4
 8005936:	4629      	mov	r1, r5
 8005938:	4638      	mov	r0, r7
 800593a:	f7ff ff6f 	bl	800581c <__ssputs_r>
 800593e:	3001      	adds	r0, #1
 8005940:	f000 80a9 	beq.w	8005a96 <_svfiprintf_r+0x1c6>
 8005944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005946:	445a      	add	r2, fp
 8005948:	9209      	str	r2, [sp, #36]	; 0x24
 800594a:	f89a 3000 	ldrb.w	r3, [sl]
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 80a1 	beq.w	8005a96 <_svfiprintf_r+0x1c6>
 8005954:	2300      	movs	r3, #0
 8005956:	f04f 32ff 	mov.w	r2, #4294967295
 800595a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800595e:	f10a 0a01 	add.w	sl, sl, #1
 8005962:	9304      	str	r3, [sp, #16]
 8005964:	9307      	str	r3, [sp, #28]
 8005966:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800596a:	931a      	str	r3, [sp, #104]	; 0x68
 800596c:	4654      	mov	r4, sl
 800596e:	2205      	movs	r2, #5
 8005970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005974:	4850      	ldr	r0, [pc, #320]	; (8005ab8 <_svfiprintf_r+0x1e8>)
 8005976:	f7fa fc3b 	bl	80001f0 <memchr>
 800597a:	9a04      	ldr	r2, [sp, #16]
 800597c:	b9d8      	cbnz	r0, 80059b6 <_svfiprintf_r+0xe6>
 800597e:	06d0      	lsls	r0, r2, #27
 8005980:	bf44      	itt	mi
 8005982:	2320      	movmi	r3, #32
 8005984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005988:	0711      	lsls	r1, r2, #28
 800598a:	bf44      	itt	mi
 800598c:	232b      	movmi	r3, #43	; 0x2b
 800598e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005992:	f89a 3000 	ldrb.w	r3, [sl]
 8005996:	2b2a      	cmp	r3, #42	; 0x2a
 8005998:	d015      	beq.n	80059c6 <_svfiprintf_r+0xf6>
 800599a:	9a07      	ldr	r2, [sp, #28]
 800599c:	4654      	mov	r4, sl
 800599e:	2000      	movs	r0, #0
 80059a0:	f04f 0c0a 	mov.w	ip, #10
 80059a4:	4621      	mov	r1, r4
 80059a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059aa:	3b30      	subs	r3, #48	; 0x30
 80059ac:	2b09      	cmp	r3, #9
 80059ae:	d94d      	bls.n	8005a4c <_svfiprintf_r+0x17c>
 80059b0:	b1b0      	cbz	r0, 80059e0 <_svfiprintf_r+0x110>
 80059b2:	9207      	str	r2, [sp, #28]
 80059b4:	e014      	b.n	80059e0 <_svfiprintf_r+0x110>
 80059b6:	eba0 0308 	sub.w	r3, r0, r8
 80059ba:	fa09 f303 	lsl.w	r3, r9, r3
 80059be:	4313      	orrs	r3, r2
 80059c0:	9304      	str	r3, [sp, #16]
 80059c2:	46a2      	mov	sl, r4
 80059c4:	e7d2      	b.n	800596c <_svfiprintf_r+0x9c>
 80059c6:	9b03      	ldr	r3, [sp, #12]
 80059c8:	1d19      	adds	r1, r3, #4
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	9103      	str	r1, [sp, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	bfbb      	ittet	lt
 80059d2:	425b      	neglt	r3, r3
 80059d4:	f042 0202 	orrlt.w	r2, r2, #2
 80059d8:	9307      	strge	r3, [sp, #28]
 80059da:	9307      	strlt	r3, [sp, #28]
 80059dc:	bfb8      	it	lt
 80059de:	9204      	strlt	r2, [sp, #16]
 80059e0:	7823      	ldrb	r3, [r4, #0]
 80059e2:	2b2e      	cmp	r3, #46	; 0x2e
 80059e4:	d10c      	bne.n	8005a00 <_svfiprintf_r+0x130>
 80059e6:	7863      	ldrb	r3, [r4, #1]
 80059e8:	2b2a      	cmp	r3, #42	; 0x2a
 80059ea:	d134      	bne.n	8005a56 <_svfiprintf_r+0x186>
 80059ec:	9b03      	ldr	r3, [sp, #12]
 80059ee:	1d1a      	adds	r2, r3, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	9203      	str	r2, [sp, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	bfb8      	it	lt
 80059f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80059fc:	3402      	adds	r4, #2
 80059fe:	9305      	str	r3, [sp, #20]
 8005a00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005ac8 <_svfiprintf_r+0x1f8>
 8005a04:	7821      	ldrb	r1, [r4, #0]
 8005a06:	2203      	movs	r2, #3
 8005a08:	4650      	mov	r0, sl
 8005a0a:	f7fa fbf1 	bl	80001f0 <memchr>
 8005a0e:	b138      	cbz	r0, 8005a20 <_svfiprintf_r+0x150>
 8005a10:	9b04      	ldr	r3, [sp, #16]
 8005a12:	eba0 000a 	sub.w	r0, r0, sl
 8005a16:	2240      	movs	r2, #64	; 0x40
 8005a18:	4082      	lsls	r2, r0
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	3401      	adds	r4, #1
 8005a1e:	9304      	str	r3, [sp, #16]
 8005a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a24:	4825      	ldr	r0, [pc, #148]	; (8005abc <_svfiprintf_r+0x1ec>)
 8005a26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a2a:	2206      	movs	r2, #6
 8005a2c:	f7fa fbe0 	bl	80001f0 <memchr>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d038      	beq.n	8005aa6 <_svfiprintf_r+0x1d6>
 8005a34:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <_svfiprintf_r+0x1f0>)
 8005a36:	bb1b      	cbnz	r3, 8005a80 <_svfiprintf_r+0x1b0>
 8005a38:	9b03      	ldr	r3, [sp, #12]
 8005a3a:	3307      	adds	r3, #7
 8005a3c:	f023 0307 	bic.w	r3, r3, #7
 8005a40:	3308      	adds	r3, #8
 8005a42:	9303      	str	r3, [sp, #12]
 8005a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a46:	4433      	add	r3, r6
 8005a48:	9309      	str	r3, [sp, #36]	; 0x24
 8005a4a:	e768      	b.n	800591e <_svfiprintf_r+0x4e>
 8005a4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a50:	460c      	mov	r4, r1
 8005a52:	2001      	movs	r0, #1
 8005a54:	e7a6      	b.n	80059a4 <_svfiprintf_r+0xd4>
 8005a56:	2300      	movs	r3, #0
 8005a58:	3401      	adds	r4, #1
 8005a5a:	9305      	str	r3, [sp, #20]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	f04f 0c0a 	mov.w	ip, #10
 8005a62:	4620      	mov	r0, r4
 8005a64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a68:	3a30      	subs	r2, #48	; 0x30
 8005a6a:	2a09      	cmp	r2, #9
 8005a6c:	d903      	bls.n	8005a76 <_svfiprintf_r+0x1a6>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0c6      	beq.n	8005a00 <_svfiprintf_r+0x130>
 8005a72:	9105      	str	r1, [sp, #20]
 8005a74:	e7c4      	b.n	8005a00 <_svfiprintf_r+0x130>
 8005a76:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e7f0      	b.n	8005a62 <_svfiprintf_r+0x192>
 8005a80:	ab03      	add	r3, sp, #12
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	462a      	mov	r2, r5
 8005a86:	4b0f      	ldr	r3, [pc, #60]	; (8005ac4 <_svfiprintf_r+0x1f4>)
 8005a88:	a904      	add	r1, sp, #16
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	f3af 8000 	nop.w
 8005a90:	1c42      	adds	r2, r0, #1
 8005a92:	4606      	mov	r6, r0
 8005a94:	d1d6      	bne.n	8005a44 <_svfiprintf_r+0x174>
 8005a96:	89ab      	ldrh	r3, [r5, #12]
 8005a98:	065b      	lsls	r3, r3, #25
 8005a9a:	f53f af2d 	bmi.w	80058f8 <_svfiprintf_r+0x28>
 8005a9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005aa0:	b01d      	add	sp, #116	; 0x74
 8005aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa6:	ab03      	add	r3, sp, #12
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	462a      	mov	r2, r5
 8005aac:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <_svfiprintf_r+0x1f4>)
 8005aae:	a904      	add	r1, sp, #16
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	f000 f879 	bl	8005ba8 <_printf_i>
 8005ab6:	e7eb      	b.n	8005a90 <_svfiprintf_r+0x1c0>
 8005ab8:	08005f20 	.word	0x08005f20
 8005abc:	08005f2a 	.word	0x08005f2a
 8005ac0:	00000000 	.word	0x00000000
 8005ac4:	0800581d 	.word	0x0800581d
 8005ac8:	08005f26 	.word	0x08005f26

08005acc <_printf_common>:
 8005acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad0:	4616      	mov	r6, r2
 8005ad2:	4699      	mov	r9, r3
 8005ad4:	688a      	ldr	r2, [r1, #8]
 8005ad6:	690b      	ldr	r3, [r1, #16]
 8005ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005adc:	4293      	cmp	r3, r2
 8005ade:	bfb8      	it	lt
 8005ae0:	4613      	movlt	r3, r2
 8005ae2:	6033      	str	r3, [r6, #0]
 8005ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ae8:	4607      	mov	r7, r0
 8005aea:	460c      	mov	r4, r1
 8005aec:	b10a      	cbz	r2, 8005af2 <_printf_common+0x26>
 8005aee:	3301      	adds	r3, #1
 8005af0:	6033      	str	r3, [r6, #0]
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	0699      	lsls	r1, r3, #26
 8005af6:	bf42      	ittt	mi
 8005af8:	6833      	ldrmi	r3, [r6, #0]
 8005afa:	3302      	addmi	r3, #2
 8005afc:	6033      	strmi	r3, [r6, #0]
 8005afe:	6825      	ldr	r5, [r4, #0]
 8005b00:	f015 0506 	ands.w	r5, r5, #6
 8005b04:	d106      	bne.n	8005b14 <_printf_common+0x48>
 8005b06:	f104 0a19 	add.w	sl, r4, #25
 8005b0a:	68e3      	ldr	r3, [r4, #12]
 8005b0c:	6832      	ldr	r2, [r6, #0]
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	42ab      	cmp	r3, r5
 8005b12:	dc26      	bgt.n	8005b62 <_printf_common+0x96>
 8005b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b18:	1e13      	subs	r3, r2, #0
 8005b1a:	6822      	ldr	r2, [r4, #0]
 8005b1c:	bf18      	it	ne
 8005b1e:	2301      	movne	r3, #1
 8005b20:	0692      	lsls	r2, r2, #26
 8005b22:	d42b      	bmi.n	8005b7c <_printf_common+0xb0>
 8005b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b28:	4649      	mov	r1, r9
 8005b2a:	4638      	mov	r0, r7
 8005b2c:	47c0      	blx	r8
 8005b2e:	3001      	adds	r0, #1
 8005b30:	d01e      	beq.n	8005b70 <_printf_common+0xa4>
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	6922      	ldr	r2, [r4, #16]
 8005b36:	f003 0306 	and.w	r3, r3, #6
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	bf02      	ittt	eq
 8005b3e:	68e5      	ldreq	r5, [r4, #12]
 8005b40:	6833      	ldreq	r3, [r6, #0]
 8005b42:	1aed      	subeq	r5, r5, r3
 8005b44:	68a3      	ldr	r3, [r4, #8]
 8005b46:	bf0c      	ite	eq
 8005b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b4c:	2500      	movne	r5, #0
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	bfc4      	itt	gt
 8005b52:	1a9b      	subgt	r3, r3, r2
 8005b54:	18ed      	addgt	r5, r5, r3
 8005b56:	2600      	movs	r6, #0
 8005b58:	341a      	adds	r4, #26
 8005b5a:	42b5      	cmp	r5, r6
 8005b5c:	d11a      	bne.n	8005b94 <_printf_common+0xc8>
 8005b5e:	2000      	movs	r0, #0
 8005b60:	e008      	b.n	8005b74 <_printf_common+0xa8>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4652      	mov	r2, sl
 8005b66:	4649      	mov	r1, r9
 8005b68:	4638      	mov	r0, r7
 8005b6a:	47c0      	blx	r8
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	d103      	bne.n	8005b78 <_printf_common+0xac>
 8005b70:	f04f 30ff 	mov.w	r0, #4294967295
 8005b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b78:	3501      	adds	r5, #1
 8005b7a:	e7c6      	b.n	8005b0a <_printf_common+0x3e>
 8005b7c:	18e1      	adds	r1, r4, r3
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	2030      	movs	r0, #48	; 0x30
 8005b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b86:	4422      	add	r2, r4
 8005b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b90:	3302      	adds	r3, #2
 8005b92:	e7c7      	b.n	8005b24 <_printf_common+0x58>
 8005b94:	2301      	movs	r3, #1
 8005b96:	4622      	mov	r2, r4
 8005b98:	4649      	mov	r1, r9
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	47c0      	blx	r8
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	d0e6      	beq.n	8005b70 <_printf_common+0xa4>
 8005ba2:	3601      	adds	r6, #1
 8005ba4:	e7d9      	b.n	8005b5a <_printf_common+0x8e>
	...

08005ba8 <_printf_i>:
 8005ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bac:	7e0f      	ldrb	r7, [r1, #24]
 8005bae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bb0:	2f78      	cmp	r7, #120	; 0x78
 8005bb2:	4691      	mov	r9, r2
 8005bb4:	4680      	mov	r8, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	469a      	mov	sl, r3
 8005bba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bbe:	d807      	bhi.n	8005bd0 <_printf_i+0x28>
 8005bc0:	2f62      	cmp	r7, #98	; 0x62
 8005bc2:	d80a      	bhi.n	8005bda <_printf_i+0x32>
 8005bc4:	2f00      	cmp	r7, #0
 8005bc6:	f000 80d4 	beq.w	8005d72 <_printf_i+0x1ca>
 8005bca:	2f58      	cmp	r7, #88	; 0x58
 8005bcc:	f000 80c0 	beq.w	8005d50 <_printf_i+0x1a8>
 8005bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bd8:	e03a      	b.n	8005c50 <_printf_i+0xa8>
 8005bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bde:	2b15      	cmp	r3, #21
 8005be0:	d8f6      	bhi.n	8005bd0 <_printf_i+0x28>
 8005be2:	a101      	add	r1, pc, #4	; (adr r1, 8005be8 <_printf_i+0x40>)
 8005be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005be8:	08005c41 	.word	0x08005c41
 8005bec:	08005c55 	.word	0x08005c55
 8005bf0:	08005bd1 	.word	0x08005bd1
 8005bf4:	08005bd1 	.word	0x08005bd1
 8005bf8:	08005bd1 	.word	0x08005bd1
 8005bfc:	08005bd1 	.word	0x08005bd1
 8005c00:	08005c55 	.word	0x08005c55
 8005c04:	08005bd1 	.word	0x08005bd1
 8005c08:	08005bd1 	.word	0x08005bd1
 8005c0c:	08005bd1 	.word	0x08005bd1
 8005c10:	08005bd1 	.word	0x08005bd1
 8005c14:	08005d59 	.word	0x08005d59
 8005c18:	08005c81 	.word	0x08005c81
 8005c1c:	08005d13 	.word	0x08005d13
 8005c20:	08005bd1 	.word	0x08005bd1
 8005c24:	08005bd1 	.word	0x08005bd1
 8005c28:	08005d7b 	.word	0x08005d7b
 8005c2c:	08005bd1 	.word	0x08005bd1
 8005c30:	08005c81 	.word	0x08005c81
 8005c34:	08005bd1 	.word	0x08005bd1
 8005c38:	08005bd1 	.word	0x08005bd1
 8005c3c:	08005d1b 	.word	0x08005d1b
 8005c40:	682b      	ldr	r3, [r5, #0]
 8005c42:	1d1a      	adds	r2, r3, #4
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	602a      	str	r2, [r5, #0]
 8005c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c50:	2301      	movs	r3, #1
 8005c52:	e09f      	b.n	8005d94 <_printf_i+0x1ec>
 8005c54:	6820      	ldr	r0, [r4, #0]
 8005c56:	682b      	ldr	r3, [r5, #0]
 8005c58:	0607      	lsls	r7, r0, #24
 8005c5a:	f103 0104 	add.w	r1, r3, #4
 8005c5e:	6029      	str	r1, [r5, #0]
 8005c60:	d501      	bpl.n	8005c66 <_printf_i+0xbe>
 8005c62:	681e      	ldr	r6, [r3, #0]
 8005c64:	e003      	b.n	8005c6e <_printf_i+0xc6>
 8005c66:	0646      	lsls	r6, r0, #25
 8005c68:	d5fb      	bpl.n	8005c62 <_printf_i+0xba>
 8005c6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c6e:	2e00      	cmp	r6, #0
 8005c70:	da03      	bge.n	8005c7a <_printf_i+0xd2>
 8005c72:	232d      	movs	r3, #45	; 0x2d
 8005c74:	4276      	negs	r6, r6
 8005c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c7a:	485a      	ldr	r0, [pc, #360]	; (8005de4 <_printf_i+0x23c>)
 8005c7c:	230a      	movs	r3, #10
 8005c7e:	e012      	b.n	8005ca6 <_printf_i+0xfe>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	6820      	ldr	r0, [r4, #0]
 8005c84:	1d19      	adds	r1, r3, #4
 8005c86:	6029      	str	r1, [r5, #0]
 8005c88:	0605      	lsls	r5, r0, #24
 8005c8a:	d501      	bpl.n	8005c90 <_printf_i+0xe8>
 8005c8c:	681e      	ldr	r6, [r3, #0]
 8005c8e:	e002      	b.n	8005c96 <_printf_i+0xee>
 8005c90:	0641      	lsls	r1, r0, #25
 8005c92:	d5fb      	bpl.n	8005c8c <_printf_i+0xe4>
 8005c94:	881e      	ldrh	r6, [r3, #0]
 8005c96:	4853      	ldr	r0, [pc, #332]	; (8005de4 <_printf_i+0x23c>)
 8005c98:	2f6f      	cmp	r7, #111	; 0x6f
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2308      	moveq	r3, #8
 8005c9e:	230a      	movne	r3, #10
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ca6:	6865      	ldr	r5, [r4, #4]
 8005ca8:	60a5      	str	r5, [r4, #8]
 8005caa:	2d00      	cmp	r5, #0
 8005cac:	bfa2      	ittt	ge
 8005cae:	6821      	ldrge	r1, [r4, #0]
 8005cb0:	f021 0104 	bicge.w	r1, r1, #4
 8005cb4:	6021      	strge	r1, [r4, #0]
 8005cb6:	b90e      	cbnz	r6, 8005cbc <_printf_i+0x114>
 8005cb8:	2d00      	cmp	r5, #0
 8005cba:	d04b      	beq.n	8005d54 <_printf_i+0x1ac>
 8005cbc:	4615      	mov	r5, r2
 8005cbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cc2:	fb03 6711 	mls	r7, r3, r1, r6
 8005cc6:	5dc7      	ldrb	r7, [r0, r7]
 8005cc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ccc:	4637      	mov	r7, r6
 8005cce:	42bb      	cmp	r3, r7
 8005cd0:	460e      	mov	r6, r1
 8005cd2:	d9f4      	bls.n	8005cbe <_printf_i+0x116>
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d10b      	bne.n	8005cf0 <_printf_i+0x148>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	07de      	lsls	r6, r3, #31
 8005cdc:	d508      	bpl.n	8005cf0 <_printf_i+0x148>
 8005cde:	6923      	ldr	r3, [r4, #16]
 8005ce0:	6861      	ldr	r1, [r4, #4]
 8005ce2:	4299      	cmp	r1, r3
 8005ce4:	bfde      	ittt	le
 8005ce6:	2330      	movle	r3, #48	; 0x30
 8005ce8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cf0:	1b52      	subs	r2, r2, r5
 8005cf2:	6122      	str	r2, [r4, #16]
 8005cf4:	f8cd a000 	str.w	sl, [sp]
 8005cf8:	464b      	mov	r3, r9
 8005cfa:	aa03      	add	r2, sp, #12
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	4640      	mov	r0, r8
 8005d00:	f7ff fee4 	bl	8005acc <_printf_common>
 8005d04:	3001      	adds	r0, #1
 8005d06:	d14a      	bne.n	8005d9e <_printf_i+0x1f6>
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	b004      	add	sp, #16
 8005d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	f043 0320 	orr.w	r3, r3, #32
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	4833      	ldr	r0, [pc, #204]	; (8005de8 <_printf_i+0x240>)
 8005d1c:	2778      	movs	r7, #120	; 0x78
 8005d1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	6829      	ldr	r1, [r5, #0]
 8005d26:	061f      	lsls	r7, r3, #24
 8005d28:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d2c:	d402      	bmi.n	8005d34 <_printf_i+0x18c>
 8005d2e:	065f      	lsls	r7, r3, #25
 8005d30:	bf48      	it	mi
 8005d32:	b2b6      	uxthmi	r6, r6
 8005d34:	07df      	lsls	r7, r3, #31
 8005d36:	bf48      	it	mi
 8005d38:	f043 0320 	orrmi.w	r3, r3, #32
 8005d3c:	6029      	str	r1, [r5, #0]
 8005d3e:	bf48      	it	mi
 8005d40:	6023      	strmi	r3, [r4, #0]
 8005d42:	b91e      	cbnz	r6, 8005d4c <_printf_i+0x1a4>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	f023 0320 	bic.w	r3, r3, #32
 8005d4a:	6023      	str	r3, [r4, #0]
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	e7a7      	b.n	8005ca0 <_printf_i+0xf8>
 8005d50:	4824      	ldr	r0, [pc, #144]	; (8005de4 <_printf_i+0x23c>)
 8005d52:	e7e4      	b.n	8005d1e <_printf_i+0x176>
 8005d54:	4615      	mov	r5, r2
 8005d56:	e7bd      	b.n	8005cd4 <_printf_i+0x12c>
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	6826      	ldr	r6, [r4, #0]
 8005d5c:	6961      	ldr	r1, [r4, #20]
 8005d5e:	1d18      	adds	r0, r3, #4
 8005d60:	6028      	str	r0, [r5, #0]
 8005d62:	0635      	lsls	r5, r6, #24
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	d501      	bpl.n	8005d6c <_printf_i+0x1c4>
 8005d68:	6019      	str	r1, [r3, #0]
 8005d6a:	e002      	b.n	8005d72 <_printf_i+0x1ca>
 8005d6c:	0670      	lsls	r0, r6, #25
 8005d6e:	d5fb      	bpl.n	8005d68 <_printf_i+0x1c0>
 8005d70:	8019      	strh	r1, [r3, #0]
 8005d72:	2300      	movs	r3, #0
 8005d74:	6123      	str	r3, [r4, #16]
 8005d76:	4615      	mov	r5, r2
 8005d78:	e7bc      	b.n	8005cf4 <_printf_i+0x14c>
 8005d7a:	682b      	ldr	r3, [r5, #0]
 8005d7c:	1d1a      	adds	r2, r3, #4
 8005d7e:	602a      	str	r2, [r5, #0]
 8005d80:	681d      	ldr	r5, [r3, #0]
 8005d82:	6862      	ldr	r2, [r4, #4]
 8005d84:	2100      	movs	r1, #0
 8005d86:	4628      	mov	r0, r5
 8005d88:	f7fa fa32 	bl	80001f0 <memchr>
 8005d8c:	b108      	cbz	r0, 8005d92 <_printf_i+0x1ea>
 8005d8e:	1b40      	subs	r0, r0, r5
 8005d90:	6060      	str	r0, [r4, #4]
 8005d92:	6863      	ldr	r3, [r4, #4]
 8005d94:	6123      	str	r3, [r4, #16]
 8005d96:	2300      	movs	r3, #0
 8005d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d9c:	e7aa      	b.n	8005cf4 <_printf_i+0x14c>
 8005d9e:	6923      	ldr	r3, [r4, #16]
 8005da0:	462a      	mov	r2, r5
 8005da2:	4649      	mov	r1, r9
 8005da4:	4640      	mov	r0, r8
 8005da6:	47d0      	blx	sl
 8005da8:	3001      	adds	r0, #1
 8005daa:	d0ad      	beq.n	8005d08 <_printf_i+0x160>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	079b      	lsls	r3, r3, #30
 8005db0:	d413      	bmi.n	8005dda <_printf_i+0x232>
 8005db2:	68e0      	ldr	r0, [r4, #12]
 8005db4:	9b03      	ldr	r3, [sp, #12]
 8005db6:	4298      	cmp	r0, r3
 8005db8:	bfb8      	it	lt
 8005dba:	4618      	movlt	r0, r3
 8005dbc:	e7a6      	b.n	8005d0c <_printf_i+0x164>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	4632      	mov	r2, r6
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	4640      	mov	r0, r8
 8005dc6:	47d0      	blx	sl
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d09d      	beq.n	8005d08 <_printf_i+0x160>
 8005dcc:	3501      	adds	r5, #1
 8005dce:	68e3      	ldr	r3, [r4, #12]
 8005dd0:	9903      	ldr	r1, [sp, #12]
 8005dd2:	1a5b      	subs	r3, r3, r1
 8005dd4:	42ab      	cmp	r3, r5
 8005dd6:	dcf2      	bgt.n	8005dbe <_printf_i+0x216>
 8005dd8:	e7eb      	b.n	8005db2 <_printf_i+0x20a>
 8005dda:	2500      	movs	r5, #0
 8005ddc:	f104 0619 	add.w	r6, r4, #25
 8005de0:	e7f5      	b.n	8005dce <_printf_i+0x226>
 8005de2:	bf00      	nop
 8005de4:	08005f31 	.word	0x08005f31
 8005de8:	08005f42 	.word	0x08005f42

08005dec <memmove>:
 8005dec:	4288      	cmp	r0, r1
 8005dee:	b510      	push	{r4, lr}
 8005df0:	eb01 0402 	add.w	r4, r1, r2
 8005df4:	d902      	bls.n	8005dfc <memmove+0x10>
 8005df6:	4284      	cmp	r4, r0
 8005df8:	4623      	mov	r3, r4
 8005dfa:	d807      	bhi.n	8005e0c <memmove+0x20>
 8005dfc:	1e43      	subs	r3, r0, #1
 8005dfe:	42a1      	cmp	r1, r4
 8005e00:	d008      	beq.n	8005e14 <memmove+0x28>
 8005e02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e0a:	e7f8      	b.n	8005dfe <memmove+0x12>
 8005e0c:	4402      	add	r2, r0
 8005e0e:	4601      	mov	r1, r0
 8005e10:	428a      	cmp	r2, r1
 8005e12:	d100      	bne.n	8005e16 <memmove+0x2a>
 8005e14:	bd10      	pop	{r4, pc}
 8005e16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e1e:	e7f7      	b.n	8005e10 <memmove+0x24>

08005e20 <_sbrk_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4d06      	ldr	r5, [pc, #24]	; (8005e3c <_sbrk_r+0x1c>)
 8005e24:	2300      	movs	r3, #0
 8005e26:	4604      	mov	r4, r0
 8005e28:	4608      	mov	r0, r1
 8005e2a:	602b      	str	r3, [r5, #0]
 8005e2c:	f7fb fe6a 	bl	8001b04 <_sbrk>
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	d102      	bne.n	8005e3a <_sbrk_r+0x1a>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	b103      	cbz	r3, 8005e3a <_sbrk_r+0x1a>
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	bd38      	pop	{r3, r4, r5, pc}
 8005e3c:	20000834 	.word	0x20000834

08005e40 <memcpy>:
 8005e40:	440a      	add	r2, r1
 8005e42:	4291      	cmp	r1, r2
 8005e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e48:	d100      	bne.n	8005e4c <memcpy+0xc>
 8005e4a:	4770      	bx	lr
 8005e4c:	b510      	push	{r4, lr}
 8005e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e56:	4291      	cmp	r1, r2
 8005e58:	d1f9      	bne.n	8005e4e <memcpy+0xe>
 8005e5a:	bd10      	pop	{r4, pc}

08005e5c <_realloc_r>:
 8005e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e60:	4680      	mov	r8, r0
 8005e62:	4614      	mov	r4, r2
 8005e64:	460e      	mov	r6, r1
 8005e66:	b921      	cbnz	r1, 8005e72 <_realloc_r+0x16>
 8005e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	f7ff bc49 	b.w	8005704 <_malloc_r>
 8005e72:	b92a      	cbnz	r2, 8005e80 <_realloc_r+0x24>
 8005e74:	f7ff fbda 	bl	800562c <_free_r>
 8005e78:	4625      	mov	r5, r4
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e80:	f000 f81b 	bl	8005eba <_malloc_usable_size_r>
 8005e84:	4284      	cmp	r4, r0
 8005e86:	4607      	mov	r7, r0
 8005e88:	d802      	bhi.n	8005e90 <_realloc_r+0x34>
 8005e8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e8e:	d812      	bhi.n	8005eb6 <_realloc_r+0x5a>
 8005e90:	4621      	mov	r1, r4
 8005e92:	4640      	mov	r0, r8
 8005e94:	f7ff fc36 	bl	8005704 <_malloc_r>
 8005e98:	4605      	mov	r5, r0
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d0ed      	beq.n	8005e7a <_realloc_r+0x1e>
 8005e9e:	42bc      	cmp	r4, r7
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	bf28      	it	cs
 8005ea6:	463a      	movcs	r2, r7
 8005ea8:	f7ff ffca 	bl	8005e40 <memcpy>
 8005eac:	4631      	mov	r1, r6
 8005eae:	4640      	mov	r0, r8
 8005eb0:	f7ff fbbc 	bl	800562c <_free_r>
 8005eb4:	e7e1      	b.n	8005e7a <_realloc_r+0x1e>
 8005eb6:	4635      	mov	r5, r6
 8005eb8:	e7df      	b.n	8005e7a <_realloc_r+0x1e>

08005eba <_malloc_usable_size_r>:
 8005eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ebe:	1f18      	subs	r0, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	bfbc      	itt	lt
 8005ec4:	580b      	ldrlt	r3, [r1, r0]
 8005ec6:	18c0      	addlt	r0, r0, r3
 8005ec8:	4770      	bx	lr
	...

08005ecc <_init>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	bf00      	nop
 8005ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed2:	bc08      	pop	{r3}
 8005ed4:	469e      	mov	lr, r3
 8005ed6:	4770      	bx	lr

08005ed8 <_fini>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	bf00      	nop
 8005edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ede:	bc08      	pop	{r3}
 8005ee0:	469e      	mov	lr, r3
 8005ee2:	4770      	bx	lr
