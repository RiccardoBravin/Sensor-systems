
Redoing 9-8 Encoder-leds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08008958  08008958  00018958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d30  08008d30  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008d30  08008d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d38  08008d38  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d3c  08008d3c  00018d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008d40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  200001f0  08008f30  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000940  08008f30  00020940  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f4bf  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021b3  00000000  00000000  0002f722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  000318d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc3  00000000  00000000  000327e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001770a  00000000  00000000  000333a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109d5  00000000  00000000  0004aaad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009193f  00000000  00000000  0005b482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005438  00000000  00000000  000ecdc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000f21fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008940 	.word	0x08008940

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08008940 	.word	0x08008940

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	0000      	movs	r0, r0
	...

08000ef8 <HAL_TIM_PeriodElapsedCallback>:
		{0,4},
		{0,2},
		{0,1},
};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a65      	ldr	r2, [pc, #404]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	f040 80a1 	bne.w	800104c <HAL_TIM_PeriodElapsedCallback+0x154>
		static int pos = 0;
		int16_t val = __HAL_TIM_GET_COUNTER(&htim3);
 8000f0a:	4b64      	ldr	r3, [pc, #400]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	81fb      	strh	r3, [r7, #14]
		if(val%48 == 0 && val != 0){__HAL_TIM_SET_COUNTER(&htim3,0);}
 8000f12:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000f16:	4b62      	ldr	r3, [pc, #392]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000f18:	fb83 1302 	smull	r1, r3, r3, r2
 8000f1c:	10d9      	asrs	r1, r3, #3
 8000f1e:	17d3      	asrs	r3, r2, #31
 8000f20:	1ac9      	subs	r1, r1, r3
 8000f22:	460b      	mov	r3, r1
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	440b      	add	r3, r1
 8000f28:	011b      	lsls	r3, r3, #4
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d107      	bne.n	8000f42 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8000f32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8000f3a:	4b58      	ldr	r3, [pc, #352]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
	    PRINT("Readed %.3f\r\n", (float)(val%48)/48*360.0);
 8000f42:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000f46:	4b56      	ldr	r3, [pc, #344]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000f48:	fb83 1302 	smull	r1, r3, r3, r2
 8000f4c:	10d9      	asrs	r1, r3, #3
 8000f4e:	17d3      	asrs	r3, r2, #31
 8000f50:	1ac9      	subs	r1, r1, r3
 8000f52:	460b      	mov	r3, r1
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	440b      	add	r3, r1
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	ee07 3a90 	vmov	s15, r3
 8000f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f66:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80010a4 <HAL_TIM_PeriodElapsedCallback+0x1ac>
 8000f6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f6e:	ee16 0a90 	vmov	r0, s13
 8000f72:	f7ff faf1 	bl	8000558 <__aeabi_f2d>
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000f7c:	f7ff fb44 	bl	8000608 <__aeabi_dmul>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	e9cd 2300 	strd	r2, r3, [sp]
 8000f88:	4a48      	ldr	r2, [pc, #288]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000f8a:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8000f8e:	4848      	ldr	r0, [pc, #288]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000f90:	f004 fbe4 	bl	800575c <sniprintf>
 8000f94:	4846      	ldr	r0, [pc, #280]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000f96:	f7ff f973 	bl	8000280 <strlen>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	4943      	ldr	r1, [pc, #268]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000fa2:	4844      	ldr	r0, [pc, #272]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000fa4:	f003 faf6 	bl	8004594 <HAL_UART_Transmit>

	    val = val>=0? val:-val;
 8000fa8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bfb8      	it	lt
 8000fb0:	425b      	neglt	r3, r3
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	81fb      	strh	r3, [r7, #14]
	    led_mat[pos][0] = pow(2, round((float)(val%48)/48*7));
 8000fb6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000fba:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000fbc:	fb83 1302 	smull	r1, r3, r3, r2
 8000fc0:	10d9      	asrs	r1, r3, #3
 8000fc2:	17d3      	asrs	r3, r2, #31
 8000fc4:	1ac9      	subs	r1, r1, r3
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	440b      	add	r3, r1
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fda:	eddf 6a32 	vldr	s13, [pc, #200]	; 80010a4 <HAL_TIM_PeriodElapsedCallback+0x1ac>
 8000fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe2:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8000fe6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fea:	ee17 0a90 	vmov	r0, s15
 8000fee:	f7ff fab3 	bl	8000558 <__aeabi_f2d>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	ec43 2b10 	vmov	d0, r2, r3
 8000ffa:	f006 fd9d 	bl	8007b38 <round>
 8000ffe:	eeb0 7a40 	vmov.f32	s14, s0
 8001002:	eef0 7a60 	vmov.f32	s15, s1
 8001006:	eeb0 1a47 	vmov.f32	s2, s14
 800100a:	eef0 1a67 	vmov.f32	s3, s15
 800100e:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001090 <HAL_TIM_PeriodElapsedCallback+0x198>
 8001012:	f006 fd15 	bl	8007a40 <pow>
 8001016:	ec51 0b10 	vmov	r0, r1, d0
 800101a:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800101c:	681c      	ldr	r4, [r3, #0]
 800101e:	f7ff fdcb 	bl	8000bb8 <__aeabi_d2uiz>
 8001022:	4603      	mov	r3, r0
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b25      	ldr	r3, [pc, #148]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001028:	f803 2014 	strb.w	r2, [r3, r4, lsl #1]
	    pos = (pos + 1)%5;
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	1c59      	adds	r1, r3, #1
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001034:	fb83 2301 	smull	r2, r3, r3, r1
 8001038:	105a      	asrs	r2, r3, #1
 800103a:	17cb      	asrs	r3, r1, #31
 800103c:	1ad2      	subs	r2, r2, r3
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	1aca      	subs	r2, r1, r3
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001048:	601a      	str	r2, [r3, #0]
	}else if(htim == &htim10){
		static int col = 0;
		HAL_SPI_Transmit_DMA(&hspi1, led_mat[col], 2);
		col = (col+1)%5;
	}
}
 800104a:	e01c      	b.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x18e>
	}else if(htim == &htim10){
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a1d      	ldr	r2, [pc, #116]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d118      	bne.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x18e>
		HAL_SPI_Transmit_DMA(&hspi1, led_mat[col], 2);
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4a18      	ldr	r2, [pc, #96]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800105c:	4413      	add	r3, r2
 800105e:	2202      	movs	r2, #2
 8001060:	4619      	mov	r1, r3
 8001062:	481a      	ldr	r0, [pc, #104]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001064:	f002 f966 	bl	8003334 <HAL_SPI_Transmit_DMA>
		col = (col+1)%5;
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	1c59      	adds	r1, r3, #1
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001070:	fb83 2301 	smull	r2, r3, r3, r1
 8001074:	105a      	asrs	r2, r3, #1
 8001076:	17cb      	asrs	r3, r1, #31
 8001078:	1ad2      	subs	r2, r2, r3
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	1aca      	subs	r2, r1, r3
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001084:	601a      	str	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	bd90      	pop	{r4, r7, pc}
 800108e:	bf00      	nop
 8001090:	00000000 	.word	0x00000000
 8001094:	40000000 	.word	0x40000000
 8001098:	200006c4 	.word	0x200006c4
 800109c:	2000070c 	.word	0x2000070c
 80010a0:	2aaaaaab 	.word	0x2aaaaaab
 80010a4:	42400000 	.word	0x42400000
 80010a8:	40768000 	.word	0x40768000
 80010ac:	08008958 	.word	0x08008958
 80010b0:	2000020c 	.word	0x2000020c
 80010b4:	2000079c 	.word	0x2000079c
 80010b8:	200007e4 	.word	0x200007e4
 80010bc:	20000000 	.word	0x20000000
 80010c0:	66666667 	.word	0x66666667
 80010c4:	20000754 	.word	0x20000754
 80010c8:	200007e8 	.word	0x200007e8
 80010cc:	2000060c 	.word	0x2000060c

080010d0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef * hspi){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80010d8:	2140      	movs	r1, #64	; 0x40
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <HAL_SPI_TxCpltCallback+0x20>)
 80010dc:	f001 fbed 	bl	80028ba <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80010e0:	2140      	movs	r1, #64	; 0x40
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <HAL_SPI_TxCpltCallback+0x20>)
 80010e4:	f001 fbe9 	bl	80028ba <HAL_GPIO_TogglePin>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40020400 	.word	0x40020400

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f8:	f000 fd2c 	bl	8001b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fc:	f000 f820 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001100:	f000 f9d0 	bl	80014a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001104:	f000 f9ae 	bl	8001464 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001108:	f000 f982 	bl	8001410 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800110c:	f000 f908 	bl	8001320 <MX_TIM3_Init>
  MX_SPI1_Init();
 8001110:	f000 f882 	bl	8001218 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001114:	f000 f8b6 	bl	8001284 <MX_TIM2_Init>
  MX_TIM10_Init();
 8001118:	f000 f956 	bl	80013c8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800111c:	213c      	movs	r1, #60	; 0x3c
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <main+0x40>)
 8001120:	f002 fd8c 	bl	8003c3c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <main+0x44>)
 8001126:	f002 fc81 	bl	8003a2c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <main+0x48>)
 800112c:	f002 fc7e 	bl	8003a2c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 8001130:	e7fe      	b.n	8001130 <main+0x3c>
 8001132:	bf00      	nop
 8001134:	2000070c 	.word	0x2000070c
 8001138:	200006c4 	.word	0x200006c4
 800113c:	20000754 	.word	0x20000754

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b094      	sub	sp, #80	; 0x50
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	2230      	movs	r2, #48	; 0x30
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f004 fb7b 	bl	800584a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <SystemClock_Config+0xd0>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	4a28      	ldr	r2, [pc, #160]	; (8001210 <SystemClock_Config+0xd0>)
 800116e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001172:	6413      	str	r3, [r2, #64]	; 0x40
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <SystemClock_Config+0xd0>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b23      	ldr	r3, [pc, #140]	; (8001214 <SystemClock_Config+0xd4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <SystemClock_Config+0xd4>)
 800118e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <SystemClock_Config+0xd4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a0:	2302      	movs	r3, #2
 80011a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a4:	2301      	movs	r3, #1
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a8:	2310      	movs	r3, #16
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ac:	2302      	movs	r3, #2
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011b4:	2310      	movs	r3, #16
 80011b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011be:	2304      	movs	r3, #4
 80011c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011c2:	2307      	movs	r3, #7
 80011c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fb90 	bl	80028f0 <HAL_RCC_OscConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011d6:	f000 f9d3 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011da:	230f      	movs	r3, #15
 80011dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011de:	2302      	movs	r3, #2
 80011e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2102      	movs	r1, #2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fdf2 	bl	8002de0 <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001202:	f000 f9bd 	bl	8001580 <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3750      	adds	r7, #80	; 0x50
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40007000 	.word	0x40007000

08001218 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_SPI1_Init+0x64>)
 800121e:	4a18      	ldr	r2, [pc, #96]	; (8001280 <MX_SPI1_Init+0x68>)
 8001220:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_SPI1_Init+0x64>)
 8001224:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001228:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_SPI1_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_SPI1_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_SPI1_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_SPI1_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_SPI1_Init+0x64>)
 8001244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001248:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_SPI1_Init+0x64>)
 800124c:	2208      	movs	r2, #8
 800124e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <MX_SPI1_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_SPI1_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <MX_SPI1_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_SPI1_Init+0x64>)
 8001264:	220a      	movs	r2, #10
 8001266:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <MX_SPI1_Init+0x64>)
 800126a:	f001 ffd9 	bl	8003220 <HAL_SPI_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001274:	f000 f984 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000060c 	.word	0x2000060c
 8001280:	40013000 	.word	0x40013000

08001284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <MX_TIM2_Init+0x98>)
 80012a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80012a8:	4b1c      	ldr	r3, [pc, #112]	; (800131c <MX_TIM2_Init+0x98>)
 80012aa:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80012ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_TIM2_Init+0x98>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <MX_TIM2_Init+0x98>)
 80012b8:	f241 3287 	movw	r2, #4999	; 0x1387
 80012bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_TIM2_Init+0x98>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_TIM2_Init+0x98>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ca:	4814      	ldr	r0, [pc, #80]	; (800131c <MX_TIM2_Init+0x98>)
 80012cc:	f002 fb5e 	bl	800398c <HAL_TIM_Base_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012d6:	f000 f953 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	4619      	mov	r1, r3
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <MX_TIM2_Init+0x98>)
 80012e8:	f002 fe46 	bl	8003f78 <HAL_TIM_ConfigClockSource>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012f2:	f000 f945 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012fe:	463b      	mov	r3, r7
 8001300:	4619      	mov	r1, r3
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <MX_TIM2_Init+0x98>)
 8001304:	f003 f874 	bl	80043f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800130e:	f000 f937 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200006c4 	.word	0x200006c4

08001320 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	; 0x30
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2224      	movs	r2, #36	; 0x24
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f004 fa8b 	bl	800584a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800133c:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <MX_TIM3_Init+0xa0>)
 800133e:	4a21      	ldr	r2, [pc, #132]	; (80013c4 <MX_TIM3_Init+0xa4>)
 8001340:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <MX_TIM3_Init+0xa0>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <MX_TIM3_Init+0xa0>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <MX_TIM3_Init+0xa0>)
 8001350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001354:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <MX_TIM3_Init+0xa0>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <MX_TIM3_Init+0xa0>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001362:	2303      	movs	r3, #3
 8001364:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800136a:	2301      	movs	r3, #1
 800136c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001372:	230f      	movs	r3, #15
 8001374:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800137a:	2301      	movs	r3, #1
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001382:	230f      	movs	r3, #15
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	4619      	mov	r1, r3
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <MX_TIM3_Init+0xa0>)
 800138e:	f002 fbaf 	bl	8003af0 <HAL_TIM_Encoder_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001398:	f000 f8f2 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_TIM3_Init+0xa0>)
 80013aa:	f003 f821 	bl	80043f0 <HAL_TIMEx_MasterConfigSynchronization>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013b4:	f000 f8e4 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	3730      	adds	r7, #48	; 0x30
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	2000070c 	.word	0x2000070c
 80013c4:	40000400 	.word	0x40000400

080013c8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_TIM10_Init+0x40>)
 80013ce:	4a0f      	ldr	r2, [pc, #60]	; (800140c <MX_TIM10_Init+0x44>)
 80013d0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <MX_TIM10_Init+0x40>)
 80013d4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80013d8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <MX_TIM10_Init+0x40>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50-1;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_TIM10_Init+0x40>)
 80013e2:	2231      	movs	r2, #49	; 0x31
 80013e4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <MX_TIM10_Init+0x40>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_TIM10_Init+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_TIM10_Init+0x40>)
 80013f4:	f002 faca 	bl	800398c <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80013fe:	f000 f8bf 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000754 	.word	0x20000754
 800140c:	40014400 	.word	0x40014400

08001410 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_USART2_UART_Init+0x50>)
 8001418:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_USART2_UART_Init+0x4c>)
 800141c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001420:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_USART2_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_USART2_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_USART2_UART_Init+0x4c>)
 8001448:	f003 f854 	bl	80044f4 <HAL_UART_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001452:	f000 f895 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000079c 	.word	0x2000079c
 8001460:	40004400 	.word	0x40004400

08001464 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_DMA_Init+0x3c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <MX_DMA_Init+0x3c>)
 8001474:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_DMA_Init+0x3c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	203b      	movs	r0, #59	; 0x3b
 800148c:	f000 fcaf 	bl	8001dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001490:	203b      	movs	r0, #59	; 0x3b
 8001492:	f000 fcc8 	bl	8001e26 <HAL_NVIC_EnableIRQ>

}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <MX_GPIO_Init+0xd0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a2c      	ldr	r2, [pc, #176]	; (8001574 <MX_GPIO_Init+0xd0>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <MX_GPIO_Init+0xd0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <MX_GPIO_Init+0xd0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a25      	ldr	r2, [pc, #148]	; (8001574 <MX_GPIO_Init+0xd0>)
 80014e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <MX_GPIO_Init+0xd0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <MX_GPIO_Init+0xd0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a1e      	ldr	r2, [pc, #120]	; (8001574 <MX_GPIO_Init+0xd0>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <MX_GPIO_Init+0xd0>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_GPIO_Init+0xd0>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a17      	ldr	r2, [pc, #92]	; (8001574 <MX_GPIO_Init+0xd0>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_GPIO_Init+0xd0>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2140      	movs	r1, #64	; 0x40
 800152e:	4812      	ldr	r0, [pc, #72]	; (8001578 <MX_GPIO_Init+0xd4>)
 8001530:	f001 f9aa 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800153a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	480c      	ldr	r0, [pc, #48]	; (800157c <MX_GPIO_Init+0xd8>)
 800154c:	f001 f818 	bl	8002580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001550:	2340      	movs	r3, #64	; 0x40
 8001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_GPIO_Init+0xd4>)
 8001568:	f001 f80a 	bl	8002580 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800156c:	bf00      	nop
 800156e:	3728      	adds	r7, #40	; 0x28
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	40020400 	.word	0x40020400
 800157c:	40020800 	.word	0x40020800

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	e7fe      	b.n	8001588 <Error_Handler+0x8>
	...

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <HAL_MspInit+0x4c>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_MspInit+0x4c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_MspInit+0x4c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015ca:	2007      	movs	r0, #7
 80015cc:	f000 fc04 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a34      	ldr	r2, [pc, #208]	; (80016cc <HAL_SPI_MspInit+0xf0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d161      	bne.n	80016c2 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <HAL_SPI_MspInit+0xf4>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a32      	ldr	r2, [pc, #200]	; (80016d0 <HAL_SPI_MspInit+0xf4>)
 8001608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_SPI_MspInit+0xf4>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <HAL_SPI_MspInit+0xf4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a2b      	ldr	r2, [pc, #172]	; (80016d0 <HAL_SPI_MspInit+0xf4>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_SPI_MspInit+0xf4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001636:	23a0      	movs	r3, #160	; 0xa0
 8001638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001646:	2305      	movs	r3, #5
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4820      	ldr	r0, [pc, #128]	; (80016d4 <HAL_SPI_MspInit+0xf8>)
 8001652:	f000 ff95 	bl	8002580 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 8001658:	4a20      	ldr	r2, [pc, #128]	; (80016dc <HAL_SPI_MspInit+0x100>)
 800165a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 800165e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001662:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 8001666:	2240      	movs	r2, #64	; 0x40
 8001668:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 8001672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001676:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001696:	4810      	ldr	r0, [pc, #64]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 8001698:	f000 fbe0 	bl	8001e5c <HAL_DMA_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80016a2:	f7ff ff6d 	bl	8001580 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 80016aa:	649a      	str	r2, [r3, #72]	; 0x48
 80016ac:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <HAL_SPI_MspInit+0xfc>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2023      	movs	r0, #35	; 0x23
 80016b8:	f000 fb99 	bl	8001dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80016bc:	2023      	movs	r0, #35	; 0x23
 80016be:	f000 fbb2 	bl	8001e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	; 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40013000 	.word	0x40013000
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	20000664 	.word	0x20000664
 80016dc:	40026458 	.word	0x40026458

080016e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f0:	d116      	bne.n	8001720 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <HAL_TIM_Base_MspInit+0x80>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a19      	ldr	r2, [pc, #100]	; (8001760 <HAL_TIM_Base_MspInit+0x80>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <HAL_TIM_Base_MspInit+0x80>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	201c      	movs	r0, #28
 8001714:	f000 fb6b 	bl	8001dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001718:	201c      	movs	r0, #28
 800171a:	f000 fb84 	bl	8001e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800171e:	e01a      	b.n	8001756 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <HAL_TIM_Base_MspInit+0x84>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d115      	bne.n	8001756 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_TIM_Base_MspInit+0x80>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <HAL_TIM_Base_MspInit+0x80>)
 8001734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_TIM_Base_MspInit+0x80>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2019      	movs	r0, #25
 800174c:	f000 fb4f 	bl	8001dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001750:	2019      	movs	r0, #25
 8001752:	f000 fb68 	bl	8001e26 <HAL_NVIC_EnableIRQ>
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	40014400 	.word	0x40014400

08001768 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <HAL_TIM_Encoder_MspInit+0x94>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d133      	bne.n	80017f2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <HAL_TIM_Encoder_MspInit+0x98>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <HAL_TIM_Encoder_MspInit+0x98>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_TIM_Encoder_MspInit+0x98>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_TIM_Encoder_MspInit+0x98>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a14      	ldr	r2, [pc, #80]	; (8001800 <HAL_TIM_Encoder_MspInit+0x98>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_TIM_Encoder_MspInit+0x98>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017c2:	23c0      	movs	r3, #192	; 0xc0
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017d2:	2302      	movs	r3, #2
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4809      	ldr	r0, [pc, #36]	; (8001804 <HAL_TIM_Encoder_MspInit+0x9c>)
 80017de:	f000 fecf 	bl	8002580 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	201d      	movs	r0, #29
 80017e8:	f000 fb01 	bl	8001dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017ec:	201d      	movs	r0, #29
 80017ee:	f000 fb1a 	bl	8001e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40000400 	.word	0x40000400
 8001800:	40023800 	.word	0x40023800
 8001804:	40020800 	.word	0x40020800

08001808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_UART_MspInit+0x84>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d12b      	bne.n	8001882 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_UART_MspInit+0x88>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a17      	ldr	r2, [pc, #92]	; (8001890 <HAL_UART_MspInit+0x88>)
 8001834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_UART_MspInit+0x88>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_UART_MspInit+0x88>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a10      	ldr	r2, [pc, #64]	; (8001890 <HAL_UART_MspInit+0x88>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_UART_MspInit+0x88>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001862:	230c      	movs	r3, #12
 8001864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001872:	2307      	movs	r3, #7
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <HAL_UART_MspInit+0x8c>)
 800187e:	f000 fe7f 	bl	8002580 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001882:	bf00      	nop
 8001884:	3728      	adds	r7, #40	; 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40004400 	.word	0x40004400
 8001890:	40023800 	.word	0x40023800
 8001894:	40020000 	.word	0x40020000

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800189c:	e7fe      	b.n	800189c <NMI_Handler+0x4>

0800189e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <MemManage_Handler+0x4>

080018aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e4:	f000 f988 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018f2:	f002 fa51 	bl	8003d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000754 	.word	0x20000754

08001900 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <TIM2_IRQHandler+0x10>)
 8001906:	f002 fa47 	bl	8003d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200006c4 	.word	0x200006c4

08001914 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <TIM3_IRQHandler+0x10>)
 800191a:	f002 fa3d 	bl	8003d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2000070c 	.word	0x2000070c

08001928 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <SPI1_IRQHandler+0x10>)
 800192e:	f001 fdb3 	bl	8003498 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000060c 	.word	0x2000060c

0800193c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <DMA2_Stream3_IRQHandler+0x10>)
 8001942:	f000 fbb3 	bl	80020ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000664 	.word	0x20000664

08001950 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return 1;
 8001954:	2301      	movs	r3, #1
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_kill>:

int _kill(int pid, int sig)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800196a:	f003 ffc1 	bl	80058f0 <__errno>
 800196e:	4603      	mov	r3, r0
 8001970:	2216      	movs	r2, #22
 8001972:	601a      	str	r2, [r3, #0]
  return -1;
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_exit>:

void _exit (int status)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ffe7 	bl	8001960 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001992:	e7fe      	b.n	8001992 <_exit+0x12>

08001994 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e00a      	b.n	80019bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019a6:	f3af 8000 	nop.w
 80019aa:	4601      	mov	r1, r0
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	60ba      	str	r2, [r7, #8]
 80019b2:	b2ca      	uxtb	r2, r1
 80019b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dbf0      	blt.n	80019a6 <_read+0x12>
  }

  return len;
 80019c4:	687b      	ldr	r3, [r7, #4]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e009      	b.n	80019f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	60ba      	str	r2, [r7, #8]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dbf1      	blt.n	80019e0 <_write+0x12>
  }
  return len;
 80019fc:	687b      	ldr	r3, [r7, #4]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_close>:

int _close(int file)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a2e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_isatty>:

int _isatty(int file)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <_sbrk+0x5c>)
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <_sbrk+0x60>)
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <_sbrk+0x64>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <_sbrk+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d207      	bcs.n	8001ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa0:	f003 ff26 	bl	80058f0 <__errno>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e009      	b.n	8001ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <_sbrk+0x64>)
 8001ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20018000 	.word	0x20018000
 8001ad0:	00000400 	.word	0x00000400
 8001ad4:	200007ec 	.word	0x200007ec
 8001ad8:	20000940 	.word	0x20000940

08001adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <SystemInit+0x20>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <SystemInit+0x20>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b04:	f7ff ffea 	bl	8001adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b0a:	490d      	ldr	r1, [pc, #52]	; (8001b40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b20:	4c0a      	ldr	r4, [pc, #40]	; (8001b4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f003 fee5 	bl	80058fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b32:	f7ff fadf 	bl	80010f4 <main>
  bx  lr    
 8001b36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001b44:	08008d40 	.word	0x08008d40
  ldr r2, =_sbss
 8001b48:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001b4c:	20000940 	.word	0x20000940

08001b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC_IRQHandler>
	...

08001b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <HAL_Init+0x40>)
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_Init+0x40>)
 8001b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_Init+0x40>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f000 f92b 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f000 f808 	bl	8001b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b88:	f7ff fd00 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x54>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x58>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f943 	bl	8001e42 <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00e      	b.n	8001be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b0f      	cmp	r3, #15
 8001bca:	d80a      	bhi.n	8001be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f000 f90b 	bl	8001dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <HAL_InitTick+0x5c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2000000c 	.word	0x2000000c
 8001bf0:	20000014 	.word	0x20000014
 8001bf4:	20000010 	.word	0x20000010

08001bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x20>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x24>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <HAL_IncTick+0x24>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000014 	.word	0x20000014
 8001c1c:	200007f0 	.word	0x200007f0

08001c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <HAL_GetTick+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	200007f0 	.word	0x200007f0

08001c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c54:	4013      	ands	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6a:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	60d3      	str	r3, [r2, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <__NVIC_GetPriorityGrouping+0x18>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 0307 	and.w	r3, r3, #7
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	db0b      	blt.n	8001cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <__NVIC_EnableIRQ+0x38>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	; (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	; (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
         );
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da4:	d301      	bcc.n	8001daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00f      	b.n	8001dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <SysTick_Config+0x40>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db2:	210f      	movs	r1, #15
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f7ff ff8e 	bl	8001cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <SysTick_Config+0x40>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <SysTick_Config+0x40>)
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	e000e010 	.word	0xe000e010

08001dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ff29 	bl	8001c38 <__NVIC_SetPriorityGrouping>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e00:	f7ff ff3e 	bl	8001c80 <__NVIC_GetPriorityGrouping>
 8001e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7ff ff8e 	bl	8001d2c <NVIC_EncodePriority>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff5d 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff31 	bl	8001c9c <__NVIC_EnableIRQ>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffa2 	bl	8001d94 <SysTick_Config>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff feda 	bl	8001c20 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e099      	b.n	8001fac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e98:	e00f      	b.n	8001eba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e9a:	f7ff fec1 	bl	8001c20 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	d908      	bls.n	8001eba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e078      	b.n	8001fac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1e8      	bne.n	8001e9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4b38      	ldr	r3, [pc, #224]	; (8001fb4 <HAL_DMA_Init+0x158>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d107      	bne.n	8001f24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f023 0307 	bic.w	r3, r3, #7
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d117      	bne.n	8001f7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00e      	beq.n	8001f7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fa91 	bl	8002488 <DMA_CheckFifoParam>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2240      	movs	r2, #64	; 0x40
 8001f70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e016      	b.n	8001fac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fa48 	bl	800241c <DMA_CalcBaseAndBitshift>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	223f      	movs	r2, #63	; 0x3f
 8001f96:	409a      	lsls	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	f010803f 	.word	0xf010803f

08001fb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_DMA_Start_IT+0x26>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e040      	b.n	8002060 <HAL_DMA_Start_IT+0xa8>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d12f      	bne.n	8002052 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f9da 	bl	80023c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	223f      	movs	r2, #63	; 0x3f
 8002012:	409a      	lsls	r2, r3
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0216 	orr.w	r2, r2, #22
 8002026:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0208 	orr.w	r2, r2, #8
 800203e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e005      	b.n	800205e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800205a:	2302      	movs	r3, #2
 800205c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800205e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d004      	beq.n	8002086 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e00c      	b.n	80020a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2205      	movs	r2, #5
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020b8:	4b8e      	ldr	r3, [pc, #568]	; (80022f4 <HAL_DMA_IRQHandler+0x248>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a8e      	ldr	r2, [pc, #568]	; (80022f8 <HAL_DMA_IRQHandler+0x24c>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	0a9b      	lsrs	r3, r3, #10
 80020c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	2208      	movs	r2, #8
 80020d8:	409a      	lsls	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d01a      	beq.n	8002118 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0204 	bic.w	r2, r2, #4
 80020fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	2208      	movs	r2, #8
 8002106:	409a      	lsls	r2, r3
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	f043 0201 	orr.w	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	2201      	movs	r2, #1
 800211e:	409a      	lsls	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d012      	beq.n	800214e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213a:	2201      	movs	r2, #1
 800213c:	409a      	lsls	r2, r3
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002146:	f043 0202 	orr.w	r2, r3, #2
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002152:	2204      	movs	r2, #4
 8002154:	409a      	lsls	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d012      	beq.n	8002184 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00b      	beq.n	8002184 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	2204      	movs	r2, #4
 8002172:	409a      	lsls	r2, r3
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217c:	f043 0204 	orr.w	r2, r3, #4
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	2210      	movs	r2, #16
 800218a:	409a      	lsls	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d043      	beq.n	800221c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d03c      	beq.n	800221c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	2210      	movs	r2, #16
 80021a8:	409a      	lsls	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d018      	beq.n	80021ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d108      	bne.n	80021dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d024      	beq.n	800221c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4798      	blx	r3
 80021da:	e01f      	b.n	800221c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01b      	beq.n	800221c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
 80021ec:	e016      	b.n	800221c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d107      	bne.n	800220c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0208 	bic.w	r2, r2, #8
 800220a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	2220      	movs	r2, #32
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 808f 	beq.w	800234c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8087 	beq.w	800234c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	2220      	movs	r2, #32
 8002244:	409a      	lsls	r2, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b05      	cmp	r3, #5
 8002254:	d136      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0216 	bic.w	r2, r2, #22
 8002264:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002274:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d103      	bne.n	8002286 <HAL_DMA_IRQHandler+0x1da>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0208 	bic.w	r2, r2, #8
 8002294:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229a:	223f      	movs	r2, #63	; 0x3f
 800229c:	409a      	lsls	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d07e      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	4798      	blx	r3
        }
        return;
 80022c2:	e079      	b.n	80023b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01d      	beq.n	800230e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10d      	bne.n	80022fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d031      	beq.n	800234c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
 80022f0:	e02c      	b.n	800234c <HAL_DMA_IRQHandler+0x2a0>
 80022f2:	bf00      	nop
 80022f4:	2000000c 	.word	0x2000000c
 80022f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	2b00      	cmp	r3, #0
 8002302:	d023      	beq.n	800234c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	4798      	blx	r3
 800230c:	e01e      	b.n	800234c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10f      	bne.n	800233c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0210 	bic.w	r2, r2, #16
 800232a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	2b00      	cmp	r3, #0
 8002352:	d032      	beq.n	80023ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d022      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2205      	movs	r2, #5
 8002364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	3301      	adds	r3, #1
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	429a      	cmp	r2, r3
 8002382:	d307      	bcc.n	8002394 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f2      	bne.n	8002378 <HAL_DMA_IRQHandler+0x2cc>
 8002392:	e000      	b.n	8002396 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002394:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
 80023b6:	e000      	b.n	80023ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80023b8:	bf00      	nop
    }
  }
}
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b40      	cmp	r3, #64	; 0x40
 80023ec:	d108      	bne.n	8002400 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023fe:	e007      	b.n	8002410 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	60da      	str	r2, [r3, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	3b10      	subs	r3, #16
 800242c:	4a14      	ldr	r2, [pc, #80]	; (8002480 <DMA_CalcBaseAndBitshift+0x64>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002436:	4a13      	ldr	r2, [pc, #76]	; (8002484 <DMA_CalcBaseAndBitshift+0x68>)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4413      	add	r3, r2
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d909      	bls.n	800245e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002452:	f023 0303 	bic.w	r3, r3, #3
 8002456:	1d1a      	adds	r2, r3, #4
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	659a      	str	r2, [r3, #88]	; 0x58
 800245c:	e007      	b.n	800246e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	aaaaaaab 	.word	0xaaaaaaab
 8002484:	08008980 	.word	0x08008980

08002488 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d11f      	bne.n	80024e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d856      	bhi.n	8002556 <DMA_CheckFifoParam+0xce>
 80024a8:	a201      	add	r2, pc, #4	; (adr r2, 80024b0 <DMA_CheckFifoParam+0x28>)
 80024aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ae:	bf00      	nop
 80024b0:	080024c1 	.word	0x080024c1
 80024b4:	080024d3 	.word	0x080024d3
 80024b8:	080024c1 	.word	0x080024c1
 80024bc:	08002557 	.word	0x08002557
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d046      	beq.n	800255a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d0:	e043      	b.n	800255a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024da:	d140      	bne.n	800255e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e0:	e03d      	b.n	800255e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ea:	d121      	bne.n	8002530 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d837      	bhi.n	8002562 <DMA_CheckFifoParam+0xda>
 80024f2:	a201      	add	r2, pc, #4	; (adr r2, 80024f8 <DMA_CheckFifoParam+0x70>)
 80024f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f8:	08002509 	.word	0x08002509
 80024fc:	0800250f 	.word	0x0800250f
 8002500:	08002509 	.word	0x08002509
 8002504:	08002521 	.word	0x08002521
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
      break;
 800250c:	e030      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d025      	beq.n	8002566 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800251e:	e022      	b.n	8002566 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002528:	d11f      	bne.n	800256a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800252e:	e01c      	b.n	800256a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d903      	bls.n	800253e <DMA_CheckFifoParam+0xb6>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d003      	beq.n	8002544 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800253c:	e018      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
      break;
 8002542:	e015      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00e      	beq.n	800256e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
      break;
 8002554:	e00b      	b.n	800256e <DMA_CheckFifoParam+0xe6>
      break;
 8002556:	bf00      	nop
 8002558:	e00a      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      break;
 800255a:	bf00      	nop
 800255c:	e008      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      break;
 800255e:	bf00      	nop
 8002560:	e006      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      break;
 8002562:	bf00      	nop
 8002564:	e004      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      break;
 8002566:	bf00      	nop
 8002568:	e002      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      break;   
 800256a:	bf00      	nop
 800256c:	e000      	b.n	8002570 <DMA_CheckFifoParam+0xe8>
      break;
 800256e:	bf00      	nop
    }
  } 
  
  return status; 
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop

08002580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	e159      	b.n	8002850 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800259c:	2201      	movs	r2, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	f040 8148 	bne.w	800284a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d005      	beq.n	80025d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d130      	bne.n	8002634 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	2203      	movs	r2, #3
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002608:	2201      	movs	r2, #1
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 0201 	and.w	r2, r3, #1
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b03      	cmp	r3, #3
 800263e:	d017      	beq.n	8002670 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	2203      	movs	r2, #3
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d123      	bne.n	80026c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	08da      	lsrs	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3208      	adds	r2, #8
 8002684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	220f      	movs	r2, #15
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	08da      	lsrs	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3208      	adds	r2, #8
 80026be:	69b9      	ldr	r1, [r7, #24]
 80026c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0203 	and.w	r2, r3, #3
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80a2 	beq.w	800284a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b57      	ldr	r3, [pc, #348]	; (8002868 <HAL_GPIO_Init+0x2e8>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a56      	ldr	r2, [pc, #344]	; (8002868 <HAL_GPIO_Init+0x2e8>)
 8002710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b54      	ldr	r3, [pc, #336]	; (8002868 <HAL_GPIO_Init+0x2e8>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002722:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_GPIO_Init+0x2ec>)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	3302      	adds	r3, #2
 800272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	220f      	movs	r2, #15
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a49      	ldr	r2, [pc, #292]	; (8002870 <HAL_GPIO_Init+0x2f0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d019      	beq.n	8002782 <HAL_GPIO_Init+0x202>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a48      	ldr	r2, [pc, #288]	; (8002874 <HAL_GPIO_Init+0x2f4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_GPIO_Init+0x1fe>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a47      	ldr	r2, [pc, #284]	; (8002878 <HAL_GPIO_Init+0x2f8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00d      	beq.n	800277a <HAL_GPIO_Init+0x1fa>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a46      	ldr	r2, [pc, #280]	; (800287c <HAL_GPIO_Init+0x2fc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <HAL_GPIO_Init+0x1f6>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a45      	ldr	r2, [pc, #276]	; (8002880 <HAL_GPIO_Init+0x300>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_GPIO_Init+0x1f2>
 800276e:	2304      	movs	r3, #4
 8002770:	e008      	b.n	8002784 <HAL_GPIO_Init+0x204>
 8002772:	2307      	movs	r3, #7
 8002774:	e006      	b.n	8002784 <HAL_GPIO_Init+0x204>
 8002776:	2303      	movs	r3, #3
 8002778:	e004      	b.n	8002784 <HAL_GPIO_Init+0x204>
 800277a:	2302      	movs	r3, #2
 800277c:	e002      	b.n	8002784 <HAL_GPIO_Init+0x204>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_GPIO_Init+0x204>
 8002782:	2300      	movs	r3, #0
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	f002 0203 	and.w	r2, r2, #3
 800278a:	0092      	lsls	r2, r2, #2
 800278c:	4093      	lsls	r3, r2
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002794:	4935      	ldr	r1, [pc, #212]	; (800286c <HAL_GPIO_Init+0x2ec>)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	089b      	lsrs	r3, r3, #2
 800279a:	3302      	adds	r3, #2
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027a2:	4b38      	ldr	r3, [pc, #224]	; (8002884 <HAL_GPIO_Init+0x304>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c6:	4a2f      	ldr	r2, [pc, #188]	; (8002884 <HAL_GPIO_Init+0x304>)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027cc:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_GPIO_Init+0x304>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f0:	4a24      	ldr	r2, [pc, #144]	; (8002884 <HAL_GPIO_Init+0x304>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027f6:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_GPIO_Init+0x304>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800281a:	4a1a      	ldr	r2, [pc, #104]	; (8002884 <HAL_GPIO_Init+0x304>)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002820:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_GPIO_Init+0x304>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002844:	4a0f      	ldr	r2, [pc, #60]	; (8002884 <HAL_GPIO_Init+0x304>)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3301      	adds	r3, #1
 800284e:	61fb      	str	r3, [r7, #28]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	2b0f      	cmp	r3, #15
 8002854:	f67f aea2 	bls.w	800259c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002858:	bf00      	nop
 800285a:	bf00      	nop
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800
 800286c:	40013800 	.word	0x40013800
 8002870:	40020000 	.word	0x40020000
 8002874:	40020400 	.word	0x40020400
 8002878:	40020800 	.word	0x40020800
 800287c:	40020c00 	.word	0x40020c00
 8002880:	40021000 	.word	0x40021000
 8002884:	40013c00 	.word	0x40013c00

08002888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	807b      	strh	r3, [r7, #2]
 8002894:	4613      	mov	r3, r2
 8002896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002898:	787b      	ldrb	r3, [r7, #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a4:	e003      	b.n	80028ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028a6:	887b      	ldrh	r3, [r7, #2]
 80028a8:	041a      	lsls	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	619a      	str	r2, [r3, #24]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028cc:	887a      	ldrh	r2, [r7, #2]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4013      	ands	r3, r2
 80028d2:	041a      	lsls	r2, r3, #16
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	43d9      	mvns	r1, r3
 80028d8:	887b      	ldrh	r3, [r7, #2]
 80028da:	400b      	ands	r3, r1
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e267      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d075      	beq.n	80029fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800290e:	4b88      	ldr	r3, [pc, #544]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b04      	cmp	r3, #4
 8002918:	d00c      	beq.n	8002934 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291a:	4b85      	ldr	r3, [pc, #532]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002922:	2b08      	cmp	r3, #8
 8002924:	d112      	bne.n	800294c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002926:	4b82      	ldr	r3, [pc, #520]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002932:	d10b      	bne.n	800294c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	4b7e      	ldr	r3, [pc, #504]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d05b      	beq.n	80029f8 <HAL_RCC_OscConfig+0x108>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d157      	bne.n	80029f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e242      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002954:	d106      	bne.n	8002964 <HAL_RCC_OscConfig+0x74>
 8002956:	4b76      	ldr	r3, [pc, #472]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a75      	ldr	r2, [pc, #468]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e01d      	b.n	80029a0 <HAL_RCC_OscConfig+0xb0>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x98>
 800296e:	4b70      	ldr	r3, [pc, #448]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a6f      	ldr	r2, [pc, #444]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b6d      	ldr	r3, [pc, #436]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a6c      	ldr	r2, [pc, #432]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e00b      	b.n	80029a0 <HAL_RCC_OscConfig+0xb0>
 8002988:	4b69      	ldr	r3, [pc, #420]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a68      	ldr	r2, [pc, #416]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 800298e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b66      	ldr	r3, [pc, #408]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a65      	ldr	r2, [pc, #404]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 800299a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7ff f93a 	bl	8001c20 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b0:	f7ff f936 	bl	8001c20 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	; 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e207      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b5b      	ldr	r3, [pc, #364]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0xc0>
 80029ce:	e014      	b.n	80029fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7ff f926 	bl	8001c20 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d8:	f7ff f922 	bl	8001c20 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	; 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e1f3      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ea:	4b51      	ldr	r3, [pc, #324]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0xe8>
 80029f6:	e000      	b.n	80029fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d063      	beq.n	8002ace <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a06:	4b4a      	ldr	r3, [pc, #296]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a12:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d11c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a1e:	4b44      	ldr	r3, [pc, #272]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d116      	bne.n	8002a58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2a:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_RCC_OscConfig+0x152>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e1c7      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	4b3b      	ldr	r3, [pc, #236]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4937      	ldr	r1, [pc, #220]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a56:	e03a      	b.n	8002ace <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d020      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a60:	4b34      	ldr	r3, [pc, #208]	; (8002b34 <HAL_RCC_OscConfig+0x244>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7ff f8db 	bl	8001c20 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a6e:	f7ff f8d7 	bl	8001c20 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e1a8      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a80:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8c:	4b28      	ldr	r3, [pc, #160]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4925      	ldr	r1, [pc, #148]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]
 8002aa0:	e015      	b.n	8002ace <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <HAL_RCC_OscConfig+0x244>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7ff f8ba 	bl	8001c20 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab0:	f7ff f8b6 	bl	8001c20 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e187      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d036      	beq.n	8002b48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d016      	beq.n	8002b10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <HAL_RCC_OscConfig+0x248>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7ff f89a 	bl	8001c20 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af0:	f7ff f896 	bl	8001c20 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e167      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x200>
 8002b0e:	e01b      	b.n	8002b48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_RCC_OscConfig+0x248>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b16:	f7ff f883 	bl	8001c20 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1c:	e00e      	b.n	8002b3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b1e:	f7ff f87f 	bl	8001c20 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d907      	bls.n	8002b3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e150      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
 8002b30:	40023800 	.word	0x40023800
 8002b34:	42470000 	.word	0x42470000
 8002b38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	4b88      	ldr	r3, [pc, #544]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1ea      	bne.n	8002b1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 8097 	beq.w	8002c84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5a:	4b81      	ldr	r3, [pc, #516]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10f      	bne.n	8002b86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	4b7d      	ldr	r3, [pc, #500]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	4a7c      	ldr	r2, [pc, #496]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b74:	6413      	str	r3, [r2, #64]	; 0x40
 8002b76:	4b7a      	ldr	r3, [pc, #488]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b82:	2301      	movs	r3, #1
 8002b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b86:	4b77      	ldr	r3, [pc, #476]	; (8002d64 <HAL_RCC_OscConfig+0x474>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d118      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b92:	4b74      	ldr	r3, [pc, #464]	; (8002d64 <HAL_RCC_OscConfig+0x474>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a73      	ldr	r2, [pc, #460]	; (8002d64 <HAL_RCC_OscConfig+0x474>)
 8002b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9e:	f7ff f83f 	bl	8001c20 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba6:	f7ff f83b 	bl	8001c20 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e10c      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb8:	4b6a      	ldr	r3, [pc, #424]	; (8002d64 <HAL_RCC_OscConfig+0x474>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d106      	bne.n	8002bda <HAL_RCC_OscConfig+0x2ea>
 8002bcc:	4b64      	ldr	r3, [pc, #400]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	4a63      	ldr	r2, [pc, #396]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd8:	e01c      	b.n	8002c14 <HAL_RCC_OscConfig+0x324>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b05      	cmp	r3, #5
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x30c>
 8002be2:	4b5f      	ldr	r3, [pc, #380]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	4a5e      	ldr	r2, [pc, #376]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002be8:	f043 0304 	orr.w	r3, r3, #4
 8002bec:	6713      	str	r3, [r2, #112]	; 0x70
 8002bee:	4b5c      	ldr	r3, [pc, #368]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	4a5b      	ldr	r2, [pc, #364]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0x324>
 8002bfc:	4b58      	ldr	r3, [pc, #352]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	4a57      	ldr	r2, [pc, #348]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	6713      	str	r3, [r2, #112]	; 0x70
 8002c08:	4b55      	ldr	r3, [pc, #340]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	4a54      	ldr	r2, [pc, #336]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c0e:	f023 0304 	bic.w	r3, r3, #4
 8002c12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d015      	beq.n	8002c48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7ff f800 	bl	8001c20 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c24:	f7fe fffc 	bl	8001c20 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0cb      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	4b49      	ldr	r3, [pc, #292]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0ee      	beq.n	8002c24 <HAL_RCC_OscConfig+0x334>
 8002c46:	e014      	b.n	8002c72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7fe ffea 	bl	8001c20 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f7fe ffe6 	bl	8001c20 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e0b5      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c66:	4b3e      	ldr	r3, [pc, #248]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1ee      	bne.n	8002c50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c72:	7dfb      	ldrb	r3, [r7, #23]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c78:	4b39      	ldr	r3, [pc, #228]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	4a38      	ldr	r2, [pc, #224]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80a1 	beq.w	8002dd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c8e:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d05c      	beq.n	8002d54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d141      	bne.n	8002d26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca2:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <HAL_RCC_OscConfig+0x478>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe ffba 	bl	8001c20 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe ffb6 	bl	8001c20 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e087      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc2:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69da      	ldr	r2, [r3, #28]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	019b      	lsls	r3, r3, #6
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	085b      	lsrs	r3, r3, #1
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	061b      	lsls	r3, r3, #24
 8002cf2:	491b      	ldr	r1, [pc, #108]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <HAL_RCC_OscConfig+0x478>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe ff8f 	bl	8001c20 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fe ff8b 	bl	8001c20 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e05c      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x416>
 8002d24:	e054      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <HAL_RCC_OscConfig+0x478>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe ff78 	bl	8001c20 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe ff74 	bl	8001c20 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e045      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x444>
 8002d52:	e03d      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e038      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40007000 	.word	0x40007000
 8002d68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d6c:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <HAL_RCC_OscConfig+0x4ec>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d028      	beq.n	8002dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d121      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d11a      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002da2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d111      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	085b      	lsrs	r3, r3, #1
 8002db4:	3b01      	subs	r3, #1
 8002db6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d107      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800

08002de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0cc      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002df4:	4b68      	ldr	r3, [pc, #416]	; (8002f98 <HAL_RCC_ClockConfig+0x1b8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d90c      	bls.n	8002e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b65      	ldr	r3, [pc, #404]	; (8002f98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b63      	ldr	r3, [pc, #396]	; (8002f98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0b8      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d020      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e34:	4b59      	ldr	r3, [pc, #356]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4a58      	ldr	r2, [pc, #352]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e4c:	4b53      	ldr	r3, [pc, #332]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a52      	ldr	r2, [pc, #328]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e58:	4b50      	ldr	r3, [pc, #320]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	494d      	ldr	r1, [pc, #308]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d044      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d119      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e07f      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d107      	bne.n	8002eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9e:	4b3f      	ldr	r3, [pc, #252]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e06f      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eae:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e067      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ebe:	4b37      	ldr	r3, [pc, #220]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f023 0203 	bic.w	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4934      	ldr	r1, [pc, #208]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed0:	f7fe fea6 	bl	8001c20 <HAL_GetTick>
 8002ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed8:	f7fe fea2 	bl	8001c20 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e04f      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 020c 	and.w	r2, r3, #12
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d1eb      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f00:	4b25      	ldr	r3, [pc, #148]	; (8002f98 <HAL_RCC_ClockConfig+0x1b8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d20c      	bcs.n	8002f28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0e:	4b22      	ldr	r3, [pc, #136]	; (8002f98 <HAL_RCC_ClockConfig+0x1b8>)
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f16:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e032      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f34:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4916      	ldr	r1, [pc, #88]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	490e      	ldr	r1, [pc, #56]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f66:	f000 f821 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	490a      	ldr	r1, [pc, #40]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f78:	5ccb      	ldrb	r3, [r1, r3]
 8002f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7e:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe fe06 	bl	8001b98 <HAL_InitTick>

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40023c00 	.word	0x40023c00
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	08008968 	.word	0x08008968
 8002fa4:	2000000c 	.word	0x2000000c
 8002fa8:	20000010 	.word	0x20000010

08002fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb0:	b094      	sub	sp, #80	; 0x50
 8002fb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fb8:	2300      	movs	r3, #0
 8002fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc4:	4b79      	ldr	r3, [pc, #484]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d00d      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0x40>
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	f200 80e1 	bhi.w	8003198 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fde:	e0db      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe0:	4b73      	ldr	r3, [pc, #460]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fe2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fe4:	e0db      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fe6:	4b73      	ldr	r3, [pc, #460]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fea:	e0d8      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fec:	4b6f      	ldr	r3, [pc, #444]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ff4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ff6:	4b6d      	ldr	r3, [pc, #436]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d063      	beq.n	80030ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003002:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	2200      	movs	r2, #0
 800300a:	63bb      	str	r3, [r7, #56]	; 0x38
 800300c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003014:	633b      	str	r3, [r7, #48]	; 0x30
 8003016:	2300      	movs	r3, #0
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
 800301a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800301e:	4622      	mov	r2, r4
 8003020:	462b      	mov	r3, r5
 8003022:	f04f 0000 	mov.w	r0, #0
 8003026:	f04f 0100 	mov.w	r1, #0
 800302a:	0159      	lsls	r1, r3, #5
 800302c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003030:	0150      	lsls	r0, r2, #5
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4621      	mov	r1, r4
 8003038:	1a51      	subs	r1, r2, r1
 800303a:	6139      	str	r1, [r7, #16]
 800303c:	4629      	mov	r1, r5
 800303e:	eb63 0301 	sbc.w	r3, r3, r1
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003050:	4659      	mov	r1, fp
 8003052:	018b      	lsls	r3, r1, #6
 8003054:	4651      	mov	r1, sl
 8003056:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800305a:	4651      	mov	r1, sl
 800305c:	018a      	lsls	r2, r1, #6
 800305e:	4651      	mov	r1, sl
 8003060:	ebb2 0801 	subs.w	r8, r2, r1
 8003064:	4659      	mov	r1, fp
 8003066:	eb63 0901 	sbc.w	r9, r3, r1
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800307a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800307e:	4690      	mov	r8, r2
 8003080:	4699      	mov	r9, r3
 8003082:	4623      	mov	r3, r4
 8003084:	eb18 0303 	adds.w	r3, r8, r3
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	462b      	mov	r3, r5
 800308c:	eb49 0303 	adc.w	r3, r9, r3
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800309e:	4629      	mov	r1, r5
 80030a0:	024b      	lsls	r3, r1, #9
 80030a2:	4621      	mov	r1, r4
 80030a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030a8:	4621      	mov	r1, r4
 80030aa:	024a      	lsls	r2, r1, #9
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b2:	2200      	movs	r2, #0
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030bc:	f7fd fd9c 	bl	8000bf8 <__aeabi_uldivmod>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4613      	mov	r3, r2
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c8:	e058      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ca:	4b38      	ldr	r3, [pc, #224]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	099b      	lsrs	r3, r3, #6
 80030d0:	2200      	movs	r2, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	4611      	mov	r1, r2
 80030d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030da:	623b      	str	r3, [r7, #32]
 80030dc:	2300      	movs	r3, #0
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
 80030e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030e4:	4642      	mov	r2, r8
 80030e6:	464b      	mov	r3, r9
 80030e8:	f04f 0000 	mov.w	r0, #0
 80030ec:	f04f 0100 	mov.w	r1, #0
 80030f0:	0159      	lsls	r1, r3, #5
 80030f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030f6:	0150      	lsls	r0, r2, #5
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4641      	mov	r1, r8
 80030fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003102:	4649      	mov	r1, r9
 8003104:	eb63 0b01 	sbc.w	fp, r3, r1
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003114:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003118:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800311c:	ebb2 040a 	subs.w	r4, r2, sl
 8003120:	eb63 050b 	sbc.w	r5, r3, fp
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	00eb      	lsls	r3, r5, #3
 800312e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003132:	00e2      	lsls	r2, r4, #3
 8003134:	4614      	mov	r4, r2
 8003136:	461d      	mov	r5, r3
 8003138:	4643      	mov	r3, r8
 800313a:	18e3      	adds	r3, r4, r3
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	464b      	mov	r3, r9
 8003140:	eb45 0303 	adc.w	r3, r5, r3
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003152:	4629      	mov	r1, r5
 8003154:	028b      	lsls	r3, r1, #10
 8003156:	4621      	mov	r1, r4
 8003158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800315c:	4621      	mov	r1, r4
 800315e:	028a      	lsls	r2, r1, #10
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003166:	2200      	movs	r2, #0
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	61fa      	str	r2, [r7, #28]
 800316c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003170:	f7fd fd42 	bl	8000bf8 <__aeabi_uldivmod>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4613      	mov	r3, r2
 800317a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	3301      	adds	r3, #1
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800318c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800318e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003196:	e002      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800319a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800319c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800319e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3750      	adds	r7, #80	; 0x50
 80031a4:	46bd      	mov	sp, r7
 80031a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800
 80031b0:	00f42400 	.word	0x00f42400
 80031b4:	007a1200 	.word	0x007a1200

080031b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <HAL_RCC_GetHCLKFreq+0x14>)
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	2000000c 	.word	0x2000000c

080031d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031d4:	f7ff fff0 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0a9b      	lsrs	r3, r3, #10
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4903      	ldr	r1, [pc, #12]	; (80031f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	08008978 	.word	0x08008978

080031f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031fc:	f7ff ffdc 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	0b5b      	lsrs	r3, r3, #13
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4903      	ldr	r1, [pc, #12]	; (800321c <HAL_RCC_GetPCLK2Freq+0x24>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40023800 	.word	0x40023800
 800321c:	08008978 	.word	0x08008978

08003220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e07b      	b.n	800332a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	2b00      	cmp	r3, #0
 8003238:	d108      	bne.n	800324c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003242:	d009      	beq.n	8003258 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	61da      	str	r2, [r3, #28]
 800324a:	e005      	b.n	8003258 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe f9b2 	bl	80015dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800328e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032dc:	ea42 0103 	orr.w	r1, r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	f003 0104 	and.w	r1, r3, #4
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	f003 0210 	and.w	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003318:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	4613      	mov	r3, r2
 8003340:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_SPI_Transmit_DMA+0x20>
 8003350:	2302      	movs	r3, #2
 8003352:	e097      	b.n	8003484 <HAL_SPI_Transmit_DMA+0x150>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d002      	beq.n	800336e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003368:	2302      	movs	r3, #2
 800336a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800336c:	e085      	b.n	800347a <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_SPI_Transmit_DMA+0x46>
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800337e:	e07c      	b.n	800347a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2203      	movs	r2, #3
 8003384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	88fa      	ldrh	r2, [r7, #6]
 800339e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c6:	d10f      	bne.n	80033e8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ec:	4a27      	ldr	r2, [pc, #156]	; (800348c <HAL_SPI_Transmit_DMA+0x158>)
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f4:	4a26      	ldr	r2, [pc, #152]	; (8003490 <HAL_SPI_Transmit_DMA+0x15c>)
 80033f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fc:	4a25      	ldr	r2, [pc, #148]	; (8003494 <HAL_SPI_Transmit_DMA+0x160>)
 80033fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003404:	2200      	movs	r2, #0
 8003406:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	4619      	mov	r1, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003420:	f7fe fdca 	bl	8001fb8 <HAL_DMA_Start_IT>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342e:	f043 0210 	orr.w	r2, r3, #16
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]

    goto error;
 800343a:	e01e      	b.n	800347a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003446:	2b40      	cmp	r3, #64	; 0x40
 8003448:	d007      	beq.n	800345a <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003458:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0220 	orr.w	r2, r2, #32
 8003468:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 0202 	orr.w	r2, r2, #2
 8003478:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003482:	7dfb      	ldrb	r3, [r7, #23]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	08003751 	.word	0x08003751
 8003490:	080036a9 	.word	0x080036a9
 8003494:	0800376d 	.word	0x0800376d

08003498 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10e      	bne.n	80034d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d009      	beq.n	80034d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d004      	beq.n	80034d8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	4798      	blx	r3
    return;
 80034d6:	e0ce      	b.n	8003676 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_SPI_IRQHandler+0x5e>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d004      	beq.n	80034f6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
    return;
 80034f4:	e0bf      	b.n	8003676 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <HAL_SPI_IRQHandler+0x7e>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80b0 	beq.w	8003676 <HAL_SPI_IRQHandler+0x1de>
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80aa 	beq.w	8003676 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d023      	beq.n	8003574 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b03      	cmp	r3, #3
 8003536:	d011      	beq.n	800355c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353c:	f043 0204 	orr.w	r2, r3, #4
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	e00b      	b.n	8003574 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]
        return;
 8003572:	e080      	b.n	8003676 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d014      	beq.n	80035a8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003582:	f043 0201 	orr.w	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0208 	orr.w	r2, r3, #8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d04f      	beq.n	8003674 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035e2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d104      	bne.n	8003600 <HAL_SPI_IRQHandler+0x168>
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d034      	beq.n	800366a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0203 	bic.w	r2, r2, #3
 800360e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d011      	beq.n	800363c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361c:	4a17      	ldr	r2, [pc, #92]	; (800367c <HAL_SPI_IRQHandler+0x1e4>)
 800361e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe fd1f 	bl	8002068 <HAL_DMA_Abort_IT>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003640:	2b00      	cmp	r3, #0
 8003642:	d016      	beq.n	8003672 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003648:	4a0c      	ldr	r2, [pc, #48]	; (800367c <HAL_SPI_IRQHandler+0x1e4>)
 800364a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe fd09 	bl	8002068 <HAL_DMA_Abort_IT>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003668:	e003      	b.n	8003672 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f812 	bl	8003694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003670:	e000      	b.n	8003674 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003672:	bf00      	nop
    return;
 8003674:	bf00      	nop
  }
}
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	080037ad 	.word	0x080037ad

08003680 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036b6:	f7fe fab3 	bl	8001c20 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ca:	d03b      	beq.n	8003744 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0220 	bic.w	r2, r2, #32
 80036da:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0202 	bic.w	r2, r2, #2
 80036ea:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	2164      	movs	r1, #100	; 0x64
 80036f0:	6978      	ldr	r0, [r7, #20]
 80036f2:	f000 f8f7 	bl	80038e4 <SPI_EndRxTxTransaction>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003700:	f043 0220 	orr.w	r2, r3, #32
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2200      	movs	r2, #0
 800372a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800373c:	6978      	ldr	r0, [r7, #20]
 800373e:	f7ff ffa9 	bl	8003694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003742:	e002      	b.n	800374a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003744:	6978      	ldr	r0, [r7, #20]
 8003746:	f7fd fcc3 	bl	80010d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f7ff ff8e 	bl	8003680 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0203 	bic.w	r2, r2, #3
 8003788:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	f043 0210 	orr.w	r2, r3, #16
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7ff ff78 	bl	8003694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7ff ff64 	bl	8003694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037e4:	f7fe fa1c 	bl	8001c20 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	4413      	add	r3, r2
 80037f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037f4:	f7fe fa14 	bl	8001c20 <HAL_GetTick>
 80037f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037fa:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	015b      	lsls	r3, r3, #5
 8003800:	0d1b      	lsrs	r3, r3, #20
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	fb02 f303 	mul.w	r3, r2, r3
 8003808:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800380a:	e054      	b.n	80038b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003812:	d050      	beq.n	80038b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003814:	f7fe fa04 	bl	8001c20 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	429a      	cmp	r2, r3
 8003822:	d902      	bls.n	800382a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d13d      	bne.n	80038a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003838:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003842:	d111      	bne.n	8003868 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384c:	d004      	beq.n	8003858 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003856:	d107      	bne.n	8003868 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003866:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003870:	d10f      	bne.n	8003892 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003890:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e017      	b.n	80038d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4013      	ands	r3, r2
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	bf0c      	ite	eq
 80038c6:	2301      	moveq	r3, #1
 80038c8:	2300      	movne	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d19b      	bne.n	800380c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	2000000c 	.word	0x2000000c

080038e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2201      	movs	r2, #1
 80038f8:	2102      	movs	r1, #2
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7ff ff6a 	bl	80037d4 <SPI_WaitFlagStateUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	f043 0220 	orr.w	r2, r3, #32
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e032      	b.n	800397c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003916:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <SPI_EndRxTxTransaction+0xa0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1b      	ldr	r2, [pc, #108]	; (8003988 <SPI_EndRxTxTransaction+0xa4>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	0d5b      	lsrs	r3, r3, #21
 8003922:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003934:	d112      	bne.n	800395c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2200      	movs	r2, #0
 800393e:	2180      	movs	r1, #128	; 0x80
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff ff47 	bl	80037d4 <SPI_WaitFlagStateUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d016      	beq.n	800397a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e00f      	b.n	800397c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	3b01      	subs	r3, #1
 8003966:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003972:	2b80      	cmp	r3, #128	; 0x80
 8003974:	d0f2      	beq.n	800395c <SPI_EndRxTxTransaction+0x78>
 8003976:	e000      	b.n	800397a <SPI_EndRxTxTransaction+0x96>
        break;
 8003978:	bf00      	nop
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	2000000c 	.word	0x2000000c
 8003988:	165e9f81 	.word	0x165e9f81

0800398c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e041      	b.n	8003a22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd fe94 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3304      	adds	r3, #4
 80039c8:	4619      	mov	r1, r3
 80039ca:	4610      	mov	r0, r2
 80039cc:	f000 fbc4 	bl	8004158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d001      	beq.n	8003a44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e044      	b.n	8003ace <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1e      	ldr	r2, [pc, #120]	; (8003adc <HAL_TIM_Base_Start_IT+0xb0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d018      	beq.n	8003a98 <HAL_TIM_Base_Start_IT+0x6c>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6e:	d013      	beq.n	8003a98 <HAL_TIM_Base_Start_IT+0x6c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1a      	ldr	r2, [pc, #104]	; (8003ae0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00e      	beq.n	8003a98 <HAL_TIM_Base_Start_IT+0x6c>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a19      	ldr	r2, [pc, #100]	; (8003ae4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d009      	beq.n	8003a98 <HAL_TIM_Base_Start_IT+0x6c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <HAL_TIM_Base_Start_IT+0x6c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a16      	ldr	r2, [pc, #88]	; (8003aec <HAL_TIM_Base_Start_IT+0xc0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d111      	bne.n	8003abc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b06      	cmp	r3, #6
 8003aa8:	d010      	beq.n	8003acc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0201 	orr.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aba:	e007      	b.n	8003acc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40010000 	.word	0x40010000
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800
 8003ae8:	40000c00 	.word	0x40000c00
 8003aec:	40014000 	.word	0x40014000

08003af0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e097      	b.n	8003c34 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d106      	bne.n	8003b1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7fd fe25 	bl	8001768 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2202      	movs	r2, #2
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b34:	f023 0307 	bic.w	r3, r3, #7
 8003b38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3304      	adds	r3, #4
 8003b42:	4619      	mov	r1, r3
 8003b44:	4610      	mov	r0, r2
 8003b46:	f000 fb07 	bl	8004158 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b72:	f023 0303 	bic.w	r3, r3, #3
 8003b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	4313      	orrs	r3, r2
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b90:	f023 030c 	bic.w	r3, r3, #12
 8003b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	4313      	orrs	r3, r2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	011a      	lsls	r2, r3, #4
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	031b      	lsls	r3, r3, #12
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003bce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003bd6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	4313      	orrs	r3, r2
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d110      	bne.n	8003c8e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d102      	bne.n	8003c78 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c72:	7b7b      	ldrb	r3, [r7, #13]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d001      	beq.n	8003c7c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e089      	b.n	8003d90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c8c:	e031      	b.n	8003cf2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d110      	bne.n	8003cb6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c94:	7bbb      	ldrb	r3, [r7, #14]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d102      	bne.n	8003ca0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c9a:	7b3b      	ldrb	r3, [r7, #12]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d001      	beq.n	8003ca4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e075      	b.n	8003d90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb4:	e01d      	b.n	8003cf2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d108      	bne.n	8003cce <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cbc:	7bbb      	ldrb	r3, [r7, #14]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d105      	bne.n	8003cce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cc2:	7b7b      	ldrb	r3, [r7, #13]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d102      	bne.n	8003cce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cc8:	7b3b      	ldrb	r3, [r7, #12]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d001      	beq.n	8003cd2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e05e      	b.n	8003d90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2202      	movs	r2, #2
 8003cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d010      	beq.n	8003d20 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003cfe:	e01f      	b.n	8003d40 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2201      	movs	r2, #1
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fb4b 	bl	80043a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0202 	orr.w	r2, r2, #2
 8003d1c:	60da      	str	r2, [r3, #12]
      break;
 8003d1e:	e02e      	b.n	8003d7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2201      	movs	r2, #1
 8003d26:	2104      	movs	r1, #4
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fb3b 	bl	80043a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0204 	orr.w	r2, r2, #4
 8003d3c:	60da      	str	r2, [r3, #12]
      break;
 8003d3e:	e01e      	b.n	8003d7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2201      	movs	r2, #1
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fb2b 	bl	80043a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2201      	movs	r2, #1
 8003d54:	2104      	movs	r1, #4
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fb24 	bl	80043a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0202 	orr.w	r2, r2, #2
 8003d6a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0204 	orr.w	r2, r2, #4
 8003d7a:	60da      	str	r2, [r3, #12]
      break;
 8003d7c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0201 	orr.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d020      	beq.n	8003dfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01b      	beq.n	8003dfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0202 	mvn.w	r2, #2
 8003dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f999 	bl	800411a <HAL_TIM_IC_CaptureCallback>
 8003de8:	e005      	b.n	8003df6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f98b 	bl	8004106 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f99c 	bl	800412e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d020      	beq.n	8003e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01b      	beq.n	8003e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0204 	mvn.w	r2, #4
 8003e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f973 	bl	800411a <HAL_TIM_IC_CaptureCallback>
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f965 	bl	8004106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f976 	bl	800412e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d020      	beq.n	8003e94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01b      	beq.n	8003e94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0208 	mvn.w	r2, #8
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f94d 	bl	800411a <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f93f 	bl	8004106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f950 	bl	800412e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d020      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01b      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0210 	mvn.w	r2, #16
 8003eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f927 	bl	800411a <HAL_TIM_IC_CaptureCallback>
 8003ecc:	e005      	b.n	8003eda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f919 	bl	8004106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f92a 	bl	800412e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00c      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0201 	mvn.w	r2, #1
 8003efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fc fffa 	bl	8000ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00c      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fadc 	bl	80044e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00c      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f8fb 	bl	8004142 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00c      	beq.n	8003f70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0220 	mvn.w	r2, #32
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 faae 	bl	80044cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f70:	bf00      	nop
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_TIM_ConfigClockSource+0x1c>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e0b4      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x186>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fcc:	d03e      	beq.n	800404c <HAL_TIM_ConfigClockSource+0xd4>
 8003fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fd2:	f200 8087 	bhi.w	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fda:	f000 8086 	beq.w	80040ea <HAL_TIM_ConfigClockSource+0x172>
 8003fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe2:	d87f      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b70      	cmp	r3, #112	; 0x70
 8003fe6:	d01a      	beq.n	800401e <HAL_TIM_ConfigClockSource+0xa6>
 8003fe8:	2b70      	cmp	r3, #112	; 0x70
 8003fea:	d87b      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b60      	cmp	r3, #96	; 0x60
 8003fee:	d050      	beq.n	8004092 <HAL_TIM_ConfigClockSource+0x11a>
 8003ff0:	2b60      	cmp	r3, #96	; 0x60
 8003ff2:	d877      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b50      	cmp	r3, #80	; 0x50
 8003ff6:	d03c      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0xfa>
 8003ff8:	2b50      	cmp	r3, #80	; 0x50
 8003ffa:	d873      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b40      	cmp	r3, #64	; 0x40
 8003ffe:	d058      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004000:	2b40      	cmp	r3, #64	; 0x40
 8004002:	d86f      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004004:	2b30      	cmp	r3, #48	; 0x30
 8004006:	d064      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004008:	2b30      	cmp	r3, #48	; 0x30
 800400a:	d86b      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 800400c:	2b20      	cmp	r3, #32
 800400e:	d060      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004010:	2b20      	cmp	r3, #32
 8004012:	d867      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004014:	2b00      	cmp	r3, #0
 8004016:	d05c      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004018:	2b10      	cmp	r3, #16
 800401a:	d05a      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x15a>
 800401c:	e062      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800402e:	f000 f999 	bl	8004364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004040:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	609a      	str	r2, [r3, #8]
      break;
 800404a:	e04f      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800405c:	f000 f982 	bl	8004364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800406e:	609a      	str	r2, [r3, #8]
      break;
 8004070:	e03c      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800407e:	461a      	mov	r2, r3
 8004080:	f000 f8f6 	bl	8004270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2150      	movs	r1, #80	; 0x50
 800408a:	4618      	mov	r0, r3
 800408c:	f000 f94f 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 8004090:	e02c      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800409e:	461a      	mov	r2, r3
 80040a0:	f000 f915 	bl	80042ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2160      	movs	r1, #96	; 0x60
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 f93f 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 80040b0:	e01c      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040be:	461a      	mov	r2, r3
 80040c0:	f000 f8d6 	bl	8004270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2140      	movs	r1, #64	; 0x40
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f92f 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 80040d0:	e00c      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f000 f926 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 80040e2:	e003      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
      break;
 80040e8:	e000      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a3a      	ldr	r2, [pc, #232]	; (8004254 <TIM_Base_SetConfig+0xfc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00f      	beq.n	8004190 <TIM_Base_SetConfig+0x38>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004176:	d00b      	beq.n	8004190 <TIM_Base_SetConfig+0x38>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a37      	ldr	r2, [pc, #220]	; (8004258 <TIM_Base_SetConfig+0x100>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d007      	beq.n	8004190 <TIM_Base_SetConfig+0x38>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a36      	ldr	r2, [pc, #216]	; (800425c <TIM_Base_SetConfig+0x104>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_Base_SetConfig+0x38>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a35      	ldr	r2, [pc, #212]	; (8004260 <TIM_Base_SetConfig+0x108>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d108      	bne.n	80041a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a2b      	ldr	r2, [pc, #172]	; (8004254 <TIM_Base_SetConfig+0xfc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01b      	beq.n	80041e2 <TIM_Base_SetConfig+0x8a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b0:	d017      	beq.n	80041e2 <TIM_Base_SetConfig+0x8a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a28      	ldr	r2, [pc, #160]	; (8004258 <TIM_Base_SetConfig+0x100>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <TIM_Base_SetConfig+0x8a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a27      	ldr	r2, [pc, #156]	; (800425c <TIM_Base_SetConfig+0x104>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00f      	beq.n	80041e2 <TIM_Base_SetConfig+0x8a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a26      	ldr	r2, [pc, #152]	; (8004260 <TIM_Base_SetConfig+0x108>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00b      	beq.n	80041e2 <TIM_Base_SetConfig+0x8a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a25      	ldr	r2, [pc, #148]	; (8004264 <TIM_Base_SetConfig+0x10c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <TIM_Base_SetConfig+0x8a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a24      	ldr	r2, [pc, #144]	; (8004268 <TIM_Base_SetConfig+0x110>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d003      	beq.n	80041e2 <TIM_Base_SetConfig+0x8a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a23      	ldr	r2, [pc, #140]	; (800426c <TIM_Base_SetConfig+0x114>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d108      	bne.n	80041f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a0e      	ldr	r2, [pc, #56]	; (8004254 <TIM_Base_SetConfig+0xfc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d103      	bne.n	8004228 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b01      	cmp	r3, #1
 8004238:	d105      	bne.n	8004246 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f023 0201 	bic.w	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	611a      	str	r2, [r3, #16]
  }
}
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40010000 	.word	0x40010000
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40000c00 	.word	0x40000c00
 8004264:	40014000 	.word	0x40014000
 8004268:	40014400 	.word	0x40014400
 800426c:	40014800 	.word	0x40014800

08004270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f023 0201 	bic.w	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800429a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f023 030a 	bic.w	r3, r3, #10
 80042ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b087      	sub	sp, #28
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	f023 0210 	bic.w	r2, r3, #16
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	031b      	lsls	r3, r3, #12
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800430a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800432e:	b480      	push	{r7}
 8004330:	b085      	sub	sp, #20
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	f043 0307 	orr.w	r3, r3, #7
 8004350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	609a      	str	r2, [r3, #8]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800437e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	021a      	lsls	r2, r3, #8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	431a      	orrs	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4313      	orrs	r3, r2
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	609a      	str	r2, [r3, #8]
}
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 031f 	and.w	r3, r3, #31
 80043b6:	2201      	movs	r2, #1
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a1a      	ldr	r2, [r3, #32]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	401a      	ands	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a1a      	ldr	r2, [r3, #32]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	fa01 f303 	lsl.w	r3, r1, r3
 80043dc:	431a      	orrs	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004404:	2302      	movs	r3, #2
 8004406:	e050      	b.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d018      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004454:	d013      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a18      	ldr	r2, [pc, #96]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a16      	ldr	r2, [pc, #88]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d009      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a13      	ldr	r2, [pc, #76]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10c      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	4313      	orrs	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40014000 	.word	0x40014000

080044cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e042      	b.n	800458c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd f974 	bl	8001808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2224      	movs	r2, #36	; 0x24
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f973 	bl	8004824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800454c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800455c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800456c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d175      	bne.n	80046a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_UART_Transmit+0x2c>
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e06e      	b.n	80046a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2221      	movs	r2, #33	; 0x21
 80045ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045d2:	f7fd fb25 	bl	8001c20 <HAL_GetTick>
 80045d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	88fa      	ldrh	r2, [r7, #6]
 80045dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	88fa      	ldrh	r2, [r7, #6]
 80045e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ec:	d108      	bne.n	8004600 <HAL_UART_Transmit+0x6c>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d104      	bne.n	8004600 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	e003      	b.n	8004608 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004608:	e02e      	b.n	8004668 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	2180      	movs	r1, #128	; 0x80
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f848 	bl	80046aa <UART_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e03a      	b.n	80046a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10b      	bne.n	800464a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004640:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	3302      	adds	r3, #2
 8004646:	61bb      	str	r3, [r7, #24]
 8004648:	e007      	b.n	800465a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	781a      	ldrb	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	3301      	adds	r3, #1
 8004658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1cb      	bne.n	800460a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2200      	movs	r2, #0
 800467a:	2140      	movs	r1, #64	; 0x40
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f814 	bl	80046aa <UART_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e006      	b.n	80046a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e000      	b.n	80046a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3720      	adds	r7, #32
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b086      	sub	sp, #24
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	603b      	str	r3, [r7, #0]
 80046b6:	4613      	mov	r3, r2
 80046b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ba:	e03b      	b.n	8004734 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d037      	beq.n	8004734 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c4:	f7fd faac 	bl	8001c20 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	6a3a      	ldr	r2, [r7, #32]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d302      	bcc.n	80046da <UART_WaitOnFlagUntilTimeout+0x30>
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e03a      	b.n	8004754 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d023      	beq.n	8004734 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b80      	cmp	r3, #128	; 0x80
 80046f0:	d020      	beq.n	8004734 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d01d      	beq.n	8004734 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b08      	cmp	r3, #8
 8004704:	d116      	bne.n	8004734 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f81d 	bl	800475c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2208      	movs	r2, #8
 8004726:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e00f      	b.n	8004754 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4013      	ands	r3, r2
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	429a      	cmp	r2, r3
 8004742:	bf0c      	ite	eq
 8004744:	2301      	moveq	r3, #1
 8004746:	2300      	movne	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	429a      	cmp	r2, r3
 8004750:	d0b4      	beq.n	80046bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800475c:	b480      	push	{r7}
 800475e:	b095      	sub	sp, #84	; 0x54
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	330c      	adds	r3, #12
 800476a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800477a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	330c      	adds	r3, #12
 8004782:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004784:	643a      	str	r2, [r7, #64]	; 0x40
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800478a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e5      	bne.n	8004764 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3314      	adds	r3, #20
 800479e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3314      	adds	r3, #20
 80047b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e5      	bne.n	8004798 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d119      	bne.n	8004808 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	330c      	adds	r3, #12
 80047da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f023 0310 	bic.w	r3, r3, #16
 80047ea:	647b      	str	r3, [r7, #68]	; 0x44
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	330c      	adds	r3, #12
 80047f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047f4:	61ba      	str	r2, [r7, #24]
 80047f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	6979      	ldr	r1, [r7, #20]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	613b      	str	r3, [r7, #16]
   return(result);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e5      	bne.n	80047d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004816:	bf00      	nop
 8004818:	3754      	adds	r7, #84	; 0x54
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004828:	b0c0      	sub	sp, #256	; 0x100
 800482a:	af00      	add	r7, sp, #0
 800482c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004840:	68d9      	ldr	r1, [r3, #12]
 8004842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	ea40 0301 	orr.w	r3, r0, r1
 800484c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800484e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	431a      	orrs	r2, r3
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	431a      	orrs	r2, r3
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800487c:	f021 010c 	bic.w	r1, r1, #12
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800488a:	430b      	orrs	r3, r1
 800488c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800488e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800489a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489e:	6999      	ldr	r1, [r3, #24]
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	ea40 0301 	orr.w	r3, r0, r1
 80048aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4b8f      	ldr	r3, [pc, #572]	; (8004af0 <UART_SetConfig+0x2cc>)
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d005      	beq.n	80048c4 <UART_SetConfig+0xa0>
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	4b8d      	ldr	r3, [pc, #564]	; (8004af4 <UART_SetConfig+0x2d0>)
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d104      	bne.n	80048ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048c4:	f7fe fc98 	bl	80031f8 <HAL_RCC_GetPCLK2Freq>
 80048c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048cc:	e003      	b.n	80048d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ce:	f7fe fc7f 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 80048d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e0:	f040 810c 	bne.w	8004afc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e8:	2200      	movs	r2, #0
 80048ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048f6:	4622      	mov	r2, r4
 80048f8:	462b      	mov	r3, r5
 80048fa:	1891      	adds	r1, r2, r2
 80048fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80048fe:	415b      	adcs	r3, r3
 8004900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004902:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004906:	4621      	mov	r1, r4
 8004908:	eb12 0801 	adds.w	r8, r2, r1
 800490c:	4629      	mov	r1, r5
 800490e:	eb43 0901 	adc.w	r9, r3, r1
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800491e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004922:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004926:	4690      	mov	r8, r2
 8004928:	4699      	mov	r9, r3
 800492a:	4623      	mov	r3, r4
 800492c:	eb18 0303 	adds.w	r3, r8, r3
 8004930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004934:	462b      	mov	r3, r5
 8004936:	eb49 0303 	adc.w	r3, r9, r3
 800493a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800494a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800494e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004952:	460b      	mov	r3, r1
 8004954:	18db      	adds	r3, r3, r3
 8004956:	653b      	str	r3, [r7, #80]	; 0x50
 8004958:	4613      	mov	r3, r2
 800495a:	eb42 0303 	adc.w	r3, r2, r3
 800495e:	657b      	str	r3, [r7, #84]	; 0x54
 8004960:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004964:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004968:	f7fc f946 	bl	8000bf8 <__aeabi_uldivmod>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4b61      	ldr	r3, [pc, #388]	; (8004af8 <UART_SetConfig+0x2d4>)
 8004972:	fba3 2302 	umull	r2, r3, r3, r2
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	011c      	lsls	r4, r3, #4
 800497a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800497e:	2200      	movs	r2, #0
 8004980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004984:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004988:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800498c:	4642      	mov	r2, r8
 800498e:	464b      	mov	r3, r9
 8004990:	1891      	adds	r1, r2, r2
 8004992:	64b9      	str	r1, [r7, #72]	; 0x48
 8004994:	415b      	adcs	r3, r3
 8004996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004998:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800499c:	4641      	mov	r1, r8
 800499e:	eb12 0a01 	adds.w	sl, r2, r1
 80049a2:	4649      	mov	r1, r9
 80049a4:	eb43 0b01 	adc.w	fp, r3, r1
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049bc:	4692      	mov	sl, r2
 80049be:	469b      	mov	fp, r3
 80049c0:	4643      	mov	r3, r8
 80049c2:	eb1a 0303 	adds.w	r3, sl, r3
 80049c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049ca:	464b      	mov	r3, r9
 80049cc:	eb4b 0303 	adc.w	r3, fp, r3
 80049d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049e8:	460b      	mov	r3, r1
 80049ea:	18db      	adds	r3, r3, r3
 80049ec:	643b      	str	r3, [r7, #64]	; 0x40
 80049ee:	4613      	mov	r3, r2
 80049f0:	eb42 0303 	adc.w	r3, r2, r3
 80049f4:	647b      	str	r3, [r7, #68]	; 0x44
 80049f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049fe:	f7fc f8fb 	bl	8000bf8 <__aeabi_uldivmod>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <UART_SetConfig+0x2d4>)
 8004a0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	2264      	movs	r2, #100	; 0x64
 8004a12:	fb02 f303 	mul.w	r3, r2, r3
 8004a16:	1acb      	subs	r3, r1, r3
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a1e:	4b36      	ldr	r3, [pc, #216]	; (8004af8 <UART_SetConfig+0x2d4>)
 8004a20:	fba3 2302 	umull	r2, r3, r3, r2
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a2c:	441c      	add	r4, r3
 8004a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a40:	4642      	mov	r2, r8
 8004a42:	464b      	mov	r3, r9
 8004a44:	1891      	adds	r1, r2, r2
 8004a46:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a48:	415b      	adcs	r3, r3
 8004a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a50:	4641      	mov	r1, r8
 8004a52:	1851      	adds	r1, r2, r1
 8004a54:	6339      	str	r1, [r7, #48]	; 0x30
 8004a56:	4649      	mov	r1, r9
 8004a58:	414b      	adcs	r3, r1
 8004a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a68:	4659      	mov	r1, fp
 8004a6a:	00cb      	lsls	r3, r1, #3
 8004a6c:	4651      	mov	r1, sl
 8004a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a72:	4651      	mov	r1, sl
 8004a74:	00ca      	lsls	r2, r1, #3
 8004a76:	4610      	mov	r0, r2
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4642      	mov	r2, r8
 8004a7e:	189b      	adds	r3, r3, r2
 8004a80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a84:	464b      	mov	r3, r9
 8004a86:	460a      	mov	r2, r1
 8004a88:	eb42 0303 	adc.w	r3, r2, r3
 8004a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004aa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	18db      	adds	r3, r3, r3
 8004aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aaa:	4613      	mov	r3, r2
 8004aac:	eb42 0303 	adc.w	r3, r2, r3
 8004ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ab2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ab6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004aba:	f7fc f89d 	bl	8000bf8 <__aeabi_uldivmod>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <UART_SetConfig+0x2d4>)
 8004ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ac8:	095b      	lsrs	r3, r3, #5
 8004aca:	2164      	movs	r1, #100	; 0x64
 8004acc:	fb01 f303 	mul.w	r3, r1, r3
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	3332      	adds	r3, #50	; 0x32
 8004ad6:	4a08      	ldr	r2, [pc, #32]	; (8004af8 <UART_SetConfig+0x2d4>)
 8004ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	f003 0207 	and.w	r2, r3, #7
 8004ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4422      	add	r2, r4
 8004aea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004aec:	e106      	b.n	8004cfc <UART_SetConfig+0x4d8>
 8004aee:	bf00      	nop
 8004af0:	40011000 	.word	0x40011000
 8004af4:	40011400 	.word	0x40011400
 8004af8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b0e:	4642      	mov	r2, r8
 8004b10:	464b      	mov	r3, r9
 8004b12:	1891      	adds	r1, r2, r2
 8004b14:	6239      	str	r1, [r7, #32]
 8004b16:	415b      	adcs	r3, r3
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
 8004b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b1e:	4641      	mov	r1, r8
 8004b20:	1854      	adds	r4, r2, r1
 8004b22:	4649      	mov	r1, r9
 8004b24:	eb43 0501 	adc.w	r5, r3, r1
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	00eb      	lsls	r3, r5, #3
 8004b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b36:	00e2      	lsls	r2, r4, #3
 8004b38:	4614      	mov	r4, r2
 8004b3a:	461d      	mov	r5, r3
 8004b3c:	4643      	mov	r3, r8
 8004b3e:	18e3      	adds	r3, r4, r3
 8004b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b44:	464b      	mov	r3, r9
 8004b46:	eb45 0303 	adc.w	r3, r5, r3
 8004b4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	008b      	lsls	r3, r1, #2
 8004b6e:	4621      	mov	r1, r4
 8004b70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b74:	4621      	mov	r1, r4
 8004b76:	008a      	lsls	r2, r1, #2
 8004b78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b7c:	f7fc f83c 	bl	8000bf8 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4b60      	ldr	r3, [pc, #384]	; (8004d08 <UART_SetConfig+0x4e4>)
 8004b86:	fba3 2302 	umull	r2, r3, r3, r2
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	011c      	lsls	r4, r3, #4
 8004b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	1891      	adds	r1, r2, r2
 8004ba6:	61b9      	str	r1, [r7, #24]
 8004ba8:	415b      	adcs	r3, r3
 8004baa:	61fb      	str	r3, [r7, #28]
 8004bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bb0:	4641      	mov	r1, r8
 8004bb2:	1851      	adds	r1, r2, r1
 8004bb4:	6139      	str	r1, [r7, #16]
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	414b      	adcs	r3, r1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bc8:	4659      	mov	r1, fp
 8004bca:	00cb      	lsls	r3, r1, #3
 8004bcc:	4651      	mov	r1, sl
 8004bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bd2:	4651      	mov	r1, sl
 8004bd4:	00ca      	lsls	r2, r1, #3
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4642      	mov	r2, r8
 8004bde:	189b      	adds	r3, r3, r2
 8004be0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004be4:	464b      	mov	r3, r9
 8004be6:	460a      	mov	r2, r1
 8004be8:	eb42 0303 	adc.w	r3, r2, r3
 8004bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c08:	4649      	mov	r1, r9
 8004c0a:	008b      	lsls	r3, r1, #2
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c12:	4641      	mov	r1, r8
 8004c14:	008a      	lsls	r2, r1, #2
 8004c16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c1a:	f7fb ffed 	bl	8000bf8 <__aeabi_uldivmod>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4611      	mov	r1, r2
 8004c24:	4b38      	ldr	r3, [pc, #224]	; (8004d08 <UART_SetConfig+0x4e4>)
 8004c26:	fba3 2301 	umull	r2, r3, r3, r1
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	2264      	movs	r2, #100	; 0x64
 8004c2e:	fb02 f303 	mul.w	r3, r2, r3
 8004c32:	1acb      	subs	r3, r1, r3
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	3332      	adds	r3, #50	; 0x32
 8004c38:	4a33      	ldr	r2, [pc, #204]	; (8004d08 <UART_SetConfig+0x4e4>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	095b      	lsrs	r3, r3, #5
 8004c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c44:	441c      	add	r4, r3
 8004c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	673b      	str	r3, [r7, #112]	; 0x70
 8004c4e:	677a      	str	r2, [r7, #116]	; 0x74
 8004c50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c54:	4642      	mov	r2, r8
 8004c56:	464b      	mov	r3, r9
 8004c58:	1891      	adds	r1, r2, r2
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	415b      	adcs	r3, r3
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c64:	4641      	mov	r1, r8
 8004c66:	1851      	adds	r1, r2, r1
 8004c68:	6039      	str	r1, [r7, #0]
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	414b      	adcs	r3, r1
 8004c6e:	607b      	str	r3, [r7, #4]
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c7c:	4659      	mov	r1, fp
 8004c7e:	00cb      	lsls	r3, r1, #3
 8004c80:	4651      	mov	r1, sl
 8004c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c86:	4651      	mov	r1, sl
 8004c88:	00ca      	lsls	r2, r1, #3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4642      	mov	r2, r8
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c96:	464b      	mov	r3, r9
 8004c98:	460a      	mov	r2, r1
 8004c9a:	eb42 0303 	adc.w	r3, r2, r3
 8004c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8004caa:	667a      	str	r2, [r7, #100]	; 0x64
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cb8:	4649      	mov	r1, r9
 8004cba:	008b      	lsls	r3, r1, #2
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cc2:	4641      	mov	r1, r8
 8004cc4:	008a      	lsls	r2, r1, #2
 8004cc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cca:	f7fb ff95 	bl	8000bf8 <__aeabi_uldivmod>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <UART_SetConfig+0x4e4>)
 8004cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	2164      	movs	r1, #100	; 0x64
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	3332      	adds	r3, #50	; 0x32
 8004ce6:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <UART_SetConfig+0x4e4>)
 8004ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cec:	095b      	lsrs	r3, r3, #5
 8004cee:	f003 020f 	and.w	r2, r3, #15
 8004cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4422      	add	r2, r4
 8004cfa:	609a      	str	r2, [r3, #8]
}
 8004cfc:	bf00      	nop
 8004cfe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d02:	46bd      	mov	sp, r7
 8004d04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d08:	51eb851f 	.word	0x51eb851f

08004d0c <__cvt>:
 8004d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d10:	ec55 4b10 	vmov	r4, r5, d0
 8004d14:	2d00      	cmp	r5, #0
 8004d16:	460e      	mov	r6, r1
 8004d18:	4619      	mov	r1, r3
 8004d1a:	462b      	mov	r3, r5
 8004d1c:	bfbb      	ittet	lt
 8004d1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d22:	461d      	movlt	r5, r3
 8004d24:	2300      	movge	r3, #0
 8004d26:	232d      	movlt	r3, #45	; 0x2d
 8004d28:	700b      	strb	r3, [r1, #0]
 8004d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d30:	4691      	mov	r9, r2
 8004d32:	f023 0820 	bic.w	r8, r3, #32
 8004d36:	bfbc      	itt	lt
 8004d38:	4622      	movlt	r2, r4
 8004d3a:	4614      	movlt	r4, r2
 8004d3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d40:	d005      	beq.n	8004d4e <__cvt+0x42>
 8004d42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d46:	d100      	bne.n	8004d4a <__cvt+0x3e>
 8004d48:	3601      	adds	r6, #1
 8004d4a:	2102      	movs	r1, #2
 8004d4c:	e000      	b.n	8004d50 <__cvt+0x44>
 8004d4e:	2103      	movs	r1, #3
 8004d50:	ab03      	add	r3, sp, #12
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	ab02      	add	r3, sp, #8
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	ec45 4b10 	vmov	d0, r4, r5
 8004d5c:	4653      	mov	r3, sl
 8004d5e:	4632      	mov	r2, r6
 8004d60:	f000 fe7e 	bl	8005a60 <_dtoa_r>
 8004d64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d68:	4607      	mov	r7, r0
 8004d6a:	d102      	bne.n	8004d72 <__cvt+0x66>
 8004d6c:	f019 0f01 	tst.w	r9, #1
 8004d70:	d022      	beq.n	8004db8 <__cvt+0xac>
 8004d72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d76:	eb07 0906 	add.w	r9, r7, r6
 8004d7a:	d110      	bne.n	8004d9e <__cvt+0x92>
 8004d7c:	783b      	ldrb	r3, [r7, #0]
 8004d7e:	2b30      	cmp	r3, #48	; 0x30
 8004d80:	d10a      	bne.n	8004d98 <__cvt+0x8c>
 8004d82:	2200      	movs	r2, #0
 8004d84:	2300      	movs	r3, #0
 8004d86:	4620      	mov	r0, r4
 8004d88:	4629      	mov	r1, r5
 8004d8a:	f7fb fea5 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d8e:	b918      	cbnz	r0, 8004d98 <__cvt+0x8c>
 8004d90:	f1c6 0601 	rsb	r6, r6, #1
 8004d94:	f8ca 6000 	str.w	r6, [sl]
 8004d98:	f8da 3000 	ldr.w	r3, [sl]
 8004d9c:	4499      	add	r9, r3
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2300      	movs	r3, #0
 8004da2:	4620      	mov	r0, r4
 8004da4:	4629      	mov	r1, r5
 8004da6:	f7fb fe97 	bl	8000ad8 <__aeabi_dcmpeq>
 8004daa:	b108      	cbz	r0, 8004db0 <__cvt+0xa4>
 8004dac:	f8cd 900c 	str.w	r9, [sp, #12]
 8004db0:	2230      	movs	r2, #48	; 0x30
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	454b      	cmp	r3, r9
 8004db6:	d307      	bcc.n	8004dc8 <__cvt+0xbc>
 8004db8:	9b03      	ldr	r3, [sp, #12]
 8004dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dbc:	1bdb      	subs	r3, r3, r7
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	b004      	add	sp, #16
 8004dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc8:	1c59      	adds	r1, r3, #1
 8004dca:	9103      	str	r1, [sp, #12]
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	e7f0      	b.n	8004db2 <__cvt+0xa6>

08004dd0 <__exponent>:
 8004dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2900      	cmp	r1, #0
 8004dd6:	bfb8      	it	lt
 8004dd8:	4249      	neglt	r1, r1
 8004dda:	f803 2b02 	strb.w	r2, [r3], #2
 8004dde:	bfb4      	ite	lt
 8004de0:	222d      	movlt	r2, #45	; 0x2d
 8004de2:	222b      	movge	r2, #43	; 0x2b
 8004de4:	2909      	cmp	r1, #9
 8004de6:	7042      	strb	r2, [r0, #1]
 8004de8:	dd2a      	ble.n	8004e40 <__exponent+0x70>
 8004dea:	f10d 0207 	add.w	r2, sp, #7
 8004dee:	4617      	mov	r7, r2
 8004df0:	260a      	movs	r6, #10
 8004df2:	4694      	mov	ip, r2
 8004df4:	fb91 f5f6 	sdiv	r5, r1, r6
 8004df8:	fb06 1415 	mls	r4, r6, r5, r1
 8004dfc:	3430      	adds	r4, #48	; 0x30
 8004dfe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004e02:	460c      	mov	r4, r1
 8004e04:	2c63      	cmp	r4, #99	; 0x63
 8004e06:	f102 32ff 	add.w	r2, r2, #4294967295
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	dcf1      	bgt.n	8004df2 <__exponent+0x22>
 8004e0e:	3130      	adds	r1, #48	; 0x30
 8004e10:	f1ac 0402 	sub.w	r4, ip, #2
 8004e14:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004e18:	1c41      	adds	r1, r0, #1
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	42ba      	cmp	r2, r7
 8004e1e:	d30a      	bcc.n	8004e36 <__exponent+0x66>
 8004e20:	f10d 0209 	add.w	r2, sp, #9
 8004e24:	eba2 020c 	sub.w	r2, r2, ip
 8004e28:	42bc      	cmp	r4, r7
 8004e2a:	bf88      	it	hi
 8004e2c:	2200      	movhi	r2, #0
 8004e2e:	4413      	add	r3, r2
 8004e30:	1a18      	subs	r0, r3, r0
 8004e32:	b003      	add	sp, #12
 8004e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e36:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004e3a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004e3e:	e7ed      	b.n	8004e1c <__exponent+0x4c>
 8004e40:	2330      	movs	r3, #48	; 0x30
 8004e42:	3130      	adds	r1, #48	; 0x30
 8004e44:	7083      	strb	r3, [r0, #2]
 8004e46:	70c1      	strb	r1, [r0, #3]
 8004e48:	1d03      	adds	r3, r0, #4
 8004e4a:	e7f1      	b.n	8004e30 <__exponent+0x60>

08004e4c <_printf_float>:
 8004e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e50:	ed2d 8b02 	vpush	{d8}
 8004e54:	b08d      	sub	sp, #52	; 0x34
 8004e56:	460c      	mov	r4, r1
 8004e58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004e5c:	4616      	mov	r6, r2
 8004e5e:	461f      	mov	r7, r3
 8004e60:	4605      	mov	r5, r0
 8004e62:	f000 fcfb 	bl	800585c <_localeconv_r>
 8004e66:	f8d0 a000 	ldr.w	sl, [r0]
 8004e6a:	4650      	mov	r0, sl
 8004e6c:	f7fb fa08 	bl	8000280 <strlen>
 8004e70:	2300      	movs	r3, #0
 8004e72:	930a      	str	r3, [sp, #40]	; 0x28
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	9305      	str	r3, [sp, #20]
 8004e78:	f8d8 3000 	ldr.w	r3, [r8]
 8004e7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004e80:	3307      	adds	r3, #7
 8004e82:	f023 0307 	bic.w	r3, r3, #7
 8004e86:	f103 0208 	add.w	r2, r3, #8
 8004e8a:	f8c8 2000 	str.w	r2, [r8]
 8004e8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e96:	9307      	str	r3, [sp, #28]
 8004e98:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e9c:	ee08 0a10 	vmov	s16, r0
 8004ea0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ea8:	4b9e      	ldr	r3, [pc, #632]	; (8005124 <_printf_float+0x2d8>)
 8004eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8004eae:	f7fb fe45 	bl	8000b3c <__aeabi_dcmpun>
 8004eb2:	bb88      	cbnz	r0, 8004f18 <_printf_float+0xcc>
 8004eb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eb8:	4b9a      	ldr	r3, [pc, #616]	; (8005124 <_printf_float+0x2d8>)
 8004eba:	f04f 32ff 	mov.w	r2, #4294967295
 8004ebe:	f7fb fe1f 	bl	8000b00 <__aeabi_dcmple>
 8004ec2:	bb48      	cbnz	r0, 8004f18 <_printf_float+0xcc>
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	4640      	mov	r0, r8
 8004eca:	4649      	mov	r1, r9
 8004ecc:	f7fb fe0e 	bl	8000aec <__aeabi_dcmplt>
 8004ed0:	b110      	cbz	r0, 8004ed8 <_printf_float+0x8c>
 8004ed2:	232d      	movs	r3, #45	; 0x2d
 8004ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed8:	4a93      	ldr	r2, [pc, #588]	; (8005128 <_printf_float+0x2dc>)
 8004eda:	4b94      	ldr	r3, [pc, #592]	; (800512c <_printf_float+0x2e0>)
 8004edc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ee0:	bf94      	ite	ls
 8004ee2:	4690      	movls	r8, r2
 8004ee4:	4698      	movhi	r8, r3
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	9b05      	ldr	r3, [sp, #20]
 8004eec:	f023 0304 	bic.w	r3, r3, #4
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	f04f 0900 	mov.w	r9, #0
 8004ef6:	9700      	str	r7, [sp, #0]
 8004ef8:	4633      	mov	r3, r6
 8004efa:	aa0b      	add	r2, sp, #44	; 0x2c
 8004efc:	4621      	mov	r1, r4
 8004efe:	4628      	mov	r0, r5
 8004f00:	f000 f9da 	bl	80052b8 <_printf_common>
 8004f04:	3001      	adds	r0, #1
 8004f06:	f040 8090 	bne.w	800502a <_printf_float+0x1de>
 8004f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0e:	b00d      	add	sp, #52	; 0x34
 8004f10:	ecbd 8b02 	vpop	{d8}
 8004f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f18:	4642      	mov	r2, r8
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	4640      	mov	r0, r8
 8004f1e:	4649      	mov	r1, r9
 8004f20:	f7fb fe0c 	bl	8000b3c <__aeabi_dcmpun>
 8004f24:	b140      	cbz	r0, 8004f38 <_printf_float+0xec>
 8004f26:	464b      	mov	r3, r9
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bfbc      	itt	lt
 8004f2c:	232d      	movlt	r3, #45	; 0x2d
 8004f2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f32:	4a7f      	ldr	r2, [pc, #508]	; (8005130 <_printf_float+0x2e4>)
 8004f34:	4b7f      	ldr	r3, [pc, #508]	; (8005134 <_printf_float+0x2e8>)
 8004f36:	e7d1      	b.n	8004edc <_printf_float+0x90>
 8004f38:	6863      	ldr	r3, [r4, #4]
 8004f3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f3e:	9206      	str	r2, [sp, #24]
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	d13f      	bne.n	8004fc4 <_printf_float+0x178>
 8004f44:	2306      	movs	r3, #6
 8004f46:	6063      	str	r3, [r4, #4]
 8004f48:	9b05      	ldr	r3, [sp, #20]
 8004f4a:	6861      	ldr	r1, [r4, #4]
 8004f4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f50:	2300      	movs	r3, #0
 8004f52:	9303      	str	r3, [sp, #12]
 8004f54:	ab0a      	add	r3, sp, #40	; 0x28
 8004f56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004f5a:	ab09      	add	r3, sp, #36	; 0x24
 8004f5c:	ec49 8b10 	vmov	d0, r8, r9
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	6022      	str	r2, [r4, #0]
 8004f64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f68:	4628      	mov	r0, r5
 8004f6a:	f7ff fecf 	bl	8004d0c <__cvt>
 8004f6e:	9b06      	ldr	r3, [sp, #24]
 8004f70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f72:	2b47      	cmp	r3, #71	; 0x47
 8004f74:	4680      	mov	r8, r0
 8004f76:	d108      	bne.n	8004f8a <_printf_float+0x13e>
 8004f78:	1cc8      	adds	r0, r1, #3
 8004f7a:	db02      	blt.n	8004f82 <_printf_float+0x136>
 8004f7c:	6863      	ldr	r3, [r4, #4]
 8004f7e:	4299      	cmp	r1, r3
 8004f80:	dd41      	ble.n	8005006 <_printf_float+0x1ba>
 8004f82:	f1ab 0302 	sub.w	r3, fp, #2
 8004f86:	fa5f fb83 	uxtb.w	fp, r3
 8004f8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f8e:	d820      	bhi.n	8004fd2 <_printf_float+0x186>
 8004f90:	3901      	subs	r1, #1
 8004f92:	465a      	mov	r2, fp
 8004f94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f98:	9109      	str	r1, [sp, #36]	; 0x24
 8004f9a:	f7ff ff19 	bl	8004dd0 <__exponent>
 8004f9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fa0:	1813      	adds	r3, r2, r0
 8004fa2:	2a01      	cmp	r2, #1
 8004fa4:	4681      	mov	r9, r0
 8004fa6:	6123      	str	r3, [r4, #16]
 8004fa8:	dc02      	bgt.n	8004fb0 <_printf_float+0x164>
 8004faa:	6822      	ldr	r2, [r4, #0]
 8004fac:	07d2      	lsls	r2, r2, #31
 8004fae:	d501      	bpl.n	8004fb4 <_printf_float+0x168>
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	6123      	str	r3, [r4, #16]
 8004fb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d09c      	beq.n	8004ef6 <_printf_float+0xaa>
 8004fbc:	232d      	movs	r3, #45	; 0x2d
 8004fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fc2:	e798      	b.n	8004ef6 <_printf_float+0xaa>
 8004fc4:	9a06      	ldr	r2, [sp, #24]
 8004fc6:	2a47      	cmp	r2, #71	; 0x47
 8004fc8:	d1be      	bne.n	8004f48 <_printf_float+0xfc>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1bc      	bne.n	8004f48 <_printf_float+0xfc>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e7b9      	b.n	8004f46 <_printf_float+0xfa>
 8004fd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004fd6:	d118      	bne.n	800500a <_printf_float+0x1be>
 8004fd8:	2900      	cmp	r1, #0
 8004fda:	6863      	ldr	r3, [r4, #4]
 8004fdc:	dd0b      	ble.n	8004ff6 <_printf_float+0x1aa>
 8004fde:	6121      	str	r1, [r4, #16]
 8004fe0:	b913      	cbnz	r3, 8004fe8 <_printf_float+0x19c>
 8004fe2:	6822      	ldr	r2, [r4, #0]
 8004fe4:	07d0      	lsls	r0, r2, #31
 8004fe6:	d502      	bpl.n	8004fee <_printf_float+0x1a2>
 8004fe8:	3301      	adds	r3, #1
 8004fea:	440b      	add	r3, r1
 8004fec:	6123      	str	r3, [r4, #16]
 8004fee:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ff0:	f04f 0900 	mov.w	r9, #0
 8004ff4:	e7de      	b.n	8004fb4 <_printf_float+0x168>
 8004ff6:	b913      	cbnz	r3, 8004ffe <_printf_float+0x1b2>
 8004ff8:	6822      	ldr	r2, [r4, #0]
 8004ffa:	07d2      	lsls	r2, r2, #31
 8004ffc:	d501      	bpl.n	8005002 <_printf_float+0x1b6>
 8004ffe:	3302      	adds	r3, #2
 8005000:	e7f4      	b.n	8004fec <_printf_float+0x1a0>
 8005002:	2301      	movs	r3, #1
 8005004:	e7f2      	b.n	8004fec <_printf_float+0x1a0>
 8005006:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800500a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800500c:	4299      	cmp	r1, r3
 800500e:	db05      	blt.n	800501c <_printf_float+0x1d0>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	6121      	str	r1, [r4, #16]
 8005014:	07d8      	lsls	r0, r3, #31
 8005016:	d5ea      	bpl.n	8004fee <_printf_float+0x1a2>
 8005018:	1c4b      	adds	r3, r1, #1
 800501a:	e7e7      	b.n	8004fec <_printf_float+0x1a0>
 800501c:	2900      	cmp	r1, #0
 800501e:	bfd4      	ite	le
 8005020:	f1c1 0202 	rsble	r2, r1, #2
 8005024:	2201      	movgt	r2, #1
 8005026:	4413      	add	r3, r2
 8005028:	e7e0      	b.n	8004fec <_printf_float+0x1a0>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	055a      	lsls	r2, r3, #21
 800502e:	d407      	bmi.n	8005040 <_printf_float+0x1f4>
 8005030:	6923      	ldr	r3, [r4, #16]
 8005032:	4642      	mov	r2, r8
 8005034:	4631      	mov	r1, r6
 8005036:	4628      	mov	r0, r5
 8005038:	47b8      	blx	r7
 800503a:	3001      	adds	r0, #1
 800503c:	d12c      	bne.n	8005098 <_printf_float+0x24c>
 800503e:	e764      	b.n	8004f0a <_printf_float+0xbe>
 8005040:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005044:	f240 80e0 	bls.w	8005208 <_printf_float+0x3bc>
 8005048:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800504c:	2200      	movs	r2, #0
 800504e:	2300      	movs	r3, #0
 8005050:	f7fb fd42 	bl	8000ad8 <__aeabi_dcmpeq>
 8005054:	2800      	cmp	r0, #0
 8005056:	d034      	beq.n	80050c2 <_printf_float+0x276>
 8005058:	4a37      	ldr	r2, [pc, #220]	; (8005138 <_printf_float+0x2ec>)
 800505a:	2301      	movs	r3, #1
 800505c:	4631      	mov	r1, r6
 800505e:	4628      	mov	r0, r5
 8005060:	47b8      	blx	r7
 8005062:	3001      	adds	r0, #1
 8005064:	f43f af51 	beq.w	8004f0a <_printf_float+0xbe>
 8005068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800506c:	429a      	cmp	r2, r3
 800506e:	db02      	blt.n	8005076 <_printf_float+0x22a>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	07d8      	lsls	r0, r3, #31
 8005074:	d510      	bpl.n	8005098 <_printf_float+0x24c>
 8005076:	ee18 3a10 	vmov	r3, s16
 800507a:	4652      	mov	r2, sl
 800507c:	4631      	mov	r1, r6
 800507e:	4628      	mov	r0, r5
 8005080:	47b8      	blx	r7
 8005082:	3001      	adds	r0, #1
 8005084:	f43f af41 	beq.w	8004f0a <_printf_float+0xbe>
 8005088:	f04f 0800 	mov.w	r8, #0
 800508c:	f104 091a 	add.w	r9, r4, #26
 8005090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005092:	3b01      	subs	r3, #1
 8005094:	4543      	cmp	r3, r8
 8005096:	dc09      	bgt.n	80050ac <_printf_float+0x260>
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	079b      	lsls	r3, r3, #30
 800509c:	f100 8107 	bmi.w	80052ae <_printf_float+0x462>
 80050a0:	68e0      	ldr	r0, [r4, #12]
 80050a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050a4:	4298      	cmp	r0, r3
 80050a6:	bfb8      	it	lt
 80050a8:	4618      	movlt	r0, r3
 80050aa:	e730      	b.n	8004f0e <_printf_float+0xc2>
 80050ac:	2301      	movs	r3, #1
 80050ae:	464a      	mov	r2, r9
 80050b0:	4631      	mov	r1, r6
 80050b2:	4628      	mov	r0, r5
 80050b4:	47b8      	blx	r7
 80050b6:	3001      	adds	r0, #1
 80050b8:	f43f af27 	beq.w	8004f0a <_printf_float+0xbe>
 80050bc:	f108 0801 	add.w	r8, r8, #1
 80050c0:	e7e6      	b.n	8005090 <_printf_float+0x244>
 80050c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	dc39      	bgt.n	800513c <_printf_float+0x2f0>
 80050c8:	4a1b      	ldr	r2, [pc, #108]	; (8005138 <_printf_float+0x2ec>)
 80050ca:	2301      	movs	r3, #1
 80050cc:	4631      	mov	r1, r6
 80050ce:	4628      	mov	r0, r5
 80050d0:	47b8      	blx	r7
 80050d2:	3001      	adds	r0, #1
 80050d4:	f43f af19 	beq.w	8004f0a <_printf_float+0xbe>
 80050d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80050dc:	4313      	orrs	r3, r2
 80050de:	d102      	bne.n	80050e6 <_printf_float+0x29a>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	07d9      	lsls	r1, r3, #31
 80050e4:	d5d8      	bpl.n	8005098 <_printf_float+0x24c>
 80050e6:	ee18 3a10 	vmov	r3, s16
 80050ea:	4652      	mov	r2, sl
 80050ec:	4631      	mov	r1, r6
 80050ee:	4628      	mov	r0, r5
 80050f0:	47b8      	blx	r7
 80050f2:	3001      	adds	r0, #1
 80050f4:	f43f af09 	beq.w	8004f0a <_printf_float+0xbe>
 80050f8:	f04f 0900 	mov.w	r9, #0
 80050fc:	f104 0a1a 	add.w	sl, r4, #26
 8005100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005102:	425b      	negs	r3, r3
 8005104:	454b      	cmp	r3, r9
 8005106:	dc01      	bgt.n	800510c <_printf_float+0x2c0>
 8005108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800510a:	e792      	b.n	8005032 <_printf_float+0x1e6>
 800510c:	2301      	movs	r3, #1
 800510e:	4652      	mov	r2, sl
 8005110:	4631      	mov	r1, r6
 8005112:	4628      	mov	r0, r5
 8005114:	47b8      	blx	r7
 8005116:	3001      	adds	r0, #1
 8005118:	f43f aef7 	beq.w	8004f0a <_printf_float+0xbe>
 800511c:	f109 0901 	add.w	r9, r9, #1
 8005120:	e7ee      	b.n	8005100 <_printf_float+0x2b4>
 8005122:	bf00      	nop
 8005124:	7fefffff 	.word	0x7fefffff
 8005128:	08008988 	.word	0x08008988
 800512c:	0800898c 	.word	0x0800898c
 8005130:	08008990 	.word	0x08008990
 8005134:	08008994 	.word	0x08008994
 8005138:	08008998 	.word	0x08008998
 800513c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800513e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005140:	429a      	cmp	r2, r3
 8005142:	bfa8      	it	ge
 8005144:	461a      	movge	r2, r3
 8005146:	2a00      	cmp	r2, #0
 8005148:	4691      	mov	r9, r2
 800514a:	dc37      	bgt.n	80051bc <_printf_float+0x370>
 800514c:	f04f 0b00 	mov.w	fp, #0
 8005150:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005154:	f104 021a 	add.w	r2, r4, #26
 8005158:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800515a:	9305      	str	r3, [sp, #20]
 800515c:	eba3 0309 	sub.w	r3, r3, r9
 8005160:	455b      	cmp	r3, fp
 8005162:	dc33      	bgt.n	80051cc <_printf_float+0x380>
 8005164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005168:	429a      	cmp	r2, r3
 800516a:	db3b      	blt.n	80051e4 <_printf_float+0x398>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	07da      	lsls	r2, r3, #31
 8005170:	d438      	bmi.n	80051e4 <_printf_float+0x398>
 8005172:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005176:	eba2 0903 	sub.w	r9, r2, r3
 800517a:	9b05      	ldr	r3, [sp, #20]
 800517c:	1ad2      	subs	r2, r2, r3
 800517e:	4591      	cmp	r9, r2
 8005180:	bfa8      	it	ge
 8005182:	4691      	movge	r9, r2
 8005184:	f1b9 0f00 	cmp.w	r9, #0
 8005188:	dc35      	bgt.n	80051f6 <_printf_float+0x3aa>
 800518a:	f04f 0800 	mov.w	r8, #0
 800518e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005192:	f104 0a1a 	add.w	sl, r4, #26
 8005196:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	eba3 0309 	sub.w	r3, r3, r9
 80051a0:	4543      	cmp	r3, r8
 80051a2:	f77f af79 	ble.w	8005098 <_printf_float+0x24c>
 80051a6:	2301      	movs	r3, #1
 80051a8:	4652      	mov	r2, sl
 80051aa:	4631      	mov	r1, r6
 80051ac:	4628      	mov	r0, r5
 80051ae:	47b8      	blx	r7
 80051b0:	3001      	adds	r0, #1
 80051b2:	f43f aeaa 	beq.w	8004f0a <_printf_float+0xbe>
 80051b6:	f108 0801 	add.w	r8, r8, #1
 80051ba:	e7ec      	b.n	8005196 <_printf_float+0x34a>
 80051bc:	4613      	mov	r3, r2
 80051be:	4631      	mov	r1, r6
 80051c0:	4642      	mov	r2, r8
 80051c2:	4628      	mov	r0, r5
 80051c4:	47b8      	blx	r7
 80051c6:	3001      	adds	r0, #1
 80051c8:	d1c0      	bne.n	800514c <_printf_float+0x300>
 80051ca:	e69e      	b.n	8004f0a <_printf_float+0xbe>
 80051cc:	2301      	movs	r3, #1
 80051ce:	4631      	mov	r1, r6
 80051d0:	4628      	mov	r0, r5
 80051d2:	9205      	str	r2, [sp, #20]
 80051d4:	47b8      	blx	r7
 80051d6:	3001      	adds	r0, #1
 80051d8:	f43f ae97 	beq.w	8004f0a <_printf_float+0xbe>
 80051dc:	9a05      	ldr	r2, [sp, #20]
 80051de:	f10b 0b01 	add.w	fp, fp, #1
 80051e2:	e7b9      	b.n	8005158 <_printf_float+0x30c>
 80051e4:	ee18 3a10 	vmov	r3, s16
 80051e8:	4652      	mov	r2, sl
 80051ea:	4631      	mov	r1, r6
 80051ec:	4628      	mov	r0, r5
 80051ee:	47b8      	blx	r7
 80051f0:	3001      	adds	r0, #1
 80051f2:	d1be      	bne.n	8005172 <_printf_float+0x326>
 80051f4:	e689      	b.n	8004f0a <_printf_float+0xbe>
 80051f6:	9a05      	ldr	r2, [sp, #20]
 80051f8:	464b      	mov	r3, r9
 80051fa:	4442      	add	r2, r8
 80051fc:	4631      	mov	r1, r6
 80051fe:	4628      	mov	r0, r5
 8005200:	47b8      	blx	r7
 8005202:	3001      	adds	r0, #1
 8005204:	d1c1      	bne.n	800518a <_printf_float+0x33e>
 8005206:	e680      	b.n	8004f0a <_printf_float+0xbe>
 8005208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800520a:	2a01      	cmp	r2, #1
 800520c:	dc01      	bgt.n	8005212 <_printf_float+0x3c6>
 800520e:	07db      	lsls	r3, r3, #31
 8005210:	d53a      	bpl.n	8005288 <_printf_float+0x43c>
 8005212:	2301      	movs	r3, #1
 8005214:	4642      	mov	r2, r8
 8005216:	4631      	mov	r1, r6
 8005218:	4628      	mov	r0, r5
 800521a:	47b8      	blx	r7
 800521c:	3001      	adds	r0, #1
 800521e:	f43f ae74 	beq.w	8004f0a <_printf_float+0xbe>
 8005222:	ee18 3a10 	vmov	r3, s16
 8005226:	4652      	mov	r2, sl
 8005228:	4631      	mov	r1, r6
 800522a:	4628      	mov	r0, r5
 800522c:	47b8      	blx	r7
 800522e:	3001      	adds	r0, #1
 8005230:	f43f ae6b 	beq.w	8004f0a <_printf_float+0xbe>
 8005234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005238:	2200      	movs	r2, #0
 800523a:	2300      	movs	r3, #0
 800523c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005240:	f7fb fc4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005244:	b9d8      	cbnz	r0, 800527e <_printf_float+0x432>
 8005246:	f10a 33ff 	add.w	r3, sl, #4294967295
 800524a:	f108 0201 	add.w	r2, r8, #1
 800524e:	4631      	mov	r1, r6
 8005250:	4628      	mov	r0, r5
 8005252:	47b8      	blx	r7
 8005254:	3001      	adds	r0, #1
 8005256:	d10e      	bne.n	8005276 <_printf_float+0x42a>
 8005258:	e657      	b.n	8004f0a <_printf_float+0xbe>
 800525a:	2301      	movs	r3, #1
 800525c:	4652      	mov	r2, sl
 800525e:	4631      	mov	r1, r6
 8005260:	4628      	mov	r0, r5
 8005262:	47b8      	blx	r7
 8005264:	3001      	adds	r0, #1
 8005266:	f43f ae50 	beq.w	8004f0a <_printf_float+0xbe>
 800526a:	f108 0801 	add.w	r8, r8, #1
 800526e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005270:	3b01      	subs	r3, #1
 8005272:	4543      	cmp	r3, r8
 8005274:	dcf1      	bgt.n	800525a <_printf_float+0x40e>
 8005276:	464b      	mov	r3, r9
 8005278:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800527c:	e6da      	b.n	8005034 <_printf_float+0x1e8>
 800527e:	f04f 0800 	mov.w	r8, #0
 8005282:	f104 0a1a 	add.w	sl, r4, #26
 8005286:	e7f2      	b.n	800526e <_printf_float+0x422>
 8005288:	2301      	movs	r3, #1
 800528a:	4642      	mov	r2, r8
 800528c:	e7df      	b.n	800524e <_printf_float+0x402>
 800528e:	2301      	movs	r3, #1
 8005290:	464a      	mov	r2, r9
 8005292:	4631      	mov	r1, r6
 8005294:	4628      	mov	r0, r5
 8005296:	47b8      	blx	r7
 8005298:	3001      	adds	r0, #1
 800529a:	f43f ae36 	beq.w	8004f0a <_printf_float+0xbe>
 800529e:	f108 0801 	add.w	r8, r8, #1
 80052a2:	68e3      	ldr	r3, [r4, #12]
 80052a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052a6:	1a5b      	subs	r3, r3, r1
 80052a8:	4543      	cmp	r3, r8
 80052aa:	dcf0      	bgt.n	800528e <_printf_float+0x442>
 80052ac:	e6f8      	b.n	80050a0 <_printf_float+0x254>
 80052ae:	f04f 0800 	mov.w	r8, #0
 80052b2:	f104 0919 	add.w	r9, r4, #25
 80052b6:	e7f4      	b.n	80052a2 <_printf_float+0x456>

080052b8 <_printf_common>:
 80052b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052bc:	4616      	mov	r6, r2
 80052be:	4699      	mov	r9, r3
 80052c0:	688a      	ldr	r2, [r1, #8]
 80052c2:	690b      	ldr	r3, [r1, #16]
 80052c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052c8:	4293      	cmp	r3, r2
 80052ca:	bfb8      	it	lt
 80052cc:	4613      	movlt	r3, r2
 80052ce:	6033      	str	r3, [r6, #0]
 80052d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052d4:	4607      	mov	r7, r0
 80052d6:	460c      	mov	r4, r1
 80052d8:	b10a      	cbz	r2, 80052de <_printf_common+0x26>
 80052da:	3301      	adds	r3, #1
 80052dc:	6033      	str	r3, [r6, #0]
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	0699      	lsls	r1, r3, #26
 80052e2:	bf42      	ittt	mi
 80052e4:	6833      	ldrmi	r3, [r6, #0]
 80052e6:	3302      	addmi	r3, #2
 80052e8:	6033      	strmi	r3, [r6, #0]
 80052ea:	6825      	ldr	r5, [r4, #0]
 80052ec:	f015 0506 	ands.w	r5, r5, #6
 80052f0:	d106      	bne.n	8005300 <_printf_common+0x48>
 80052f2:	f104 0a19 	add.w	sl, r4, #25
 80052f6:	68e3      	ldr	r3, [r4, #12]
 80052f8:	6832      	ldr	r2, [r6, #0]
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	42ab      	cmp	r3, r5
 80052fe:	dc26      	bgt.n	800534e <_printf_common+0x96>
 8005300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005304:	1e13      	subs	r3, r2, #0
 8005306:	6822      	ldr	r2, [r4, #0]
 8005308:	bf18      	it	ne
 800530a:	2301      	movne	r3, #1
 800530c:	0692      	lsls	r2, r2, #26
 800530e:	d42b      	bmi.n	8005368 <_printf_common+0xb0>
 8005310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005314:	4649      	mov	r1, r9
 8005316:	4638      	mov	r0, r7
 8005318:	47c0      	blx	r8
 800531a:	3001      	adds	r0, #1
 800531c:	d01e      	beq.n	800535c <_printf_common+0xa4>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	6922      	ldr	r2, [r4, #16]
 8005322:	f003 0306 	and.w	r3, r3, #6
 8005326:	2b04      	cmp	r3, #4
 8005328:	bf02      	ittt	eq
 800532a:	68e5      	ldreq	r5, [r4, #12]
 800532c:	6833      	ldreq	r3, [r6, #0]
 800532e:	1aed      	subeq	r5, r5, r3
 8005330:	68a3      	ldr	r3, [r4, #8]
 8005332:	bf0c      	ite	eq
 8005334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005338:	2500      	movne	r5, #0
 800533a:	4293      	cmp	r3, r2
 800533c:	bfc4      	itt	gt
 800533e:	1a9b      	subgt	r3, r3, r2
 8005340:	18ed      	addgt	r5, r5, r3
 8005342:	2600      	movs	r6, #0
 8005344:	341a      	adds	r4, #26
 8005346:	42b5      	cmp	r5, r6
 8005348:	d11a      	bne.n	8005380 <_printf_common+0xc8>
 800534a:	2000      	movs	r0, #0
 800534c:	e008      	b.n	8005360 <_printf_common+0xa8>
 800534e:	2301      	movs	r3, #1
 8005350:	4652      	mov	r2, sl
 8005352:	4649      	mov	r1, r9
 8005354:	4638      	mov	r0, r7
 8005356:	47c0      	blx	r8
 8005358:	3001      	adds	r0, #1
 800535a:	d103      	bne.n	8005364 <_printf_common+0xac>
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005364:	3501      	adds	r5, #1
 8005366:	e7c6      	b.n	80052f6 <_printf_common+0x3e>
 8005368:	18e1      	adds	r1, r4, r3
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	2030      	movs	r0, #48	; 0x30
 800536e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005372:	4422      	add	r2, r4
 8005374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800537c:	3302      	adds	r3, #2
 800537e:	e7c7      	b.n	8005310 <_printf_common+0x58>
 8005380:	2301      	movs	r3, #1
 8005382:	4622      	mov	r2, r4
 8005384:	4649      	mov	r1, r9
 8005386:	4638      	mov	r0, r7
 8005388:	47c0      	blx	r8
 800538a:	3001      	adds	r0, #1
 800538c:	d0e6      	beq.n	800535c <_printf_common+0xa4>
 800538e:	3601      	adds	r6, #1
 8005390:	e7d9      	b.n	8005346 <_printf_common+0x8e>
	...

08005394 <_printf_i>:
 8005394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005398:	7e0f      	ldrb	r7, [r1, #24]
 800539a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800539c:	2f78      	cmp	r7, #120	; 0x78
 800539e:	4691      	mov	r9, r2
 80053a0:	4680      	mov	r8, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	469a      	mov	sl, r3
 80053a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053aa:	d807      	bhi.n	80053bc <_printf_i+0x28>
 80053ac:	2f62      	cmp	r7, #98	; 0x62
 80053ae:	d80a      	bhi.n	80053c6 <_printf_i+0x32>
 80053b0:	2f00      	cmp	r7, #0
 80053b2:	f000 80d4 	beq.w	800555e <_printf_i+0x1ca>
 80053b6:	2f58      	cmp	r7, #88	; 0x58
 80053b8:	f000 80c0 	beq.w	800553c <_printf_i+0x1a8>
 80053bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053c4:	e03a      	b.n	800543c <_printf_i+0xa8>
 80053c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053ca:	2b15      	cmp	r3, #21
 80053cc:	d8f6      	bhi.n	80053bc <_printf_i+0x28>
 80053ce:	a101      	add	r1, pc, #4	; (adr r1, 80053d4 <_printf_i+0x40>)
 80053d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053d4:	0800542d 	.word	0x0800542d
 80053d8:	08005441 	.word	0x08005441
 80053dc:	080053bd 	.word	0x080053bd
 80053e0:	080053bd 	.word	0x080053bd
 80053e4:	080053bd 	.word	0x080053bd
 80053e8:	080053bd 	.word	0x080053bd
 80053ec:	08005441 	.word	0x08005441
 80053f0:	080053bd 	.word	0x080053bd
 80053f4:	080053bd 	.word	0x080053bd
 80053f8:	080053bd 	.word	0x080053bd
 80053fc:	080053bd 	.word	0x080053bd
 8005400:	08005545 	.word	0x08005545
 8005404:	0800546d 	.word	0x0800546d
 8005408:	080054ff 	.word	0x080054ff
 800540c:	080053bd 	.word	0x080053bd
 8005410:	080053bd 	.word	0x080053bd
 8005414:	08005567 	.word	0x08005567
 8005418:	080053bd 	.word	0x080053bd
 800541c:	0800546d 	.word	0x0800546d
 8005420:	080053bd 	.word	0x080053bd
 8005424:	080053bd 	.word	0x080053bd
 8005428:	08005507 	.word	0x08005507
 800542c:	682b      	ldr	r3, [r5, #0]
 800542e:	1d1a      	adds	r2, r3, #4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	602a      	str	r2, [r5, #0]
 8005434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800543c:	2301      	movs	r3, #1
 800543e:	e09f      	b.n	8005580 <_printf_i+0x1ec>
 8005440:	6820      	ldr	r0, [r4, #0]
 8005442:	682b      	ldr	r3, [r5, #0]
 8005444:	0607      	lsls	r7, r0, #24
 8005446:	f103 0104 	add.w	r1, r3, #4
 800544a:	6029      	str	r1, [r5, #0]
 800544c:	d501      	bpl.n	8005452 <_printf_i+0xbe>
 800544e:	681e      	ldr	r6, [r3, #0]
 8005450:	e003      	b.n	800545a <_printf_i+0xc6>
 8005452:	0646      	lsls	r6, r0, #25
 8005454:	d5fb      	bpl.n	800544e <_printf_i+0xba>
 8005456:	f9b3 6000 	ldrsh.w	r6, [r3]
 800545a:	2e00      	cmp	r6, #0
 800545c:	da03      	bge.n	8005466 <_printf_i+0xd2>
 800545e:	232d      	movs	r3, #45	; 0x2d
 8005460:	4276      	negs	r6, r6
 8005462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005466:	485a      	ldr	r0, [pc, #360]	; (80055d0 <_printf_i+0x23c>)
 8005468:	230a      	movs	r3, #10
 800546a:	e012      	b.n	8005492 <_printf_i+0xfe>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	6820      	ldr	r0, [r4, #0]
 8005470:	1d19      	adds	r1, r3, #4
 8005472:	6029      	str	r1, [r5, #0]
 8005474:	0605      	lsls	r5, r0, #24
 8005476:	d501      	bpl.n	800547c <_printf_i+0xe8>
 8005478:	681e      	ldr	r6, [r3, #0]
 800547a:	e002      	b.n	8005482 <_printf_i+0xee>
 800547c:	0641      	lsls	r1, r0, #25
 800547e:	d5fb      	bpl.n	8005478 <_printf_i+0xe4>
 8005480:	881e      	ldrh	r6, [r3, #0]
 8005482:	4853      	ldr	r0, [pc, #332]	; (80055d0 <_printf_i+0x23c>)
 8005484:	2f6f      	cmp	r7, #111	; 0x6f
 8005486:	bf0c      	ite	eq
 8005488:	2308      	moveq	r3, #8
 800548a:	230a      	movne	r3, #10
 800548c:	2100      	movs	r1, #0
 800548e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005492:	6865      	ldr	r5, [r4, #4]
 8005494:	60a5      	str	r5, [r4, #8]
 8005496:	2d00      	cmp	r5, #0
 8005498:	bfa2      	ittt	ge
 800549a:	6821      	ldrge	r1, [r4, #0]
 800549c:	f021 0104 	bicge.w	r1, r1, #4
 80054a0:	6021      	strge	r1, [r4, #0]
 80054a2:	b90e      	cbnz	r6, 80054a8 <_printf_i+0x114>
 80054a4:	2d00      	cmp	r5, #0
 80054a6:	d04b      	beq.n	8005540 <_printf_i+0x1ac>
 80054a8:	4615      	mov	r5, r2
 80054aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80054ae:	fb03 6711 	mls	r7, r3, r1, r6
 80054b2:	5dc7      	ldrb	r7, [r0, r7]
 80054b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054b8:	4637      	mov	r7, r6
 80054ba:	42bb      	cmp	r3, r7
 80054bc:	460e      	mov	r6, r1
 80054be:	d9f4      	bls.n	80054aa <_printf_i+0x116>
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d10b      	bne.n	80054dc <_printf_i+0x148>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	07de      	lsls	r6, r3, #31
 80054c8:	d508      	bpl.n	80054dc <_printf_i+0x148>
 80054ca:	6923      	ldr	r3, [r4, #16]
 80054cc:	6861      	ldr	r1, [r4, #4]
 80054ce:	4299      	cmp	r1, r3
 80054d0:	bfde      	ittt	le
 80054d2:	2330      	movle	r3, #48	; 0x30
 80054d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054dc:	1b52      	subs	r2, r2, r5
 80054de:	6122      	str	r2, [r4, #16]
 80054e0:	f8cd a000 	str.w	sl, [sp]
 80054e4:	464b      	mov	r3, r9
 80054e6:	aa03      	add	r2, sp, #12
 80054e8:	4621      	mov	r1, r4
 80054ea:	4640      	mov	r0, r8
 80054ec:	f7ff fee4 	bl	80052b8 <_printf_common>
 80054f0:	3001      	adds	r0, #1
 80054f2:	d14a      	bne.n	800558a <_printf_i+0x1f6>
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
 80054f8:	b004      	add	sp, #16
 80054fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	f043 0320 	orr.w	r3, r3, #32
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	4833      	ldr	r0, [pc, #204]	; (80055d4 <_printf_i+0x240>)
 8005508:	2778      	movs	r7, #120	; 0x78
 800550a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	6829      	ldr	r1, [r5, #0]
 8005512:	061f      	lsls	r7, r3, #24
 8005514:	f851 6b04 	ldr.w	r6, [r1], #4
 8005518:	d402      	bmi.n	8005520 <_printf_i+0x18c>
 800551a:	065f      	lsls	r7, r3, #25
 800551c:	bf48      	it	mi
 800551e:	b2b6      	uxthmi	r6, r6
 8005520:	07df      	lsls	r7, r3, #31
 8005522:	bf48      	it	mi
 8005524:	f043 0320 	orrmi.w	r3, r3, #32
 8005528:	6029      	str	r1, [r5, #0]
 800552a:	bf48      	it	mi
 800552c:	6023      	strmi	r3, [r4, #0]
 800552e:	b91e      	cbnz	r6, 8005538 <_printf_i+0x1a4>
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	f023 0320 	bic.w	r3, r3, #32
 8005536:	6023      	str	r3, [r4, #0]
 8005538:	2310      	movs	r3, #16
 800553a:	e7a7      	b.n	800548c <_printf_i+0xf8>
 800553c:	4824      	ldr	r0, [pc, #144]	; (80055d0 <_printf_i+0x23c>)
 800553e:	e7e4      	b.n	800550a <_printf_i+0x176>
 8005540:	4615      	mov	r5, r2
 8005542:	e7bd      	b.n	80054c0 <_printf_i+0x12c>
 8005544:	682b      	ldr	r3, [r5, #0]
 8005546:	6826      	ldr	r6, [r4, #0]
 8005548:	6961      	ldr	r1, [r4, #20]
 800554a:	1d18      	adds	r0, r3, #4
 800554c:	6028      	str	r0, [r5, #0]
 800554e:	0635      	lsls	r5, r6, #24
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	d501      	bpl.n	8005558 <_printf_i+0x1c4>
 8005554:	6019      	str	r1, [r3, #0]
 8005556:	e002      	b.n	800555e <_printf_i+0x1ca>
 8005558:	0670      	lsls	r0, r6, #25
 800555a:	d5fb      	bpl.n	8005554 <_printf_i+0x1c0>
 800555c:	8019      	strh	r1, [r3, #0]
 800555e:	2300      	movs	r3, #0
 8005560:	6123      	str	r3, [r4, #16]
 8005562:	4615      	mov	r5, r2
 8005564:	e7bc      	b.n	80054e0 <_printf_i+0x14c>
 8005566:	682b      	ldr	r3, [r5, #0]
 8005568:	1d1a      	adds	r2, r3, #4
 800556a:	602a      	str	r2, [r5, #0]
 800556c:	681d      	ldr	r5, [r3, #0]
 800556e:	6862      	ldr	r2, [r4, #4]
 8005570:	2100      	movs	r1, #0
 8005572:	4628      	mov	r0, r5
 8005574:	f7fa fe34 	bl	80001e0 <memchr>
 8005578:	b108      	cbz	r0, 800557e <_printf_i+0x1ea>
 800557a:	1b40      	subs	r0, r0, r5
 800557c:	6060      	str	r0, [r4, #4]
 800557e:	6863      	ldr	r3, [r4, #4]
 8005580:	6123      	str	r3, [r4, #16]
 8005582:	2300      	movs	r3, #0
 8005584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005588:	e7aa      	b.n	80054e0 <_printf_i+0x14c>
 800558a:	6923      	ldr	r3, [r4, #16]
 800558c:	462a      	mov	r2, r5
 800558e:	4649      	mov	r1, r9
 8005590:	4640      	mov	r0, r8
 8005592:	47d0      	blx	sl
 8005594:	3001      	adds	r0, #1
 8005596:	d0ad      	beq.n	80054f4 <_printf_i+0x160>
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	079b      	lsls	r3, r3, #30
 800559c:	d413      	bmi.n	80055c6 <_printf_i+0x232>
 800559e:	68e0      	ldr	r0, [r4, #12]
 80055a0:	9b03      	ldr	r3, [sp, #12]
 80055a2:	4298      	cmp	r0, r3
 80055a4:	bfb8      	it	lt
 80055a6:	4618      	movlt	r0, r3
 80055a8:	e7a6      	b.n	80054f8 <_printf_i+0x164>
 80055aa:	2301      	movs	r3, #1
 80055ac:	4632      	mov	r2, r6
 80055ae:	4649      	mov	r1, r9
 80055b0:	4640      	mov	r0, r8
 80055b2:	47d0      	blx	sl
 80055b4:	3001      	adds	r0, #1
 80055b6:	d09d      	beq.n	80054f4 <_printf_i+0x160>
 80055b8:	3501      	adds	r5, #1
 80055ba:	68e3      	ldr	r3, [r4, #12]
 80055bc:	9903      	ldr	r1, [sp, #12]
 80055be:	1a5b      	subs	r3, r3, r1
 80055c0:	42ab      	cmp	r3, r5
 80055c2:	dcf2      	bgt.n	80055aa <_printf_i+0x216>
 80055c4:	e7eb      	b.n	800559e <_printf_i+0x20a>
 80055c6:	2500      	movs	r5, #0
 80055c8:	f104 0619 	add.w	r6, r4, #25
 80055cc:	e7f5      	b.n	80055ba <_printf_i+0x226>
 80055ce:	bf00      	nop
 80055d0:	0800899a 	.word	0x0800899a
 80055d4:	080089ab 	.word	0x080089ab

080055d8 <std>:
 80055d8:	2300      	movs	r3, #0
 80055da:	b510      	push	{r4, lr}
 80055dc:	4604      	mov	r4, r0
 80055de:	e9c0 3300 	strd	r3, r3, [r0]
 80055e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055e6:	6083      	str	r3, [r0, #8]
 80055e8:	8181      	strh	r1, [r0, #12]
 80055ea:	6643      	str	r3, [r0, #100]	; 0x64
 80055ec:	81c2      	strh	r2, [r0, #14]
 80055ee:	6183      	str	r3, [r0, #24]
 80055f0:	4619      	mov	r1, r3
 80055f2:	2208      	movs	r2, #8
 80055f4:	305c      	adds	r0, #92	; 0x5c
 80055f6:	f000 f928 	bl	800584a <memset>
 80055fa:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <std+0x58>)
 80055fc:	6263      	str	r3, [r4, #36]	; 0x24
 80055fe:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <std+0x5c>)
 8005600:	62a3      	str	r3, [r4, #40]	; 0x28
 8005602:	4b0d      	ldr	r3, [pc, #52]	; (8005638 <std+0x60>)
 8005604:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005606:	4b0d      	ldr	r3, [pc, #52]	; (800563c <std+0x64>)
 8005608:	6323      	str	r3, [r4, #48]	; 0x30
 800560a:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <std+0x68>)
 800560c:	6224      	str	r4, [r4, #32]
 800560e:	429c      	cmp	r4, r3
 8005610:	d006      	beq.n	8005620 <std+0x48>
 8005612:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005616:	4294      	cmp	r4, r2
 8005618:	d002      	beq.n	8005620 <std+0x48>
 800561a:	33d0      	adds	r3, #208	; 0xd0
 800561c:	429c      	cmp	r4, r3
 800561e:	d105      	bne.n	800562c <std+0x54>
 8005620:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005628:	f000 b98c 	b.w	8005944 <__retarget_lock_init_recursive>
 800562c:	bd10      	pop	{r4, pc}
 800562e:	bf00      	nop
 8005630:	080057c5 	.word	0x080057c5
 8005634:	080057e7 	.word	0x080057e7
 8005638:	0800581f 	.word	0x0800581f
 800563c:	08005843 	.word	0x08005843
 8005640:	200007f4 	.word	0x200007f4

08005644 <stdio_exit_handler>:
 8005644:	4a02      	ldr	r2, [pc, #8]	; (8005650 <stdio_exit_handler+0xc>)
 8005646:	4903      	ldr	r1, [pc, #12]	; (8005654 <stdio_exit_handler+0x10>)
 8005648:	4803      	ldr	r0, [pc, #12]	; (8005658 <stdio_exit_handler+0x14>)
 800564a:	f000 b869 	b.w	8005720 <_fwalk_sglue>
 800564e:	bf00      	nop
 8005650:	20000018 	.word	0x20000018
 8005654:	080072f9 	.word	0x080072f9
 8005658:	20000024 	.word	0x20000024

0800565c <cleanup_stdio>:
 800565c:	6841      	ldr	r1, [r0, #4]
 800565e:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <cleanup_stdio+0x34>)
 8005660:	4299      	cmp	r1, r3
 8005662:	b510      	push	{r4, lr}
 8005664:	4604      	mov	r4, r0
 8005666:	d001      	beq.n	800566c <cleanup_stdio+0x10>
 8005668:	f001 fe46 	bl	80072f8 <_fflush_r>
 800566c:	68a1      	ldr	r1, [r4, #8]
 800566e:	4b09      	ldr	r3, [pc, #36]	; (8005694 <cleanup_stdio+0x38>)
 8005670:	4299      	cmp	r1, r3
 8005672:	d002      	beq.n	800567a <cleanup_stdio+0x1e>
 8005674:	4620      	mov	r0, r4
 8005676:	f001 fe3f 	bl	80072f8 <_fflush_r>
 800567a:	68e1      	ldr	r1, [r4, #12]
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <cleanup_stdio+0x3c>)
 800567e:	4299      	cmp	r1, r3
 8005680:	d004      	beq.n	800568c <cleanup_stdio+0x30>
 8005682:	4620      	mov	r0, r4
 8005684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005688:	f001 be36 	b.w	80072f8 <_fflush_r>
 800568c:	bd10      	pop	{r4, pc}
 800568e:	bf00      	nop
 8005690:	200007f4 	.word	0x200007f4
 8005694:	2000085c 	.word	0x2000085c
 8005698:	200008c4 	.word	0x200008c4

0800569c <global_stdio_init.part.0>:
 800569c:	b510      	push	{r4, lr}
 800569e:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <global_stdio_init.part.0+0x30>)
 80056a0:	4c0b      	ldr	r4, [pc, #44]	; (80056d0 <global_stdio_init.part.0+0x34>)
 80056a2:	4a0c      	ldr	r2, [pc, #48]	; (80056d4 <global_stdio_init.part.0+0x38>)
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	4620      	mov	r0, r4
 80056a8:	2200      	movs	r2, #0
 80056aa:	2104      	movs	r1, #4
 80056ac:	f7ff ff94 	bl	80055d8 <std>
 80056b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80056b4:	2201      	movs	r2, #1
 80056b6:	2109      	movs	r1, #9
 80056b8:	f7ff ff8e 	bl	80055d8 <std>
 80056bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80056c0:	2202      	movs	r2, #2
 80056c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056c6:	2112      	movs	r1, #18
 80056c8:	f7ff bf86 	b.w	80055d8 <std>
 80056cc:	2000092c 	.word	0x2000092c
 80056d0:	200007f4 	.word	0x200007f4
 80056d4:	08005645 	.word	0x08005645

080056d8 <__sfp_lock_acquire>:
 80056d8:	4801      	ldr	r0, [pc, #4]	; (80056e0 <__sfp_lock_acquire+0x8>)
 80056da:	f000 b934 	b.w	8005946 <__retarget_lock_acquire_recursive>
 80056de:	bf00      	nop
 80056e0:	20000935 	.word	0x20000935

080056e4 <__sfp_lock_release>:
 80056e4:	4801      	ldr	r0, [pc, #4]	; (80056ec <__sfp_lock_release+0x8>)
 80056e6:	f000 b92f 	b.w	8005948 <__retarget_lock_release_recursive>
 80056ea:	bf00      	nop
 80056ec:	20000935 	.word	0x20000935

080056f0 <__sinit>:
 80056f0:	b510      	push	{r4, lr}
 80056f2:	4604      	mov	r4, r0
 80056f4:	f7ff fff0 	bl	80056d8 <__sfp_lock_acquire>
 80056f8:	6a23      	ldr	r3, [r4, #32]
 80056fa:	b11b      	cbz	r3, 8005704 <__sinit+0x14>
 80056fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005700:	f7ff bff0 	b.w	80056e4 <__sfp_lock_release>
 8005704:	4b04      	ldr	r3, [pc, #16]	; (8005718 <__sinit+0x28>)
 8005706:	6223      	str	r3, [r4, #32]
 8005708:	4b04      	ldr	r3, [pc, #16]	; (800571c <__sinit+0x2c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1f5      	bne.n	80056fc <__sinit+0xc>
 8005710:	f7ff ffc4 	bl	800569c <global_stdio_init.part.0>
 8005714:	e7f2      	b.n	80056fc <__sinit+0xc>
 8005716:	bf00      	nop
 8005718:	0800565d 	.word	0x0800565d
 800571c:	2000092c 	.word	0x2000092c

08005720 <_fwalk_sglue>:
 8005720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005724:	4607      	mov	r7, r0
 8005726:	4688      	mov	r8, r1
 8005728:	4614      	mov	r4, r2
 800572a:	2600      	movs	r6, #0
 800572c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005730:	f1b9 0901 	subs.w	r9, r9, #1
 8005734:	d505      	bpl.n	8005742 <_fwalk_sglue+0x22>
 8005736:	6824      	ldr	r4, [r4, #0]
 8005738:	2c00      	cmp	r4, #0
 800573a:	d1f7      	bne.n	800572c <_fwalk_sglue+0xc>
 800573c:	4630      	mov	r0, r6
 800573e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005742:	89ab      	ldrh	r3, [r5, #12]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d907      	bls.n	8005758 <_fwalk_sglue+0x38>
 8005748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800574c:	3301      	adds	r3, #1
 800574e:	d003      	beq.n	8005758 <_fwalk_sglue+0x38>
 8005750:	4629      	mov	r1, r5
 8005752:	4638      	mov	r0, r7
 8005754:	47c0      	blx	r8
 8005756:	4306      	orrs	r6, r0
 8005758:	3568      	adds	r5, #104	; 0x68
 800575a:	e7e9      	b.n	8005730 <_fwalk_sglue+0x10>

0800575c <sniprintf>:
 800575c:	b40c      	push	{r2, r3}
 800575e:	b530      	push	{r4, r5, lr}
 8005760:	4b17      	ldr	r3, [pc, #92]	; (80057c0 <sniprintf+0x64>)
 8005762:	1e0c      	subs	r4, r1, #0
 8005764:	681d      	ldr	r5, [r3, #0]
 8005766:	b09d      	sub	sp, #116	; 0x74
 8005768:	da08      	bge.n	800577c <sniprintf+0x20>
 800576a:	238b      	movs	r3, #139	; 0x8b
 800576c:	602b      	str	r3, [r5, #0]
 800576e:	f04f 30ff 	mov.w	r0, #4294967295
 8005772:	b01d      	add	sp, #116	; 0x74
 8005774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005778:	b002      	add	sp, #8
 800577a:	4770      	bx	lr
 800577c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005780:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005784:	bf14      	ite	ne
 8005786:	f104 33ff 	addne.w	r3, r4, #4294967295
 800578a:	4623      	moveq	r3, r4
 800578c:	9304      	str	r3, [sp, #16]
 800578e:	9307      	str	r3, [sp, #28]
 8005790:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005794:	9002      	str	r0, [sp, #8]
 8005796:	9006      	str	r0, [sp, #24]
 8005798:	f8ad 3016 	strh.w	r3, [sp, #22]
 800579c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800579e:	ab21      	add	r3, sp, #132	; 0x84
 80057a0:	a902      	add	r1, sp, #8
 80057a2:	4628      	mov	r0, r5
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	f001 fc23 	bl	8006ff0 <_svfiprintf_r>
 80057aa:	1c43      	adds	r3, r0, #1
 80057ac:	bfbc      	itt	lt
 80057ae:	238b      	movlt	r3, #139	; 0x8b
 80057b0:	602b      	strlt	r3, [r5, #0]
 80057b2:	2c00      	cmp	r4, #0
 80057b4:	d0dd      	beq.n	8005772 <sniprintf+0x16>
 80057b6:	9b02      	ldr	r3, [sp, #8]
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	e7d9      	b.n	8005772 <sniprintf+0x16>
 80057be:	bf00      	nop
 80057c0:	20000070 	.word	0x20000070

080057c4 <__sread>:
 80057c4:	b510      	push	{r4, lr}
 80057c6:	460c      	mov	r4, r1
 80057c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057cc:	f000 f86c 	bl	80058a8 <_read_r>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	bfab      	itete	ge
 80057d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057d6:	89a3      	ldrhlt	r3, [r4, #12]
 80057d8:	181b      	addge	r3, r3, r0
 80057da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057de:	bfac      	ite	ge
 80057e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80057e2:	81a3      	strhlt	r3, [r4, #12]
 80057e4:	bd10      	pop	{r4, pc}

080057e6 <__swrite>:
 80057e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ea:	461f      	mov	r7, r3
 80057ec:	898b      	ldrh	r3, [r1, #12]
 80057ee:	05db      	lsls	r3, r3, #23
 80057f0:	4605      	mov	r5, r0
 80057f2:	460c      	mov	r4, r1
 80057f4:	4616      	mov	r6, r2
 80057f6:	d505      	bpl.n	8005804 <__swrite+0x1e>
 80057f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057fc:	2302      	movs	r3, #2
 80057fe:	2200      	movs	r2, #0
 8005800:	f000 f840 	bl	8005884 <_lseek_r>
 8005804:	89a3      	ldrh	r3, [r4, #12]
 8005806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800580a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800580e:	81a3      	strh	r3, [r4, #12]
 8005810:	4632      	mov	r2, r6
 8005812:	463b      	mov	r3, r7
 8005814:	4628      	mov	r0, r5
 8005816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800581a:	f000 b857 	b.w	80058cc <_write_r>

0800581e <__sseek>:
 800581e:	b510      	push	{r4, lr}
 8005820:	460c      	mov	r4, r1
 8005822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005826:	f000 f82d 	bl	8005884 <_lseek_r>
 800582a:	1c43      	adds	r3, r0, #1
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	bf15      	itete	ne
 8005830:	6560      	strne	r0, [r4, #84]	; 0x54
 8005832:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005836:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800583a:	81a3      	strheq	r3, [r4, #12]
 800583c:	bf18      	it	ne
 800583e:	81a3      	strhne	r3, [r4, #12]
 8005840:	bd10      	pop	{r4, pc}

08005842 <__sclose>:
 8005842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005846:	f000 b80d 	b.w	8005864 <_close_r>

0800584a <memset>:
 800584a:	4402      	add	r2, r0
 800584c:	4603      	mov	r3, r0
 800584e:	4293      	cmp	r3, r2
 8005850:	d100      	bne.n	8005854 <memset+0xa>
 8005852:	4770      	bx	lr
 8005854:	f803 1b01 	strb.w	r1, [r3], #1
 8005858:	e7f9      	b.n	800584e <memset+0x4>
	...

0800585c <_localeconv_r>:
 800585c:	4800      	ldr	r0, [pc, #0]	; (8005860 <_localeconv_r+0x4>)
 800585e:	4770      	bx	lr
 8005860:	20000164 	.word	0x20000164

08005864 <_close_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4d06      	ldr	r5, [pc, #24]	; (8005880 <_close_r+0x1c>)
 8005868:	2300      	movs	r3, #0
 800586a:	4604      	mov	r4, r0
 800586c:	4608      	mov	r0, r1
 800586e:	602b      	str	r3, [r5, #0]
 8005870:	f7fc f8c9 	bl	8001a06 <_close>
 8005874:	1c43      	adds	r3, r0, #1
 8005876:	d102      	bne.n	800587e <_close_r+0x1a>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	b103      	cbz	r3, 800587e <_close_r+0x1a>
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	bd38      	pop	{r3, r4, r5, pc}
 8005880:	20000930 	.word	0x20000930

08005884 <_lseek_r>:
 8005884:	b538      	push	{r3, r4, r5, lr}
 8005886:	4d07      	ldr	r5, [pc, #28]	; (80058a4 <_lseek_r+0x20>)
 8005888:	4604      	mov	r4, r0
 800588a:	4608      	mov	r0, r1
 800588c:	4611      	mov	r1, r2
 800588e:	2200      	movs	r2, #0
 8005890:	602a      	str	r2, [r5, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	f7fc f8de 	bl	8001a54 <_lseek>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	d102      	bne.n	80058a2 <_lseek_r+0x1e>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	b103      	cbz	r3, 80058a2 <_lseek_r+0x1e>
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	bd38      	pop	{r3, r4, r5, pc}
 80058a4:	20000930 	.word	0x20000930

080058a8 <_read_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4d07      	ldr	r5, [pc, #28]	; (80058c8 <_read_r+0x20>)
 80058ac:	4604      	mov	r4, r0
 80058ae:	4608      	mov	r0, r1
 80058b0:	4611      	mov	r1, r2
 80058b2:	2200      	movs	r2, #0
 80058b4:	602a      	str	r2, [r5, #0]
 80058b6:	461a      	mov	r2, r3
 80058b8:	f7fc f86c 	bl	8001994 <_read>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d102      	bne.n	80058c6 <_read_r+0x1e>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	b103      	cbz	r3, 80058c6 <_read_r+0x1e>
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	bd38      	pop	{r3, r4, r5, pc}
 80058c8:	20000930 	.word	0x20000930

080058cc <_write_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	4d07      	ldr	r5, [pc, #28]	; (80058ec <_write_r+0x20>)
 80058d0:	4604      	mov	r4, r0
 80058d2:	4608      	mov	r0, r1
 80058d4:	4611      	mov	r1, r2
 80058d6:	2200      	movs	r2, #0
 80058d8:	602a      	str	r2, [r5, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	f7fc f877 	bl	80019ce <_write>
 80058e0:	1c43      	adds	r3, r0, #1
 80058e2:	d102      	bne.n	80058ea <_write_r+0x1e>
 80058e4:	682b      	ldr	r3, [r5, #0]
 80058e6:	b103      	cbz	r3, 80058ea <_write_r+0x1e>
 80058e8:	6023      	str	r3, [r4, #0]
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
 80058ec:	20000930 	.word	0x20000930

080058f0 <__errno>:
 80058f0:	4b01      	ldr	r3, [pc, #4]	; (80058f8 <__errno+0x8>)
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000070 	.word	0x20000070

080058fc <__libc_init_array>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	4d0d      	ldr	r5, [pc, #52]	; (8005934 <__libc_init_array+0x38>)
 8005900:	4c0d      	ldr	r4, [pc, #52]	; (8005938 <__libc_init_array+0x3c>)
 8005902:	1b64      	subs	r4, r4, r5
 8005904:	10a4      	asrs	r4, r4, #2
 8005906:	2600      	movs	r6, #0
 8005908:	42a6      	cmp	r6, r4
 800590a:	d109      	bne.n	8005920 <__libc_init_array+0x24>
 800590c:	4d0b      	ldr	r5, [pc, #44]	; (800593c <__libc_init_array+0x40>)
 800590e:	4c0c      	ldr	r4, [pc, #48]	; (8005940 <__libc_init_array+0x44>)
 8005910:	f003 f816 	bl	8008940 <_init>
 8005914:	1b64      	subs	r4, r4, r5
 8005916:	10a4      	asrs	r4, r4, #2
 8005918:	2600      	movs	r6, #0
 800591a:	42a6      	cmp	r6, r4
 800591c:	d105      	bne.n	800592a <__libc_init_array+0x2e>
 800591e:	bd70      	pop	{r4, r5, r6, pc}
 8005920:	f855 3b04 	ldr.w	r3, [r5], #4
 8005924:	4798      	blx	r3
 8005926:	3601      	adds	r6, #1
 8005928:	e7ee      	b.n	8005908 <__libc_init_array+0xc>
 800592a:	f855 3b04 	ldr.w	r3, [r5], #4
 800592e:	4798      	blx	r3
 8005930:	3601      	adds	r6, #1
 8005932:	e7f2      	b.n	800591a <__libc_init_array+0x1e>
 8005934:	08008d38 	.word	0x08008d38
 8005938:	08008d38 	.word	0x08008d38
 800593c:	08008d38 	.word	0x08008d38
 8005940:	08008d3c 	.word	0x08008d3c

08005944 <__retarget_lock_init_recursive>:
 8005944:	4770      	bx	lr

08005946 <__retarget_lock_acquire_recursive>:
 8005946:	4770      	bx	lr

08005948 <__retarget_lock_release_recursive>:
 8005948:	4770      	bx	lr

0800594a <quorem>:
 800594a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594e:	6903      	ldr	r3, [r0, #16]
 8005950:	690c      	ldr	r4, [r1, #16]
 8005952:	42a3      	cmp	r3, r4
 8005954:	4607      	mov	r7, r0
 8005956:	db7e      	blt.n	8005a56 <quorem+0x10c>
 8005958:	3c01      	subs	r4, #1
 800595a:	f101 0814 	add.w	r8, r1, #20
 800595e:	f100 0514 	add.w	r5, r0, #20
 8005962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800596c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005970:	3301      	adds	r3, #1
 8005972:	429a      	cmp	r2, r3
 8005974:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005978:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800597c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005980:	d331      	bcc.n	80059e6 <quorem+0x9c>
 8005982:	f04f 0e00 	mov.w	lr, #0
 8005986:	4640      	mov	r0, r8
 8005988:	46ac      	mov	ip, r5
 800598a:	46f2      	mov	sl, lr
 800598c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005990:	b293      	uxth	r3, r2
 8005992:	fb06 e303 	mla	r3, r6, r3, lr
 8005996:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800599a:	0c1a      	lsrs	r2, r3, #16
 800599c:	b29b      	uxth	r3, r3
 800599e:	ebaa 0303 	sub.w	r3, sl, r3
 80059a2:	f8dc a000 	ldr.w	sl, [ip]
 80059a6:	fa13 f38a 	uxtah	r3, r3, sl
 80059aa:	fb06 220e 	mla	r2, r6, lr, r2
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	9b00      	ldr	r3, [sp, #0]
 80059b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059b6:	b292      	uxth	r2, r2
 80059b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80059c4:	4581      	cmp	r9, r0
 80059c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059ca:	f84c 3b04 	str.w	r3, [ip], #4
 80059ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059d2:	d2db      	bcs.n	800598c <quorem+0x42>
 80059d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80059d8:	b92b      	cbnz	r3, 80059e6 <quorem+0x9c>
 80059da:	9b01      	ldr	r3, [sp, #4]
 80059dc:	3b04      	subs	r3, #4
 80059de:	429d      	cmp	r5, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	d32c      	bcc.n	8005a3e <quorem+0xf4>
 80059e4:	613c      	str	r4, [r7, #16]
 80059e6:	4638      	mov	r0, r7
 80059e8:	f001 f9a8 	bl	8006d3c <__mcmp>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	db22      	blt.n	8005a36 <quorem+0xec>
 80059f0:	3601      	adds	r6, #1
 80059f2:	4629      	mov	r1, r5
 80059f4:	2000      	movs	r0, #0
 80059f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80059fa:	f8d1 c000 	ldr.w	ip, [r1]
 80059fe:	b293      	uxth	r3, r2
 8005a00:	1ac3      	subs	r3, r0, r3
 8005a02:	0c12      	lsrs	r2, r2, #16
 8005a04:	fa13 f38c 	uxtah	r3, r3, ip
 8005a08:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005a0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a16:	45c1      	cmp	r9, r8
 8005a18:	f841 3b04 	str.w	r3, [r1], #4
 8005a1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a20:	d2e9      	bcs.n	80059f6 <quorem+0xac>
 8005a22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a2a:	b922      	cbnz	r2, 8005a36 <quorem+0xec>
 8005a2c:	3b04      	subs	r3, #4
 8005a2e:	429d      	cmp	r5, r3
 8005a30:	461a      	mov	r2, r3
 8005a32:	d30a      	bcc.n	8005a4a <quorem+0x100>
 8005a34:	613c      	str	r4, [r7, #16]
 8005a36:	4630      	mov	r0, r6
 8005a38:	b003      	add	sp, #12
 8005a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	3b04      	subs	r3, #4
 8005a42:	2a00      	cmp	r2, #0
 8005a44:	d1ce      	bne.n	80059e4 <quorem+0x9a>
 8005a46:	3c01      	subs	r4, #1
 8005a48:	e7c9      	b.n	80059de <quorem+0x94>
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	3b04      	subs	r3, #4
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	d1f0      	bne.n	8005a34 <quorem+0xea>
 8005a52:	3c01      	subs	r4, #1
 8005a54:	e7eb      	b.n	8005a2e <quorem+0xe4>
 8005a56:	2000      	movs	r0, #0
 8005a58:	e7ee      	b.n	8005a38 <quorem+0xee>
 8005a5a:	0000      	movs	r0, r0
 8005a5c:	0000      	movs	r0, r0
	...

08005a60 <_dtoa_r>:
 8005a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a64:	ed2d 8b04 	vpush	{d8-d9}
 8005a68:	69c5      	ldr	r5, [r0, #28]
 8005a6a:	b093      	sub	sp, #76	; 0x4c
 8005a6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a70:	ec57 6b10 	vmov	r6, r7, d0
 8005a74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a78:	9107      	str	r1, [sp, #28]
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	920a      	str	r2, [sp, #40]	; 0x28
 8005a7e:	930d      	str	r3, [sp, #52]	; 0x34
 8005a80:	b975      	cbnz	r5, 8005aa0 <_dtoa_r+0x40>
 8005a82:	2010      	movs	r0, #16
 8005a84:	f000 fe2a 	bl	80066dc <malloc>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	61e0      	str	r0, [r4, #28]
 8005a8c:	b920      	cbnz	r0, 8005a98 <_dtoa_r+0x38>
 8005a8e:	4bae      	ldr	r3, [pc, #696]	; (8005d48 <_dtoa_r+0x2e8>)
 8005a90:	21ef      	movs	r1, #239	; 0xef
 8005a92:	48ae      	ldr	r0, [pc, #696]	; (8005d4c <_dtoa_r+0x2ec>)
 8005a94:	f001 fc90 	bl	80073b8 <__assert_func>
 8005a98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a9c:	6005      	str	r5, [r0, #0]
 8005a9e:	60c5      	str	r5, [r0, #12]
 8005aa0:	69e3      	ldr	r3, [r4, #28]
 8005aa2:	6819      	ldr	r1, [r3, #0]
 8005aa4:	b151      	cbz	r1, 8005abc <_dtoa_r+0x5c>
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	604a      	str	r2, [r1, #4]
 8005aaa:	2301      	movs	r3, #1
 8005aac:	4093      	lsls	r3, r2
 8005aae:	608b      	str	r3, [r1, #8]
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f000 ff07 	bl	80068c4 <_Bfree>
 8005ab6:	69e3      	ldr	r3, [r4, #28]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	1e3b      	subs	r3, r7, #0
 8005abe:	bfbb      	ittet	lt
 8005ac0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ac4:	9303      	strlt	r3, [sp, #12]
 8005ac6:	2300      	movge	r3, #0
 8005ac8:	2201      	movlt	r2, #1
 8005aca:	bfac      	ite	ge
 8005acc:	f8c8 3000 	strge.w	r3, [r8]
 8005ad0:	f8c8 2000 	strlt.w	r2, [r8]
 8005ad4:	4b9e      	ldr	r3, [pc, #632]	; (8005d50 <_dtoa_r+0x2f0>)
 8005ad6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005ada:	ea33 0308 	bics.w	r3, r3, r8
 8005ade:	d11b      	bne.n	8005b18 <_dtoa_r+0xb8>
 8005ae0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ae2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005aec:	4333      	orrs	r3, r6
 8005aee:	f000 8593 	beq.w	8006618 <_dtoa_r+0xbb8>
 8005af2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005af4:	b963      	cbnz	r3, 8005b10 <_dtoa_r+0xb0>
 8005af6:	4b97      	ldr	r3, [pc, #604]	; (8005d54 <_dtoa_r+0x2f4>)
 8005af8:	e027      	b.n	8005b4a <_dtoa_r+0xea>
 8005afa:	4b97      	ldr	r3, [pc, #604]	; (8005d58 <_dtoa_r+0x2f8>)
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	3308      	adds	r3, #8
 8005b00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	9800      	ldr	r0, [sp, #0]
 8005b06:	b013      	add	sp, #76	; 0x4c
 8005b08:	ecbd 8b04 	vpop	{d8-d9}
 8005b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b10:	4b90      	ldr	r3, [pc, #576]	; (8005d54 <_dtoa_r+0x2f4>)
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	3303      	adds	r3, #3
 8005b16:	e7f3      	b.n	8005b00 <_dtoa_r+0xa0>
 8005b18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	ec51 0b17 	vmov	r0, r1, d7
 8005b22:	eeb0 8a47 	vmov.f32	s16, s14
 8005b26:	eef0 8a67 	vmov.f32	s17, s15
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f7fa ffd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b30:	4681      	mov	r9, r0
 8005b32:	b160      	cbz	r0, 8005b4e <_dtoa_r+0xee>
 8005b34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b36:	2301      	movs	r3, #1
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 8568 	beq.w	8006612 <_dtoa_r+0xbb2>
 8005b42:	4b86      	ldr	r3, [pc, #536]	; (8005d5c <_dtoa_r+0x2fc>)
 8005b44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	e7da      	b.n	8005b04 <_dtoa_r+0xa4>
 8005b4e:	aa10      	add	r2, sp, #64	; 0x40
 8005b50:	a911      	add	r1, sp, #68	; 0x44
 8005b52:	4620      	mov	r0, r4
 8005b54:	eeb0 0a48 	vmov.f32	s0, s16
 8005b58:	eef0 0a68 	vmov.f32	s1, s17
 8005b5c:	f001 f994 	bl	8006e88 <__d2b>
 8005b60:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005b64:	4682      	mov	sl, r0
 8005b66:	2d00      	cmp	r5, #0
 8005b68:	d07f      	beq.n	8005c6a <_dtoa_r+0x20a>
 8005b6a:	ee18 3a90 	vmov	r3, s17
 8005b6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b72:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005b76:	ec51 0b18 	vmov	r0, r1, d8
 8005b7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005b7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b82:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005b86:	4619      	mov	r1, r3
 8005b88:	2200      	movs	r2, #0
 8005b8a:	4b75      	ldr	r3, [pc, #468]	; (8005d60 <_dtoa_r+0x300>)
 8005b8c:	f7fa fb84 	bl	8000298 <__aeabi_dsub>
 8005b90:	a367      	add	r3, pc, #412	; (adr r3, 8005d30 <_dtoa_r+0x2d0>)
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	f7fa fd37 	bl	8000608 <__aeabi_dmul>
 8005b9a:	a367      	add	r3, pc, #412	; (adr r3, 8005d38 <_dtoa_r+0x2d8>)
 8005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba0:	f7fa fb7c 	bl	800029c <__adddf3>
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	460f      	mov	r7, r1
 8005baa:	f7fa fcc3 	bl	8000534 <__aeabi_i2d>
 8005bae:	a364      	add	r3, pc, #400	; (adr r3, 8005d40 <_dtoa_r+0x2e0>)
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f7fa fd28 	bl	8000608 <__aeabi_dmul>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4630      	mov	r0, r6
 8005bbe:	4639      	mov	r1, r7
 8005bc0:	f7fa fb6c 	bl	800029c <__adddf3>
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	460f      	mov	r7, r1
 8005bc8:	f7fa ffce 	bl	8000b68 <__aeabi_d2iz>
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4683      	mov	fp, r0
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	f7fa ff89 	bl	8000aec <__aeabi_dcmplt>
 8005bda:	b148      	cbz	r0, 8005bf0 <_dtoa_r+0x190>
 8005bdc:	4658      	mov	r0, fp
 8005bde:	f7fa fca9 	bl	8000534 <__aeabi_i2d>
 8005be2:	4632      	mov	r2, r6
 8005be4:	463b      	mov	r3, r7
 8005be6:	f7fa ff77 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bea:	b908      	cbnz	r0, 8005bf0 <_dtoa_r+0x190>
 8005bec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005bf0:	f1bb 0f16 	cmp.w	fp, #22
 8005bf4:	d857      	bhi.n	8005ca6 <_dtoa_r+0x246>
 8005bf6:	4b5b      	ldr	r3, [pc, #364]	; (8005d64 <_dtoa_r+0x304>)
 8005bf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	ec51 0b18 	vmov	r0, r1, d8
 8005c04:	f7fa ff72 	bl	8000aec <__aeabi_dcmplt>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d04e      	beq.n	8005caa <_dtoa_r+0x24a>
 8005c0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c10:	2300      	movs	r3, #0
 8005c12:	930c      	str	r3, [sp, #48]	; 0x30
 8005c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c16:	1b5b      	subs	r3, r3, r5
 8005c18:	1e5a      	subs	r2, r3, #1
 8005c1a:	bf45      	ittet	mi
 8005c1c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005c20:	9305      	strmi	r3, [sp, #20]
 8005c22:	2300      	movpl	r3, #0
 8005c24:	2300      	movmi	r3, #0
 8005c26:	9206      	str	r2, [sp, #24]
 8005c28:	bf54      	ite	pl
 8005c2a:	9305      	strpl	r3, [sp, #20]
 8005c2c:	9306      	strmi	r3, [sp, #24]
 8005c2e:	f1bb 0f00 	cmp.w	fp, #0
 8005c32:	db3c      	blt.n	8005cae <_dtoa_r+0x24e>
 8005c34:	9b06      	ldr	r3, [sp, #24]
 8005c36:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005c3a:	445b      	add	r3, fp
 8005c3c:	9306      	str	r3, [sp, #24]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	9308      	str	r3, [sp, #32]
 8005c42:	9b07      	ldr	r3, [sp, #28]
 8005c44:	2b09      	cmp	r3, #9
 8005c46:	d868      	bhi.n	8005d1a <_dtoa_r+0x2ba>
 8005c48:	2b05      	cmp	r3, #5
 8005c4a:	bfc4      	itt	gt
 8005c4c:	3b04      	subgt	r3, #4
 8005c4e:	9307      	strgt	r3, [sp, #28]
 8005c50:	9b07      	ldr	r3, [sp, #28]
 8005c52:	f1a3 0302 	sub.w	r3, r3, #2
 8005c56:	bfcc      	ite	gt
 8005c58:	2500      	movgt	r5, #0
 8005c5a:	2501      	movle	r5, #1
 8005c5c:	2b03      	cmp	r3, #3
 8005c5e:	f200 8085 	bhi.w	8005d6c <_dtoa_r+0x30c>
 8005c62:	e8df f003 	tbb	[pc, r3]
 8005c66:	3b2e      	.short	0x3b2e
 8005c68:	5839      	.short	0x5839
 8005c6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005c6e:	441d      	add	r5, r3
 8005c70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	bfc1      	itttt	gt
 8005c78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005c80:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005c84:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005c88:	bfd6      	itet	le
 8005c8a:	f1c3 0320 	rsble	r3, r3, #32
 8005c8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005c92:	fa06 f003 	lslle.w	r0, r6, r3
 8005c96:	f7fa fc3d 	bl	8000514 <__aeabi_ui2d>
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005ca0:	3d01      	subs	r5, #1
 8005ca2:	920e      	str	r2, [sp, #56]	; 0x38
 8005ca4:	e76f      	b.n	8005b86 <_dtoa_r+0x126>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e7b3      	b.n	8005c12 <_dtoa_r+0x1b2>
 8005caa:	900c      	str	r0, [sp, #48]	; 0x30
 8005cac:	e7b2      	b.n	8005c14 <_dtoa_r+0x1b4>
 8005cae:	9b05      	ldr	r3, [sp, #20]
 8005cb0:	eba3 030b 	sub.w	r3, r3, fp
 8005cb4:	9305      	str	r3, [sp, #20]
 8005cb6:	f1cb 0300 	rsb	r3, fp, #0
 8005cba:	9308      	str	r3, [sp, #32]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cc0:	e7bf      	b.n	8005c42 <_dtoa_r+0x1e2>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	dc52      	bgt.n	8005d72 <_dtoa_r+0x312>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	9304      	str	r3, [sp, #16]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	920a      	str	r2, [sp, #40]	; 0x28
 8005cd6:	e00b      	b.n	8005cf0 <_dtoa_r+0x290>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e7f3      	b.n	8005cc4 <_dtoa_r+0x264>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce2:	445b      	add	r3, fp
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	9304      	str	r3, [sp, #16]
 8005cec:	bfb8      	it	lt
 8005cee:	2301      	movlt	r3, #1
 8005cf0:	69e0      	ldr	r0, [r4, #28]
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	f102 0614 	add.w	r6, r2, #20
 8005cfa:	429e      	cmp	r6, r3
 8005cfc:	d93d      	bls.n	8005d7a <_dtoa_r+0x31a>
 8005cfe:	6041      	str	r1, [r0, #4]
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 fd9f 	bl	8006844 <_Balloc>
 8005d06:	9000      	str	r0, [sp, #0]
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	d139      	bne.n	8005d80 <_dtoa_r+0x320>
 8005d0c:	4b16      	ldr	r3, [pc, #88]	; (8005d68 <_dtoa_r+0x308>)
 8005d0e:	4602      	mov	r2, r0
 8005d10:	f240 11af 	movw	r1, #431	; 0x1af
 8005d14:	e6bd      	b.n	8005a92 <_dtoa_r+0x32>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e7e1      	b.n	8005cde <_dtoa_r+0x27e>
 8005d1a:	2501      	movs	r5, #1
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9307      	str	r3, [sp, #28]
 8005d20:	9509      	str	r5, [sp, #36]	; 0x24
 8005d22:	f04f 33ff 	mov.w	r3, #4294967295
 8005d26:	9301      	str	r3, [sp, #4]
 8005d28:	9304      	str	r3, [sp, #16]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2312      	movs	r3, #18
 8005d2e:	e7d1      	b.n	8005cd4 <_dtoa_r+0x274>
 8005d30:	636f4361 	.word	0x636f4361
 8005d34:	3fd287a7 	.word	0x3fd287a7
 8005d38:	8b60c8b3 	.word	0x8b60c8b3
 8005d3c:	3fc68a28 	.word	0x3fc68a28
 8005d40:	509f79fb 	.word	0x509f79fb
 8005d44:	3fd34413 	.word	0x3fd34413
 8005d48:	080089c9 	.word	0x080089c9
 8005d4c:	080089e0 	.word	0x080089e0
 8005d50:	7ff00000 	.word	0x7ff00000
 8005d54:	080089c5 	.word	0x080089c5
 8005d58:	080089bc 	.word	0x080089bc
 8005d5c:	08008999 	.word	0x08008999
 8005d60:	3ff80000 	.word	0x3ff80000
 8005d64:	08008ad0 	.word	0x08008ad0
 8005d68:	08008a38 	.word	0x08008a38
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d70:	e7d7      	b.n	8005d22 <_dtoa_r+0x2c2>
 8005d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	9304      	str	r3, [sp, #16]
 8005d78:	e7ba      	b.n	8005cf0 <_dtoa_r+0x290>
 8005d7a:	3101      	adds	r1, #1
 8005d7c:	0052      	lsls	r2, r2, #1
 8005d7e:	e7ba      	b.n	8005cf6 <_dtoa_r+0x296>
 8005d80:	69e3      	ldr	r3, [r4, #28]
 8005d82:	9a00      	ldr	r2, [sp, #0]
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	9b04      	ldr	r3, [sp, #16]
 8005d88:	2b0e      	cmp	r3, #14
 8005d8a:	f200 80a8 	bhi.w	8005ede <_dtoa_r+0x47e>
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	f000 80a5 	beq.w	8005ede <_dtoa_r+0x47e>
 8005d94:	f1bb 0f00 	cmp.w	fp, #0
 8005d98:	dd38      	ble.n	8005e0c <_dtoa_r+0x3ac>
 8005d9a:	4bc0      	ldr	r3, [pc, #768]	; (800609c <_dtoa_r+0x63c>)
 8005d9c:	f00b 020f 	and.w	r2, fp, #15
 8005da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005da4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005da8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005dac:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005db0:	d019      	beq.n	8005de6 <_dtoa_r+0x386>
 8005db2:	4bbb      	ldr	r3, [pc, #748]	; (80060a0 <_dtoa_r+0x640>)
 8005db4:	ec51 0b18 	vmov	r0, r1, d8
 8005db8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005dbc:	f7fa fd4e 	bl	800085c <__aeabi_ddiv>
 8005dc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dc4:	f008 080f 	and.w	r8, r8, #15
 8005dc8:	2503      	movs	r5, #3
 8005dca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80060a0 <_dtoa_r+0x640>
 8005dce:	f1b8 0f00 	cmp.w	r8, #0
 8005dd2:	d10a      	bne.n	8005dea <_dtoa_r+0x38a>
 8005dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dd8:	4632      	mov	r2, r6
 8005dda:	463b      	mov	r3, r7
 8005ddc:	f7fa fd3e 	bl	800085c <__aeabi_ddiv>
 8005de0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005de4:	e02b      	b.n	8005e3e <_dtoa_r+0x3de>
 8005de6:	2502      	movs	r5, #2
 8005de8:	e7ef      	b.n	8005dca <_dtoa_r+0x36a>
 8005dea:	f018 0f01 	tst.w	r8, #1
 8005dee:	d008      	beq.n	8005e02 <_dtoa_r+0x3a2>
 8005df0:	4630      	mov	r0, r6
 8005df2:	4639      	mov	r1, r7
 8005df4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005df8:	f7fa fc06 	bl	8000608 <__aeabi_dmul>
 8005dfc:	3501      	adds	r5, #1
 8005dfe:	4606      	mov	r6, r0
 8005e00:	460f      	mov	r7, r1
 8005e02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005e06:	f109 0908 	add.w	r9, r9, #8
 8005e0a:	e7e0      	b.n	8005dce <_dtoa_r+0x36e>
 8005e0c:	f000 809f 	beq.w	8005f4e <_dtoa_r+0x4ee>
 8005e10:	f1cb 0600 	rsb	r6, fp, #0
 8005e14:	4ba1      	ldr	r3, [pc, #644]	; (800609c <_dtoa_r+0x63c>)
 8005e16:	4fa2      	ldr	r7, [pc, #648]	; (80060a0 <_dtoa_r+0x640>)
 8005e18:	f006 020f 	and.w	r2, r6, #15
 8005e1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	ec51 0b18 	vmov	r0, r1, d8
 8005e28:	f7fa fbee 	bl	8000608 <__aeabi_dmul>
 8005e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e30:	1136      	asrs	r6, r6, #4
 8005e32:	2300      	movs	r3, #0
 8005e34:	2502      	movs	r5, #2
 8005e36:	2e00      	cmp	r6, #0
 8005e38:	d17e      	bne.n	8005f38 <_dtoa_r+0x4d8>
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1d0      	bne.n	8005de0 <_dtoa_r+0x380>
 8005e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 8084 	beq.w	8005f52 <_dtoa_r+0x4f2>
 8005e4a:	4b96      	ldr	r3, [pc, #600]	; (80060a4 <_dtoa_r+0x644>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	4640      	mov	r0, r8
 8005e50:	4649      	mov	r1, r9
 8005e52:	f7fa fe4b 	bl	8000aec <__aeabi_dcmplt>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d07b      	beq.n	8005f52 <_dtoa_r+0x4f2>
 8005e5a:	9b04      	ldr	r3, [sp, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d078      	beq.n	8005f52 <_dtoa_r+0x4f2>
 8005e60:	9b01      	ldr	r3, [sp, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	dd39      	ble.n	8005eda <_dtoa_r+0x47a>
 8005e66:	4b90      	ldr	r3, [pc, #576]	; (80060a8 <_dtoa_r+0x648>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	f7fa fbcb 	bl	8000608 <__aeabi_dmul>
 8005e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e76:	9e01      	ldr	r6, [sp, #4]
 8005e78:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005e7c:	3501      	adds	r5, #1
 8005e7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005e82:	4628      	mov	r0, r5
 8005e84:	f7fa fb56 	bl	8000534 <__aeabi_i2d>
 8005e88:	4642      	mov	r2, r8
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	f7fa fbbc 	bl	8000608 <__aeabi_dmul>
 8005e90:	4b86      	ldr	r3, [pc, #536]	; (80060ac <_dtoa_r+0x64c>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	f7fa fa02 	bl	800029c <__adddf3>
 8005e98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ea0:	9303      	str	r3, [sp, #12]
 8005ea2:	2e00      	cmp	r6, #0
 8005ea4:	d158      	bne.n	8005f58 <_dtoa_r+0x4f8>
 8005ea6:	4b82      	ldr	r3, [pc, #520]	; (80060b0 <_dtoa_r+0x650>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	4640      	mov	r0, r8
 8005eac:	4649      	mov	r1, r9
 8005eae:	f7fa f9f3 	bl	8000298 <__aeabi_dsub>
 8005eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eb6:	4680      	mov	r8, r0
 8005eb8:	4689      	mov	r9, r1
 8005eba:	f7fa fe35 	bl	8000b28 <__aeabi_dcmpgt>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	f040 8296 	bne.w	80063f0 <_dtoa_r+0x990>
 8005ec4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005ec8:	4640      	mov	r0, r8
 8005eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ece:	4649      	mov	r1, r9
 8005ed0:	f7fa fe0c 	bl	8000aec <__aeabi_dcmplt>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	f040 8289 	bne.w	80063ec <_dtoa_r+0x98c>
 8005eda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005ede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f2c0 814e 	blt.w	8006182 <_dtoa_r+0x722>
 8005ee6:	f1bb 0f0e 	cmp.w	fp, #14
 8005eea:	f300 814a 	bgt.w	8006182 <_dtoa_r+0x722>
 8005eee:	4b6b      	ldr	r3, [pc, #428]	; (800609c <_dtoa_r+0x63c>)
 8005ef0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f280 80dc 	bge.w	80060b8 <_dtoa_r+0x658>
 8005f00:	9b04      	ldr	r3, [sp, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f300 80d8 	bgt.w	80060b8 <_dtoa_r+0x658>
 8005f08:	f040 826f 	bne.w	80063ea <_dtoa_r+0x98a>
 8005f0c:	4b68      	ldr	r3, [pc, #416]	; (80060b0 <_dtoa_r+0x650>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	4640      	mov	r0, r8
 8005f12:	4649      	mov	r1, r9
 8005f14:	f7fa fb78 	bl	8000608 <__aeabi_dmul>
 8005f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f1c:	f7fa fdfa 	bl	8000b14 <__aeabi_dcmpge>
 8005f20:	9e04      	ldr	r6, [sp, #16]
 8005f22:	4637      	mov	r7, r6
 8005f24:	2800      	cmp	r0, #0
 8005f26:	f040 8245 	bne.w	80063b4 <_dtoa_r+0x954>
 8005f2a:	9d00      	ldr	r5, [sp, #0]
 8005f2c:	2331      	movs	r3, #49	; 0x31
 8005f2e:	f805 3b01 	strb.w	r3, [r5], #1
 8005f32:	f10b 0b01 	add.w	fp, fp, #1
 8005f36:	e241      	b.n	80063bc <_dtoa_r+0x95c>
 8005f38:	07f2      	lsls	r2, r6, #31
 8005f3a:	d505      	bpl.n	8005f48 <_dtoa_r+0x4e8>
 8005f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f40:	f7fa fb62 	bl	8000608 <__aeabi_dmul>
 8005f44:	3501      	adds	r5, #1
 8005f46:	2301      	movs	r3, #1
 8005f48:	1076      	asrs	r6, r6, #1
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	e773      	b.n	8005e36 <_dtoa_r+0x3d6>
 8005f4e:	2502      	movs	r5, #2
 8005f50:	e775      	b.n	8005e3e <_dtoa_r+0x3de>
 8005f52:	9e04      	ldr	r6, [sp, #16]
 8005f54:	465f      	mov	r7, fp
 8005f56:	e792      	b.n	8005e7e <_dtoa_r+0x41e>
 8005f58:	9900      	ldr	r1, [sp, #0]
 8005f5a:	4b50      	ldr	r3, [pc, #320]	; (800609c <_dtoa_r+0x63c>)
 8005f5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f60:	4431      	add	r1, r6
 8005f62:	9102      	str	r1, [sp, #8]
 8005f64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f66:	eeb0 9a47 	vmov.f32	s18, s14
 8005f6a:	eef0 9a67 	vmov.f32	s19, s15
 8005f6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f76:	2900      	cmp	r1, #0
 8005f78:	d044      	beq.n	8006004 <_dtoa_r+0x5a4>
 8005f7a:	494e      	ldr	r1, [pc, #312]	; (80060b4 <_dtoa_r+0x654>)
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	f7fa fc6d 	bl	800085c <__aeabi_ddiv>
 8005f82:	ec53 2b19 	vmov	r2, r3, d9
 8005f86:	f7fa f987 	bl	8000298 <__aeabi_dsub>
 8005f8a:	9d00      	ldr	r5, [sp, #0]
 8005f8c:	ec41 0b19 	vmov	d9, r0, r1
 8005f90:	4649      	mov	r1, r9
 8005f92:	4640      	mov	r0, r8
 8005f94:	f7fa fde8 	bl	8000b68 <__aeabi_d2iz>
 8005f98:	4606      	mov	r6, r0
 8005f9a:	f7fa facb 	bl	8000534 <__aeabi_i2d>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	4649      	mov	r1, r9
 8005fa6:	f7fa f977 	bl	8000298 <__aeabi_dsub>
 8005faa:	3630      	adds	r6, #48	; 0x30
 8005fac:	f805 6b01 	strb.w	r6, [r5], #1
 8005fb0:	ec53 2b19 	vmov	r2, r3, d9
 8005fb4:	4680      	mov	r8, r0
 8005fb6:	4689      	mov	r9, r1
 8005fb8:	f7fa fd98 	bl	8000aec <__aeabi_dcmplt>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d164      	bne.n	800608a <_dtoa_r+0x62a>
 8005fc0:	4642      	mov	r2, r8
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	4937      	ldr	r1, [pc, #220]	; (80060a4 <_dtoa_r+0x644>)
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	f7fa f966 	bl	8000298 <__aeabi_dsub>
 8005fcc:	ec53 2b19 	vmov	r2, r3, d9
 8005fd0:	f7fa fd8c 	bl	8000aec <__aeabi_dcmplt>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	f040 80b6 	bne.w	8006146 <_dtoa_r+0x6e6>
 8005fda:	9b02      	ldr	r3, [sp, #8]
 8005fdc:	429d      	cmp	r5, r3
 8005fde:	f43f af7c 	beq.w	8005eda <_dtoa_r+0x47a>
 8005fe2:	4b31      	ldr	r3, [pc, #196]	; (80060a8 <_dtoa_r+0x648>)
 8005fe4:	ec51 0b19 	vmov	r0, r1, d9
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f7fa fb0d 	bl	8000608 <__aeabi_dmul>
 8005fee:	4b2e      	ldr	r3, [pc, #184]	; (80060a8 <_dtoa_r+0x648>)
 8005ff0:	ec41 0b19 	vmov	d9, r0, r1
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	4649      	mov	r1, r9
 8005ffa:	f7fa fb05 	bl	8000608 <__aeabi_dmul>
 8005ffe:	4680      	mov	r8, r0
 8006000:	4689      	mov	r9, r1
 8006002:	e7c5      	b.n	8005f90 <_dtoa_r+0x530>
 8006004:	ec51 0b17 	vmov	r0, r1, d7
 8006008:	f7fa fafe 	bl	8000608 <__aeabi_dmul>
 800600c:	9b02      	ldr	r3, [sp, #8]
 800600e:	9d00      	ldr	r5, [sp, #0]
 8006010:	930f      	str	r3, [sp, #60]	; 0x3c
 8006012:	ec41 0b19 	vmov	d9, r0, r1
 8006016:	4649      	mov	r1, r9
 8006018:	4640      	mov	r0, r8
 800601a:	f7fa fda5 	bl	8000b68 <__aeabi_d2iz>
 800601e:	4606      	mov	r6, r0
 8006020:	f7fa fa88 	bl	8000534 <__aeabi_i2d>
 8006024:	3630      	adds	r6, #48	; 0x30
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4640      	mov	r0, r8
 800602c:	4649      	mov	r1, r9
 800602e:	f7fa f933 	bl	8000298 <__aeabi_dsub>
 8006032:	f805 6b01 	strb.w	r6, [r5], #1
 8006036:	9b02      	ldr	r3, [sp, #8]
 8006038:	429d      	cmp	r5, r3
 800603a:	4680      	mov	r8, r0
 800603c:	4689      	mov	r9, r1
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	d124      	bne.n	800608e <_dtoa_r+0x62e>
 8006044:	4b1b      	ldr	r3, [pc, #108]	; (80060b4 <_dtoa_r+0x654>)
 8006046:	ec51 0b19 	vmov	r0, r1, d9
 800604a:	f7fa f927 	bl	800029c <__adddf3>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4640      	mov	r0, r8
 8006054:	4649      	mov	r1, r9
 8006056:	f7fa fd67 	bl	8000b28 <__aeabi_dcmpgt>
 800605a:	2800      	cmp	r0, #0
 800605c:	d173      	bne.n	8006146 <_dtoa_r+0x6e6>
 800605e:	ec53 2b19 	vmov	r2, r3, d9
 8006062:	4914      	ldr	r1, [pc, #80]	; (80060b4 <_dtoa_r+0x654>)
 8006064:	2000      	movs	r0, #0
 8006066:	f7fa f917 	bl	8000298 <__aeabi_dsub>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4640      	mov	r0, r8
 8006070:	4649      	mov	r1, r9
 8006072:	f7fa fd3b 	bl	8000aec <__aeabi_dcmplt>
 8006076:	2800      	cmp	r0, #0
 8006078:	f43f af2f 	beq.w	8005eda <_dtoa_r+0x47a>
 800607c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800607e:	1e6b      	subs	r3, r5, #1
 8006080:	930f      	str	r3, [sp, #60]	; 0x3c
 8006082:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006086:	2b30      	cmp	r3, #48	; 0x30
 8006088:	d0f8      	beq.n	800607c <_dtoa_r+0x61c>
 800608a:	46bb      	mov	fp, r7
 800608c:	e04a      	b.n	8006124 <_dtoa_r+0x6c4>
 800608e:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <_dtoa_r+0x648>)
 8006090:	f7fa faba 	bl	8000608 <__aeabi_dmul>
 8006094:	4680      	mov	r8, r0
 8006096:	4689      	mov	r9, r1
 8006098:	e7bd      	b.n	8006016 <_dtoa_r+0x5b6>
 800609a:	bf00      	nop
 800609c:	08008ad0 	.word	0x08008ad0
 80060a0:	08008aa8 	.word	0x08008aa8
 80060a4:	3ff00000 	.word	0x3ff00000
 80060a8:	40240000 	.word	0x40240000
 80060ac:	401c0000 	.word	0x401c0000
 80060b0:	40140000 	.word	0x40140000
 80060b4:	3fe00000 	.word	0x3fe00000
 80060b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060bc:	9d00      	ldr	r5, [sp, #0]
 80060be:	4642      	mov	r2, r8
 80060c0:	464b      	mov	r3, r9
 80060c2:	4630      	mov	r0, r6
 80060c4:	4639      	mov	r1, r7
 80060c6:	f7fa fbc9 	bl	800085c <__aeabi_ddiv>
 80060ca:	f7fa fd4d 	bl	8000b68 <__aeabi_d2iz>
 80060ce:	9001      	str	r0, [sp, #4]
 80060d0:	f7fa fa30 	bl	8000534 <__aeabi_i2d>
 80060d4:	4642      	mov	r2, r8
 80060d6:	464b      	mov	r3, r9
 80060d8:	f7fa fa96 	bl	8000608 <__aeabi_dmul>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4630      	mov	r0, r6
 80060e2:	4639      	mov	r1, r7
 80060e4:	f7fa f8d8 	bl	8000298 <__aeabi_dsub>
 80060e8:	9e01      	ldr	r6, [sp, #4]
 80060ea:	9f04      	ldr	r7, [sp, #16]
 80060ec:	3630      	adds	r6, #48	; 0x30
 80060ee:	f805 6b01 	strb.w	r6, [r5], #1
 80060f2:	9e00      	ldr	r6, [sp, #0]
 80060f4:	1bae      	subs	r6, r5, r6
 80060f6:	42b7      	cmp	r7, r6
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	d134      	bne.n	8006168 <_dtoa_r+0x708>
 80060fe:	f7fa f8cd 	bl	800029c <__adddf3>
 8006102:	4642      	mov	r2, r8
 8006104:	464b      	mov	r3, r9
 8006106:	4606      	mov	r6, r0
 8006108:	460f      	mov	r7, r1
 800610a:	f7fa fd0d 	bl	8000b28 <__aeabi_dcmpgt>
 800610e:	b9c8      	cbnz	r0, 8006144 <_dtoa_r+0x6e4>
 8006110:	4642      	mov	r2, r8
 8006112:	464b      	mov	r3, r9
 8006114:	4630      	mov	r0, r6
 8006116:	4639      	mov	r1, r7
 8006118:	f7fa fcde 	bl	8000ad8 <__aeabi_dcmpeq>
 800611c:	b110      	cbz	r0, 8006124 <_dtoa_r+0x6c4>
 800611e:	9b01      	ldr	r3, [sp, #4]
 8006120:	07db      	lsls	r3, r3, #31
 8006122:	d40f      	bmi.n	8006144 <_dtoa_r+0x6e4>
 8006124:	4651      	mov	r1, sl
 8006126:	4620      	mov	r0, r4
 8006128:	f000 fbcc 	bl	80068c4 <_Bfree>
 800612c:	2300      	movs	r3, #0
 800612e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006130:	702b      	strb	r3, [r5, #0]
 8006132:	f10b 0301 	add.w	r3, fp, #1
 8006136:	6013      	str	r3, [r2, #0]
 8006138:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800613a:	2b00      	cmp	r3, #0
 800613c:	f43f ace2 	beq.w	8005b04 <_dtoa_r+0xa4>
 8006140:	601d      	str	r5, [r3, #0]
 8006142:	e4df      	b.n	8005b04 <_dtoa_r+0xa4>
 8006144:	465f      	mov	r7, fp
 8006146:	462b      	mov	r3, r5
 8006148:	461d      	mov	r5, r3
 800614a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800614e:	2a39      	cmp	r2, #57	; 0x39
 8006150:	d106      	bne.n	8006160 <_dtoa_r+0x700>
 8006152:	9a00      	ldr	r2, [sp, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d1f7      	bne.n	8006148 <_dtoa_r+0x6e8>
 8006158:	9900      	ldr	r1, [sp, #0]
 800615a:	2230      	movs	r2, #48	; 0x30
 800615c:	3701      	adds	r7, #1
 800615e:	700a      	strb	r2, [r1, #0]
 8006160:	781a      	ldrb	r2, [r3, #0]
 8006162:	3201      	adds	r2, #1
 8006164:	701a      	strb	r2, [r3, #0]
 8006166:	e790      	b.n	800608a <_dtoa_r+0x62a>
 8006168:	4ba3      	ldr	r3, [pc, #652]	; (80063f8 <_dtoa_r+0x998>)
 800616a:	2200      	movs	r2, #0
 800616c:	f7fa fa4c 	bl	8000608 <__aeabi_dmul>
 8006170:	2200      	movs	r2, #0
 8006172:	2300      	movs	r3, #0
 8006174:	4606      	mov	r6, r0
 8006176:	460f      	mov	r7, r1
 8006178:	f7fa fcae 	bl	8000ad8 <__aeabi_dcmpeq>
 800617c:	2800      	cmp	r0, #0
 800617e:	d09e      	beq.n	80060be <_dtoa_r+0x65e>
 8006180:	e7d0      	b.n	8006124 <_dtoa_r+0x6c4>
 8006182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006184:	2a00      	cmp	r2, #0
 8006186:	f000 80ca 	beq.w	800631e <_dtoa_r+0x8be>
 800618a:	9a07      	ldr	r2, [sp, #28]
 800618c:	2a01      	cmp	r2, #1
 800618e:	f300 80ad 	bgt.w	80062ec <_dtoa_r+0x88c>
 8006192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006194:	2a00      	cmp	r2, #0
 8006196:	f000 80a5 	beq.w	80062e4 <_dtoa_r+0x884>
 800619a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800619e:	9e08      	ldr	r6, [sp, #32]
 80061a0:	9d05      	ldr	r5, [sp, #20]
 80061a2:	9a05      	ldr	r2, [sp, #20]
 80061a4:	441a      	add	r2, r3
 80061a6:	9205      	str	r2, [sp, #20]
 80061a8:	9a06      	ldr	r2, [sp, #24]
 80061aa:	2101      	movs	r1, #1
 80061ac:	441a      	add	r2, r3
 80061ae:	4620      	mov	r0, r4
 80061b0:	9206      	str	r2, [sp, #24]
 80061b2:	f000 fc3d 	bl	8006a30 <__i2b>
 80061b6:	4607      	mov	r7, r0
 80061b8:	b165      	cbz	r5, 80061d4 <_dtoa_r+0x774>
 80061ba:	9b06      	ldr	r3, [sp, #24]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	dd09      	ble.n	80061d4 <_dtoa_r+0x774>
 80061c0:	42ab      	cmp	r3, r5
 80061c2:	9a05      	ldr	r2, [sp, #20]
 80061c4:	bfa8      	it	ge
 80061c6:	462b      	movge	r3, r5
 80061c8:	1ad2      	subs	r2, r2, r3
 80061ca:	9205      	str	r2, [sp, #20]
 80061cc:	9a06      	ldr	r2, [sp, #24]
 80061ce:	1aed      	subs	r5, r5, r3
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	9306      	str	r3, [sp, #24]
 80061d4:	9b08      	ldr	r3, [sp, #32]
 80061d6:	b1f3      	cbz	r3, 8006216 <_dtoa_r+0x7b6>
 80061d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 80a3 	beq.w	8006326 <_dtoa_r+0x8c6>
 80061e0:	2e00      	cmp	r6, #0
 80061e2:	dd10      	ble.n	8006206 <_dtoa_r+0x7a6>
 80061e4:	4639      	mov	r1, r7
 80061e6:	4632      	mov	r2, r6
 80061e8:	4620      	mov	r0, r4
 80061ea:	f000 fce1 	bl	8006bb0 <__pow5mult>
 80061ee:	4652      	mov	r2, sl
 80061f0:	4601      	mov	r1, r0
 80061f2:	4607      	mov	r7, r0
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 fc31 	bl	8006a5c <__multiply>
 80061fa:	4651      	mov	r1, sl
 80061fc:	4680      	mov	r8, r0
 80061fe:	4620      	mov	r0, r4
 8006200:	f000 fb60 	bl	80068c4 <_Bfree>
 8006204:	46c2      	mov	sl, r8
 8006206:	9b08      	ldr	r3, [sp, #32]
 8006208:	1b9a      	subs	r2, r3, r6
 800620a:	d004      	beq.n	8006216 <_dtoa_r+0x7b6>
 800620c:	4651      	mov	r1, sl
 800620e:	4620      	mov	r0, r4
 8006210:	f000 fcce 	bl	8006bb0 <__pow5mult>
 8006214:	4682      	mov	sl, r0
 8006216:	2101      	movs	r1, #1
 8006218:	4620      	mov	r0, r4
 800621a:	f000 fc09 	bl	8006a30 <__i2b>
 800621e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006220:	2b00      	cmp	r3, #0
 8006222:	4606      	mov	r6, r0
 8006224:	f340 8081 	ble.w	800632a <_dtoa_r+0x8ca>
 8006228:	461a      	mov	r2, r3
 800622a:	4601      	mov	r1, r0
 800622c:	4620      	mov	r0, r4
 800622e:	f000 fcbf 	bl	8006bb0 <__pow5mult>
 8006232:	9b07      	ldr	r3, [sp, #28]
 8006234:	2b01      	cmp	r3, #1
 8006236:	4606      	mov	r6, r0
 8006238:	dd7a      	ble.n	8006330 <_dtoa_r+0x8d0>
 800623a:	f04f 0800 	mov.w	r8, #0
 800623e:	6933      	ldr	r3, [r6, #16]
 8006240:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006244:	6918      	ldr	r0, [r3, #16]
 8006246:	f000 fba5 	bl	8006994 <__hi0bits>
 800624a:	f1c0 0020 	rsb	r0, r0, #32
 800624e:	9b06      	ldr	r3, [sp, #24]
 8006250:	4418      	add	r0, r3
 8006252:	f010 001f 	ands.w	r0, r0, #31
 8006256:	f000 8094 	beq.w	8006382 <_dtoa_r+0x922>
 800625a:	f1c0 0320 	rsb	r3, r0, #32
 800625e:	2b04      	cmp	r3, #4
 8006260:	f340 8085 	ble.w	800636e <_dtoa_r+0x90e>
 8006264:	9b05      	ldr	r3, [sp, #20]
 8006266:	f1c0 001c 	rsb	r0, r0, #28
 800626a:	4403      	add	r3, r0
 800626c:	9305      	str	r3, [sp, #20]
 800626e:	9b06      	ldr	r3, [sp, #24]
 8006270:	4403      	add	r3, r0
 8006272:	4405      	add	r5, r0
 8006274:	9306      	str	r3, [sp, #24]
 8006276:	9b05      	ldr	r3, [sp, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	dd05      	ble.n	8006288 <_dtoa_r+0x828>
 800627c:	4651      	mov	r1, sl
 800627e:	461a      	mov	r2, r3
 8006280:	4620      	mov	r0, r4
 8006282:	f000 fcef 	bl	8006c64 <__lshift>
 8006286:	4682      	mov	sl, r0
 8006288:	9b06      	ldr	r3, [sp, #24]
 800628a:	2b00      	cmp	r3, #0
 800628c:	dd05      	ble.n	800629a <_dtoa_r+0x83a>
 800628e:	4631      	mov	r1, r6
 8006290:	461a      	mov	r2, r3
 8006292:	4620      	mov	r0, r4
 8006294:	f000 fce6 	bl	8006c64 <__lshift>
 8006298:	4606      	mov	r6, r0
 800629a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800629c:	2b00      	cmp	r3, #0
 800629e:	d072      	beq.n	8006386 <_dtoa_r+0x926>
 80062a0:	4631      	mov	r1, r6
 80062a2:	4650      	mov	r0, sl
 80062a4:	f000 fd4a 	bl	8006d3c <__mcmp>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	da6c      	bge.n	8006386 <_dtoa_r+0x926>
 80062ac:	2300      	movs	r3, #0
 80062ae:	4651      	mov	r1, sl
 80062b0:	220a      	movs	r2, #10
 80062b2:	4620      	mov	r0, r4
 80062b4:	f000 fb28 	bl	8006908 <__multadd>
 80062b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062be:	4682      	mov	sl, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 81b0 	beq.w	8006626 <_dtoa_r+0xbc6>
 80062c6:	2300      	movs	r3, #0
 80062c8:	4639      	mov	r1, r7
 80062ca:	220a      	movs	r2, #10
 80062cc:	4620      	mov	r0, r4
 80062ce:	f000 fb1b 	bl	8006908 <__multadd>
 80062d2:	9b01      	ldr	r3, [sp, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	4607      	mov	r7, r0
 80062d8:	f300 8096 	bgt.w	8006408 <_dtoa_r+0x9a8>
 80062dc:	9b07      	ldr	r3, [sp, #28]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	dc59      	bgt.n	8006396 <_dtoa_r+0x936>
 80062e2:	e091      	b.n	8006408 <_dtoa_r+0x9a8>
 80062e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062ea:	e758      	b.n	800619e <_dtoa_r+0x73e>
 80062ec:	9b04      	ldr	r3, [sp, #16]
 80062ee:	1e5e      	subs	r6, r3, #1
 80062f0:	9b08      	ldr	r3, [sp, #32]
 80062f2:	42b3      	cmp	r3, r6
 80062f4:	bfbf      	itttt	lt
 80062f6:	9b08      	ldrlt	r3, [sp, #32]
 80062f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80062fa:	9608      	strlt	r6, [sp, #32]
 80062fc:	1af3      	sublt	r3, r6, r3
 80062fe:	bfb4      	ite	lt
 8006300:	18d2      	addlt	r2, r2, r3
 8006302:	1b9e      	subge	r6, r3, r6
 8006304:	9b04      	ldr	r3, [sp, #16]
 8006306:	bfbc      	itt	lt
 8006308:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800630a:	2600      	movlt	r6, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	bfb7      	itett	lt
 8006310:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006314:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006318:	1a9d      	sublt	r5, r3, r2
 800631a:	2300      	movlt	r3, #0
 800631c:	e741      	b.n	80061a2 <_dtoa_r+0x742>
 800631e:	9e08      	ldr	r6, [sp, #32]
 8006320:	9d05      	ldr	r5, [sp, #20]
 8006322:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006324:	e748      	b.n	80061b8 <_dtoa_r+0x758>
 8006326:	9a08      	ldr	r2, [sp, #32]
 8006328:	e770      	b.n	800620c <_dtoa_r+0x7ac>
 800632a:	9b07      	ldr	r3, [sp, #28]
 800632c:	2b01      	cmp	r3, #1
 800632e:	dc19      	bgt.n	8006364 <_dtoa_r+0x904>
 8006330:	9b02      	ldr	r3, [sp, #8]
 8006332:	b9bb      	cbnz	r3, 8006364 <_dtoa_r+0x904>
 8006334:	9b03      	ldr	r3, [sp, #12]
 8006336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800633a:	b99b      	cbnz	r3, 8006364 <_dtoa_r+0x904>
 800633c:	9b03      	ldr	r3, [sp, #12]
 800633e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006342:	0d1b      	lsrs	r3, r3, #20
 8006344:	051b      	lsls	r3, r3, #20
 8006346:	b183      	cbz	r3, 800636a <_dtoa_r+0x90a>
 8006348:	9b05      	ldr	r3, [sp, #20]
 800634a:	3301      	adds	r3, #1
 800634c:	9305      	str	r3, [sp, #20]
 800634e:	9b06      	ldr	r3, [sp, #24]
 8006350:	3301      	adds	r3, #1
 8006352:	9306      	str	r3, [sp, #24]
 8006354:	f04f 0801 	mov.w	r8, #1
 8006358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800635a:	2b00      	cmp	r3, #0
 800635c:	f47f af6f 	bne.w	800623e <_dtoa_r+0x7de>
 8006360:	2001      	movs	r0, #1
 8006362:	e774      	b.n	800624e <_dtoa_r+0x7ee>
 8006364:	f04f 0800 	mov.w	r8, #0
 8006368:	e7f6      	b.n	8006358 <_dtoa_r+0x8f8>
 800636a:	4698      	mov	r8, r3
 800636c:	e7f4      	b.n	8006358 <_dtoa_r+0x8f8>
 800636e:	d082      	beq.n	8006276 <_dtoa_r+0x816>
 8006370:	9a05      	ldr	r2, [sp, #20]
 8006372:	331c      	adds	r3, #28
 8006374:	441a      	add	r2, r3
 8006376:	9205      	str	r2, [sp, #20]
 8006378:	9a06      	ldr	r2, [sp, #24]
 800637a:	441a      	add	r2, r3
 800637c:	441d      	add	r5, r3
 800637e:	9206      	str	r2, [sp, #24]
 8006380:	e779      	b.n	8006276 <_dtoa_r+0x816>
 8006382:	4603      	mov	r3, r0
 8006384:	e7f4      	b.n	8006370 <_dtoa_r+0x910>
 8006386:	9b04      	ldr	r3, [sp, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	dc37      	bgt.n	80063fc <_dtoa_r+0x99c>
 800638c:	9b07      	ldr	r3, [sp, #28]
 800638e:	2b02      	cmp	r3, #2
 8006390:	dd34      	ble.n	80063fc <_dtoa_r+0x99c>
 8006392:	9b04      	ldr	r3, [sp, #16]
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	9b01      	ldr	r3, [sp, #4]
 8006398:	b963      	cbnz	r3, 80063b4 <_dtoa_r+0x954>
 800639a:	4631      	mov	r1, r6
 800639c:	2205      	movs	r2, #5
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 fab2 	bl	8006908 <__multadd>
 80063a4:	4601      	mov	r1, r0
 80063a6:	4606      	mov	r6, r0
 80063a8:	4650      	mov	r0, sl
 80063aa:	f000 fcc7 	bl	8006d3c <__mcmp>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	f73f adbb 	bgt.w	8005f2a <_dtoa_r+0x4ca>
 80063b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063b6:	9d00      	ldr	r5, [sp, #0]
 80063b8:	ea6f 0b03 	mvn.w	fp, r3
 80063bc:	f04f 0800 	mov.w	r8, #0
 80063c0:	4631      	mov	r1, r6
 80063c2:	4620      	mov	r0, r4
 80063c4:	f000 fa7e 	bl	80068c4 <_Bfree>
 80063c8:	2f00      	cmp	r7, #0
 80063ca:	f43f aeab 	beq.w	8006124 <_dtoa_r+0x6c4>
 80063ce:	f1b8 0f00 	cmp.w	r8, #0
 80063d2:	d005      	beq.n	80063e0 <_dtoa_r+0x980>
 80063d4:	45b8      	cmp	r8, r7
 80063d6:	d003      	beq.n	80063e0 <_dtoa_r+0x980>
 80063d8:	4641      	mov	r1, r8
 80063da:	4620      	mov	r0, r4
 80063dc:	f000 fa72 	bl	80068c4 <_Bfree>
 80063e0:	4639      	mov	r1, r7
 80063e2:	4620      	mov	r0, r4
 80063e4:	f000 fa6e 	bl	80068c4 <_Bfree>
 80063e8:	e69c      	b.n	8006124 <_dtoa_r+0x6c4>
 80063ea:	2600      	movs	r6, #0
 80063ec:	4637      	mov	r7, r6
 80063ee:	e7e1      	b.n	80063b4 <_dtoa_r+0x954>
 80063f0:	46bb      	mov	fp, r7
 80063f2:	4637      	mov	r7, r6
 80063f4:	e599      	b.n	8005f2a <_dtoa_r+0x4ca>
 80063f6:	bf00      	nop
 80063f8:	40240000 	.word	0x40240000
 80063fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 80c8 	beq.w	8006594 <_dtoa_r+0xb34>
 8006404:	9b04      	ldr	r3, [sp, #16]
 8006406:	9301      	str	r3, [sp, #4]
 8006408:	2d00      	cmp	r5, #0
 800640a:	dd05      	ble.n	8006418 <_dtoa_r+0x9b8>
 800640c:	4639      	mov	r1, r7
 800640e:	462a      	mov	r2, r5
 8006410:	4620      	mov	r0, r4
 8006412:	f000 fc27 	bl	8006c64 <__lshift>
 8006416:	4607      	mov	r7, r0
 8006418:	f1b8 0f00 	cmp.w	r8, #0
 800641c:	d05b      	beq.n	80064d6 <_dtoa_r+0xa76>
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	4620      	mov	r0, r4
 8006422:	f000 fa0f 	bl	8006844 <_Balloc>
 8006426:	4605      	mov	r5, r0
 8006428:	b928      	cbnz	r0, 8006436 <_dtoa_r+0x9d6>
 800642a:	4b83      	ldr	r3, [pc, #524]	; (8006638 <_dtoa_r+0xbd8>)
 800642c:	4602      	mov	r2, r0
 800642e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006432:	f7ff bb2e 	b.w	8005a92 <_dtoa_r+0x32>
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	3202      	adds	r2, #2
 800643a:	0092      	lsls	r2, r2, #2
 800643c:	f107 010c 	add.w	r1, r7, #12
 8006440:	300c      	adds	r0, #12
 8006442:	f000 ffab 	bl	800739c <memcpy>
 8006446:	2201      	movs	r2, #1
 8006448:	4629      	mov	r1, r5
 800644a:	4620      	mov	r0, r4
 800644c:	f000 fc0a 	bl	8006c64 <__lshift>
 8006450:	9b00      	ldr	r3, [sp, #0]
 8006452:	3301      	adds	r3, #1
 8006454:	9304      	str	r3, [sp, #16]
 8006456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800645a:	4413      	add	r3, r2
 800645c:	9308      	str	r3, [sp, #32]
 800645e:	9b02      	ldr	r3, [sp, #8]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	46b8      	mov	r8, r7
 8006466:	9306      	str	r3, [sp, #24]
 8006468:	4607      	mov	r7, r0
 800646a:	9b04      	ldr	r3, [sp, #16]
 800646c:	4631      	mov	r1, r6
 800646e:	3b01      	subs	r3, #1
 8006470:	4650      	mov	r0, sl
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	f7ff fa69 	bl	800594a <quorem>
 8006478:	4641      	mov	r1, r8
 800647a:	9002      	str	r0, [sp, #8]
 800647c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006480:	4650      	mov	r0, sl
 8006482:	f000 fc5b 	bl	8006d3c <__mcmp>
 8006486:	463a      	mov	r2, r7
 8006488:	9005      	str	r0, [sp, #20]
 800648a:	4631      	mov	r1, r6
 800648c:	4620      	mov	r0, r4
 800648e:	f000 fc71 	bl	8006d74 <__mdiff>
 8006492:	68c2      	ldr	r2, [r0, #12]
 8006494:	4605      	mov	r5, r0
 8006496:	bb02      	cbnz	r2, 80064da <_dtoa_r+0xa7a>
 8006498:	4601      	mov	r1, r0
 800649a:	4650      	mov	r0, sl
 800649c:	f000 fc4e 	bl	8006d3c <__mcmp>
 80064a0:	4602      	mov	r2, r0
 80064a2:	4629      	mov	r1, r5
 80064a4:	4620      	mov	r0, r4
 80064a6:	9209      	str	r2, [sp, #36]	; 0x24
 80064a8:	f000 fa0c 	bl	80068c4 <_Bfree>
 80064ac:	9b07      	ldr	r3, [sp, #28]
 80064ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064b0:	9d04      	ldr	r5, [sp, #16]
 80064b2:	ea43 0102 	orr.w	r1, r3, r2
 80064b6:	9b06      	ldr	r3, [sp, #24]
 80064b8:	4319      	orrs	r1, r3
 80064ba:	d110      	bne.n	80064de <_dtoa_r+0xa7e>
 80064bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064c0:	d029      	beq.n	8006516 <_dtoa_r+0xab6>
 80064c2:	9b05      	ldr	r3, [sp, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	dd02      	ble.n	80064ce <_dtoa_r+0xa6e>
 80064c8:	9b02      	ldr	r3, [sp, #8]
 80064ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80064ce:	9b01      	ldr	r3, [sp, #4]
 80064d0:	f883 9000 	strb.w	r9, [r3]
 80064d4:	e774      	b.n	80063c0 <_dtoa_r+0x960>
 80064d6:	4638      	mov	r0, r7
 80064d8:	e7ba      	b.n	8006450 <_dtoa_r+0x9f0>
 80064da:	2201      	movs	r2, #1
 80064dc:	e7e1      	b.n	80064a2 <_dtoa_r+0xa42>
 80064de:	9b05      	ldr	r3, [sp, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	db04      	blt.n	80064ee <_dtoa_r+0xa8e>
 80064e4:	9907      	ldr	r1, [sp, #28]
 80064e6:	430b      	orrs	r3, r1
 80064e8:	9906      	ldr	r1, [sp, #24]
 80064ea:	430b      	orrs	r3, r1
 80064ec:	d120      	bne.n	8006530 <_dtoa_r+0xad0>
 80064ee:	2a00      	cmp	r2, #0
 80064f0:	dded      	ble.n	80064ce <_dtoa_r+0xa6e>
 80064f2:	4651      	mov	r1, sl
 80064f4:	2201      	movs	r2, #1
 80064f6:	4620      	mov	r0, r4
 80064f8:	f000 fbb4 	bl	8006c64 <__lshift>
 80064fc:	4631      	mov	r1, r6
 80064fe:	4682      	mov	sl, r0
 8006500:	f000 fc1c 	bl	8006d3c <__mcmp>
 8006504:	2800      	cmp	r0, #0
 8006506:	dc03      	bgt.n	8006510 <_dtoa_r+0xab0>
 8006508:	d1e1      	bne.n	80064ce <_dtoa_r+0xa6e>
 800650a:	f019 0f01 	tst.w	r9, #1
 800650e:	d0de      	beq.n	80064ce <_dtoa_r+0xa6e>
 8006510:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006514:	d1d8      	bne.n	80064c8 <_dtoa_r+0xa68>
 8006516:	9a01      	ldr	r2, [sp, #4]
 8006518:	2339      	movs	r3, #57	; 0x39
 800651a:	7013      	strb	r3, [r2, #0]
 800651c:	462b      	mov	r3, r5
 800651e:	461d      	mov	r5, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006526:	2a39      	cmp	r2, #57	; 0x39
 8006528:	d06c      	beq.n	8006604 <_dtoa_r+0xba4>
 800652a:	3201      	adds	r2, #1
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	e747      	b.n	80063c0 <_dtoa_r+0x960>
 8006530:	2a00      	cmp	r2, #0
 8006532:	dd07      	ble.n	8006544 <_dtoa_r+0xae4>
 8006534:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006538:	d0ed      	beq.n	8006516 <_dtoa_r+0xab6>
 800653a:	9a01      	ldr	r2, [sp, #4]
 800653c:	f109 0301 	add.w	r3, r9, #1
 8006540:	7013      	strb	r3, [r2, #0]
 8006542:	e73d      	b.n	80063c0 <_dtoa_r+0x960>
 8006544:	9b04      	ldr	r3, [sp, #16]
 8006546:	9a08      	ldr	r2, [sp, #32]
 8006548:	f803 9c01 	strb.w	r9, [r3, #-1]
 800654c:	4293      	cmp	r3, r2
 800654e:	d043      	beq.n	80065d8 <_dtoa_r+0xb78>
 8006550:	4651      	mov	r1, sl
 8006552:	2300      	movs	r3, #0
 8006554:	220a      	movs	r2, #10
 8006556:	4620      	mov	r0, r4
 8006558:	f000 f9d6 	bl	8006908 <__multadd>
 800655c:	45b8      	cmp	r8, r7
 800655e:	4682      	mov	sl, r0
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	f04f 020a 	mov.w	r2, #10
 8006568:	4641      	mov	r1, r8
 800656a:	4620      	mov	r0, r4
 800656c:	d107      	bne.n	800657e <_dtoa_r+0xb1e>
 800656e:	f000 f9cb 	bl	8006908 <__multadd>
 8006572:	4680      	mov	r8, r0
 8006574:	4607      	mov	r7, r0
 8006576:	9b04      	ldr	r3, [sp, #16]
 8006578:	3301      	adds	r3, #1
 800657a:	9304      	str	r3, [sp, #16]
 800657c:	e775      	b.n	800646a <_dtoa_r+0xa0a>
 800657e:	f000 f9c3 	bl	8006908 <__multadd>
 8006582:	4639      	mov	r1, r7
 8006584:	4680      	mov	r8, r0
 8006586:	2300      	movs	r3, #0
 8006588:	220a      	movs	r2, #10
 800658a:	4620      	mov	r0, r4
 800658c:	f000 f9bc 	bl	8006908 <__multadd>
 8006590:	4607      	mov	r7, r0
 8006592:	e7f0      	b.n	8006576 <_dtoa_r+0xb16>
 8006594:	9b04      	ldr	r3, [sp, #16]
 8006596:	9301      	str	r3, [sp, #4]
 8006598:	9d00      	ldr	r5, [sp, #0]
 800659a:	4631      	mov	r1, r6
 800659c:	4650      	mov	r0, sl
 800659e:	f7ff f9d4 	bl	800594a <quorem>
 80065a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80065a6:	9b00      	ldr	r3, [sp, #0]
 80065a8:	f805 9b01 	strb.w	r9, [r5], #1
 80065ac:	1aea      	subs	r2, r5, r3
 80065ae:	9b01      	ldr	r3, [sp, #4]
 80065b0:	4293      	cmp	r3, r2
 80065b2:	dd07      	ble.n	80065c4 <_dtoa_r+0xb64>
 80065b4:	4651      	mov	r1, sl
 80065b6:	2300      	movs	r3, #0
 80065b8:	220a      	movs	r2, #10
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 f9a4 	bl	8006908 <__multadd>
 80065c0:	4682      	mov	sl, r0
 80065c2:	e7ea      	b.n	800659a <_dtoa_r+0xb3a>
 80065c4:	9b01      	ldr	r3, [sp, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bfc8      	it	gt
 80065ca:	461d      	movgt	r5, r3
 80065cc:	9b00      	ldr	r3, [sp, #0]
 80065ce:	bfd8      	it	le
 80065d0:	2501      	movle	r5, #1
 80065d2:	441d      	add	r5, r3
 80065d4:	f04f 0800 	mov.w	r8, #0
 80065d8:	4651      	mov	r1, sl
 80065da:	2201      	movs	r2, #1
 80065dc:	4620      	mov	r0, r4
 80065de:	f000 fb41 	bl	8006c64 <__lshift>
 80065e2:	4631      	mov	r1, r6
 80065e4:	4682      	mov	sl, r0
 80065e6:	f000 fba9 	bl	8006d3c <__mcmp>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	dc96      	bgt.n	800651c <_dtoa_r+0xabc>
 80065ee:	d102      	bne.n	80065f6 <_dtoa_r+0xb96>
 80065f0:	f019 0f01 	tst.w	r9, #1
 80065f4:	d192      	bne.n	800651c <_dtoa_r+0xabc>
 80065f6:	462b      	mov	r3, r5
 80065f8:	461d      	mov	r5, r3
 80065fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065fe:	2a30      	cmp	r2, #48	; 0x30
 8006600:	d0fa      	beq.n	80065f8 <_dtoa_r+0xb98>
 8006602:	e6dd      	b.n	80063c0 <_dtoa_r+0x960>
 8006604:	9a00      	ldr	r2, [sp, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d189      	bne.n	800651e <_dtoa_r+0xabe>
 800660a:	f10b 0b01 	add.w	fp, fp, #1
 800660e:	2331      	movs	r3, #49	; 0x31
 8006610:	e796      	b.n	8006540 <_dtoa_r+0xae0>
 8006612:	4b0a      	ldr	r3, [pc, #40]	; (800663c <_dtoa_r+0xbdc>)
 8006614:	f7ff ba99 	b.w	8005b4a <_dtoa_r+0xea>
 8006618:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800661a:	2b00      	cmp	r3, #0
 800661c:	f47f aa6d 	bne.w	8005afa <_dtoa_r+0x9a>
 8006620:	4b07      	ldr	r3, [pc, #28]	; (8006640 <_dtoa_r+0xbe0>)
 8006622:	f7ff ba92 	b.w	8005b4a <_dtoa_r+0xea>
 8006626:	9b01      	ldr	r3, [sp, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	dcb5      	bgt.n	8006598 <_dtoa_r+0xb38>
 800662c:	9b07      	ldr	r3, [sp, #28]
 800662e:	2b02      	cmp	r3, #2
 8006630:	f73f aeb1 	bgt.w	8006396 <_dtoa_r+0x936>
 8006634:	e7b0      	b.n	8006598 <_dtoa_r+0xb38>
 8006636:	bf00      	nop
 8006638:	08008a38 	.word	0x08008a38
 800663c:	08008998 	.word	0x08008998
 8006640:	080089bc 	.word	0x080089bc

08006644 <_free_r>:
 8006644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006646:	2900      	cmp	r1, #0
 8006648:	d044      	beq.n	80066d4 <_free_r+0x90>
 800664a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800664e:	9001      	str	r0, [sp, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f1a1 0404 	sub.w	r4, r1, #4
 8006656:	bfb8      	it	lt
 8006658:	18e4      	addlt	r4, r4, r3
 800665a:	f000 f8e7 	bl	800682c <__malloc_lock>
 800665e:	4a1e      	ldr	r2, [pc, #120]	; (80066d8 <_free_r+0x94>)
 8006660:	9801      	ldr	r0, [sp, #4]
 8006662:	6813      	ldr	r3, [r2, #0]
 8006664:	b933      	cbnz	r3, 8006674 <_free_r+0x30>
 8006666:	6063      	str	r3, [r4, #4]
 8006668:	6014      	str	r4, [r2, #0]
 800666a:	b003      	add	sp, #12
 800666c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006670:	f000 b8e2 	b.w	8006838 <__malloc_unlock>
 8006674:	42a3      	cmp	r3, r4
 8006676:	d908      	bls.n	800668a <_free_r+0x46>
 8006678:	6825      	ldr	r5, [r4, #0]
 800667a:	1961      	adds	r1, r4, r5
 800667c:	428b      	cmp	r3, r1
 800667e:	bf01      	itttt	eq
 8006680:	6819      	ldreq	r1, [r3, #0]
 8006682:	685b      	ldreq	r3, [r3, #4]
 8006684:	1949      	addeq	r1, r1, r5
 8006686:	6021      	streq	r1, [r4, #0]
 8006688:	e7ed      	b.n	8006666 <_free_r+0x22>
 800668a:	461a      	mov	r2, r3
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	b10b      	cbz	r3, 8006694 <_free_r+0x50>
 8006690:	42a3      	cmp	r3, r4
 8006692:	d9fa      	bls.n	800668a <_free_r+0x46>
 8006694:	6811      	ldr	r1, [r2, #0]
 8006696:	1855      	adds	r5, r2, r1
 8006698:	42a5      	cmp	r5, r4
 800669a:	d10b      	bne.n	80066b4 <_free_r+0x70>
 800669c:	6824      	ldr	r4, [r4, #0]
 800669e:	4421      	add	r1, r4
 80066a0:	1854      	adds	r4, r2, r1
 80066a2:	42a3      	cmp	r3, r4
 80066a4:	6011      	str	r1, [r2, #0]
 80066a6:	d1e0      	bne.n	800666a <_free_r+0x26>
 80066a8:	681c      	ldr	r4, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	6053      	str	r3, [r2, #4]
 80066ae:	440c      	add	r4, r1
 80066b0:	6014      	str	r4, [r2, #0]
 80066b2:	e7da      	b.n	800666a <_free_r+0x26>
 80066b4:	d902      	bls.n	80066bc <_free_r+0x78>
 80066b6:	230c      	movs	r3, #12
 80066b8:	6003      	str	r3, [r0, #0]
 80066ba:	e7d6      	b.n	800666a <_free_r+0x26>
 80066bc:	6825      	ldr	r5, [r4, #0]
 80066be:	1961      	adds	r1, r4, r5
 80066c0:	428b      	cmp	r3, r1
 80066c2:	bf04      	itt	eq
 80066c4:	6819      	ldreq	r1, [r3, #0]
 80066c6:	685b      	ldreq	r3, [r3, #4]
 80066c8:	6063      	str	r3, [r4, #4]
 80066ca:	bf04      	itt	eq
 80066cc:	1949      	addeq	r1, r1, r5
 80066ce:	6021      	streq	r1, [r4, #0]
 80066d0:	6054      	str	r4, [r2, #4]
 80066d2:	e7ca      	b.n	800666a <_free_r+0x26>
 80066d4:	b003      	add	sp, #12
 80066d6:	bd30      	pop	{r4, r5, pc}
 80066d8:	20000938 	.word	0x20000938

080066dc <malloc>:
 80066dc:	4b02      	ldr	r3, [pc, #8]	; (80066e8 <malloc+0xc>)
 80066de:	4601      	mov	r1, r0
 80066e0:	6818      	ldr	r0, [r3, #0]
 80066e2:	f000 b823 	b.w	800672c <_malloc_r>
 80066e6:	bf00      	nop
 80066e8:	20000070 	.word	0x20000070

080066ec <sbrk_aligned>:
 80066ec:	b570      	push	{r4, r5, r6, lr}
 80066ee:	4e0e      	ldr	r6, [pc, #56]	; (8006728 <sbrk_aligned+0x3c>)
 80066f0:	460c      	mov	r4, r1
 80066f2:	6831      	ldr	r1, [r6, #0]
 80066f4:	4605      	mov	r5, r0
 80066f6:	b911      	cbnz	r1, 80066fe <sbrk_aligned+0x12>
 80066f8:	f000 fe40 	bl	800737c <_sbrk_r>
 80066fc:	6030      	str	r0, [r6, #0]
 80066fe:	4621      	mov	r1, r4
 8006700:	4628      	mov	r0, r5
 8006702:	f000 fe3b 	bl	800737c <_sbrk_r>
 8006706:	1c43      	adds	r3, r0, #1
 8006708:	d00a      	beq.n	8006720 <sbrk_aligned+0x34>
 800670a:	1cc4      	adds	r4, r0, #3
 800670c:	f024 0403 	bic.w	r4, r4, #3
 8006710:	42a0      	cmp	r0, r4
 8006712:	d007      	beq.n	8006724 <sbrk_aligned+0x38>
 8006714:	1a21      	subs	r1, r4, r0
 8006716:	4628      	mov	r0, r5
 8006718:	f000 fe30 	bl	800737c <_sbrk_r>
 800671c:	3001      	adds	r0, #1
 800671e:	d101      	bne.n	8006724 <sbrk_aligned+0x38>
 8006720:	f04f 34ff 	mov.w	r4, #4294967295
 8006724:	4620      	mov	r0, r4
 8006726:	bd70      	pop	{r4, r5, r6, pc}
 8006728:	2000093c 	.word	0x2000093c

0800672c <_malloc_r>:
 800672c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006730:	1ccd      	adds	r5, r1, #3
 8006732:	f025 0503 	bic.w	r5, r5, #3
 8006736:	3508      	adds	r5, #8
 8006738:	2d0c      	cmp	r5, #12
 800673a:	bf38      	it	cc
 800673c:	250c      	movcc	r5, #12
 800673e:	2d00      	cmp	r5, #0
 8006740:	4607      	mov	r7, r0
 8006742:	db01      	blt.n	8006748 <_malloc_r+0x1c>
 8006744:	42a9      	cmp	r1, r5
 8006746:	d905      	bls.n	8006754 <_malloc_r+0x28>
 8006748:	230c      	movs	r3, #12
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	2600      	movs	r6, #0
 800674e:	4630      	mov	r0, r6
 8006750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006754:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006828 <_malloc_r+0xfc>
 8006758:	f000 f868 	bl	800682c <__malloc_lock>
 800675c:	f8d8 3000 	ldr.w	r3, [r8]
 8006760:	461c      	mov	r4, r3
 8006762:	bb5c      	cbnz	r4, 80067bc <_malloc_r+0x90>
 8006764:	4629      	mov	r1, r5
 8006766:	4638      	mov	r0, r7
 8006768:	f7ff ffc0 	bl	80066ec <sbrk_aligned>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	4604      	mov	r4, r0
 8006770:	d155      	bne.n	800681e <_malloc_r+0xf2>
 8006772:	f8d8 4000 	ldr.w	r4, [r8]
 8006776:	4626      	mov	r6, r4
 8006778:	2e00      	cmp	r6, #0
 800677a:	d145      	bne.n	8006808 <_malloc_r+0xdc>
 800677c:	2c00      	cmp	r4, #0
 800677e:	d048      	beq.n	8006812 <_malloc_r+0xe6>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	4631      	mov	r1, r6
 8006784:	4638      	mov	r0, r7
 8006786:	eb04 0903 	add.w	r9, r4, r3
 800678a:	f000 fdf7 	bl	800737c <_sbrk_r>
 800678e:	4581      	cmp	r9, r0
 8006790:	d13f      	bne.n	8006812 <_malloc_r+0xe6>
 8006792:	6821      	ldr	r1, [r4, #0]
 8006794:	1a6d      	subs	r5, r5, r1
 8006796:	4629      	mov	r1, r5
 8006798:	4638      	mov	r0, r7
 800679a:	f7ff ffa7 	bl	80066ec <sbrk_aligned>
 800679e:	3001      	adds	r0, #1
 80067a0:	d037      	beq.n	8006812 <_malloc_r+0xe6>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	442b      	add	r3, r5
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	f8d8 3000 	ldr.w	r3, [r8]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d038      	beq.n	8006822 <_malloc_r+0xf6>
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	42a2      	cmp	r2, r4
 80067b4:	d12b      	bne.n	800680e <_malloc_r+0xe2>
 80067b6:	2200      	movs	r2, #0
 80067b8:	605a      	str	r2, [r3, #4]
 80067ba:	e00f      	b.n	80067dc <_malloc_r+0xb0>
 80067bc:	6822      	ldr	r2, [r4, #0]
 80067be:	1b52      	subs	r2, r2, r5
 80067c0:	d41f      	bmi.n	8006802 <_malloc_r+0xd6>
 80067c2:	2a0b      	cmp	r2, #11
 80067c4:	d917      	bls.n	80067f6 <_malloc_r+0xca>
 80067c6:	1961      	adds	r1, r4, r5
 80067c8:	42a3      	cmp	r3, r4
 80067ca:	6025      	str	r5, [r4, #0]
 80067cc:	bf18      	it	ne
 80067ce:	6059      	strne	r1, [r3, #4]
 80067d0:	6863      	ldr	r3, [r4, #4]
 80067d2:	bf08      	it	eq
 80067d4:	f8c8 1000 	streq.w	r1, [r8]
 80067d8:	5162      	str	r2, [r4, r5]
 80067da:	604b      	str	r3, [r1, #4]
 80067dc:	4638      	mov	r0, r7
 80067de:	f104 060b 	add.w	r6, r4, #11
 80067e2:	f000 f829 	bl	8006838 <__malloc_unlock>
 80067e6:	f026 0607 	bic.w	r6, r6, #7
 80067ea:	1d23      	adds	r3, r4, #4
 80067ec:	1af2      	subs	r2, r6, r3
 80067ee:	d0ae      	beq.n	800674e <_malloc_r+0x22>
 80067f0:	1b9b      	subs	r3, r3, r6
 80067f2:	50a3      	str	r3, [r4, r2]
 80067f4:	e7ab      	b.n	800674e <_malloc_r+0x22>
 80067f6:	42a3      	cmp	r3, r4
 80067f8:	6862      	ldr	r2, [r4, #4]
 80067fa:	d1dd      	bne.n	80067b8 <_malloc_r+0x8c>
 80067fc:	f8c8 2000 	str.w	r2, [r8]
 8006800:	e7ec      	b.n	80067dc <_malloc_r+0xb0>
 8006802:	4623      	mov	r3, r4
 8006804:	6864      	ldr	r4, [r4, #4]
 8006806:	e7ac      	b.n	8006762 <_malloc_r+0x36>
 8006808:	4634      	mov	r4, r6
 800680a:	6876      	ldr	r6, [r6, #4]
 800680c:	e7b4      	b.n	8006778 <_malloc_r+0x4c>
 800680e:	4613      	mov	r3, r2
 8006810:	e7cc      	b.n	80067ac <_malloc_r+0x80>
 8006812:	230c      	movs	r3, #12
 8006814:	603b      	str	r3, [r7, #0]
 8006816:	4638      	mov	r0, r7
 8006818:	f000 f80e 	bl	8006838 <__malloc_unlock>
 800681c:	e797      	b.n	800674e <_malloc_r+0x22>
 800681e:	6025      	str	r5, [r4, #0]
 8006820:	e7dc      	b.n	80067dc <_malloc_r+0xb0>
 8006822:	605b      	str	r3, [r3, #4]
 8006824:	deff      	udf	#255	; 0xff
 8006826:	bf00      	nop
 8006828:	20000938 	.word	0x20000938

0800682c <__malloc_lock>:
 800682c:	4801      	ldr	r0, [pc, #4]	; (8006834 <__malloc_lock+0x8>)
 800682e:	f7ff b88a 	b.w	8005946 <__retarget_lock_acquire_recursive>
 8006832:	bf00      	nop
 8006834:	20000934 	.word	0x20000934

08006838 <__malloc_unlock>:
 8006838:	4801      	ldr	r0, [pc, #4]	; (8006840 <__malloc_unlock+0x8>)
 800683a:	f7ff b885 	b.w	8005948 <__retarget_lock_release_recursive>
 800683e:	bf00      	nop
 8006840:	20000934 	.word	0x20000934

08006844 <_Balloc>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	69c6      	ldr	r6, [r0, #28]
 8006848:	4604      	mov	r4, r0
 800684a:	460d      	mov	r5, r1
 800684c:	b976      	cbnz	r6, 800686c <_Balloc+0x28>
 800684e:	2010      	movs	r0, #16
 8006850:	f7ff ff44 	bl	80066dc <malloc>
 8006854:	4602      	mov	r2, r0
 8006856:	61e0      	str	r0, [r4, #28]
 8006858:	b920      	cbnz	r0, 8006864 <_Balloc+0x20>
 800685a:	4b18      	ldr	r3, [pc, #96]	; (80068bc <_Balloc+0x78>)
 800685c:	4818      	ldr	r0, [pc, #96]	; (80068c0 <_Balloc+0x7c>)
 800685e:	216b      	movs	r1, #107	; 0x6b
 8006860:	f000 fdaa 	bl	80073b8 <__assert_func>
 8006864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006868:	6006      	str	r6, [r0, #0]
 800686a:	60c6      	str	r6, [r0, #12]
 800686c:	69e6      	ldr	r6, [r4, #28]
 800686e:	68f3      	ldr	r3, [r6, #12]
 8006870:	b183      	cbz	r3, 8006894 <_Balloc+0x50>
 8006872:	69e3      	ldr	r3, [r4, #28]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800687a:	b9b8      	cbnz	r0, 80068ac <_Balloc+0x68>
 800687c:	2101      	movs	r1, #1
 800687e:	fa01 f605 	lsl.w	r6, r1, r5
 8006882:	1d72      	adds	r2, r6, #5
 8006884:	0092      	lsls	r2, r2, #2
 8006886:	4620      	mov	r0, r4
 8006888:	f000 fdb4 	bl	80073f4 <_calloc_r>
 800688c:	b160      	cbz	r0, 80068a8 <_Balloc+0x64>
 800688e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006892:	e00e      	b.n	80068b2 <_Balloc+0x6e>
 8006894:	2221      	movs	r2, #33	; 0x21
 8006896:	2104      	movs	r1, #4
 8006898:	4620      	mov	r0, r4
 800689a:	f000 fdab 	bl	80073f4 <_calloc_r>
 800689e:	69e3      	ldr	r3, [r4, #28]
 80068a0:	60f0      	str	r0, [r6, #12]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e4      	bne.n	8006872 <_Balloc+0x2e>
 80068a8:	2000      	movs	r0, #0
 80068aa:	bd70      	pop	{r4, r5, r6, pc}
 80068ac:	6802      	ldr	r2, [r0, #0]
 80068ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068b2:	2300      	movs	r3, #0
 80068b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068b8:	e7f7      	b.n	80068aa <_Balloc+0x66>
 80068ba:	bf00      	nop
 80068bc:	080089c9 	.word	0x080089c9
 80068c0:	08008a49 	.word	0x08008a49

080068c4 <_Bfree>:
 80068c4:	b570      	push	{r4, r5, r6, lr}
 80068c6:	69c6      	ldr	r6, [r0, #28]
 80068c8:	4605      	mov	r5, r0
 80068ca:	460c      	mov	r4, r1
 80068cc:	b976      	cbnz	r6, 80068ec <_Bfree+0x28>
 80068ce:	2010      	movs	r0, #16
 80068d0:	f7ff ff04 	bl	80066dc <malloc>
 80068d4:	4602      	mov	r2, r0
 80068d6:	61e8      	str	r0, [r5, #28]
 80068d8:	b920      	cbnz	r0, 80068e4 <_Bfree+0x20>
 80068da:	4b09      	ldr	r3, [pc, #36]	; (8006900 <_Bfree+0x3c>)
 80068dc:	4809      	ldr	r0, [pc, #36]	; (8006904 <_Bfree+0x40>)
 80068de:	218f      	movs	r1, #143	; 0x8f
 80068e0:	f000 fd6a 	bl	80073b8 <__assert_func>
 80068e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068e8:	6006      	str	r6, [r0, #0]
 80068ea:	60c6      	str	r6, [r0, #12]
 80068ec:	b13c      	cbz	r4, 80068fe <_Bfree+0x3a>
 80068ee:	69eb      	ldr	r3, [r5, #28]
 80068f0:	6862      	ldr	r2, [r4, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068f8:	6021      	str	r1, [r4, #0]
 80068fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068fe:	bd70      	pop	{r4, r5, r6, pc}
 8006900:	080089c9 	.word	0x080089c9
 8006904:	08008a49 	.word	0x08008a49

08006908 <__multadd>:
 8006908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690c:	690d      	ldr	r5, [r1, #16]
 800690e:	4607      	mov	r7, r0
 8006910:	460c      	mov	r4, r1
 8006912:	461e      	mov	r6, r3
 8006914:	f101 0c14 	add.w	ip, r1, #20
 8006918:	2000      	movs	r0, #0
 800691a:	f8dc 3000 	ldr.w	r3, [ip]
 800691e:	b299      	uxth	r1, r3
 8006920:	fb02 6101 	mla	r1, r2, r1, r6
 8006924:	0c1e      	lsrs	r6, r3, #16
 8006926:	0c0b      	lsrs	r3, r1, #16
 8006928:	fb02 3306 	mla	r3, r2, r6, r3
 800692c:	b289      	uxth	r1, r1
 800692e:	3001      	adds	r0, #1
 8006930:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006934:	4285      	cmp	r5, r0
 8006936:	f84c 1b04 	str.w	r1, [ip], #4
 800693a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800693e:	dcec      	bgt.n	800691a <__multadd+0x12>
 8006940:	b30e      	cbz	r6, 8006986 <__multadd+0x7e>
 8006942:	68a3      	ldr	r3, [r4, #8]
 8006944:	42ab      	cmp	r3, r5
 8006946:	dc19      	bgt.n	800697c <__multadd+0x74>
 8006948:	6861      	ldr	r1, [r4, #4]
 800694a:	4638      	mov	r0, r7
 800694c:	3101      	adds	r1, #1
 800694e:	f7ff ff79 	bl	8006844 <_Balloc>
 8006952:	4680      	mov	r8, r0
 8006954:	b928      	cbnz	r0, 8006962 <__multadd+0x5a>
 8006956:	4602      	mov	r2, r0
 8006958:	4b0c      	ldr	r3, [pc, #48]	; (800698c <__multadd+0x84>)
 800695a:	480d      	ldr	r0, [pc, #52]	; (8006990 <__multadd+0x88>)
 800695c:	21ba      	movs	r1, #186	; 0xba
 800695e:	f000 fd2b 	bl	80073b8 <__assert_func>
 8006962:	6922      	ldr	r2, [r4, #16]
 8006964:	3202      	adds	r2, #2
 8006966:	f104 010c 	add.w	r1, r4, #12
 800696a:	0092      	lsls	r2, r2, #2
 800696c:	300c      	adds	r0, #12
 800696e:	f000 fd15 	bl	800739c <memcpy>
 8006972:	4621      	mov	r1, r4
 8006974:	4638      	mov	r0, r7
 8006976:	f7ff ffa5 	bl	80068c4 <_Bfree>
 800697a:	4644      	mov	r4, r8
 800697c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006980:	3501      	adds	r5, #1
 8006982:	615e      	str	r6, [r3, #20]
 8006984:	6125      	str	r5, [r4, #16]
 8006986:	4620      	mov	r0, r4
 8006988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800698c:	08008a38 	.word	0x08008a38
 8006990:	08008a49 	.word	0x08008a49

08006994 <__hi0bits>:
 8006994:	0c03      	lsrs	r3, r0, #16
 8006996:	041b      	lsls	r3, r3, #16
 8006998:	b9d3      	cbnz	r3, 80069d0 <__hi0bits+0x3c>
 800699a:	0400      	lsls	r0, r0, #16
 800699c:	2310      	movs	r3, #16
 800699e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80069a2:	bf04      	itt	eq
 80069a4:	0200      	lsleq	r0, r0, #8
 80069a6:	3308      	addeq	r3, #8
 80069a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069ac:	bf04      	itt	eq
 80069ae:	0100      	lsleq	r0, r0, #4
 80069b0:	3304      	addeq	r3, #4
 80069b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80069b6:	bf04      	itt	eq
 80069b8:	0080      	lsleq	r0, r0, #2
 80069ba:	3302      	addeq	r3, #2
 80069bc:	2800      	cmp	r0, #0
 80069be:	db05      	blt.n	80069cc <__hi0bits+0x38>
 80069c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80069c4:	f103 0301 	add.w	r3, r3, #1
 80069c8:	bf08      	it	eq
 80069ca:	2320      	moveq	r3, #32
 80069cc:	4618      	mov	r0, r3
 80069ce:	4770      	bx	lr
 80069d0:	2300      	movs	r3, #0
 80069d2:	e7e4      	b.n	800699e <__hi0bits+0xa>

080069d4 <__lo0bits>:
 80069d4:	6803      	ldr	r3, [r0, #0]
 80069d6:	f013 0207 	ands.w	r2, r3, #7
 80069da:	d00c      	beq.n	80069f6 <__lo0bits+0x22>
 80069dc:	07d9      	lsls	r1, r3, #31
 80069de:	d422      	bmi.n	8006a26 <__lo0bits+0x52>
 80069e0:	079a      	lsls	r2, r3, #30
 80069e2:	bf49      	itett	mi
 80069e4:	085b      	lsrmi	r3, r3, #1
 80069e6:	089b      	lsrpl	r3, r3, #2
 80069e8:	6003      	strmi	r3, [r0, #0]
 80069ea:	2201      	movmi	r2, #1
 80069ec:	bf5c      	itt	pl
 80069ee:	6003      	strpl	r3, [r0, #0]
 80069f0:	2202      	movpl	r2, #2
 80069f2:	4610      	mov	r0, r2
 80069f4:	4770      	bx	lr
 80069f6:	b299      	uxth	r1, r3
 80069f8:	b909      	cbnz	r1, 80069fe <__lo0bits+0x2a>
 80069fa:	0c1b      	lsrs	r3, r3, #16
 80069fc:	2210      	movs	r2, #16
 80069fe:	b2d9      	uxtb	r1, r3
 8006a00:	b909      	cbnz	r1, 8006a06 <__lo0bits+0x32>
 8006a02:	3208      	adds	r2, #8
 8006a04:	0a1b      	lsrs	r3, r3, #8
 8006a06:	0719      	lsls	r1, r3, #28
 8006a08:	bf04      	itt	eq
 8006a0a:	091b      	lsreq	r3, r3, #4
 8006a0c:	3204      	addeq	r2, #4
 8006a0e:	0799      	lsls	r1, r3, #30
 8006a10:	bf04      	itt	eq
 8006a12:	089b      	lsreq	r3, r3, #2
 8006a14:	3202      	addeq	r2, #2
 8006a16:	07d9      	lsls	r1, r3, #31
 8006a18:	d403      	bmi.n	8006a22 <__lo0bits+0x4e>
 8006a1a:	085b      	lsrs	r3, r3, #1
 8006a1c:	f102 0201 	add.w	r2, r2, #1
 8006a20:	d003      	beq.n	8006a2a <__lo0bits+0x56>
 8006a22:	6003      	str	r3, [r0, #0]
 8006a24:	e7e5      	b.n	80069f2 <__lo0bits+0x1e>
 8006a26:	2200      	movs	r2, #0
 8006a28:	e7e3      	b.n	80069f2 <__lo0bits+0x1e>
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	e7e1      	b.n	80069f2 <__lo0bits+0x1e>
	...

08006a30 <__i2b>:
 8006a30:	b510      	push	{r4, lr}
 8006a32:	460c      	mov	r4, r1
 8006a34:	2101      	movs	r1, #1
 8006a36:	f7ff ff05 	bl	8006844 <_Balloc>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	b928      	cbnz	r0, 8006a4a <__i2b+0x1a>
 8006a3e:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <__i2b+0x24>)
 8006a40:	4805      	ldr	r0, [pc, #20]	; (8006a58 <__i2b+0x28>)
 8006a42:	f240 1145 	movw	r1, #325	; 0x145
 8006a46:	f000 fcb7 	bl	80073b8 <__assert_func>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	6144      	str	r4, [r0, #20]
 8006a4e:	6103      	str	r3, [r0, #16]
 8006a50:	bd10      	pop	{r4, pc}
 8006a52:	bf00      	nop
 8006a54:	08008a38 	.word	0x08008a38
 8006a58:	08008a49 	.word	0x08008a49

08006a5c <__multiply>:
 8006a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a60:	4691      	mov	r9, r2
 8006a62:	690a      	ldr	r2, [r1, #16]
 8006a64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	bfb8      	it	lt
 8006a6c:	460b      	movlt	r3, r1
 8006a6e:	460c      	mov	r4, r1
 8006a70:	bfbc      	itt	lt
 8006a72:	464c      	movlt	r4, r9
 8006a74:	4699      	movlt	r9, r3
 8006a76:	6927      	ldr	r7, [r4, #16]
 8006a78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006a7c:	68a3      	ldr	r3, [r4, #8]
 8006a7e:	6861      	ldr	r1, [r4, #4]
 8006a80:	eb07 060a 	add.w	r6, r7, sl
 8006a84:	42b3      	cmp	r3, r6
 8006a86:	b085      	sub	sp, #20
 8006a88:	bfb8      	it	lt
 8006a8a:	3101      	addlt	r1, #1
 8006a8c:	f7ff feda 	bl	8006844 <_Balloc>
 8006a90:	b930      	cbnz	r0, 8006aa0 <__multiply+0x44>
 8006a92:	4602      	mov	r2, r0
 8006a94:	4b44      	ldr	r3, [pc, #272]	; (8006ba8 <__multiply+0x14c>)
 8006a96:	4845      	ldr	r0, [pc, #276]	; (8006bac <__multiply+0x150>)
 8006a98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006a9c:	f000 fc8c 	bl	80073b8 <__assert_func>
 8006aa0:	f100 0514 	add.w	r5, r0, #20
 8006aa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006aa8:	462b      	mov	r3, r5
 8006aaa:	2200      	movs	r2, #0
 8006aac:	4543      	cmp	r3, r8
 8006aae:	d321      	bcc.n	8006af4 <__multiply+0x98>
 8006ab0:	f104 0314 	add.w	r3, r4, #20
 8006ab4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ab8:	f109 0314 	add.w	r3, r9, #20
 8006abc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ac0:	9202      	str	r2, [sp, #8]
 8006ac2:	1b3a      	subs	r2, r7, r4
 8006ac4:	3a15      	subs	r2, #21
 8006ac6:	f022 0203 	bic.w	r2, r2, #3
 8006aca:	3204      	adds	r2, #4
 8006acc:	f104 0115 	add.w	r1, r4, #21
 8006ad0:	428f      	cmp	r7, r1
 8006ad2:	bf38      	it	cc
 8006ad4:	2204      	movcc	r2, #4
 8006ad6:	9201      	str	r2, [sp, #4]
 8006ad8:	9a02      	ldr	r2, [sp, #8]
 8006ada:	9303      	str	r3, [sp, #12]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d80c      	bhi.n	8006afa <__multiply+0x9e>
 8006ae0:	2e00      	cmp	r6, #0
 8006ae2:	dd03      	ble.n	8006aec <__multiply+0x90>
 8006ae4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d05b      	beq.n	8006ba4 <__multiply+0x148>
 8006aec:	6106      	str	r6, [r0, #16]
 8006aee:	b005      	add	sp, #20
 8006af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af4:	f843 2b04 	str.w	r2, [r3], #4
 8006af8:	e7d8      	b.n	8006aac <__multiply+0x50>
 8006afa:	f8b3 a000 	ldrh.w	sl, [r3]
 8006afe:	f1ba 0f00 	cmp.w	sl, #0
 8006b02:	d024      	beq.n	8006b4e <__multiply+0xf2>
 8006b04:	f104 0e14 	add.w	lr, r4, #20
 8006b08:	46a9      	mov	r9, r5
 8006b0a:	f04f 0c00 	mov.w	ip, #0
 8006b0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b12:	f8d9 1000 	ldr.w	r1, [r9]
 8006b16:	fa1f fb82 	uxth.w	fp, r2
 8006b1a:	b289      	uxth	r1, r1
 8006b1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006b24:	f8d9 2000 	ldr.w	r2, [r9]
 8006b28:	4461      	add	r1, ip
 8006b2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006b32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b36:	b289      	uxth	r1, r1
 8006b38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b3c:	4577      	cmp	r7, lr
 8006b3e:	f849 1b04 	str.w	r1, [r9], #4
 8006b42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b46:	d8e2      	bhi.n	8006b0e <__multiply+0xb2>
 8006b48:	9a01      	ldr	r2, [sp, #4]
 8006b4a:	f845 c002 	str.w	ip, [r5, r2]
 8006b4e:	9a03      	ldr	r2, [sp, #12]
 8006b50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b54:	3304      	adds	r3, #4
 8006b56:	f1b9 0f00 	cmp.w	r9, #0
 8006b5a:	d021      	beq.n	8006ba0 <__multiply+0x144>
 8006b5c:	6829      	ldr	r1, [r5, #0]
 8006b5e:	f104 0c14 	add.w	ip, r4, #20
 8006b62:	46ae      	mov	lr, r5
 8006b64:	f04f 0a00 	mov.w	sl, #0
 8006b68:	f8bc b000 	ldrh.w	fp, [ip]
 8006b6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b70:	fb09 220b 	mla	r2, r9, fp, r2
 8006b74:	4452      	add	r2, sl
 8006b76:	b289      	uxth	r1, r1
 8006b78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b7c:	f84e 1b04 	str.w	r1, [lr], #4
 8006b80:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006b84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b88:	f8be 1000 	ldrh.w	r1, [lr]
 8006b8c:	fb09 110a 	mla	r1, r9, sl, r1
 8006b90:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006b94:	4567      	cmp	r7, ip
 8006b96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b9a:	d8e5      	bhi.n	8006b68 <__multiply+0x10c>
 8006b9c:	9a01      	ldr	r2, [sp, #4]
 8006b9e:	50a9      	str	r1, [r5, r2]
 8006ba0:	3504      	adds	r5, #4
 8006ba2:	e799      	b.n	8006ad8 <__multiply+0x7c>
 8006ba4:	3e01      	subs	r6, #1
 8006ba6:	e79b      	b.n	8006ae0 <__multiply+0x84>
 8006ba8:	08008a38 	.word	0x08008a38
 8006bac:	08008a49 	.word	0x08008a49

08006bb0 <__pow5mult>:
 8006bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb4:	4615      	mov	r5, r2
 8006bb6:	f012 0203 	ands.w	r2, r2, #3
 8006bba:	4606      	mov	r6, r0
 8006bbc:	460f      	mov	r7, r1
 8006bbe:	d007      	beq.n	8006bd0 <__pow5mult+0x20>
 8006bc0:	4c25      	ldr	r4, [pc, #148]	; (8006c58 <__pow5mult+0xa8>)
 8006bc2:	3a01      	subs	r2, #1
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bca:	f7ff fe9d 	bl	8006908 <__multadd>
 8006bce:	4607      	mov	r7, r0
 8006bd0:	10ad      	asrs	r5, r5, #2
 8006bd2:	d03d      	beq.n	8006c50 <__pow5mult+0xa0>
 8006bd4:	69f4      	ldr	r4, [r6, #28]
 8006bd6:	b97c      	cbnz	r4, 8006bf8 <__pow5mult+0x48>
 8006bd8:	2010      	movs	r0, #16
 8006bda:	f7ff fd7f 	bl	80066dc <malloc>
 8006bde:	4602      	mov	r2, r0
 8006be0:	61f0      	str	r0, [r6, #28]
 8006be2:	b928      	cbnz	r0, 8006bf0 <__pow5mult+0x40>
 8006be4:	4b1d      	ldr	r3, [pc, #116]	; (8006c5c <__pow5mult+0xac>)
 8006be6:	481e      	ldr	r0, [pc, #120]	; (8006c60 <__pow5mult+0xb0>)
 8006be8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006bec:	f000 fbe4 	bl	80073b8 <__assert_func>
 8006bf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bf4:	6004      	str	r4, [r0, #0]
 8006bf6:	60c4      	str	r4, [r0, #12]
 8006bf8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006bfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c00:	b94c      	cbnz	r4, 8006c16 <__pow5mult+0x66>
 8006c02:	f240 2171 	movw	r1, #625	; 0x271
 8006c06:	4630      	mov	r0, r6
 8006c08:	f7ff ff12 	bl	8006a30 <__i2b>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c12:	4604      	mov	r4, r0
 8006c14:	6003      	str	r3, [r0, #0]
 8006c16:	f04f 0900 	mov.w	r9, #0
 8006c1a:	07eb      	lsls	r3, r5, #31
 8006c1c:	d50a      	bpl.n	8006c34 <__pow5mult+0x84>
 8006c1e:	4639      	mov	r1, r7
 8006c20:	4622      	mov	r2, r4
 8006c22:	4630      	mov	r0, r6
 8006c24:	f7ff ff1a 	bl	8006a5c <__multiply>
 8006c28:	4639      	mov	r1, r7
 8006c2a:	4680      	mov	r8, r0
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	f7ff fe49 	bl	80068c4 <_Bfree>
 8006c32:	4647      	mov	r7, r8
 8006c34:	106d      	asrs	r5, r5, #1
 8006c36:	d00b      	beq.n	8006c50 <__pow5mult+0xa0>
 8006c38:	6820      	ldr	r0, [r4, #0]
 8006c3a:	b938      	cbnz	r0, 8006c4c <__pow5mult+0x9c>
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	4621      	mov	r1, r4
 8006c40:	4630      	mov	r0, r6
 8006c42:	f7ff ff0b 	bl	8006a5c <__multiply>
 8006c46:	6020      	str	r0, [r4, #0]
 8006c48:	f8c0 9000 	str.w	r9, [r0]
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	e7e4      	b.n	8006c1a <__pow5mult+0x6a>
 8006c50:	4638      	mov	r0, r7
 8006c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c56:	bf00      	nop
 8006c58:	08008b98 	.word	0x08008b98
 8006c5c:	080089c9 	.word	0x080089c9
 8006c60:	08008a49 	.word	0x08008a49

08006c64 <__lshift>:
 8006c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c68:	460c      	mov	r4, r1
 8006c6a:	6849      	ldr	r1, [r1, #4]
 8006c6c:	6923      	ldr	r3, [r4, #16]
 8006c6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c72:	68a3      	ldr	r3, [r4, #8]
 8006c74:	4607      	mov	r7, r0
 8006c76:	4691      	mov	r9, r2
 8006c78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c7c:	f108 0601 	add.w	r6, r8, #1
 8006c80:	42b3      	cmp	r3, r6
 8006c82:	db0b      	blt.n	8006c9c <__lshift+0x38>
 8006c84:	4638      	mov	r0, r7
 8006c86:	f7ff fddd 	bl	8006844 <_Balloc>
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	b948      	cbnz	r0, 8006ca2 <__lshift+0x3e>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	4b28      	ldr	r3, [pc, #160]	; (8006d34 <__lshift+0xd0>)
 8006c92:	4829      	ldr	r0, [pc, #164]	; (8006d38 <__lshift+0xd4>)
 8006c94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006c98:	f000 fb8e 	bl	80073b8 <__assert_func>
 8006c9c:	3101      	adds	r1, #1
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	e7ee      	b.n	8006c80 <__lshift+0x1c>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f100 0114 	add.w	r1, r0, #20
 8006ca8:	f100 0210 	add.w	r2, r0, #16
 8006cac:	4618      	mov	r0, r3
 8006cae:	4553      	cmp	r3, sl
 8006cb0:	db33      	blt.n	8006d1a <__lshift+0xb6>
 8006cb2:	6920      	ldr	r0, [r4, #16]
 8006cb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cb8:	f104 0314 	add.w	r3, r4, #20
 8006cbc:	f019 091f 	ands.w	r9, r9, #31
 8006cc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cc8:	d02b      	beq.n	8006d22 <__lshift+0xbe>
 8006cca:	f1c9 0e20 	rsb	lr, r9, #32
 8006cce:	468a      	mov	sl, r1
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	fa00 f009 	lsl.w	r0, r0, r9
 8006cd8:	4310      	orrs	r0, r2
 8006cda:	f84a 0b04 	str.w	r0, [sl], #4
 8006cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ce2:	459c      	cmp	ip, r3
 8006ce4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ce8:	d8f3      	bhi.n	8006cd2 <__lshift+0x6e>
 8006cea:	ebac 0304 	sub.w	r3, ip, r4
 8006cee:	3b15      	subs	r3, #21
 8006cf0:	f023 0303 	bic.w	r3, r3, #3
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	f104 0015 	add.w	r0, r4, #21
 8006cfa:	4584      	cmp	ip, r0
 8006cfc:	bf38      	it	cc
 8006cfe:	2304      	movcc	r3, #4
 8006d00:	50ca      	str	r2, [r1, r3]
 8006d02:	b10a      	cbz	r2, 8006d08 <__lshift+0xa4>
 8006d04:	f108 0602 	add.w	r6, r8, #2
 8006d08:	3e01      	subs	r6, #1
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	612e      	str	r6, [r5, #16]
 8006d0e:	4621      	mov	r1, r4
 8006d10:	f7ff fdd8 	bl	80068c4 <_Bfree>
 8006d14:	4628      	mov	r0, r5
 8006d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d1e:	3301      	adds	r3, #1
 8006d20:	e7c5      	b.n	8006cae <__lshift+0x4a>
 8006d22:	3904      	subs	r1, #4
 8006d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d28:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d2c:	459c      	cmp	ip, r3
 8006d2e:	d8f9      	bhi.n	8006d24 <__lshift+0xc0>
 8006d30:	e7ea      	b.n	8006d08 <__lshift+0xa4>
 8006d32:	bf00      	nop
 8006d34:	08008a38 	.word	0x08008a38
 8006d38:	08008a49 	.word	0x08008a49

08006d3c <__mcmp>:
 8006d3c:	b530      	push	{r4, r5, lr}
 8006d3e:	6902      	ldr	r2, [r0, #16]
 8006d40:	690c      	ldr	r4, [r1, #16]
 8006d42:	1b12      	subs	r2, r2, r4
 8006d44:	d10e      	bne.n	8006d64 <__mcmp+0x28>
 8006d46:	f100 0314 	add.w	r3, r0, #20
 8006d4a:	3114      	adds	r1, #20
 8006d4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d5c:	42a5      	cmp	r5, r4
 8006d5e:	d003      	beq.n	8006d68 <__mcmp+0x2c>
 8006d60:	d305      	bcc.n	8006d6e <__mcmp+0x32>
 8006d62:	2201      	movs	r2, #1
 8006d64:	4610      	mov	r0, r2
 8006d66:	bd30      	pop	{r4, r5, pc}
 8006d68:	4283      	cmp	r3, r0
 8006d6a:	d3f3      	bcc.n	8006d54 <__mcmp+0x18>
 8006d6c:	e7fa      	b.n	8006d64 <__mcmp+0x28>
 8006d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d72:	e7f7      	b.n	8006d64 <__mcmp+0x28>

08006d74 <__mdiff>:
 8006d74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	460c      	mov	r4, r1
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	4620      	mov	r0, r4
 8006d80:	4690      	mov	r8, r2
 8006d82:	f7ff ffdb 	bl	8006d3c <__mcmp>
 8006d86:	1e05      	subs	r5, r0, #0
 8006d88:	d110      	bne.n	8006dac <__mdiff+0x38>
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f7ff fd59 	bl	8006844 <_Balloc>
 8006d92:	b930      	cbnz	r0, 8006da2 <__mdiff+0x2e>
 8006d94:	4b3a      	ldr	r3, [pc, #232]	; (8006e80 <__mdiff+0x10c>)
 8006d96:	4602      	mov	r2, r0
 8006d98:	f240 2137 	movw	r1, #567	; 0x237
 8006d9c:	4839      	ldr	r0, [pc, #228]	; (8006e84 <__mdiff+0x110>)
 8006d9e:	f000 fb0b 	bl	80073b8 <__assert_func>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006da8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dac:	bfa4      	itt	ge
 8006dae:	4643      	movge	r3, r8
 8006db0:	46a0      	movge	r8, r4
 8006db2:	4630      	mov	r0, r6
 8006db4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006db8:	bfa6      	itte	ge
 8006dba:	461c      	movge	r4, r3
 8006dbc:	2500      	movge	r5, #0
 8006dbe:	2501      	movlt	r5, #1
 8006dc0:	f7ff fd40 	bl	8006844 <_Balloc>
 8006dc4:	b920      	cbnz	r0, 8006dd0 <__mdiff+0x5c>
 8006dc6:	4b2e      	ldr	r3, [pc, #184]	; (8006e80 <__mdiff+0x10c>)
 8006dc8:	4602      	mov	r2, r0
 8006dca:	f240 2145 	movw	r1, #581	; 0x245
 8006dce:	e7e5      	b.n	8006d9c <__mdiff+0x28>
 8006dd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006dd4:	6926      	ldr	r6, [r4, #16]
 8006dd6:	60c5      	str	r5, [r0, #12]
 8006dd8:	f104 0914 	add.w	r9, r4, #20
 8006ddc:	f108 0514 	add.w	r5, r8, #20
 8006de0:	f100 0e14 	add.w	lr, r0, #20
 8006de4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006de8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006dec:	f108 0210 	add.w	r2, r8, #16
 8006df0:	46f2      	mov	sl, lr
 8006df2:	2100      	movs	r1, #0
 8006df4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006df8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006dfc:	fa11 f88b 	uxtah	r8, r1, fp
 8006e00:	b299      	uxth	r1, r3
 8006e02:	0c1b      	lsrs	r3, r3, #16
 8006e04:	eba8 0801 	sub.w	r8, r8, r1
 8006e08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e0c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e10:	fa1f f888 	uxth.w	r8, r8
 8006e14:	1419      	asrs	r1, r3, #16
 8006e16:	454e      	cmp	r6, r9
 8006e18:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e1c:	f84a 3b04 	str.w	r3, [sl], #4
 8006e20:	d8e8      	bhi.n	8006df4 <__mdiff+0x80>
 8006e22:	1b33      	subs	r3, r6, r4
 8006e24:	3b15      	subs	r3, #21
 8006e26:	f023 0303 	bic.w	r3, r3, #3
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	3415      	adds	r4, #21
 8006e2e:	42a6      	cmp	r6, r4
 8006e30:	bf38      	it	cc
 8006e32:	2304      	movcc	r3, #4
 8006e34:	441d      	add	r5, r3
 8006e36:	4473      	add	r3, lr
 8006e38:	469e      	mov	lr, r3
 8006e3a:	462e      	mov	r6, r5
 8006e3c:	4566      	cmp	r6, ip
 8006e3e:	d30e      	bcc.n	8006e5e <__mdiff+0xea>
 8006e40:	f10c 0203 	add.w	r2, ip, #3
 8006e44:	1b52      	subs	r2, r2, r5
 8006e46:	f022 0203 	bic.w	r2, r2, #3
 8006e4a:	3d03      	subs	r5, #3
 8006e4c:	45ac      	cmp	ip, r5
 8006e4e:	bf38      	it	cc
 8006e50:	2200      	movcc	r2, #0
 8006e52:	4413      	add	r3, r2
 8006e54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006e58:	b17a      	cbz	r2, 8006e7a <__mdiff+0x106>
 8006e5a:	6107      	str	r7, [r0, #16]
 8006e5c:	e7a4      	b.n	8006da8 <__mdiff+0x34>
 8006e5e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006e62:	fa11 f288 	uxtah	r2, r1, r8
 8006e66:	1414      	asrs	r4, r2, #16
 8006e68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e6c:	b292      	uxth	r2, r2
 8006e6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006e72:	f84e 2b04 	str.w	r2, [lr], #4
 8006e76:	1421      	asrs	r1, r4, #16
 8006e78:	e7e0      	b.n	8006e3c <__mdiff+0xc8>
 8006e7a:	3f01      	subs	r7, #1
 8006e7c:	e7ea      	b.n	8006e54 <__mdiff+0xe0>
 8006e7e:	bf00      	nop
 8006e80:	08008a38 	.word	0x08008a38
 8006e84:	08008a49 	.word	0x08008a49

08006e88 <__d2b>:
 8006e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e8c:	460f      	mov	r7, r1
 8006e8e:	2101      	movs	r1, #1
 8006e90:	ec59 8b10 	vmov	r8, r9, d0
 8006e94:	4616      	mov	r6, r2
 8006e96:	f7ff fcd5 	bl	8006844 <_Balloc>
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	b930      	cbnz	r0, 8006eac <__d2b+0x24>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	4b24      	ldr	r3, [pc, #144]	; (8006f34 <__d2b+0xac>)
 8006ea2:	4825      	ldr	r0, [pc, #148]	; (8006f38 <__d2b+0xb0>)
 8006ea4:	f240 310f 	movw	r1, #783	; 0x30f
 8006ea8:	f000 fa86 	bl	80073b8 <__assert_func>
 8006eac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006eb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006eb4:	bb2d      	cbnz	r5, 8006f02 <__d2b+0x7a>
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	f1b8 0300 	subs.w	r3, r8, #0
 8006ebc:	d026      	beq.n	8006f0c <__d2b+0x84>
 8006ebe:	4668      	mov	r0, sp
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	f7ff fd87 	bl	80069d4 <__lo0bits>
 8006ec6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006eca:	b1e8      	cbz	r0, 8006f08 <__d2b+0x80>
 8006ecc:	f1c0 0320 	rsb	r3, r0, #32
 8006ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	40c2      	lsrs	r2, r0
 8006ed8:	6163      	str	r3, [r4, #20]
 8006eda:	9201      	str	r2, [sp, #4]
 8006edc:	9b01      	ldr	r3, [sp, #4]
 8006ede:	61a3      	str	r3, [r4, #24]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	bf14      	ite	ne
 8006ee4:	2202      	movne	r2, #2
 8006ee6:	2201      	moveq	r2, #1
 8006ee8:	6122      	str	r2, [r4, #16]
 8006eea:	b1bd      	cbz	r5, 8006f1c <__d2b+0x94>
 8006eec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ef0:	4405      	add	r5, r0
 8006ef2:	603d      	str	r5, [r7, #0]
 8006ef4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ef8:	6030      	str	r0, [r6, #0]
 8006efa:	4620      	mov	r0, r4
 8006efc:	b003      	add	sp, #12
 8006efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f06:	e7d6      	b.n	8006eb6 <__d2b+0x2e>
 8006f08:	6161      	str	r1, [r4, #20]
 8006f0a:	e7e7      	b.n	8006edc <__d2b+0x54>
 8006f0c:	a801      	add	r0, sp, #4
 8006f0e:	f7ff fd61 	bl	80069d4 <__lo0bits>
 8006f12:	9b01      	ldr	r3, [sp, #4]
 8006f14:	6163      	str	r3, [r4, #20]
 8006f16:	3020      	adds	r0, #32
 8006f18:	2201      	movs	r2, #1
 8006f1a:	e7e5      	b.n	8006ee8 <__d2b+0x60>
 8006f1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f24:	6038      	str	r0, [r7, #0]
 8006f26:	6918      	ldr	r0, [r3, #16]
 8006f28:	f7ff fd34 	bl	8006994 <__hi0bits>
 8006f2c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f30:	e7e2      	b.n	8006ef8 <__d2b+0x70>
 8006f32:	bf00      	nop
 8006f34:	08008a38 	.word	0x08008a38
 8006f38:	08008a49 	.word	0x08008a49

08006f3c <__ssputs_r>:
 8006f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f40:	688e      	ldr	r6, [r1, #8]
 8006f42:	461f      	mov	r7, r3
 8006f44:	42be      	cmp	r6, r7
 8006f46:	680b      	ldr	r3, [r1, #0]
 8006f48:	4682      	mov	sl, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	4690      	mov	r8, r2
 8006f4e:	d82c      	bhi.n	8006faa <__ssputs_r+0x6e>
 8006f50:	898a      	ldrh	r2, [r1, #12]
 8006f52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f56:	d026      	beq.n	8006fa6 <__ssputs_r+0x6a>
 8006f58:	6965      	ldr	r5, [r4, #20]
 8006f5a:	6909      	ldr	r1, [r1, #16]
 8006f5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f60:	eba3 0901 	sub.w	r9, r3, r1
 8006f64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f68:	1c7b      	adds	r3, r7, #1
 8006f6a:	444b      	add	r3, r9
 8006f6c:	106d      	asrs	r5, r5, #1
 8006f6e:	429d      	cmp	r5, r3
 8006f70:	bf38      	it	cc
 8006f72:	461d      	movcc	r5, r3
 8006f74:	0553      	lsls	r3, r2, #21
 8006f76:	d527      	bpl.n	8006fc8 <__ssputs_r+0x8c>
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f7ff fbd7 	bl	800672c <_malloc_r>
 8006f7e:	4606      	mov	r6, r0
 8006f80:	b360      	cbz	r0, 8006fdc <__ssputs_r+0xa0>
 8006f82:	6921      	ldr	r1, [r4, #16]
 8006f84:	464a      	mov	r2, r9
 8006f86:	f000 fa09 	bl	800739c <memcpy>
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f94:	81a3      	strh	r3, [r4, #12]
 8006f96:	6126      	str	r6, [r4, #16]
 8006f98:	6165      	str	r5, [r4, #20]
 8006f9a:	444e      	add	r6, r9
 8006f9c:	eba5 0509 	sub.w	r5, r5, r9
 8006fa0:	6026      	str	r6, [r4, #0]
 8006fa2:	60a5      	str	r5, [r4, #8]
 8006fa4:	463e      	mov	r6, r7
 8006fa6:	42be      	cmp	r6, r7
 8006fa8:	d900      	bls.n	8006fac <__ssputs_r+0x70>
 8006faa:	463e      	mov	r6, r7
 8006fac:	6820      	ldr	r0, [r4, #0]
 8006fae:	4632      	mov	r2, r6
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	f000 f9c9 	bl	8007348 <memmove>
 8006fb6:	68a3      	ldr	r3, [r4, #8]
 8006fb8:	1b9b      	subs	r3, r3, r6
 8006fba:	60a3      	str	r3, [r4, #8]
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	4433      	add	r3, r6
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc8:	462a      	mov	r2, r5
 8006fca:	f000 fa3b 	bl	8007444 <_realloc_r>
 8006fce:	4606      	mov	r6, r0
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d1e0      	bne.n	8006f96 <__ssputs_r+0x5a>
 8006fd4:	6921      	ldr	r1, [r4, #16]
 8006fd6:	4650      	mov	r0, sl
 8006fd8:	f7ff fb34 	bl	8006644 <_free_r>
 8006fdc:	230c      	movs	r3, #12
 8006fde:	f8ca 3000 	str.w	r3, [sl]
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fe8:	81a3      	strh	r3, [r4, #12]
 8006fea:	f04f 30ff 	mov.w	r0, #4294967295
 8006fee:	e7e9      	b.n	8006fc4 <__ssputs_r+0x88>

08006ff0 <_svfiprintf_r>:
 8006ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff4:	4698      	mov	r8, r3
 8006ff6:	898b      	ldrh	r3, [r1, #12]
 8006ff8:	061b      	lsls	r3, r3, #24
 8006ffa:	b09d      	sub	sp, #116	; 0x74
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	460d      	mov	r5, r1
 8007000:	4614      	mov	r4, r2
 8007002:	d50e      	bpl.n	8007022 <_svfiprintf_r+0x32>
 8007004:	690b      	ldr	r3, [r1, #16]
 8007006:	b963      	cbnz	r3, 8007022 <_svfiprintf_r+0x32>
 8007008:	2140      	movs	r1, #64	; 0x40
 800700a:	f7ff fb8f 	bl	800672c <_malloc_r>
 800700e:	6028      	str	r0, [r5, #0]
 8007010:	6128      	str	r0, [r5, #16]
 8007012:	b920      	cbnz	r0, 800701e <_svfiprintf_r+0x2e>
 8007014:	230c      	movs	r3, #12
 8007016:	603b      	str	r3, [r7, #0]
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	e0d0      	b.n	80071c0 <_svfiprintf_r+0x1d0>
 800701e:	2340      	movs	r3, #64	; 0x40
 8007020:	616b      	str	r3, [r5, #20]
 8007022:	2300      	movs	r3, #0
 8007024:	9309      	str	r3, [sp, #36]	; 0x24
 8007026:	2320      	movs	r3, #32
 8007028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800702c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007030:	2330      	movs	r3, #48	; 0x30
 8007032:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071d8 <_svfiprintf_r+0x1e8>
 8007036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800703a:	f04f 0901 	mov.w	r9, #1
 800703e:	4623      	mov	r3, r4
 8007040:	469a      	mov	sl, r3
 8007042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007046:	b10a      	cbz	r2, 800704c <_svfiprintf_r+0x5c>
 8007048:	2a25      	cmp	r2, #37	; 0x25
 800704a:	d1f9      	bne.n	8007040 <_svfiprintf_r+0x50>
 800704c:	ebba 0b04 	subs.w	fp, sl, r4
 8007050:	d00b      	beq.n	800706a <_svfiprintf_r+0x7a>
 8007052:	465b      	mov	r3, fp
 8007054:	4622      	mov	r2, r4
 8007056:	4629      	mov	r1, r5
 8007058:	4638      	mov	r0, r7
 800705a:	f7ff ff6f 	bl	8006f3c <__ssputs_r>
 800705e:	3001      	adds	r0, #1
 8007060:	f000 80a9 	beq.w	80071b6 <_svfiprintf_r+0x1c6>
 8007064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007066:	445a      	add	r2, fp
 8007068:	9209      	str	r2, [sp, #36]	; 0x24
 800706a:	f89a 3000 	ldrb.w	r3, [sl]
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 80a1 	beq.w	80071b6 <_svfiprintf_r+0x1c6>
 8007074:	2300      	movs	r3, #0
 8007076:	f04f 32ff 	mov.w	r2, #4294967295
 800707a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800707e:	f10a 0a01 	add.w	sl, sl, #1
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	9307      	str	r3, [sp, #28]
 8007086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800708a:	931a      	str	r3, [sp, #104]	; 0x68
 800708c:	4654      	mov	r4, sl
 800708e:	2205      	movs	r2, #5
 8007090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007094:	4850      	ldr	r0, [pc, #320]	; (80071d8 <_svfiprintf_r+0x1e8>)
 8007096:	f7f9 f8a3 	bl	80001e0 <memchr>
 800709a:	9a04      	ldr	r2, [sp, #16]
 800709c:	b9d8      	cbnz	r0, 80070d6 <_svfiprintf_r+0xe6>
 800709e:	06d0      	lsls	r0, r2, #27
 80070a0:	bf44      	itt	mi
 80070a2:	2320      	movmi	r3, #32
 80070a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070a8:	0711      	lsls	r1, r2, #28
 80070aa:	bf44      	itt	mi
 80070ac:	232b      	movmi	r3, #43	; 0x2b
 80070ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070b2:	f89a 3000 	ldrb.w	r3, [sl]
 80070b6:	2b2a      	cmp	r3, #42	; 0x2a
 80070b8:	d015      	beq.n	80070e6 <_svfiprintf_r+0xf6>
 80070ba:	9a07      	ldr	r2, [sp, #28]
 80070bc:	4654      	mov	r4, sl
 80070be:	2000      	movs	r0, #0
 80070c0:	f04f 0c0a 	mov.w	ip, #10
 80070c4:	4621      	mov	r1, r4
 80070c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ca:	3b30      	subs	r3, #48	; 0x30
 80070cc:	2b09      	cmp	r3, #9
 80070ce:	d94d      	bls.n	800716c <_svfiprintf_r+0x17c>
 80070d0:	b1b0      	cbz	r0, 8007100 <_svfiprintf_r+0x110>
 80070d2:	9207      	str	r2, [sp, #28]
 80070d4:	e014      	b.n	8007100 <_svfiprintf_r+0x110>
 80070d6:	eba0 0308 	sub.w	r3, r0, r8
 80070da:	fa09 f303 	lsl.w	r3, r9, r3
 80070de:	4313      	orrs	r3, r2
 80070e0:	9304      	str	r3, [sp, #16]
 80070e2:	46a2      	mov	sl, r4
 80070e4:	e7d2      	b.n	800708c <_svfiprintf_r+0x9c>
 80070e6:	9b03      	ldr	r3, [sp, #12]
 80070e8:	1d19      	adds	r1, r3, #4
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	9103      	str	r1, [sp, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	bfbb      	ittet	lt
 80070f2:	425b      	neglt	r3, r3
 80070f4:	f042 0202 	orrlt.w	r2, r2, #2
 80070f8:	9307      	strge	r3, [sp, #28]
 80070fa:	9307      	strlt	r3, [sp, #28]
 80070fc:	bfb8      	it	lt
 80070fe:	9204      	strlt	r2, [sp, #16]
 8007100:	7823      	ldrb	r3, [r4, #0]
 8007102:	2b2e      	cmp	r3, #46	; 0x2e
 8007104:	d10c      	bne.n	8007120 <_svfiprintf_r+0x130>
 8007106:	7863      	ldrb	r3, [r4, #1]
 8007108:	2b2a      	cmp	r3, #42	; 0x2a
 800710a:	d134      	bne.n	8007176 <_svfiprintf_r+0x186>
 800710c:	9b03      	ldr	r3, [sp, #12]
 800710e:	1d1a      	adds	r2, r3, #4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	9203      	str	r2, [sp, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	bfb8      	it	lt
 8007118:	f04f 33ff 	movlt.w	r3, #4294967295
 800711c:	3402      	adds	r4, #2
 800711e:	9305      	str	r3, [sp, #20]
 8007120:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80071e8 <_svfiprintf_r+0x1f8>
 8007124:	7821      	ldrb	r1, [r4, #0]
 8007126:	2203      	movs	r2, #3
 8007128:	4650      	mov	r0, sl
 800712a:	f7f9 f859 	bl	80001e0 <memchr>
 800712e:	b138      	cbz	r0, 8007140 <_svfiprintf_r+0x150>
 8007130:	9b04      	ldr	r3, [sp, #16]
 8007132:	eba0 000a 	sub.w	r0, r0, sl
 8007136:	2240      	movs	r2, #64	; 0x40
 8007138:	4082      	lsls	r2, r0
 800713a:	4313      	orrs	r3, r2
 800713c:	3401      	adds	r4, #1
 800713e:	9304      	str	r3, [sp, #16]
 8007140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007144:	4825      	ldr	r0, [pc, #148]	; (80071dc <_svfiprintf_r+0x1ec>)
 8007146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800714a:	2206      	movs	r2, #6
 800714c:	f7f9 f848 	bl	80001e0 <memchr>
 8007150:	2800      	cmp	r0, #0
 8007152:	d038      	beq.n	80071c6 <_svfiprintf_r+0x1d6>
 8007154:	4b22      	ldr	r3, [pc, #136]	; (80071e0 <_svfiprintf_r+0x1f0>)
 8007156:	bb1b      	cbnz	r3, 80071a0 <_svfiprintf_r+0x1b0>
 8007158:	9b03      	ldr	r3, [sp, #12]
 800715a:	3307      	adds	r3, #7
 800715c:	f023 0307 	bic.w	r3, r3, #7
 8007160:	3308      	adds	r3, #8
 8007162:	9303      	str	r3, [sp, #12]
 8007164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007166:	4433      	add	r3, r6
 8007168:	9309      	str	r3, [sp, #36]	; 0x24
 800716a:	e768      	b.n	800703e <_svfiprintf_r+0x4e>
 800716c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007170:	460c      	mov	r4, r1
 8007172:	2001      	movs	r0, #1
 8007174:	e7a6      	b.n	80070c4 <_svfiprintf_r+0xd4>
 8007176:	2300      	movs	r3, #0
 8007178:	3401      	adds	r4, #1
 800717a:	9305      	str	r3, [sp, #20]
 800717c:	4619      	mov	r1, r3
 800717e:	f04f 0c0a 	mov.w	ip, #10
 8007182:	4620      	mov	r0, r4
 8007184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007188:	3a30      	subs	r2, #48	; 0x30
 800718a:	2a09      	cmp	r2, #9
 800718c:	d903      	bls.n	8007196 <_svfiprintf_r+0x1a6>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0c6      	beq.n	8007120 <_svfiprintf_r+0x130>
 8007192:	9105      	str	r1, [sp, #20]
 8007194:	e7c4      	b.n	8007120 <_svfiprintf_r+0x130>
 8007196:	fb0c 2101 	mla	r1, ip, r1, r2
 800719a:	4604      	mov	r4, r0
 800719c:	2301      	movs	r3, #1
 800719e:	e7f0      	b.n	8007182 <_svfiprintf_r+0x192>
 80071a0:	ab03      	add	r3, sp, #12
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	462a      	mov	r2, r5
 80071a6:	4b0f      	ldr	r3, [pc, #60]	; (80071e4 <_svfiprintf_r+0x1f4>)
 80071a8:	a904      	add	r1, sp, #16
 80071aa:	4638      	mov	r0, r7
 80071ac:	f7fd fe4e 	bl	8004e4c <_printf_float>
 80071b0:	1c42      	adds	r2, r0, #1
 80071b2:	4606      	mov	r6, r0
 80071b4:	d1d6      	bne.n	8007164 <_svfiprintf_r+0x174>
 80071b6:	89ab      	ldrh	r3, [r5, #12]
 80071b8:	065b      	lsls	r3, r3, #25
 80071ba:	f53f af2d 	bmi.w	8007018 <_svfiprintf_r+0x28>
 80071be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071c0:	b01d      	add	sp, #116	; 0x74
 80071c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c6:	ab03      	add	r3, sp, #12
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	462a      	mov	r2, r5
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <_svfiprintf_r+0x1f4>)
 80071ce:	a904      	add	r1, sp, #16
 80071d0:	4638      	mov	r0, r7
 80071d2:	f7fe f8df 	bl	8005394 <_printf_i>
 80071d6:	e7eb      	b.n	80071b0 <_svfiprintf_r+0x1c0>
 80071d8:	08008ba4 	.word	0x08008ba4
 80071dc:	08008bae 	.word	0x08008bae
 80071e0:	08004e4d 	.word	0x08004e4d
 80071e4:	08006f3d 	.word	0x08006f3d
 80071e8:	08008baa 	.word	0x08008baa

080071ec <__sflush_r>:
 80071ec:	898a      	ldrh	r2, [r1, #12]
 80071ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f2:	4605      	mov	r5, r0
 80071f4:	0710      	lsls	r0, r2, #28
 80071f6:	460c      	mov	r4, r1
 80071f8:	d458      	bmi.n	80072ac <__sflush_r+0xc0>
 80071fa:	684b      	ldr	r3, [r1, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	dc05      	bgt.n	800720c <__sflush_r+0x20>
 8007200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007202:	2b00      	cmp	r3, #0
 8007204:	dc02      	bgt.n	800720c <__sflush_r+0x20>
 8007206:	2000      	movs	r0, #0
 8007208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800720c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800720e:	2e00      	cmp	r6, #0
 8007210:	d0f9      	beq.n	8007206 <__sflush_r+0x1a>
 8007212:	2300      	movs	r3, #0
 8007214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007218:	682f      	ldr	r7, [r5, #0]
 800721a:	6a21      	ldr	r1, [r4, #32]
 800721c:	602b      	str	r3, [r5, #0]
 800721e:	d032      	beq.n	8007286 <__sflush_r+0x9a>
 8007220:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	075a      	lsls	r2, r3, #29
 8007226:	d505      	bpl.n	8007234 <__sflush_r+0x48>
 8007228:	6863      	ldr	r3, [r4, #4]
 800722a:	1ac0      	subs	r0, r0, r3
 800722c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800722e:	b10b      	cbz	r3, 8007234 <__sflush_r+0x48>
 8007230:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007232:	1ac0      	subs	r0, r0, r3
 8007234:	2300      	movs	r3, #0
 8007236:	4602      	mov	r2, r0
 8007238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800723a:	6a21      	ldr	r1, [r4, #32]
 800723c:	4628      	mov	r0, r5
 800723e:	47b0      	blx	r6
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	d106      	bne.n	8007254 <__sflush_r+0x68>
 8007246:	6829      	ldr	r1, [r5, #0]
 8007248:	291d      	cmp	r1, #29
 800724a:	d82b      	bhi.n	80072a4 <__sflush_r+0xb8>
 800724c:	4a29      	ldr	r2, [pc, #164]	; (80072f4 <__sflush_r+0x108>)
 800724e:	410a      	asrs	r2, r1
 8007250:	07d6      	lsls	r6, r2, #31
 8007252:	d427      	bmi.n	80072a4 <__sflush_r+0xb8>
 8007254:	2200      	movs	r2, #0
 8007256:	6062      	str	r2, [r4, #4]
 8007258:	04d9      	lsls	r1, r3, #19
 800725a:	6922      	ldr	r2, [r4, #16]
 800725c:	6022      	str	r2, [r4, #0]
 800725e:	d504      	bpl.n	800726a <__sflush_r+0x7e>
 8007260:	1c42      	adds	r2, r0, #1
 8007262:	d101      	bne.n	8007268 <__sflush_r+0x7c>
 8007264:	682b      	ldr	r3, [r5, #0]
 8007266:	b903      	cbnz	r3, 800726a <__sflush_r+0x7e>
 8007268:	6560      	str	r0, [r4, #84]	; 0x54
 800726a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800726c:	602f      	str	r7, [r5, #0]
 800726e:	2900      	cmp	r1, #0
 8007270:	d0c9      	beq.n	8007206 <__sflush_r+0x1a>
 8007272:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007276:	4299      	cmp	r1, r3
 8007278:	d002      	beq.n	8007280 <__sflush_r+0x94>
 800727a:	4628      	mov	r0, r5
 800727c:	f7ff f9e2 	bl	8006644 <_free_r>
 8007280:	2000      	movs	r0, #0
 8007282:	6360      	str	r0, [r4, #52]	; 0x34
 8007284:	e7c0      	b.n	8007208 <__sflush_r+0x1c>
 8007286:	2301      	movs	r3, #1
 8007288:	4628      	mov	r0, r5
 800728a:	47b0      	blx	r6
 800728c:	1c41      	adds	r1, r0, #1
 800728e:	d1c8      	bne.n	8007222 <__sflush_r+0x36>
 8007290:	682b      	ldr	r3, [r5, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0c5      	beq.n	8007222 <__sflush_r+0x36>
 8007296:	2b1d      	cmp	r3, #29
 8007298:	d001      	beq.n	800729e <__sflush_r+0xb2>
 800729a:	2b16      	cmp	r3, #22
 800729c:	d101      	bne.n	80072a2 <__sflush_r+0xb6>
 800729e:	602f      	str	r7, [r5, #0]
 80072a0:	e7b1      	b.n	8007206 <__sflush_r+0x1a>
 80072a2:	89a3      	ldrh	r3, [r4, #12]
 80072a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072a8:	81a3      	strh	r3, [r4, #12]
 80072aa:	e7ad      	b.n	8007208 <__sflush_r+0x1c>
 80072ac:	690f      	ldr	r7, [r1, #16]
 80072ae:	2f00      	cmp	r7, #0
 80072b0:	d0a9      	beq.n	8007206 <__sflush_r+0x1a>
 80072b2:	0793      	lsls	r3, r2, #30
 80072b4:	680e      	ldr	r6, [r1, #0]
 80072b6:	bf08      	it	eq
 80072b8:	694b      	ldreq	r3, [r1, #20]
 80072ba:	600f      	str	r7, [r1, #0]
 80072bc:	bf18      	it	ne
 80072be:	2300      	movne	r3, #0
 80072c0:	eba6 0807 	sub.w	r8, r6, r7
 80072c4:	608b      	str	r3, [r1, #8]
 80072c6:	f1b8 0f00 	cmp.w	r8, #0
 80072ca:	dd9c      	ble.n	8007206 <__sflush_r+0x1a>
 80072cc:	6a21      	ldr	r1, [r4, #32]
 80072ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072d0:	4643      	mov	r3, r8
 80072d2:	463a      	mov	r2, r7
 80072d4:	4628      	mov	r0, r5
 80072d6:	47b0      	blx	r6
 80072d8:	2800      	cmp	r0, #0
 80072da:	dc06      	bgt.n	80072ea <__sflush_r+0xfe>
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072e2:	81a3      	strh	r3, [r4, #12]
 80072e4:	f04f 30ff 	mov.w	r0, #4294967295
 80072e8:	e78e      	b.n	8007208 <__sflush_r+0x1c>
 80072ea:	4407      	add	r7, r0
 80072ec:	eba8 0800 	sub.w	r8, r8, r0
 80072f0:	e7e9      	b.n	80072c6 <__sflush_r+0xda>
 80072f2:	bf00      	nop
 80072f4:	dfbffffe 	.word	0xdfbffffe

080072f8 <_fflush_r>:
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	690b      	ldr	r3, [r1, #16]
 80072fc:	4605      	mov	r5, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	b913      	cbnz	r3, 8007308 <_fflush_r+0x10>
 8007302:	2500      	movs	r5, #0
 8007304:	4628      	mov	r0, r5
 8007306:	bd38      	pop	{r3, r4, r5, pc}
 8007308:	b118      	cbz	r0, 8007312 <_fflush_r+0x1a>
 800730a:	6a03      	ldr	r3, [r0, #32]
 800730c:	b90b      	cbnz	r3, 8007312 <_fflush_r+0x1a>
 800730e:	f7fe f9ef 	bl	80056f0 <__sinit>
 8007312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0f3      	beq.n	8007302 <_fflush_r+0xa>
 800731a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800731c:	07d0      	lsls	r0, r2, #31
 800731e:	d404      	bmi.n	800732a <_fflush_r+0x32>
 8007320:	0599      	lsls	r1, r3, #22
 8007322:	d402      	bmi.n	800732a <_fflush_r+0x32>
 8007324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007326:	f7fe fb0e 	bl	8005946 <__retarget_lock_acquire_recursive>
 800732a:	4628      	mov	r0, r5
 800732c:	4621      	mov	r1, r4
 800732e:	f7ff ff5d 	bl	80071ec <__sflush_r>
 8007332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007334:	07da      	lsls	r2, r3, #31
 8007336:	4605      	mov	r5, r0
 8007338:	d4e4      	bmi.n	8007304 <_fflush_r+0xc>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	059b      	lsls	r3, r3, #22
 800733e:	d4e1      	bmi.n	8007304 <_fflush_r+0xc>
 8007340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007342:	f7fe fb01 	bl	8005948 <__retarget_lock_release_recursive>
 8007346:	e7dd      	b.n	8007304 <_fflush_r+0xc>

08007348 <memmove>:
 8007348:	4288      	cmp	r0, r1
 800734a:	b510      	push	{r4, lr}
 800734c:	eb01 0402 	add.w	r4, r1, r2
 8007350:	d902      	bls.n	8007358 <memmove+0x10>
 8007352:	4284      	cmp	r4, r0
 8007354:	4623      	mov	r3, r4
 8007356:	d807      	bhi.n	8007368 <memmove+0x20>
 8007358:	1e43      	subs	r3, r0, #1
 800735a:	42a1      	cmp	r1, r4
 800735c:	d008      	beq.n	8007370 <memmove+0x28>
 800735e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007366:	e7f8      	b.n	800735a <memmove+0x12>
 8007368:	4402      	add	r2, r0
 800736a:	4601      	mov	r1, r0
 800736c:	428a      	cmp	r2, r1
 800736e:	d100      	bne.n	8007372 <memmove+0x2a>
 8007370:	bd10      	pop	{r4, pc}
 8007372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800737a:	e7f7      	b.n	800736c <memmove+0x24>

0800737c <_sbrk_r>:
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	4d06      	ldr	r5, [pc, #24]	; (8007398 <_sbrk_r+0x1c>)
 8007380:	2300      	movs	r3, #0
 8007382:	4604      	mov	r4, r0
 8007384:	4608      	mov	r0, r1
 8007386:	602b      	str	r3, [r5, #0]
 8007388:	f7fa fb72 	bl	8001a70 <_sbrk>
 800738c:	1c43      	adds	r3, r0, #1
 800738e:	d102      	bne.n	8007396 <_sbrk_r+0x1a>
 8007390:	682b      	ldr	r3, [r5, #0]
 8007392:	b103      	cbz	r3, 8007396 <_sbrk_r+0x1a>
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	bd38      	pop	{r3, r4, r5, pc}
 8007398:	20000930 	.word	0x20000930

0800739c <memcpy>:
 800739c:	440a      	add	r2, r1
 800739e:	4291      	cmp	r1, r2
 80073a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073a4:	d100      	bne.n	80073a8 <memcpy+0xc>
 80073a6:	4770      	bx	lr
 80073a8:	b510      	push	{r4, lr}
 80073aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073b2:	4291      	cmp	r1, r2
 80073b4:	d1f9      	bne.n	80073aa <memcpy+0xe>
 80073b6:	bd10      	pop	{r4, pc}

080073b8 <__assert_func>:
 80073b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073ba:	4614      	mov	r4, r2
 80073bc:	461a      	mov	r2, r3
 80073be:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <__assert_func+0x2c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4605      	mov	r5, r0
 80073c4:	68d8      	ldr	r0, [r3, #12]
 80073c6:	b14c      	cbz	r4, 80073dc <__assert_func+0x24>
 80073c8:	4b07      	ldr	r3, [pc, #28]	; (80073e8 <__assert_func+0x30>)
 80073ca:	9100      	str	r1, [sp, #0]
 80073cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80073d0:	4906      	ldr	r1, [pc, #24]	; (80073ec <__assert_func+0x34>)
 80073d2:	462b      	mov	r3, r5
 80073d4:	f000 f872 	bl	80074bc <fiprintf>
 80073d8:	f000 f882 	bl	80074e0 <abort>
 80073dc:	4b04      	ldr	r3, [pc, #16]	; (80073f0 <__assert_func+0x38>)
 80073de:	461c      	mov	r4, r3
 80073e0:	e7f3      	b.n	80073ca <__assert_func+0x12>
 80073e2:	bf00      	nop
 80073e4:	20000070 	.word	0x20000070
 80073e8:	08008bbf 	.word	0x08008bbf
 80073ec:	08008bcc 	.word	0x08008bcc
 80073f0:	08008bfa 	.word	0x08008bfa

080073f4 <_calloc_r>:
 80073f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073f6:	fba1 2402 	umull	r2, r4, r1, r2
 80073fa:	b94c      	cbnz	r4, 8007410 <_calloc_r+0x1c>
 80073fc:	4611      	mov	r1, r2
 80073fe:	9201      	str	r2, [sp, #4]
 8007400:	f7ff f994 	bl	800672c <_malloc_r>
 8007404:	9a01      	ldr	r2, [sp, #4]
 8007406:	4605      	mov	r5, r0
 8007408:	b930      	cbnz	r0, 8007418 <_calloc_r+0x24>
 800740a:	4628      	mov	r0, r5
 800740c:	b003      	add	sp, #12
 800740e:	bd30      	pop	{r4, r5, pc}
 8007410:	220c      	movs	r2, #12
 8007412:	6002      	str	r2, [r0, #0]
 8007414:	2500      	movs	r5, #0
 8007416:	e7f8      	b.n	800740a <_calloc_r+0x16>
 8007418:	4621      	mov	r1, r4
 800741a:	f7fe fa16 	bl	800584a <memset>
 800741e:	e7f4      	b.n	800740a <_calloc_r+0x16>

08007420 <__ascii_mbtowc>:
 8007420:	b082      	sub	sp, #8
 8007422:	b901      	cbnz	r1, 8007426 <__ascii_mbtowc+0x6>
 8007424:	a901      	add	r1, sp, #4
 8007426:	b142      	cbz	r2, 800743a <__ascii_mbtowc+0x1a>
 8007428:	b14b      	cbz	r3, 800743e <__ascii_mbtowc+0x1e>
 800742a:	7813      	ldrb	r3, [r2, #0]
 800742c:	600b      	str	r3, [r1, #0]
 800742e:	7812      	ldrb	r2, [r2, #0]
 8007430:	1e10      	subs	r0, r2, #0
 8007432:	bf18      	it	ne
 8007434:	2001      	movne	r0, #1
 8007436:	b002      	add	sp, #8
 8007438:	4770      	bx	lr
 800743a:	4610      	mov	r0, r2
 800743c:	e7fb      	b.n	8007436 <__ascii_mbtowc+0x16>
 800743e:	f06f 0001 	mvn.w	r0, #1
 8007442:	e7f8      	b.n	8007436 <__ascii_mbtowc+0x16>

08007444 <_realloc_r>:
 8007444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007448:	4680      	mov	r8, r0
 800744a:	4614      	mov	r4, r2
 800744c:	460e      	mov	r6, r1
 800744e:	b921      	cbnz	r1, 800745a <_realloc_r+0x16>
 8007450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007454:	4611      	mov	r1, r2
 8007456:	f7ff b969 	b.w	800672c <_malloc_r>
 800745a:	b92a      	cbnz	r2, 8007468 <_realloc_r+0x24>
 800745c:	f7ff f8f2 	bl	8006644 <_free_r>
 8007460:	4625      	mov	r5, r4
 8007462:	4628      	mov	r0, r5
 8007464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007468:	f000 f841 	bl	80074ee <_malloc_usable_size_r>
 800746c:	4284      	cmp	r4, r0
 800746e:	4607      	mov	r7, r0
 8007470:	d802      	bhi.n	8007478 <_realloc_r+0x34>
 8007472:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007476:	d812      	bhi.n	800749e <_realloc_r+0x5a>
 8007478:	4621      	mov	r1, r4
 800747a:	4640      	mov	r0, r8
 800747c:	f7ff f956 	bl	800672c <_malloc_r>
 8007480:	4605      	mov	r5, r0
 8007482:	2800      	cmp	r0, #0
 8007484:	d0ed      	beq.n	8007462 <_realloc_r+0x1e>
 8007486:	42bc      	cmp	r4, r7
 8007488:	4622      	mov	r2, r4
 800748a:	4631      	mov	r1, r6
 800748c:	bf28      	it	cs
 800748e:	463a      	movcs	r2, r7
 8007490:	f7ff ff84 	bl	800739c <memcpy>
 8007494:	4631      	mov	r1, r6
 8007496:	4640      	mov	r0, r8
 8007498:	f7ff f8d4 	bl	8006644 <_free_r>
 800749c:	e7e1      	b.n	8007462 <_realloc_r+0x1e>
 800749e:	4635      	mov	r5, r6
 80074a0:	e7df      	b.n	8007462 <_realloc_r+0x1e>

080074a2 <__ascii_wctomb>:
 80074a2:	b149      	cbz	r1, 80074b8 <__ascii_wctomb+0x16>
 80074a4:	2aff      	cmp	r2, #255	; 0xff
 80074a6:	bf85      	ittet	hi
 80074a8:	238a      	movhi	r3, #138	; 0x8a
 80074aa:	6003      	strhi	r3, [r0, #0]
 80074ac:	700a      	strbls	r2, [r1, #0]
 80074ae:	f04f 30ff 	movhi.w	r0, #4294967295
 80074b2:	bf98      	it	ls
 80074b4:	2001      	movls	r0, #1
 80074b6:	4770      	bx	lr
 80074b8:	4608      	mov	r0, r1
 80074ba:	4770      	bx	lr

080074bc <fiprintf>:
 80074bc:	b40e      	push	{r1, r2, r3}
 80074be:	b503      	push	{r0, r1, lr}
 80074c0:	4601      	mov	r1, r0
 80074c2:	ab03      	add	r3, sp, #12
 80074c4:	4805      	ldr	r0, [pc, #20]	; (80074dc <fiprintf+0x20>)
 80074c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	f000 f83f 	bl	8007550 <_vfiprintf_r>
 80074d2:	b002      	add	sp, #8
 80074d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80074d8:	b003      	add	sp, #12
 80074da:	4770      	bx	lr
 80074dc:	20000070 	.word	0x20000070

080074e0 <abort>:
 80074e0:	b508      	push	{r3, lr}
 80074e2:	2006      	movs	r0, #6
 80074e4:	f000 fa0c 	bl	8007900 <raise>
 80074e8:	2001      	movs	r0, #1
 80074ea:	f7fa fa49 	bl	8001980 <_exit>

080074ee <_malloc_usable_size_r>:
 80074ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074f2:	1f18      	subs	r0, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bfbc      	itt	lt
 80074f8:	580b      	ldrlt	r3, [r1, r0]
 80074fa:	18c0      	addlt	r0, r0, r3
 80074fc:	4770      	bx	lr

080074fe <__sfputc_r>:
 80074fe:	6893      	ldr	r3, [r2, #8]
 8007500:	3b01      	subs	r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	b410      	push	{r4}
 8007506:	6093      	str	r3, [r2, #8]
 8007508:	da08      	bge.n	800751c <__sfputc_r+0x1e>
 800750a:	6994      	ldr	r4, [r2, #24]
 800750c:	42a3      	cmp	r3, r4
 800750e:	db01      	blt.n	8007514 <__sfputc_r+0x16>
 8007510:	290a      	cmp	r1, #10
 8007512:	d103      	bne.n	800751c <__sfputc_r+0x1e>
 8007514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007518:	f000 b934 	b.w	8007784 <__swbuf_r>
 800751c:	6813      	ldr	r3, [r2, #0]
 800751e:	1c58      	adds	r0, r3, #1
 8007520:	6010      	str	r0, [r2, #0]
 8007522:	7019      	strb	r1, [r3, #0]
 8007524:	4608      	mov	r0, r1
 8007526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800752a:	4770      	bx	lr

0800752c <__sfputs_r>:
 800752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752e:	4606      	mov	r6, r0
 8007530:	460f      	mov	r7, r1
 8007532:	4614      	mov	r4, r2
 8007534:	18d5      	adds	r5, r2, r3
 8007536:	42ac      	cmp	r4, r5
 8007538:	d101      	bne.n	800753e <__sfputs_r+0x12>
 800753a:	2000      	movs	r0, #0
 800753c:	e007      	b.n	800754e <__sfputs_r+0x22>
 800753e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007542:	463a      	mov	r2, r7
 8007544:	4630      	mov	r0, r6
 8007546:	f7ff ffda 	bl	80074fe <__sfputc_r>
 800754a:	1c43      	adds	r3, r0, #1
 800754c:	d1f3      	bne.n	8007536 <__sfputs_r+0xa>
 800754e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007550 <_vfiprintf_r>:
 8007550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007554:	460d      	mov	r5, r1
 8007556:	b09d      	sub	sp, #116	; 0x74
 8007558:	4614      	mov	r4, r2
 800755a:	4698      	mov	r8, r3
 800755c:	4606      	mov	r6, r0
 800755e:	b118      	cbz	r0, 8007568 <_vfiprintf_r+0x18>
 8007560:	6a03      	ldr	r3, [r0, #32]
 8007562:	b90b      	cbnz	r3, 8007568 <_vfiprintf_r+0x18>
 8007564:	f7fe f8c4 	bl	80056f0 <__sinit>
 8007568:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800756a:	07d9      	lsls	r1, r3, #31
 800756c:	d405      	bmi.n	800757a <_vfiprintf_r+0x2a>
 800756e:	89ab      	ldrh	r3, [r5, #12]
 8007570:	059a      	lsls	r2, r3, #22
 8007572:	d402      	bmi.n	800757a <_vfiprintf_r+0x2a>
 8007574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007576:	f7fe f9e6 	bl	8005946 <__retarget_lock_acquire_recursive>
 800757a:	89ab      	ldrh	r3, [r5, #12]
 800757c:	071b      	lsls	r3, r3, #28
 800757e:	d501      	bpl.n	8007584 <_vfiprintf_r+0x34>
 8007580:	692b      	ldr	r3, [r5, #16]
 8007582:	b99b      	cbnz	r3, 80075ac <_vfiprintf_r+0x5c>
 8007584:	4629      	mov	r1, r5
 8007586:	4630      	mov	r0, r6
 8007588:	f000 f93a 	bl	8007800 <__swsetup_r>
 800758c:	b170      	cbz	r0, 80075ac <_vfiprintf_r+0x5c>
 800758e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007590:	07dc      	lsls	r4, r3, #31
 8007592:	d504      	bpl.n	800759e <_vfiprintf_r+0x4e>
 8007594:	f04f 30ff 	mov.w	r0, #4294967295
 8007598:	b01d      	add	sp, #116	; 0x74
 800759a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759e:	89ab      	ldrh	r3, [r5, #12]
 80075a0:	0598      	lsls	r0, r3, #22
 80075a2:	d4f7      	bmi.n	8007594 <_vfiprintf_r+0x44>
 80075a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075a6:	f7fe f9cf 	bl	8005948 <__retarget_lock_release_recursive>
 80075aa:	e7f3      	b.n	8007594 <_vfiprintf_r+0x44>
 80075ac:	2300      	movs	r3, #0
 80075ae:	9309      	str	r3, [sp, #36]	; 0x24
 80075b0:	2320      	movs	r3, #32
 80075b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80075ba:	2330      	movs	r3, #48	; 0x30
 80075bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007770 <_vfiprintf_r+0x220>
 80075c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075c4:	f04f 0901 	mov.w	r9, #1
 80075c8:	4623      	mov	r3, r4
 80075ca:	469a      	mov	sl, r3
 80075cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075d0:	b10a      	cbz	r2, 80075d6 <_vfiprintf_r+0x86>
 80075d2:	2a25      	cmp	r2, #37	; 0x25
 80075d4:	d1f9      	bne.n	80075ca <_vfiprintf_r+0x7a>
 80075d6:	ebba 0b04 	subs.w	fp, sl, r4
 80075da:	d00b      	beq.n	80075f4 <_vfiprintf_r+0xa4>
 80075dc:	465b      	mov	r3, fp
 80075de:	4622      	mov	r2, r4
 80075e0:	4629      	mov	r1, r5
 80075e2:	4630      	mov	r0, r6
 80075e4:	f7ff ffa2 	bl	800752c <__sfputs_r>
 80075e8:	3001      	adds	r0, #1
 80075ea:	f000 80a9 	beq.w	8007740 <_vfiprintf_r+0x1f0>
 80075ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075f0:	445a      	add	r2, fp
 80075f2:	9209      	str	r2, [sp, #36]	; 0x24
 80075f4:	f89a 3000 	ldrb.w	r3, [sl]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 80a1 	beq.w	8007740 <_vfiprintf_r+0x1f0>
 80075fe:	2300      	movs	r3, #0
 8007600:	f04f 32ff 	mov.w	r2, #4294967295
 8007604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007608:	f10a 0a01 	add.w	sl, sl, #1
 800760c:	9304      	str	r3, [sp, #16]
 800760e:	9307      	str	r3, [sp, #28]
 8007610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007614:	931a      	str	r3, [sp, #104]	; 0x68
 8007616:	4654      	mov	r4, sl
 8007618:	2205      	movs	r2, #5
 800761a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800761e:	4854      	ldr	r0, [pc, #336]	; (8007770 <_vfiprintf_r+0x220>)
 8007620:	f7f8 fdde 	bl	80001e0 <memchr>
 8007624:	9a04      	ldr	r2, [sp, #16]
 8007626:	b9d8      	cbnz	r0, 8007660 <_vfiprintf_r+0x110>
 8007628:	06d1      	lsls	r1, r2, #27
 800762a:	bf44      	itt	mi
 800762c:	2320      	movmi	r3, #32
 800762e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007632:	0713      	lsls	r3, r2, #28
 8007634:	bf44      	itt	mi
 8007636:	232b      	movmi	r3, #43	; 0x2b
 8007638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800763c:	f89a 3000 	ldrb.w	r3, [sl]
 8007640:	2b2a      	cmp	r3, #42	; 0x2a
 8007642:	d015      	beq.n	8007670 <_vfiprintf_r+0x120>
 8007644:	9a07      	ldr	r2, [sp, #28]
 8007646:	4654      	mov	r4, sl
 8007648:	2000      	movs	r0, #0
 800764a:	f04f 0c0a 	mov.w	ip, #10
 800764e:	4621      	mov	r1, r4
 8007650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007654:	3b30      	subs	r3, #48	; 0x30
 8007656:	2b09      	cmp	r3, #9
 8007658:	d94d      	bls.n	80076f6 <_vfiprintf_r+0x1a6>
 800765a:	b1b0      	cbz	r0, 800768a <_vfiprintf_r+0x13a>
 800765c:	9207      	str	r2, [sp, #28]
 800765e:	e014      	b.n	800768a <_vfiprintf_r+0x13a>
 8007660:	eba0 0308 	sub.w	r3, r0, r8
 8007664:	fa09 f303 	lsl.w	r3, r9, r3
 8007668:	4313      	orrs	r3, r2
 800766a:	9304      	str	r3, [sp, #16]
 800766c:	46a2      	mov	sl, r4
 800766e:	e7d2      	b.n	8007616 <_vfiprintf_r+0xc6>
 8007670:	9b03      	ldr	r3, [sp, #12]
 8007672:	1d19      	adds	r1, r3, #4
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	9103      	str	r1, [sp, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	bfbb      	ittet	lt
 800767c:	425b      	neglt	r3, r3
 800767e:	f042 0202 	orrlt.w	r2, r2, #2
 8007682:	9307      	strge	r3, [sp, #28]
 8007684:	9307      	strlt	r3, [sp, #28]
 8007686:	bfb8      	it	lt
 8007688:	9204      	strlt	r2, [sp, #16]
 800768a:	7823      	ldrb	r3, [r4, #0]
 800768c:	2b2e      	cmp	r3, #46	; 0x2e
 800768e:	d10c      	bne.n	80076aa <_vfiprintf_r+0x15a>
 8007690:	7863      	ldrb	r3, [r4, #1]
 8007692:	2b2a      	cmp	r3, #42	; 0x2a
 8007694:	d134      	bne.n	8007700 <_vfiprintf_r+0x1b0>
 8007696:	9b03      	ldr	r3, [sp, #12]
 8007698:	1d1a      	adds	r2, r3, #4
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	9203      	str	r2, [sp, #12]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bfb8      	it	lt
 80076a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80076a6:	3402      	adds	r4, #2
 80076a8:	9305      	str	r3, [sp, #20]
 80076aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007780 <_vfiprintf_r+0x230>
 80076ae:	7821      	ldrb	r1, [r4, #0]
 80076b0:	2203      	movs	r2, #3
 80076b2:	4650      	mov	r0, sl
 80076b4:	f7f8 fd94 	bl	80001e0 <memchr>
 80076b8:	b138      	cbz	r0, 80076ca <_vfiprintf_r+0x17a>
 80076ba:	9b04      	ldr	r3, [sp, #16]
 80076bc:	eba0 000a 	sub.w	r0, r0, sl
 80076c0:	2240      	movs	r2, #64	; 0x40
 80076c2:	4082      	lsls	r2, r0
 80076c4:	4313      	orrs	r3, r2
 80076c6:	3401      	adds	r4, #1
 80076c8:	9304      	str	r3, [sp, #16]
 80076ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ce:	4829      	ldr	r0, [pc, #164]	; (8007774 <_vfiprintf_r+0x224>)
 80076d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076d4:	2206      	movs	r2, #6
 80076d6:	f7f8 fd83 	bl	80001e0 <memchr>
 80076da:	2800      	cmp	r0, #0
 80076dc:	d03f      	beq.n	800775e <_vfiprintf_r+0x20e>
 80076de:	4b26      	ldr	r3, [pc, #152]	; (8007778 <_vfiprintf_r+0x228>)
 80076e0:	bb1b      	cbnz	r3, 800772a <_vfiprintf_r+0x1da>
 80076e2:	9b03      	ldr	r3, [sp, #12]
 80076e4:	3307      	adds	r3, #7
 80076e6:	f023 0307 	bic.w	r3, r3, #7
 80076ea:	3308      	adds	r3, #8
 80076ec:	9303      	str	r3, [sp, #12]
 80076ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f0:	443b      	add	r3, r7
 80076f2:	9309      	str	r3, [sp, #36]	; 0x24
 80076f4:	e768      	b.n	80075c8 <_vfiprintf_r+0x78>
 80076f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80076fa:	460c      	mov	r4, r1
 80076fc:	2001      	movs	r0, #1
 80076fe:	e7a6      	b.n	800764e <_vfiprintf_r+0xfe>
 8007700:	2300      	movs	r3, #0
 8007702:	3401      	adds	r4, #1
 8007704:	9305      	str	r3, [sp, #20]
 8007706:	4619      	mov	r1, r3
 8007708:	f04f 0c0a 	mov.w	ip, #10
 800770c:	4620      	mov	r0, r4
 800770e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007712:	3a30      	subs	r2, #48	; 0x30
 8007714:	2a09      	cmp	r2, #9
 8007716:	d903      	bls.n	8007720 <_vfiprintf_r+0x1d0>
 8007718:	2b00      	cmp	r3, #0
 800771a:	d0c6      	beq.n	80076aa <_vfiprintf_r+0x15a>
 800771c:	9105      	str	r1, [sp, #20]
 800771e:	e7c4      	b.n	80076aa <_vfiprintf_r+0x15a>
 8007720:	fb0c 2101 	mla	r1, ip, r1, r2
 8007724:	4604      	mov	r4, r0
 8007726:	2301      	movs	r3, #1
 8007728:	e7f0      	b.n	800770c <_vfiprintf_r+0x1bc>
 800772a:	ab03      	add	r3, sp, #12
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	462a      	mov	r2, r5
 8007730:	4b12      	ldr	r3, [pc, #72]	; (800777c <_vfiprintf_r+0x22c>)
 8007732:	a904      	add	r1, sp, #16
 8007734:	4630      	mov	r0, r6
 8007736:	f7fd fb89 	bl	8004e4c <_printf_float>
 800773a:	4607      	mov	r7, r0
 800773c:	1c78      	adds	r0, r7, #1
 800773e:	d1d6      	bne.n	80076ee <_vfiprintf_r+0x19e>
 8007740:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007742:	07d9      	lsls	r1, r3, #31
 8007744:	d405      	bmi.n	8007752 <_vfiprintf_r+0x202>
 8007746:	89ab      	ldrh	r3, [r5, #12]
 8007748:	059a      	lsls	r2, r3, #22
 800774a:	d402      	bmi.n	8007752 <_vfiprintf_r+0x202>
 800774c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800774e:	f7fe f8fb 	bl	8005948 <__retarget_lock_release_recursive>
 8007752:	89ab      	ldrh	r3, [r5, #12]
 8007754:	065b      	lsls	r3, r3, #25
 8007756:	f53f af1d 	bmi.w	8007594 <_vfiprintf_r+0x44>
 800775a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800775c:	e71c      	b.n	8007598 <_vfiprintf_r+0x48>
 800775e:	ab03      	add	r3, sp, #12
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	462a      	mov	r2, r5
 8007764:	4b05      	ldr	r3, [pc, #20]	; (800777c <_vfiprintf_r+0x22c>)
 8007766:	a904      	add	r1, sp, #16
 8007768:	4630      	mov	r0, r6
 800776a:	f7fd fe13 	bl	8005394 <_printf_i>
 800776e:	e7e4      	b.n	800773a <_vfiprintf_r+0x1ea>
 8007770:	08008ba4 	.word	0x08008ba4
 8007774:	08008bae 	.word	0x08008bae
 8007778:	08004e4d 	.word	0x08004e4d
 800777c:	0800752d 	.word	0x0800752d
 8007780:	08008baa 	.word	0x08008baa

08007784 <__swbuf_r>:
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	460e      	mov	r6, r1
 8007788:	4614      	mov	r4, r2
 800778a:	4605      	mov	r5, r0
 800778c:	b118      	cbz	r0, 8007796 <__swbuf_r+0x12>
 800778e:	6a03      	ldr	r3, [r0, #32]
 8007790:	b90b      	cbnz	r3, 8007796 <__swbuf_r+0x12>
 8007792:	f7fd ffad 	bl	80056f0 <__sinit>
 8007796:	69a3      	ldr	r3, [r4, #24]
 8007798:	60a3      	str	r3, [r4, #8]
 800779a:	89a3      	ldrh	r3, [r4, #12]
 800779c:	071a      	lsls	r2, r3, #28
 800779e:	d525      	bpl.n	80077ec <__swbuf_r+0x68>
 80077a0:	6923      	ldr	r3, [r4, #16]
 80077a2:	b31b      	cbz	r3, 80077ec <__swbuf_r+0x68>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	6922      	ldr	r2, [r4, #16]
 80077a8:	1a98      	subs	r0, r3, r2
 80077aa:	6963      	ldr	r3, [r4, #20]
 80077ac:	b2f6      	uxtb	r6, r6
 80077ae:	4283      	cmp	r3, r0
 80077b0:	4637      	mov	r7, r6
 80077b2:	dc04      	bgt.n	80077be <__swbuf_r+0x3a>
 80077b4:	4621      	mov	r1, r4
 80077b6:	4628      	mov	r0, r5
 80077b8:	f7ff fd9e 	bl	80072f8 <_fflush_r>
 80077bc:	b9e0      	cbnz	r0, 80077f8 <__swbuf_r+0x74>
 80077be:	68a3      	ldr	r3, [r4, #8]
 80077c0:	3b01      	subs	r3, #1
 80077c2:	60a3      	str	r3, [r4, #8]
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	6022      	str	r2, [r4, #0]
 80077ca:	701e      	strb	r6, [r3, #0]
 80077cc:	6962      	ldr	r2, [r4, #20]
 80077ce:	1c43      	adds	r3, r0, #1
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d004      	beq.n	80077de <__swbuf_r+0x5a>
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	07db      	lsls	r3, r3, #31
 80077d8:	d506      	bpl.n	80077e8 <__swbuf_r+0x64>
 80077da:	2e0a      	cmp	r6, #10
 80077dc:	d104      	bne.n	80077e8 <__swbuf_r+0x64>
 80077de:	4621      	mov	r1, r4
 80077e0:	4628      	mov	r0, r5
 80077e2:	f7ff fd89 	bl	80072f8 <_fflush_r>
 80077e6:	b938      	cbnz	r0, 80077f8 <__swbuf_r+0x74>
 80077e8:	4638      	mov	r0, r7
 80077ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ec:	4621      	mov	r1, r4
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 f806 	bl	8007800 <__swsetup_r>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d0d5      	beq.n	80077a4 <__swbuf_r+0x20>
 80077f8:	f04f 37ff 	mov.w	r7, #4294967295
 80077fc:	e7f4      	b.n	80077e8 <__swbuf_r+0x64>
	...

08007800 <__swsetup_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4b2a      	ldr	r3, [pc, #168]	; (80078ac <__swsetup_r+0xac>)
 8007804:	4605      	mov	r5, r0
 8007806:	6818      	ldr	r0, [r3, #0]
 8007808:	460c      	mov	r4, r1
 800780a:	b118      	cbz	r0, 8007814 <__swsetup_r+0x14>
 800780c:	6a03      	ldr	r3, [r0, #32]
 800780e:	b90b      	cbnz	r3, 8007814 <__swsetup_r+0x14>
 8007810:	f7fd ff6e 	bl	80056f0 <__sinit>
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800781a:	0718      	lsls	r0, r3, #28
 800781c:	d422      	bmi.n	8007864 <__swsetup_r+0x64>
 800781e:	06d9      	lsls	r1, r3, #27
 8007820:	d407      	bmi.n	8007832 <__swsetup_r+0x32>
 8007822:	2309      	movs	r3, #9
 8007824:	602b      	str	r3, [r5, #0]
 8007826:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800782a:	81a3      	strh	r3, [r4, #12]
 800782c:	f04f 30ff 	mov.w	r0, #4294967295
 8007830:	e034      	b.n	800789c <__swsetup_r+0x9c>
 8007832:	0758      	lsls	r0, r3, #29
 8007834:	d512      	bpl.n	800785c <__swsetup_r+0x5c>
 8007836:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007838:	b141      	cbz	r1, 800784c <__swsetup_r+0x4c>
 800783a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800783e:	4299      	cmp	r1, r3
 8007840:	d002      	beq.n	8007848 <__swsetup_r+0x48>
 8007842:	4628      	mov	r0, r5
 8007844:	f7fe fefe 	bl	8006644 <_free_r>
 8007848:	2300      	movs	r3, #0
 800784a:	6363      	str	r3, [r4, #52]	; 0x34
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007852:	81a3      	strh	r3, [r4, #12]
 8007854:	2300      	movs	r3, #0
 8007856:	6063      	str	r3, [r4, #4]
 8007858:	6923      	ldr	r3, [r4, #16]
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	f043 0308 	orr.w	r3, r3, #8
 8007862:	81a3      	strh	r3, [r4, #12]
 8007864:	6923      	ldr	r3, [r4, #16]
 8007866:	b94b      	cbnz	r3, 800787c <__swsetup_r+0x7c>
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800786e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007872:	d003      	beq.n	800787c <__swsetup_r+0x7c>
 8007874:	4621      	mov	r1, r4
 8007876:	4628      	mov	r0, r5
 8007878:	f000 f884 	bl	8007984 <__smakebuf_r>
 800787c:	89a0      	ldrh	r0, [r4, #12]
 800787e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007882:	f010 0301 	ands.w	r3, r0, #1
 8007886:	d00a      	beq.n	800789e <__swsetup_r+0x9e>
 8007888:	2300      	movs	r3, #0
 800788a:	60a3      	str	r3, [r4, #8]
 800788c:	6963      	ldr	r3, [r4, #20]
 800788e:	425b      	negs	r3, r3
 8007890:	61a3      	str	r3, [r4, #24]
 8007892:	6923      	ldr	r3, [r4, #16]
 8007894:	b943      	cbnz	r3, 80078a8 <__swsetup_r+0xa8>
 8007896:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800789a:	d1c4      	bne.n	8007826 <__swsetup_r+0x26>
 800789c:	bd38      	pop	{r3, r4, r5, pc}
 800789e:	0781      	lsls	r1, r0, #30
 80078a0:	bf58      	it	pl
 80078a2:	6963      	ldrpl	r3, [r4, #20]
 80078a4:	60a3      	str	r3, [r4, #8]
 80078a6:	e7f4      	b.n	8007892 <__swsetup_r+0x92>
 80078a8:	2000      	movs	r0, #0
 80078aa:	e7f7      	b.n	800789c <__swsetup_r+0x9c>
 80078ac:	20000070 	.word	0x20000070

080078b0 <_raise_r>:
 80078b0:	291f      	cmp	r1, #31
 80078b2:	b538      	push	{r3, r4, r5, lr}
 80078b4:	4604      	mov	r4, r0
 80078b6:	460d      	mov	r5, r1
 80078b8:	d904      	bls.n	80078c4 <_raise_r+0x14>
 80078ba:	2316      	movs	r3, #22
 80078bc:	6003      	str	r3, [r0, #0]
 80078be:	f04f 30ff 	mov.w	r0, #4294967295
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80078c6:	b112      	cbz	r2, 80078ce <_raise_r+0x1e>
 80078c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078cc:	b94b      	cbnz	r3, 80078e2 <_raise_r+0x32>
 80078ce:	4620      	mov	r0, r4
 80078d0:	f000 f830 	bl	8007934 <_getpid_r>
 80078d4:	462a      	mov	r2, r5
 80078d6:	4601      	mov	r1, r0
 80078d8:	4620      	mov	r0, r4
 80078da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078de:	f000 b817 	b.w	8007910 <_kill_r>
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d00a      	beq.n	80078fc <_raise_r+0x4c>
 80078e6:	1c59      	adds	r1, r3, #1
 80078e8:	d103      	bne.n	80078f2 <_raise_r+0x42>
 80078ea:	2316      	movs	r3, #22
 80078ec:	6003      	str	r3, [r0, #0]
 80078ee:	2001      	movs	r0, #1
 80078f0:	e7e7      	b.n	80078c2 <_raise_r+0x12>
 80078f2:	2400      	movs	r4, #0
 80078f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078f8:	4628      	mov	r0, r5
 80078fa:	4798      	blx	r3
 80078fc:	2000      	movs	r0, #0
 80078fe:	e7e0      	b.n	80078c2 <_raise_r+0x12>

08007900 <raise>:
 8007900:	4b02      	ldr	r3, [pc, #8]	; (800790c <raise+0xc>)
 8007902:	4601      	mov	r1, r0
 8007904:	6818      	ldr	r0, [r3, #0]
 8007906:	f7ff bfd3 	b.w	80078b0 <_raise_r>
 800790a:	bf00      	nop
 800790c:	20000070 	.word	0x20000070

08007910 <_kill_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	4d07      	ldr	r5, [pc, #28]	; (8007930 <_kill_r+0x20>)
 8007914:	2300      	movs	r3, #0
 8007916:	4604      	mov	r4, r0
 8007918:	4608      	mov	r0, r1
 800791a:	4611      	mov	r1, r2
 800791c:	602b      	str	r3, [r5, #0]
 800791e:	f7fa f81f 	bl	8001960 <_kill>
 8007922:	1c43      	adds	r3, r0, #1
 8007924:	d102      	bne.n	800792c <_kill_r+0x1c>
 8007926:	682b      	ldr	r3, [r5, #0]
 8007928:	b103      	cbz	r3, 800792c <_kill_r+0x1c>
 800792a:	6023      	str	r3, [r4, #0]
 800792c:	bd38      	pop	{r3, r4, r5, pc}
 800792e:	bf00      	nop
 8007930:	20000930 	.word	0x20000930

08007934 <_getpid_r>:
 8007934:	f7fa b80c 	b.w	8001950 <_getpid>

08007938 <__swhatbuf_r>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	460c      	mov	r4, r1
 800793c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007940:	2900      	cmp	r1, #0
 8007942:	b096      	sub	sp, #88	; 0x58
 8007944:	4615      	mov	r5, r2
 8007946:	461e      	mov	r6, r3
 8007948:	da0d      	bge.n	8007966 <__swhatbuf_r+0x2e>
 800794a:	89a3      	ldrh	r3, [r4, #12]
 800794c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007950:	f04f 0100 	mov.w	r1, #0
 8007954:	bf0c      	ite	eq
 8007956:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800795a:	2340      	movne	r3, #64	; 0x40
 800795c:	2000      	movs	r0, #0
 800795e:	6031      	str	r1, [r6, #0]
 8007960:	602b      	str	r3, [r5, #0]
 8007962:	b016      	add	sp, #88	; 0x58
 8007964:	bd70      	pop	{r4, r5, r6, pc}
 8007966:	466a      	mov	r2, sp
 8007968:	f000 f848 	bl	80079fc <_fstat_r>
 800796c:	2800      	cmp	r0, #0
 800796e:	dbec      	blt.n	800794a <__swhatbuf_r+0x12>
 8007970:	9901      	ldr	r1, [sp, #4]
 8007972:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007976:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800797a:	4259      	negs	r1, r3
 800797c:	4159      	adcs	r1, r3
 800797e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007982:	e7eb      	b.n	800795c <__swhatbuf_r+0x24>

08007984 <__smakebuf_r>:
 8007984:	898b      	ldrh	r3, [r1, #12]
 8007986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007988:	079d      	lsls	r5, r3, #30
 800798a:	4606      	mov	r6, r0
 800798c:	460c      	mov	r4, r1
 800798e:	d507      	bpl.n	80079a0 <__smakebuf_r+0x1c>
 8007990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	6123      	str	r3, [r4, #16]
 8007998:	2301      	movs	r3, #1
 800799a:	6163      	str	r3, [r4, #20]
 800799c:	b002      	add	sp, #8
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	ab01      	add	r3, sp, #4
 80079a2:	466a      	mov	r2, sp
 80079a4:	f7ff ffc8 	bl	8007938 <__swhatbuf_r>
 80079a8:	9900      	ldr	r1, [sp, #0]
 80079aa:	4605      	mov	r5, r0
 80079ac:	4630      	mov	r0, r6
 80079ae:	f7fe febd 	bl	800672c <_malloc_r>
 80079b2:	b948      	cbnz	r0, 80079c8 <__smakebuf_r+0x44>
 80079b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079b8:	059a      	lsls	r2, r3, #22
 80079ba:	d4ef      	bmi.n	800799c <__smakebuf_r+0x18>
 80079bc:	f023 0303 	bic.w	r3, r3, #3
 80079c0:	f043 0302 	orr.w	r3, r3, #2
 80079c4:	81a3      	strh	r3, [r4, #12]
 80079c6:	e7e3      	b.n	8007990 <__smakebuf_r+0xc>
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	6020      	str	r0, [r4, #0]
 80079cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d0:	81a3      	strh	r3, [r4, #12]
 80079d2:	9b00      	ldr	r3, [sp, #0]
 80079d4:	6163      	str	r3, [r4, #20]
 80079d6:	9b01      	ldr	r3, [sp, #4]
 80079d8:	6120      	str	r0, [r4, #16]
 80079da:	b15b      	cbz	r3, 80079f4 <__smakebuf_r+0x70>
 80079dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079e0:	4630      	mov	r0, r6
 80079e2:	f000 f81d 	bl	8007a20 <_isatty_r>
 80079e6:	b128      	cbz	r0, 80079f4 <__smakebuf_r+0x70>
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	f023 0303 	bic.w	r3, r3, #3
 80079ee:	f043 0301 	orr.w	r3, r3, #1
 80079f2:	81a3      	strh	r3, [r4, #12]
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	431d      	orrs	r5, r3
 80079f8:	81a5      	strh	r5, [r4, #12]
 80079fa:	e7cf      	b.n	800799c <__smakebuf_r+0x18>

080079fc <_fstat_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4d07      	ldr	r5, [pc, #28]	; (8007a1c <_fstat_r+0x20>)
 8007a00:	2300      	movs	r3, #0
 8007a02:	4604      	mov	r4, r0
 8007a04:	4608      	mov	r0, r1
 8007a06:	4611      	mov	r1, r2
 8007a08:	602b      	str	r3, [r5, #0]
 8007a0a:	f7fa f808 	bl	8001a1e <_fstat>
 8007a0e:	1c43      	adds	r3, r0, #1
 8007a10:	d102      	bne.n	8007a18 <_fstat_r+0x1c>
 8007a12:	682b      	ldr	r3, [r5, #0]
 8007a14:	b103      	cbz	r3, 8007a18 <_fstat_r+0x1c>
 8007a16:	6023      	str	r3, [r4, #0]
 8007a18:	bd38      	pop	{r3, r4, r5, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000930 	.word	0x20000930

08007a20 <_isatty_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4d06      	ldr	r5, [pc, #24]	; (8007a3c <_isatty_r+0x1c>)
 8007a24:	2300      	movs	r3, #0
 8007a26:	4604      	mov	r4, r0
 8007a28:	4608      	mov	r0, r1
 8007a2a:	602b      	str	r3, [r5, #0]
 8007a2c:	f7fa f807 	bl	8001a3e <_isatty>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_isatty_r+0x1a>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_isatty_r+0x1a>
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	20000930 	.word	0x20000930

08007a40 <pow>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	ed2d 8b02 	vpush	{d8}
 8007a46:	eeb0 8a40 	vmov.f32	s16, s0
 8007a4a:	eef0 8a60 	vmov.f32	s17, s1
 8007a4e:	ec55 4b11 	vmov	r4, r5, d1
 8007a52:	f000 f8b9 	bl	8007bc8 <__ieee754_pow>
 8007a56:	4622      	mov	r2, r4
 8007a58:	462b      	mov	r3, r5
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	ec57 6b10 	vmov	r6, r7, d0
 8007a62:	f7f9 f86b 	bl	8000b3c <__aeabi_dcmpun>
 8007a66:	2800      	cmp	r0, #0
 8007a68:	d13b      	bne.n	8007ae2 <pow+0xa2>
 8007a6a:	ec51 0b18 	vmov	r0, r1, d8
 8007a6e:	2200      	movs	r2, #0
 8007a70:	2300      	movs	r3, #0
 8007a72:	f7f9 f831 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a76:	b1b8      	cbz	r0, 8007aa8 <pow+0x68>
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	4629      	mov	r1, r5
 8007a80:	f7f9 f82a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d146      	bne.n	8007b16 <pow+0xd6>
 8007a88:	ec45 4b10 	vmov	d0, r4, r5
 8007a8c:	f000 f848 	bl	8007b20 <finite>
 8007a90:	b338      	cbz	r0, 8007ae2 <pow+0xa2>
 8007a92:	2200      	movs	r2, #0
 8007a94:	2300      	movs	r3, #0
 8007a96:	4620      	mov	r0, r4
 8007a98:	4629      	mov	r1, r5
 8007a9a:	f7f9 f827 	bl	8000aec <__aeabi_dcmplt>
 8007a9e:	b300      	cbz	r0, 8007ae2 <pow+0xa2>
 8007aa0:	f7fd ff26 	bl	80058f0 <__errno>
 8007aa4:	2322      	movs	r3, #34	; 0x22
 8007aa6:	e01b      	b.n	8007ae0 <pow+0xa0>
 8007aa8:	ec47 6b10 	vmov	d0, r6, r7
 8007aac:	f000 f838 	bl	8007b20 <finite>
 8007ab0:	b9e0      	cbnz	r0, 8007aec <pow+0xac>
 8007ab2:	eeb0 0a48 	vmov.f32	s0, s16
 8007ab6:	eef0 0a68 	vmov.f32	s1, s17
 8007aba:	f000 f831 	bl	8007b20 <finite>
 8007abe:	b1a8      	cbz	r0, 8007aec <pow+0xac>
 8007ac0:	ec45 4b10 	vmov	d0, r4, r5
 8007ac4:	f000 f82c 	bl	8007b20 <finite>
 8007ac8:	b180      	cbz	r0, 8007aec <pow+0xac>
 8007aca:	4632      	mov	r2, r6
 8007acc:	463b      	mov	r3, r7
 8007ace:	4630      	mov	r0, r6
 8007ad0:	4639      	mov	r1, r7
 8007ad2:	f7f9 f833 	bl	8000b3c <__aeabi_dcmpun>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d0e2      	beq.n	8007aa0 <pow+0x60>
 8007ada:	f7fd ff09 	bl	80058f0 <__errno>
 8007ade:	2321      	movs	r3, #33	; 0x21
 8007ae0:	6003      	str	r3, [r0, #0]
 8007ae2:	ecbd 8b02 	vpop	{d8}
 8007ae6:	ec47 6b10 	vmov	d0, r6, r7
 8007aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aec:	2200      	movs	r2, #0
 8007aee:	2300      	movs	r3, #0
 8007af0:	4630      	mov	r0, r6
 8007af2:	4639      	mov	r1, r7
 8007af4:	f7f8 fff0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	d0f2      	beq.n	8007ae2 <pow+0xa2>
 8007afc:	eeb0 0a48 	vmov.f32	s0, s16
 8007b00:	eef0 0a68 	vmov.f32	s1, s17
 8007b04:	f000 f80c 	bl	8007b20 <finite>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d0ea      	beq.n	8007ae2 <pow+0xa2>
 8007b0c:	ec45 4b10 	vmov	d0, r4, r5
 8007b10:	f000 f806 	bl	8007b20 <finite>
 8007b14:	e7c3      	b.n	8007a9e <pow+0x5e>
 8007b16:	4f01      	ldr	r7, [pc, #4]	; (8007b1c <pow+0xdc>)
 8007b18:	2600      	movs	r6, #0
 8007b1a:	e7e2      	b.n	8007ae2 <pow+0xa2>
 8007b1c:	3ff00000 	.word	0x3ff00000

08007b20 <finite>:
 8007b20:	b082      	sub	sp, #8
 8007b22:	ed8d 0b00 	vstr	d0, [sp]
 8007b26:	9801      	ldr	r0, [sp, #4]
 8007b28:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007b2c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007b30:	0fc0      	lsrs	r0, r0, #31
 8007b32:	b002      	add	sp, #8
 8007b34:	4770      	bx	lr
	...

08007b38 <round>:
 8007b38:	ec53 2b10 	vmov	r2, r3, d0
 8007b3c:	b570      	push	{r4, r5, r6, lr}
 8007b3e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8007b42:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8007b46:	2813      	cmp	r0, #19
 8007b48:	ee10 5a10 	vmov	r5, s0
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	dc18      	bgt.n	8007b82 <round+0x4a>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	da09      	bge.n	8007b68 <round+0x30>
 8007b54:	3001      	adds	r0, #1
 8007b56:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8007b5a:	d103      	bne.n	8007b64 <round+0x2c>
 8007b5c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007b60:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007b64:	2300      	movs	r3, #0
 8007b66:	e02a      	b.n	8007bbe <round+0x86>
 8007b68:	4c16      	ldr	r4, [pc, #88]	; (8007bc4 <round+0x8c>)
 8007b6a:	4104      	asrs	r4, r0
 8007b6c:	ea03 0604 	and.w	r6, r3, r4
 8007b70:	4316      	orrs	r6, r2
 8007b72:	d011      	beq.n	8007b98 <round+0x60>
 8007b74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b78:	4103      	asrs	r3, r0
 8007b7a:	440b      	add	r3, r1
 8007b7c:	ea23 0104 	bic.w	r1, r3, r4
 8007b80:	e7f0      	b.n	8007b64 <round+0x2c>
 8007b82:	2833      	cmp	r0, #51	; 0x33
 8007b84:	dd0b      	ble.n	8007b9e <round+0x66>
 8007b86:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007b8a:	d105      	bne.n	8007b98 <round+0x60>
 8007b8c:	ee10 0a10 	vmov	r0, s0
 8007b90:	f7f8 fb84 	bl	800029c <__adddf3>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	ec43 2b10 	vmov	d0, r2, r3
 8007b9c:	bd70      	pop	{r4, r5, r6, pc}
 8007b9e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8007ba2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ba6:	40f4      	lsrs	r4, r6
 8007ba8:	4214      	tst	r4, r2
 8007baa:	d0f5      	beq.n	8007b98 <round+0x60>
 8007bac:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	4083      	lsls	r3, r0
 8007bb4:	195b      	adds	r3, r3, r5
 8007bb6:	bf28      	it	cs
 8007bb8:	3101      	addcs	r1, #1
 8007bba:	ea23 0304 	bic.w	r3, r3, r4
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	e7e9      	b.n	8007b98 <round+0x60>
 8007bc4:	000fffff 	.word	0x000fffff

08007bc8 <__ieee754_pow>:
 8007bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bcc:	ed2d 8b06 	vpush	{d8-d10}
 8007bd0:	b089      	sub	sp, #36	; 0x24
 8007bd2:	ed8d 1b00 	vstr	d1, [sp]
 8007bd6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007bda:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007bde:	ea58 0102 	orrs.w	r1, r8, r2
 8007be2:	ec57 6b10 	vmov	r6, r7, d0
 8007be6:	d115      	bne.n	8007c14 <__ieee754_pow+0x4c>
 8007be8:	19b3      	adds	r3, r6, r6
 8007bea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007bee:	4152      	adcs	r2, r2
 8007bf0:	4299      	cmp	r1, r3
 8007bf2:	4b89      	ldr	r3, [pc, #548]	; (8007e18 <__ieee754_pow+0x250>)
 8007bf4:	4193      	sbcs	r3, r2
 8007bf6:	f080 84d1 	bcs.w	800859c <__ieee754_pow+0x9d4>
 8007bfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bfe:	4630      	mov	r0, r6
 8007c00:	4639      	mov	r1, r7
 8007c02:	f7f8 fb4b 	bl	800029c <__adddf3>
 8007c06:	ec41 0b10 	vmov	d0, r0, r1
 8007c0a:	b009      	add	sp, #36	; 0x24
 8007c0c:	ecbd 8b06 	vpop	{d8-d10}
 8007c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c14:	4b81      	ldr	r3, [pc, #516]	; (8007e1c <__ieee754_pow+0x254>)
 8007c16:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007c1a:	429c      	cmp	r4, r3
 8007c1c:	ee10 aa10 	vmov	sl, s0
 8007c20:	463d      	mov	r5, r7
 8007c22:	dc06      	bgt.n	8007c32 <__ieee754_pow+0x6a>
 8007c24:	d101      	bne.n	8007c2a <__ieee754_pow+0x62>
 8007c26:	2e00      	cmp	r6, #0
 8007c28:	d1e7      	bne.n	8007bfa <__ieee754_pow+0x32>
 8007c2a:	4598      	cmp	r8, r3
 8007c2c:	dc01      	bgt.n	8007c32 <__ieee754_pow+0x6a>
 8007c2e:	d10f      	bne.n	8007c50 <__ieee754_pow+0x88>
 8007c30:	b172      	cbz	r2, 8007c50 <__ieee754_pow+0x88>
 8007c32:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007c36:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007c3a:	ea55 050a 	orrs.w	r5, r5, sl
 8007c3e:	d1dc      	bne.n	8007bfa <__ieee754_pow+0x32>
 8007c40:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007c44:	18db      	adds	r3, r3, r3
 8007c46:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007c4a:	4152      	adcs	r2, r2
 8007c4c:	429d      	cmp	r5, r3
 8007c4e:	e7d0      	b.n	8007bf2 <__ieee754_pow+0x2a>
 8007c50:	2d00      	cmp	r5, #0
 8007c52:	da3b      	bge.n	8007ccc <__ieee754_pow+0x104>
 8007c54:	4b72      	ldr	r3, [pc, #456]	; (8007e20 <__ieee754_pow+0x258>)
 8007c56:	4598      	cmp	r8, r3
 8007c58:	dc51      	bgt.n	8007cfe <__ieee754_pow+0x136>
 8007c5a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007c5e:	4598      	cmp	r8, r3
 8007c60:	f340 84ab 	ble.w	80085ba <__ieee754_pow+0x9f2>
 8007c64:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007c68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007c6c:	2b14      	cmp	r3, #20
 8007c6e:	dd0f      	ble.n	8007c90 <__ieee754_pow+0xc8>
 8007c70:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007c74:	fa22 f103 	lsr.w	r1, r2, r3
 8007c78:	fa01 f303 	lsl.w	r3, r1, r3
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	f040 849c 	bne.w	80085ba <__ieee754_pow+0x9f2>
 8007c82:	f001 0101 	and.w	r1, r1, #1
 8007c86:	f1c1 0302 	rsb	r3, r1, #2
 8007c8a:	9304      	str	r3, [sp, #16]
 8007c8c:	b182      	cbz	r2, 8007cb0 <__ieee754_pow+0xe8>
 8007c8e:	e05f      	b.n	8007d50 <__ieee754_pow+0x188>
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	d15b      	bne.n	8007d4c <__ieee754_pow+0x184>
 8007c94:	f1c3 0314 	rsb	r3, r3, #20
 8007c98:	fa48 f103 	asr.w	r1, r8, r3
 8007c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca0:	4543      	cmp	r3, r8
 8007ca2:	f040 8487 	bne.w	80085b4 <__ieee754_pow+0x9ec>
 8007ca6:	f001 0101 	and.w	r1, r1, #1
 8007caa:	f1c1 0302 	rsb	r3, r1, #2
 8007cae:	9304      	str	r3, [sp, #16]
 8007cb0:	4b5c      	ldr	r3, [pc, #368]	; (8007e24 <__ieee754_pow+0x25c>)
 8007cb2:	4598      	cmp	r8, r3
 8007cb4:	d132      	bne.n	8007d1c <__ieee754_pow+0x154>
 8007cb6:	f1b9 0f00 	cmp.w	r9, #0
 8007cba:	f280 8477 	bge.w	80085ac <__ieee754_pow+0x9e4>
 8007cbe:	4959      	ldr	r1, [pc, #356]	; (8007e24 <__ieee754_pow+0x25c>)
 8007cc0:	4632      	mov	r2, r6
 8007cc2:	463b      	mov	r3, r7
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	f7f8 fdc9 	bl	800085c <__aeabi_ddiv>
 8007cca:	e79c      	b.n	8007c06 <__ieee754_pow+0x3e>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	2a00      	cmp	r2, #0
 8007cd2:	d13d      	bne.n	8007d50 <__ieee754_pow+0x188>
 8007cd4:	4b51      	ldr	r3, [pc, #324]	; (8007e1c <__ieee754_pow+0x254>)
 8007cd6:	4598      	cmp	r8, r3
 8007cd8:	d1ea      	bne.n	8007cb0 <__ieee754_pow+0xe8>
 8007cda:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007cde:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007ce2:	ea53 030a 	orrs.w	r3, r3, sl
 8007ce6:	f000 8459 	beq.w	800859c <__ieee754_pow+0x9d4>
 8007cea:	4b4f      	ldr	r3, [pc, #316]	; (8007e28 <__ieee754_pow+0x260>)
 8007cec:	429c      	cmp	r4, r3
 8007cee:	dd08      	ble.n	8007d02 <__ieee754_pow+0x13a>
 8007cf0:	f1b9 0f00 	cmp.w	r9, #0
 8007cf4:	f2c0 8456 	blt.w	80085a4 <__ieee754_pow+0x9dc>
 8007cf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cfc:	e783      	b.n	8007c06 <__ieee754_pow+0x3e>
 8007cfe:	2302      	movs	r3, #2
 8007d00:	e7e5      	b.n	8007cce <__ieee754_pow+0x106>
 8007d02:	f1b9 0f00 	cmp.w	r9, #0
 8007d06:	f04f 0000 	mov.w	r0, #0
 8007d0a:	f04f 0100 	mov.w	r1, #0
 8007d0e:	f6bf af7a 	bge.w	8007c06 <__ieee754_pow+0x3e>
 8007d12:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007d16:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007d1a:	e774      	b.n	8007c06 <__ieee754_pow+0x3e>
 8007d1c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007d20:	d106      	bne.n	8007d30 <__ieee754_pow+0x168>
 8007d22:	4632      	mov	r2, r6
 8007d24:	463b      	mov	r3, r7
 8007d26:	4630      	mov	r0, r6
 8007d28:	4639      	mov	r1, r7
 8007d2a:	f7f8 fc6d 	bl	8000608 <__aeabi_dmul>
 8007d2e:	e76a      	b.n	8007c06 <__ieee754_pow+0x3e>
 8007d30:	4b3e      	ldr	r3, [pc, #248]	; (8007e2c <__ieee754_pow+0x264>)
 8007d32:	4599      	cmp	r9, r3
 8007d34:	d10c      	bne.n	8007d50 <__ieee754_pow+0x188>
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	db0a      	blt.n	8007d50 <__ieee754_pow+0x188>
 8007d3a:	ec47 6b10 	vmov	d0, r6, r7
 8007d3e:	b009      	add	sp, #36	; 0x24
 8007d40:	ecbd 8b06 	vpop	{d8-d10}
 8007d44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	f000 bd20 	b.w	800878c <__ieee754_sqrt>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9304      	str	r3, [sp, #16]
 8007d50:	ec47 6b10 	vmov	d0, r6, r7
 8007d54:	f000 fc62 	bl	800861c <fabs>
 8007d58:	ec51 0b10 	vmov	r0, r1, d0
 8007d5c:	f1ba 0f00 	cmp.w	sl, #0
 8007d60:	d129      	bne.n	8007db6 <__ieee754_pow+0x1ee>
 8007d62:	b124      	cbz	r4, 8007d6e <__ieee754_pow+0x1a6>
 8007d64:	4b2f      	ldr	r3, [pc, #188]	; (8007e24 <__ieee754_pow+0x25c>)
 8007d66:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d123      	bne.n	8007db6 <__ieee754_pow+0x1ee>
 8007d6e:	f1b9 0f00 	cmp.w	r9, #0
 8007d72:	da05      	bge.n	8007d80 <__ieee754_pow+0x1b8>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	2000      	movs	r0, #0
 8007d7a:	492a      	ldr	r1, [pc, #168]	; (8007e24 <__ieee754_pow+0x25c>)
 8007d7c:	f7f8 fd6e 	bl	800085c <__aeabi_ddiv>
 8007d80:	2d00      	cmp	r5, #0
 8007d82:	f6bf af40 	bge.w	8007c06 <__ieee754_pow+0x3e>
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007d8c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007d90:	431c      	orrs	r4, r3
 8007d92:	d108      	bne.n	8007da6 <__ieee754_pow+0x1de>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4610      	mov	r0, r2
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	f7f8 fa7c 	bl	8000298 <__aeabi_dsub>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	e78f      	b.n	8007cc6 <__ieee754_pow+0xfe>
 8007da6:	9b04      	ldr	r3, [sp, #16]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	f47f af2c 	bne.w	8007c06 <__ieee754_pow+0x3e>
 8007dae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007db2:	4619      	mov	r1, r3
 8007db4:	e727      	b.n	8007c06 <__ieee754_pow+0x3e>
 8007db6:	0feb      	lsrs	r3, r5, #31
 8007db8:	3b01      	subs	r3, #1
 8007dba:	9306      	str	r3, [sp, #24]
 8007dbc:	9a06      	ldr	r2, [sp, #24]
 8007dbe:	9b04      	ldr	r3, [sp, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	d102      	bne.n	8007dca <__ieee754_pow+0x202>
 8007dc4:	4632      	mov	r2, r6
 8007dc6:	463b      	mov	r3, r7
 8007dc8:	e7e6      	b.n	8007d98 <__ieee754_pow+0x1d0>
 8007dca:	4b19      	ldr	r3, [pc, #100]	; (8007e30 <__ieee754_pow+0x268>)
 8007dcc:	4598      	cmp	r8, r3
 8007dce:	f340 80fb 	ble.w	8007fc8 <__ieee754_pow+0x400>
 8007dd2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007dd6:	4598      	cmp	r8, r3
 8007dd8:	4b13      	ldr	r3, [pc, #76]	; (8007e28 <__ieee754_pow+0x260>)
 8007dda:	dd0c      	ble.n	8007df6 <__ieee754_pow+0x22e>
 8007ddc:	429c      	cmp	r4, r3
 8007dde:	dc0f      	bgt.n	8007e00 <__ieee754_pow+0x238>
 8007de0:	f1b9 0f00 	cmp.w	r9, #0
 8007de4:	da0f      	bge.n	8007e06 <__ieee754_pow+0x23e>
 8007de6:	2000      	movs	r0, #0
 8007de8:	b009      	add	sp, #36	; 0x24
 8007dea:	ecbd 8b06 	vpop	{d8-d10}
 8007dee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df2:	f000 bcc2 	b.w	800877a <__math_oflow>
 8007df6:	429c      	cmp	r4, r3
 8007df8:	dbf2      	blt.n	8007de0 <__ieee754_pow+0x218>
 8007dfa:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <__ieee754_pow+0x25c>)
 8007dfc:	429c      	cmp	r4, r3
 8007dfe:	dd19      	ble.n	8007e34 <__ieee754_pow+0x26c>
 8007e00:	f1b9 0f00 	cmp.w	r9, #0
 8007e04:	dcef      	bgt.n	8007de6 <__ieee754_pow+0x21e>
 8007e06:	2000      	movs	r0, #0
 8007e08:	b009      	add	sp, #36	; 0x24
 8007e0a:	ecbd 8b06 	vpop	{d8-d10}
 8007e0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e12:	f000 bca9 	b.w	8008768 <__math_uflow>
 8007e16:	bf00      	nop
 8007e18:	fff00000 	.word	0xfff00000
 8007e1c:	7ff00000 	.word	0x7ff00000
 8007e20:	433fffff 	.word	0x433fffff
 8007e24:	3ff00000 	.word	0x3ff00000
 8007e28:	3fefffff 	.word	0x3fefffff
 8007e2c:	3fe00000 	.word	0x3fe00000
 8007e30:	41e00000 	.word	0x41e00000
 8007e34:	4b60      	ldr	r3, [pc, #384]	; (8007fb8 <__ieee754_pow+0x3f0>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	f7f8 fa2e 	bl	8000298 <__aeabi_dsub>
 8007e3c:	a354      	add	r3, pc, #336	; (adr r3, 8007f90 <__ieee754_pow+0x3c8>)
 8007e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e42:	4604      	mov	r4, r0
 8007e44:	460d      	mov	r5, r1
 8007e46:	f7f8 fbdf 	bl	8000608 <__aeabi_dmul>
 8007e4a:	a353      	add	r3, pc, #332	; (adr r3, 8007f98 <__ieee754_pow+0x3d0>)
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	4606      	mov	r6, r0
 8007e52:	460f      	mov	r7, r1
 8007e54:	4620      	mov	r0, r4
 8007e56:	4629      	mov	r1, r5
 8007e58:	f7f8 fbd6 	bl	8000608 <__aeabi_dmul>
 8007e5c:	4b57      	ldr	r3, [pc, #348]	; (8007fbc <__ieee754_pow+0x3f4>)
 8007e5e:	4682      	mov	sl, r0
 8007e60:	468b      	mov	fp, r1
 8007e62:	2200      	movs	r2, #0
 8007e64:	4620      	mov	r0, r4
 8007e66:	4629      	mov	r1, r5
 8007e68:	f7f8 fbce 	bl	8000608 <__aeabi_dmul>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	a14b      	add	r1, pc, #300	; (adr r1, 8007fa0 <__ieee754_pow+0x3d8>)
 8007e72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e76:	f7f8 fa0f 	bl	8000298 <__aeabi_dsub>
 8007e7a:	4622      	mov	r2, r4
 8007e7c:	462b      	mov	r3, r5
 8007e7e:	f7f8 fbc3 	bl	8000608 <__aeabi_dmul>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	2000      	movs	r0, #0
 8007e88:	494d      	ldr	r1, [pc, #308]	; (8007fc0 <__ieee754_pow+0x3f8>)
 8007e8a:	f7f8 fa05 	bl	8000298 <__aeabi_dsub>
 8007e8e:	4622      	mov	r2, r4
 8007e90:	4680      	mov	r8, r0
 8007e92:	4689      	mov	r9, r1
 8007e94:	462b      	mov	r3, r5
 8007e96:	4620      	mov	r0, r4
 8007e98:	4629      	mov	r1, r5
 8007e9a:	f7f8 fbb5 	bl	8000608 <__aeabi_dmul>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4640      	mov	r0, r8
 8007ea4:	4649      	mov	r1, r9
 8007ea6:	f7f8 fbaf 	bl	8000608 <__aeabi_dmul>
 8007eaa:	a33f      	add	r3, pc, #252	; (adr r3, 8007fa8 <__ieee754_pow+0x3e0>)
 8007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb0:	f7f8 fbaa 	bl	8000608 <__aeabi_dmul>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4650      	mov	r0, sl
 8007eba:	4659      	mov	r1, fp
 8007ebc:	f7f8 f9ec 	bl	8000298 <__aeabi_dsub>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4680      	mov	r8, r0
 8007ec6:	4689      	mov	r9, r1
 8007ec8:	4630      	mov	r0, r6
 8007eca:	4639      	mov	r1, r7
 8007ecc:	f7f8 f9e6 	bl	800029c <__adddf3>
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	4632      	mov	r2, r6
 8007ed4:	463b      	mov	r3, r7
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	460d      	mov	r5, r1
 8007eda:	f7f8 f9dd 	bl	8000298 <__aeabi_dsub>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4640      	mov	r0, r8
 8007ee4:	4649      	mov	r1, r9
 8007ee6:	f7f8 f9d7 	bl	8000298 <__aeabi_dsub>
 8007eea:	9b04      	ldr	r3, [sp, #16]
 8007eec:	9a06      	ldr	r2, [sp, #24]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	4682      	mov	sl, r0
 8007ef4:	468b      	mov	fp, r1
 8007ef6:	f040 81e7 	bne.w	80082c8 <__ieee754_pow+0x700>
 8007efa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007fb0 <__ieee754_pow+0x3e8>
 8007efe:	eeb0 8a47 	vmov.f32	s16, s14
 8007f02:	eef0 8a67 	vmov.f32	s17, s15
 8007f06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007f0a:	2600      	movs	r6, #0
 8007f0c:	4632      	mov	r2, r6
 8007f0e:	463b      	mov	r3, r7
 8007f10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f14:	f7f8 f9c0 	bl	8000298 <__aeabi_dsub>
 8007f18:	4622      	mov	r2, r4
 8007f1a:	462b      	mov	r3, r5
 8007f1c:	f7f8 fb74 	bl	8000608 <__aeabi_dmul>
 8007f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f24:	4680      	mov	r8, r0
 8007f26:	4689      	mov	r9, r1
 8007f28:	4650      	mov	r0, sl
 8007f2a:	4659      	mov	r1, fp
 8007f2c:	f7f8 fb6c 	bl	8000608 <__aeabi_dmul>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4640      	mov	r0, r8
 8007f36:	4649      	mov	r1, r9
 8007f38:	f7f8 f9b0 	bl	800029c <__adddf3>
 8007f3c:	4632      	mov	r2, r6
 8007f3e:	463b      	mov	r3, r7
 8007f40:	4680      	mov	r8, r0
 8007f42:	4689      	mov	r9, r1
 8007f44:	4620      	mov	r0, r4
 8007f46:	4629      	mov	r1, r5
 8007f48:	f7f8 fb5e 	bl	8000608 <__aeabi_dmul>
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4604      	mov	r4, r0
 8007f50:	460d      	mov	r5, r1
 8007f52:	4602      	mov	r2, r0
 8007f54:	4649      	mov	r1, r9
 8007f56:	4640      	mov	r0, r8
 8007f58:	f7f8 f9a0 	bl	800029c <__adddf3>
 8007f5c:	4b19      	ldr	r3, [pc, #100]	; (8007fc4 <__ieee754_pow+0x3fc>)
 8007f5e:	4299      	cmp	r1, r3
 8007f60:	ec45 4b19 	vmov	d9, r4, r5
 8007f64:	4606      	mov	r6, r0
 8007f66:	460f      	mov	r7, r1
 8007f68:	468b      	mov	fp, r1
 8007f6a:	f340 82f0 	ble.w	800854e <__ieee754_pow+0x986>
 8007f6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007f72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007f76:	4303      	orrs	r3, r0
 8007f78:	f000 81e4 	beq.w	8008344 <__ieee754_pow+0x77c>
 8007f7c:	ec51 0b18 	vmov	r0, r1, d8
 8007f80:	2200      	movs	r2, #0
 8007f82:	2300      	movs	r3, #0
 8007f84:	f7f8 fdb2 	bl	8000aec <__aeabi_dcmplt>
 8007f88:	3800      	subs	r0, #0
 8007f8a:	bf18      	it	ne
 8007f8c:	2001      	movne	r0, #1
 8007f8e:	e72b      	b.n	8007de8 <__ieee754_pow+0x220>
 8007f90:	60000000 	.word	0x60000000
 8007f94:	3ff71547 	.word	0x3ff71547
 8007f98:	f85ddf44 	.word	0xf85ddf44
 8007f9c:	3e54ae0b 	.word	0x3e54ae0b
 8007fa0:	55555555 	.word	0x55555555
 8007fa4:	3fd55555 	.word	0x3fd55555
 8007fa8:	652b82fe 	.word	0x652b82fe
 8007fac:	3ff71547 	.word	0x3ff71547
 8007fb0:	00000000 	.word	0x00000000
 8007fb4:	bff00000 	.word	0xbff00000
 8007fb8:	3ff00000 	.word	0x3ff00000
 8007fbc:	3fd00000 	.word	0x3fd00000
 8007fc0:	3fe00000 	.word	0x3fe00000
 8007fc4:	408fffff 	.word	0x408fffff
 8007fc8:	4bd5      	ldr	r3, [pc, #852]	; (8008320 <__ieee754_pow+0x758>)
 8007fca:	402b      	ands	r3, r5
 8007fcc:	2200      	movs	r2, #0
 8007fce:	b92b      	cbnz	r3, 8007fdc <__ieee754_pow+0x414>
 8007fd0:	4bd4      	ldr	r3, [pc, #848]	; (8008324 <__ieee754_pow+0x75c>)
 8007fd2:	f7f8 fb19 	bl	8000608 <__aeabi_dmul>
 8007fd6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007fda:	460c      	mov	r4, r1
 8007fdc:	1523      	asrs	r3, r4, #20
 8007fde:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007fe2:	4413      	add	r3, r2
 8007fe4:	9305      	str	r3, [sp, #20]
 8007fe6:	4bd0      	ldr	r3, [pc, #832]	; (8008328 <__ieee754_pow+0x760>)
 8007fe8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007fec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007ff0:	429c      	cmp	r4, r3
 8007ff2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007ff6:	dd08      	ble.n	800800a <__ieee754_pow+0x442>
 8007ff8:	4bcc      	ldr	r3, [pc, #816]	; (800832c <__ieee754_pow+0x764>)
 8007ffa:	429c      	cmp	r4, r3
 8007ffc:	f340 8162 	ble.w	80082c4 <__ieee754_pow+0x6fc>
 8008000:	9b05      	ldr	r3, [sp, #20]
 8008002:	3301      	adds	r3, #1
 8008004:	9305      	str	r3, [sp, #20]
 8008006:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800800a:	2400      	movs	r4, #0
 800800c:	00e3      	lsls	r3, r4, #3
 800800e:	9307      	str	r3, [sp, #28]
 8008010:	4bc7      	ldr	r3, [pc, #796]	; (8008330 <__ieee754_pow+0x768>)
 8008012:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008016:	ed93 7b00 	vldr	d7, [r3]
 800801a:	4629      	mov	r1, r5
 800801c:	ec53 2b17 	vmov	r2, r3, d7
 8008020:	eeb0 9a47 	vmov.f32	s18, s14
 8008024:	eef0 9a67 	vmov.f32	s19, s15
 8008028:	4682      	mov	sl, r0
 800802a:	f7f8 f935 	bl	8000298 <__aeabi_dsub>
 800802e:	4652      	mov	r2, sl
 8008030:	4606      	mov	r6, r0
 8008032:	460f      	mov	r7, r1
 8008034:	462b      	mov	r3, r5
 8008036:	ec51 0b19 	vmov	r0, r1, d9
 800803a:	f7f8 f92f 	bl	800029c <__adddf3>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	2000      	movs	r0, #0
 8008044:	49bb      	ldr	r1, [pc, #748]	; (8008334 <__ieee754_pow+0x76c>)
 8008046:	f7f8 fc09 	bl	800085c <__aeabi_ddiv>
 800804a:	ec41 0b1a 	vmov	d10, r0, r1
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4630      	mov	r0, r6
 8008054:	4639      	mov	r1, r7
 8008056:	f7f8 fad7 	bl	8000608 <__aeabi_dmul>
 800805a:	2300      	movs	r3, #0
 800805c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008060:	9302      	str	r3, [sp, #8]
 8008062:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008066:	46ab      	mov	fp, r5
 8008068:	106d      	asrs	r5, r5, #1
 800806a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800806e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008072:	ec41 0b18 	vmov	d8, r0, r1
 8008076:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800807a:	2200      	movs	r2, #0
 800807c:	4640      	mov	r0, r8
 800807e:	4649      	mov	r1, r9
 8008080:	4614      	mov	r4, r2
 8008082:	461d      	mov	r5, r3
 8008084:	f7f8 fac0 	bl	8000608 <__aeabi_dmul>
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	4630      	mov	r0, r6
 800808e:	4639      	mov	r1, r7
 8008090:	f7f8 f902 	bl	8000298 <__aeabi_dsub>
 8008094:	ec53 2b19 	vmov	r2, r3, d9
 8008098:	4606      	mov	r6, r0
 800809a:	460f      	mov	r7, r1
 800809c:	4620      	mov	r0, r4
 800809e:	4629      	mov	r1, r5
 80080a0:	f7f8 f8fa 	bl	8000298 <__aeabi_dsub>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4650      	mov	r0, sl
 80080aa:	4659      	mov	r1, fp
 80080ac:	f7f8 f8f4 	bl	8000298 <__aeabi_dsub>
 80080b0:	4642      	mov	r2, r8
 80080b2:	464b      	mov	r3, r9
 80080b4:	f7f8 faa8 	bl	8000608 <__aeabi_dmul>
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	4630      	mov	r0, r6
 80080be:	4639      	mov	r1, r7
 80080c0:	f7f8 f8ea 	bl	8000298 <__aeabi_dsub>
 80080c4:	ec53 2b1a 	vmov	r2, r3, d10
 80080c8:	f7f8 fa9e 	bl	8000608 <__aeabi_dmul>
 80080cc:	ec53 2b18 	vmov	r2, r3, d8
 80080d0:	ec41 0b19 	vmov	d9, r0, r1
 80080d4:	ec51 0b18 	vmov	r0, r1, d8
 80080d8:	f7f8 fa96 	bl	8000608 <__aeabi_dmul>
 80080dc:	a37c      	add	r3, pc, #496	; (adr r3, 80082d0 <__ieee754_pow+0x708>)
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	4604      	mov	r4, r0
 80080e4:	460d      	mov	r5, r1
 80080e6:	f7f8 fa8f 	bl	8000608 <__aeabi_dmul>
 80080ea:	a37b      	add	r3, pc, #492	; (adr r3, 80082d8 <__ieee754_pow+0x710>)
 80080ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f0:	f7f8 f8d4 	bl	800029c <__adddf3>
 80080f4:	4622      	mov	r2, r4
 80080f6:	462b      	mov	r3, r5
 80080f8:	f7f8 fa86 	bl	8000608 <__aeabi_dmul>
 80080fc:	a378      	add	r3, pc, #480	; (adr r3, 80082e0 <__ieee754_pow+0x718>)
 80080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008102:	f7f8 f8cb 	bl	800029c <__adddf3>
 8008106:	4622      	mov	r2, r4
 8008108:	462b      	mov	r3, r5
 800810a:	f7f8 fa7d 	bl	8000608 <__aeabi_dmul>
 800810e:	a376      	add	r3, pc, #472	; (adr r3, 80082e8 <__ieee754_pow+0x720>)
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	f7f8 f8c2 	bl	800029c <__adddf3>
 8008118:	4622      	mov	r2, r4
 800811a:	462b      	mov	r3, r5
 800811c:	f7f8 fa74 	bl	8000608 <__aeabi_dmul>
 8008120:	a373      	add	r3, pc, #460	; (adr r3, 80082f0 <__ieee754_pow+0x728>)
 8008122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008126:	f7f8 f8b9 	bl	800029c <__adddf3>
 800812a:	4622      	mov	r2, r4
 800812c:	462b      	mov	r3, r5
 800812e:	f7f8 fa6b 	bl	8000608 <__aeabi_dmul>
 8008132:	a371      	add	r3, pc, #452	; (adr r3, 80082f8 <__ieee754_pow+0x730>)
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	f7f8 f8b0 	bl	800029c <__adddf3>
 800813c:	4622      	mov	r2, r4
 800813e:	4606      	mov	r6, r0
 8008140:	460f      	mov	r7, r1
 8008142:	462b      	mov	r3, r5
 8008144:	4620      	mov	r0, r4
 8008146:	4629      	mov	r1, r5
 8008148:	f7f8 fa5e 	bl	8000608 <__aeabi_dmul>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	4630      	mov	r0, r6
 8008152:	4639      	mov	r1, r7
 8008154:	f7f8 fa58 	bl	8000608 <__aeabi_dmul>
 8008158:	4642      	mov	r2, r8
 800815a:	4604      	mov	r4, r0
 800815c:	460d      	mov	r5, r1
 800815e:	464b      	mov	r3, r9
 8008160:	ec51 0b18 	vmov	r0, r1, d8
 8008164:	f7f8 f89a 	bl	800029c <__adddf3>
 8008168:	ec53 2b19 	vmov	r2, r3, d9
 800816c:	f7f8 fa4c 	bl	8000608 <__aeabi_dmul>
 8008170:	4622      	mov	r2, r4
 8008172:	462b      	mov	r3, r5
 8008174:	f7f8 f892 	bl	800029c <__adddf3>
 8008178:	4642      	mov	r2, r8
 800817a:	4682      	mov	sl, r0
 800817c:	468b      	mov	fp, r1
 800817e:	464b      	mov	r3, r9
 8008180:	4640      	mov	r0, r8
 8008182:	4649      	mov	r1, r9
 8008184:	f7f8 fa40 	bl	8000608 <__aeabi_dmul>
 8008188:	4b6b      	ldr	r3, [pc, #428]	; (8008338 <__ieee754_pow+0x770>)
 800818a:	2200      	movs	r2, #0
 800818c:	4606      	mov	r6, r0
 800818e:	460f      	mov	r7, r1
 8008190:	f7f8 f884 	bl	800029c <__adddf3>
 8008194:	4652      	mov	r2, sl
 8008196:	465b      	mov	r3, fp
 8008198:	f7f8 f880 	bl	800029c <__adddf3>
 800819c:	2000      	movs	r0, #0
 800819e:	4604      	mov	r4, r0
 80081a0:	460d      	mov	r5, r1
 80081a2:	4602      	mov	r2, r0
 80081a4:	460b      	mov	r3, r1
 80081a6:	4640      	mov	r0, r8
 80081a8:	4649      	mov	r1, r9
 80081aa:	f7f8 fa2d 	bl	8000608 <__aeabi_dmul>
 80081ae:	4b62      	ldr	r3, [pc, #392]	; (8008338 <__ieee754_pow+0x770>)
 80081b0:	4680      	mov	r8, r0
 80081b2:	4689      	mov	r9, r1
 80081b4:	2200      	movs	r2, #0
 80081b6:	4620      	mov	r0, r4
 80081b8:	4629      	mov	r1, r5
 80081ba:	f7f8 f86d 	bl	8000298 <__aeabi_dsub>
 80081be:	4632      	mov	r2, r6
 80081c0:	463b      	mov	r3, r7
 80081c2:	f7f8 f869 	bl	8000298 <__aeabi_dsub>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	4650      	mov	r0, sl
 80081cc:	4659      	mov	r1, fp
 80081ce:	f7f8 f863 	bl	8000298 <__aeabi_dsub>
 80081d2:	ec53 2b18 	vmov	r2, r3, d8
 80081d6:	f7f8 fa17 	bl	8000608 <__aeabi_dmul>
 80081da:	4622      	mov	r2, r4
 80081dc:	4606      	mov	r6, r0
 80081de:	460f      	mov	r7, r1
 80081e0:	462b      	mov	r3, r5
 80081e2:	ec51 0b19 	vmov	r0, r1, d9
 80081e6:	f7f8 fa0f 	bl	8000608 <__aeabi_dmul>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4630      	mov	r0, r6
 80081f0:	4639      	mov	r1, r7
 80081f2:	f7f8 f853 	bl	800029c <__adddf3>
 80081f6:	4606      	mov	r6, r0
 80081f8:	460f      	mov	r7, r1
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4640      	mov	r0, r8
 8008200:	4649      	mov	r1, r9
 8008202:	f7f8 f84b 	bl	800029c <__adddf3>
 8008206:	a33e      	add	r3, pc, #248	; (adr r3, 8008300 <__ieee754_pow+0x738>)
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	2000      	movs	r0, #0
 800820e:	4604      	mov	r4, r0
 8008210:	460d      	mov	r5, r1
 8008212:	f7f8 f9f9 	bl	8000608 <__aeabi_dmul>
 8008216:	4642      	mov	r2, r8
 8008218:	ec41 0b18 	vmov	d8, r0, r1
 800821c:	464b      	mov	r3, r9
 800821e:	4620      	mov	r0, r4
 8008220:	4629      	mov	r1, r5
 8008222:	f7f8 f839 	bl	8000298 <__aeabi_dsub>
 8008226:	4602      	mov	r2, r0
 8008228:	460b      	mov	r3, r1
 800822a:	4630      	mov	r0, r6
 800822c:	4639      	mov	r1, r7
 800822e:	f7f8 f833 	bl	8000298 <__aeabi_dsub>
 8008232:	a335      	add	r3, pc, #212	; (adr r3, 8008308 <__ieee754_pow+0x740>)
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	f7f8 f9e6 	bl	8000608 <__aeabi_dmul>
 800823c:	a334      	add	r3, pc, #208	; (adr r3, 8008310 <__ieee754_pow+0x748>)
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	4606      	mov	r6, r0
 8008244:	460f      	mov	r7, r1
 8008246:	4620      	mov	r0, r4
 8008248:	4629      	mov	r1, r5
 800824a:	f7f8 f9dd 	bl	8000608 <__aeabi_dmul>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	4630      	mov	r0, r6
 8008254:	4639      	mov	r1, r7
 8008256:	f7f8 f821 	bl	800029c <__adddf3>
 800825a:	9a07      	ldr	r2, [sp, #28]
 800825c:	4b37      	ldr	r3, [pc, #220]	; (800833c <__ieee754_pow+0x774>)
 800825e:	4413      	add	r3, r2
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	f7f8 f81a 	bl	800029c <__adddf3>
 8008268:	4682      	mov	sl, r0
 800826a:	9805      	ldr	r0, [sp, #20]
 800826c:	468b      	mov	fp, r1
 800826e:	f7f8 f961 	bl	8000534 <__aeabi_i2d>
 8008272:	9a07      	ldr	r2, [sp, #28]
 8008274:	4b32      	ldr	r3, [pc, #200]	; (8008340 <__ieee754_pow+0x778>)
 8008276:	4413      	add	r3, r2
 8008278:	e9d3 8900 	ldrd	r8, r9, [r3]
 800827c:	4606      	mov	r6, r0
 800827e:	460f      	mov	r7, r1
 8008280:	4652      	mov	r2, sl
 8008282:	465b      	mov	r3, fp
 8008284:	ec51 0b18 	vmov	r0, r1, d8
 8008288:	f7f8 f808 	bl	800029c <__adddf3>
 800828c:	4642      	mov	r2, r8
 800828e:	464b      	mov	r3, r9
 8008290:	f7f8 f804 	bl	800029c <__adddf3>
 8008294:	4632      	mov	r2, r6
 8008296:	463b      	mov	r3, r7
 8008298:	f7f8 f800 	bl	800029c <__adddf3>
 800829c:	2000      	movs	r0, #0
 800829e:	4632      	mov	r2, r6
 80082a0:	463b      	mov	r3, r7
 80082a2:	4604      	mov	r4, r0
 80082a4:	460d      	mov	r5, r1
 80082a6:	f7f7 fff7 	bl	8000298 <__aeabi_dsub>
 80082aa:	4642      	mov	r2, r8
 80082ac:	464b      	mov	r3, r9
 80082ae:	f7f7 fff3 	bl	8000298 <__aeabi_dsub>
 80082b2:	ec53 2b18 	vmov	r2, r3, d8
 80082b6:	f7f7 ffef 	bl	8000298 <__aeabi_dsub>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4650      	mov	r0, sl
 80082c0:	4659      	mov	r1, fp
 80082c2:	e610      	b.n	8007ee6 <__ieee754_pow+0x31e>
 80082c4:	2401      	movs	r4, #1
 80082c6:	e6a1      	b.n	800800c <__ieee754_pow+0x444>
 80082c8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008318 <__ieee754_pow+0x750>
 80082cc:	e617      	b.n	8007efe <__ieee754_pow+0x336>
 80082ce:	bf00      	nop
 80082d0:	4a454eef 	.word	0x4a454eef
 80082d4:	3fca7e28 	.word	0x3fca7e28
 80082d8:	93c9db65 	.word	0x93c9db65
 80082dc:	3fcd864a 	.word	0x3fcd864a
 80082e0:	a91d4101 	.word	0xa91d4101
 80082e4:	3fd17460 	.word	0x3fd17460
 80082e8:	518f264d 	.word	0x518f264d
 80082ec:	3fd55555 	.word	0x3fd55555
 80082f0:	db6fabff 	.word	0xdb6fabff
 80082f4:	3fdb6db6 	.word	0x3fdb6db6
 80082f8:	33333303 	.word	0x33333303
 80082fc:	3fe33333 	.word	0x3fe33333
 8008300:	e0000000 	.word	0xe0000000
 8008304:	3feec709 	.word	0x3feec709
 8008308:	dc3a03fd 	.word	0xdc3a03fd
 800830c:	3feec709 	.word	0x3feec709
 8008310:	145b01f5 	.word	0x145b01f5
 8008314:	be3e2fe0 	.word	0xbe3e2fe0
 8008318:	00000000 	.word	0x00000000
 800831c:	3ff00000 	.word	0x3ff00000
 8008320:	7ff00000 	.word	0x7ff00000
 8008324:	43400000 	.word	0x43400000
 8008328:	0003988e 	.word	0x0003988e
 800832c:	000bb679 	.word	0x000bb679
 8008330:	08008d00 	.word	0x08008d00
 8008334:	3ff00000 	.word	0x3ff00000
 8008338:	40080000 	.word	0x40080000
 800833c:	08008d20 	.word	0x08008d20
 8008340:	08008d10 	.word	0x08008d10
 8008344:	a3b3      	add	r3, pc, #716	; (adr r3, 8008614 <__ieee754_pow+0xa4c>)
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	4640      	mov	r0, r8
 800834c:	4649      	mov	r1, r9
 800834e:	f7f7 ffa5 	bl	800029c <__adddf3>
 8008352:	4622      	mov	r2, r4
 8008354:	ec41 0b1a 	vmov	d10, r0, r1
 8008358:	462b      	mov	r3, r5
 800835a:	4630      	mov	r0, r6
 800835c:	4639      	mov	r1, r7
 800835e:	f7f7 ff9b 	bl	8000298 <__aeabi_dsub>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	ec51 0b1a 	vmov	r0, r1, d10
 800836a:	f7f8 fbdd 	bl	8000b28 <__aeabi_dcmpgt>
 800836e:	2800      	cmp	r0, #0
 8008370:	f47f ae04 	bne.w	8007f7c <__ieee754_pow+0x3b4>
 8008374:	4aa2      	ldr	r2, [pc, #648]	; (8008600 <__ieee754_pow+0xa38>)
 8008376:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800837a:	4293      	cmp	r3, r2
 800837c:	f340 8107 	ble.w	800858e <__ieee754_pow+0x9c6>
 8008380:	151b      	asrs	r3, r3, #20
 8008382:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008386:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800838a:	fa4a fa03 	asr.w	sl, sl, r3
 800838e:	44da      	add	sl, fp
 8008390:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008394:	489b      	ldr	r0, [pc, #620]	; (8008604 <__ieee754_pow+0xa3c>)
 8008396:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800839a:	4108      	asrs	r0, r1
 800839c:	ea00 030a 	and.w	r3, r0, sl
 80083a0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80083a4:	f1c1 0114 	rsb	r1, r1, #20
 80083a8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80083ac:	fa4a fa01 	asr.w	sl, sl, r1
 80083b0:	f1bb 0f00 	cmp.w	fp, #0
 80083b4:	f04f 0200 	mov.w	r2, #0
 80083b8:	4620      	mov	r0, r4
 80083ba:	4629      	mov	r1, r5
 80083bc:	bfb8      	it	lt
 80083be:	f1ca 0a00 	rsblt	sl, sl, #0
 80083c2:	f7f7 ff69 	bl	8000298 <__aeabi_dsub>
 80083c6:	ec41 0b19 	vmov	d9, r0, r1
 80083ca:	4642      	mov	r2, r8
 80083cc:	464b      	mov	r3, r9
 80083ce:	ec51 0b19 	vmov	r0, r1, d9
 80083d2:	f7f7 ff63 	bl	800029c <__adddf3>
 80083d6:	a37a      	add	r3, pc, #488	; (adr r3, 80085c0 <__ieee754_pow+0x9f8>)
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	2000      	movs	r0, #0
 80083de:	4604      	mov	r4, r0
 80083e0:	460d      	mov	r5, r1
 80083e2:	f7f8 f911 	bl	8000608 <__aeabi_dmul>
 80083e6:	ec53 2b19 	vmov	r2, r3, d9
 80083ea:	4606      	mov	r6, r0
 80083ec:	460f      	mov	r7, r1
 80083ee:	4620      	mov	r0, r4
 80083f0:	4629      	mov	r1, r5
 80083f2:	f7f7 ff51 	bl	8000298 <__aeabi_dsub>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4640      	mov	r0, r8
 80083fc:	4649      	mov	r1, r9
 80083fe:	f7f7 ff4b 	bl	8000298 <__aeabi_dsub>
 8008402:	a371      	add	r3, pc, #452	; (adr r3, 80085c8 <__ieee754_pow+0xa00>)
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	f7f8 f8fe 	bl	8000608 <__aeabi_dmul>
 800840c:	a370      	add	r3, pc, #448	; (adr r3, 80085d0 <__ieee754_pow+0xa08>)
 800840e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008412:	4680      	mov	r8, r0
 8008414:	4689      	mov	r9, r1
 8008416:	4620      	mov	r0, r4
 8008418:	4629      	mov	r1, r5
 800841a:	f7f8 f8f5 	bl	8000608 <__aeabi_dmul>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4640      	mov	r0, r8
 8008424:	4649      	mov	r1, r9
 8008426:	f7f7 ff39 	bl	800029c <__adddf3>
 800842a:	4604      	mov	r4, r0
 800842c:	460d      	mov	r5, r1
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	4630      	mov	r0, r6
 8008434:	4639      	mov	r1, r7
 8008436:	f7f7 ff31 	bl	800029c <__adddf3>
 800843a:	4632      	mov	r2, r6
 800843c:	463b      	mov	r3, r7
 800843e:	4680      	mov	r8, r0
 8008440:	4689      	mov	r9, r1
 8008442:	f7f7 ff29 	bl	8000298 <__aeabi_dsub>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	4620      	mov	r0, r4
 800844c:	4629      	mov	r1, r5
 800844e:	f7f7 ff23 	bl	8000298 <__aeabi_dsub>
 8008452:	4642      	mov	r2, r8
 8008454:	4606      	mov	r6, r0
 8008456:	460f      	mov	r7, r1
 8008458:	464b      	mov	r3, r9
 800845a:	4640      	mov	r0, r8
 800845c:	4649      	mov	r1, r9
 800845e:	f7f8 f8d3 	bl	8000608 <__aeabi_dmul>
 8008462:	a35d      	add	r3, pc, #372	; (adr r3, 80085d8 <__ieee754_pow+0xa10>)
 8008464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008468:	4604      	mov	r4, r0
 800846a:	460d      	mov	r5, r1
 800846c:	f7f8 f8cc 	bl	8000608 <__aeabi_dmul>
 8008470:	a35b      	add	r3, pc, #364	; (adr r3, 80085e0 <__ieee754_pow+0xa18>)
 8008472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008476:	f7f7 ff0f 	bl	8000298 <__aeabi_dsub>
 800847a:	4622      	mov	r2, r4
 800847c:	462b      	mov	r3, r5
 800847e:	f7f8 f8c3 	bl	8000608 <__aeabi_dmul>
 8008482:	a359      	add	r3, pc, #356	; (adr r3, 80085e8 <__ieee754_pow+0xa20>)
 8008484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008488:	f7f7 ff08 	bl	800029c <__adddf3>
 800848c:	4622      	mov	r2, r4
 800848e:	462b      	mov	r3, r5
 8008490:	f7f8 f8ba 	bl	8000608 <__aeabi_dmul>
 8008494:	a356      	add	r3, pc, #344	; (adr r3, 80085f0 <__ieee754_pow+0xa28>)
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f7f7 fefd 	bl	8000298 <__aeabi_dsub>
 800849e:	4622      	mov	r2, r4
 80084a0:	462b      	mov	r3, r5
 80084a2:	f7f8 f8b1 	bl	8000608 <__aeabi_dmul>
 80084a6:	a354      	add	r3, pc, #336	; (adr r3, 80085f8 <__ieee754_pow+0xa30>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	f7f7 fef6 	bl	800029c <__adddf3>
 80084b0:	4622      	mov	r2, r4
 80084b2:	462b      	mov	r3, r5
 80084b4:	f7f8 f8a8 	bl	8000608 <__aeabi_dmul>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4640      	mov	r0, r8
 80084be:	4649      	mov	r1, r9
 80084c0:	f7f7 feea 	bl	8000298 <__aeabi_dsub>
 80084c4:	4604      	mov	r4, r0
 80084c6:	460d      	mov	r5, r1
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4640      	mov	r0, r8
 80084ce:	4649      	mov	r1, r9
 80084d0:	f7f8 f89a 	bl	8000608 <__aeabi_dmul>
 80084d4:	2200      	movs	r2, #0
 80084d6:	ec41 0b19 	vmov	d9, r0, r1
 80084da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084de:	4620      	mov	r0, r4
 80084e0:	4629      	mov	r1, r5
 80084e2:	f7f7 fed9 	bl	8000298 <__aeabi_dsub>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	ec51 0b19 	vmov	r0, r1, d9
 80084ee:	f7f8 f9b5 	bl	800085c <__aeabi_ddiv>
 80084f2:	4632      	mov	r2, r6
 80084f4:	4604      	mov	r4, r0
 80084f6:	460d      	mov	r5, r1
 80084f8:	463b      	mov	r3, r7
 80084fa:	4640      	mov	r0, r8
 80084fc:	4649      	mov	r1, r9
 80084fe:	f7f8 f883 	bl	8000608 <__aeabi_dmul>
 8008502:	4632      	mov	r2, r6
 8008504:	463b      	mov	r3, r7
 8008506:	f7f7 fec9 	bl	800029c <__adddf3>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	4620      	mov	r0, r4
 8008510:	4629      	mov	r1, r5
 8008512:	f7f7 fec1 	bl	8000298 <__aeabi_dsub>
 8008516:	4642      	mov	r2, r8
 8008518:	464b      	mov	r3, r9
 800851a:	f7f7 febd 	bl	8000298 <__aeabi_dsub>
 800851e:	460b      	mov	r3, r1
 8008520:	4602      	mov	r2, r0
 8008522:	4939      	ldr	r1, [pc, #228]	; (8008608 <__ieee754_pow+0xa40>)
 8008524:	2000      	movs	r0, #0
 8008526:	f7f7 feb7 	bl	8000298 <__aeabi_dsub>
 800852a:	ec41 0b10 	vmov	d0, r0, r1
 800852e:	ee10 3a90 	vmov	r3, s1
 8008532:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800853a:	da2b      	bge.n	8008594 <__ieee754_pow+0x9cc>
 800853c:	4650      	mov	r0, sl
 800853e:	f000 f877 	bl	8008630 <scalbn>
 8008542:	ec51 0b10 	vmov	r0, r1, d0
 8008546:	ec53 2b18 	vmov	r2, r3, d8
 800854a:	f7ff bbee 	b.w	8007d2a <__ieee754_pow+0x162>
 800854e:	4b2f      	ldr	r3, [pc, #188]	; (800860c <__ieee754_pow+0xa44>)
 8008550:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008554:	429e      	cmp	r6, r3
 8008556:	f77f af0d 	ble.w	8008374 <__ieee754_pow+0x7ac>
 800855a:	4b2d      	ldr	r3, [pc, #180]	; (8008610 <__ieee754_pow+0xa48>)
 800855c:	440b      	add	r3, r1
 800855e:	4303      	orrs	r3, r0
 8008560:	d009      	beq.n	8008576 <__ieee754_pow+0x9ae>
 8008562:	ec51 0b18 	vmov	r0, r1, d8
 8008566:	2200      	movs	r2, #0
 8008568:	2300      	movs	r3, #0
 800856a:	f7f8 fabf 	bl	8000aec <__aeabi_dcmplt>
 800856e:	3800      	subs	r0, #0
 8008570:	bf18      	it	ne
 8008572:	2001      	movne	r0, #1
 8008574:	e448      	b.n	8007e08 <__ieee754_pow+0x240>
 8008576:	4622      	mov	r2, r4
 8008578:	462b      	mov	r3, r5
 800857a:	f7f7 fe8d 	bl	8000298 <__aeabi_dsub>
 800857e:	4642      	mov	r2, r8
 8008580:	464b      	mov	r3, r9
 8008582:	f7f8 fac7 	bl	8000b14 <__aeabi_dcmpge>
 8008586:	2800      	cmp	r0, #0
 8008588:	f43f aef4 	beq.w	8008374 <__ieee754_pow+0x7ac>
 800858c:	e7e9      	b.n	8008562 <__ieee754_pow+0x99a>
 800858e:	f04f 0a00 	mov.w	sl, #0
 8008592:	e71a      	b.n	80083ca <__ieee754_pow+0x802>
 8008594:	ec51 0b10 	vmov	r0, r1, d0
 8008598:	4619      	mov	r1, r3
 800859a:	e7d4      	b.n	8008546 <__ieee754_pow+0x97e>
 800859c:	491a      	ldr	r1, [pc, #104]	; (8008608 <__ieee754_pow+0xa40>)
 800859e:	2000      	movs	r0, #0
 80085a0:	f7ff bb31 	b.w	8007c06 <__ieee754_pow+0x3e>
 80085a4:	2000      	movs	r0, #0
 80085a6:	2100      	movs	r1, #0
 80085a8:	f7ff bb2d 	b.w	8007c06 <__ieee754_pow+0x3e>
 80085ac:	4630      	mov	r0, r6
 80085ae:	4639      	mov	r1, r7
 80085b0:	f7ff bb29 	b.w	8007c06 <__ieee754_pow+0x3e>
 80085b4:	9204      	str	r2, [sp, #16]
 80085b6:	f7ff bb7b 	b.w	8007cb0 <__ieee754_pow+0xe8>
 80085ba:	2300      	movs	r3, #0
 80085bc:	f7ff bb65 	b.w	8007c8a <__ieee754_pow+0xc2>
 80085c0:	00000000 	.word	0x00000000
 80085c4:	3fe62e43 	.word	0x3fe62e43
 80085c8:	fefa39ef 	.word	0xfefa39ef
 80085cc:	3fe62e42 	.word	0x3fe62e42
 80085d0:	0ca86c39 	.word	0x0ca86c39
 80085d4:	be205c61 	.word	0xbe205c61
 80085d8:	72bea4d0 	.word	0x72bea4d0
 80085dc:	3e663769 	.word	0x3e663769
 80085e0:	c5d26bf1 	.word	0xc5d26bf1
 80085e4:	3ebbbd41 	.word	0x3ebbbd41
 80085e8:	af25de2c 	.word	0xaf25de2c
 80085ec:	3f11566a 	.word	0x3f11566a
 80085f0:	16bebd93 	.word	0x16bebd93
 80085f4:	3f66c16c 	.word	0x3f66c16c
 80085f8:	5555553e 	.word	0x5555553e
 80085fc:	3fc55555 	.word	0x3fc55555
 8008600:	3fe00000 	.word	0x3fe00000
 8008604:	fff00000 	.word	0xfff00000
 8008608:	3ff00000 	.word	0x3ff00000
 800860c:	4090cbff 	.word	0x4090cbff
 8008610:	3f6f3400 	.word	0x3f6f3400
 8008614:	652b82fe 	.word	0x652b82fe
 8008618:	3c971547 	.word	0x3c971547

0800861c <fabs>:
 800861c:	ec51 0b10 	vmov	r0, r1, d0
 8008620:	ee10 2a10 	vmov	r2, s0
 8008624:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008628:	ec43 2b10 	vmov	d0, r2, r3
 800862c:	4770      	bx	lr
	...

08008630 <scalbn>:
 8008630:	b570      	push	{r4, r5, r6, lr}
 8008632:	ec55 4b10 	vmov	r4, r5, d0
 8008636:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800863a:	4606      	mov	r6, r0
 800863c:	462b      	mov	r3, r5
 800863e:	b999      	cbnz	r1, 8008668 <scalbn+0x38>
 8008640:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008644:	4323      	orrs	r3, r4
 8008646:	d03f      	beq.n	80086c8 <scalbn+0x98>
 8008648:	4b35      	ldr	r3, [pc, #212]	; (8008720 <scalbn+0xf0>)
 800864a:	4629      	mov	r1, r5
 800864c:	ee10 0a10 	vmov	r0, s0
 8008650:	2200      	movs	r2, #0
 8008652:	f7f7 ffd9 	bl	8000608 <__aeabi_dmul>
 8008656:	4b33      	ldr	r3, [pc, #204]	; (8008724 <scalbn+0xf4>)
 8008658:	429e      	cmp	r6, r3
 800865a:	4604      	mov	r4, r0
 800865c:	460d      	mov	r5, r1
 800865e:	da10      	bge.n	8008682 <scalbn+0x52>
 8008660:	a327      	add	r3, pc, #156	; (adr r3, 8008700 <scalbn+0xd0>)
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	e01f      	b.n	80086a8 <scalbn+0x78>
 8008668:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800866c:	4291      	cmp	r1, r2
 800866e:	d10c      	bne.n	800868a <scalbn+0x5a>
 8008670:	ee10 2a10 	vmov	r2, s0
 8008674:	4620      	mov	r0, r4
 8008676:	4629      	mov	r1, r5
 8008678:	f7f7 fe10 	bl	800029c <__adddf3>
 800867c:	4604      	mov	r4, r0
 800867e:	460d      	mov	r5, r1
 8008680:	e022      	b.n	80086c8 <scalbn+0x98>
 8008682:	460b      	mov	r3, r1
 8008684:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008688:	3936      	subs	r1, #54	; 0x36
 800868a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800868e:	4296      	cmp	r6, r2
 8008690:	dd0d      	ble.n	80086ae <scalbn+0x7e>
 8008692:	2d00      	cmp	r5, #0
 8008694:	a11c      	add	r1, pc, #112	; (adr r1, 8008708 <scalbn+0xd8>)
 8008696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800869a:	da02      	bge.n	80086a2 <scalbn+0x72>
 800869c:	a11c      	add	r1, pc, #112	; (adr r1, 8008710 <scalbn+0xe0>)
 800869e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086a2:	a319      	add	r3, pc, #100	; (adr r3, 8008708 <scalbn+0xd8>)
 80086a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a8:	f7f7 ffae 	bl	8000608 <__aeabi_dmul>
 80086ac:	e7e6      	b.n	800867c <scalbn+0x4c>
 80086ae:	1872      	adds	r2, r6, r1
 80086b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80086b4:	428a      	cmp	r2, r1
 80086b6:	dcec      	bgt.n	8008692 <scalbn+0x62>
 80086b8:	2a00      	cmp	r2, #0
 80086ba:	dd08      	ble.n	80086ce <scalbn+0x9e>
 80086bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80086c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80086c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80086c8:	ec45 4b10 	vmov	d0, r4, r5
 80086cc:	bd70      	pop	{r4, r5, r6, pc}
 80086ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80086d2:	da08      	bge.n	80086e6 <scalbn+0xb6>
 80086d4:	2d00      	cmp	r5, #0
 80086d6:	a10a      	add	r1, pc, #40	; (adr r1, 8008700 <scalbn+0xd0>)
 80086d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086dc:	dac0      	bge.n	8008660 <scalbn+0x30>
 80086de:	a10e      	add	r1, pc, #56	; (adr r1, 8008718 <scalbn+0xe8>)
 80086e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086e4:	e7bc      	b.n	8008660 <scalbn+0x30>
 80086e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80086ea:	3236      	adds	r2, #54	; 0x36
 80086ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80086f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80086f4:	4620      	mov	r0, r4
 80086f6:	4b0c      	ldr	r3, [pc, #48]	; (8008728 <scalbn+0xf8>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	e7d5      	b.n	80086a8 <scalbn+0x78>
 80086fc:	f3af 8000 	nop.w
 8008700:	c2f8f359 	.word	0xc2f8f359
 8008704:	01a56e1f 	.word	0x01a56e1f
 8008708:	8800759c 	.word	0x8800759c
 800870c:	7e37e43c 	.word	0x7e37e43c
 8008710:	8800759c 	.word	0x8800759c
 8008714:	fe37e43c 	.word	0xfe37e43c
 8008718:	c2f8f359 	.word	0xc2f8f359
 800871c:	81a56e1f 	.word	0x81a56e1f
 8008720:	43500000 	.word	0x43500000
 8008724:	ffff3cb0 	.word	0xffff3cb0
 8008728:	3c900000 	.word	0x3c900000

0800872c <with_errno>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	4604      	mov	r4, r0
 8008730:	460d      	mov	r5, r1
 8008732:	4616      	mov	r6, r2
 8008734:	f7fd f8dc 	bl	80058f0 <__errno>
 8008738:	4629      	mov	r1, r5
 800873a:	6006      	str	r6, [r0, #0]
 800873c:	4620      	mov	r0, r4
 800873e:	bd70      	pop	{r4, r5, r6, pc}

08008740 <xflow>:
 8008740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008742:	4614      	mov	r4, r2
 8008744:	461d      	mov	r5, r3
 8008746:	b108      	cbz	r0, 800874c <xflow+0xc>
 8008748:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800874c:	e9cd 2300 	strd	r2, r3, [sp]
 8008750:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008754:	4620      	mov	r0, r4
 8008756:	4629      	mov	r1, r5
 8008758:	f7f7 ff56 	bl	8000608 <__aeabi_dmul>
 800875c:	2222      	movs	r2, #34	; 0x22
 800875e:	b003      	add	sp, #12
 8008760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008764:	f7ff bfe2 	b.w	800872c <with_errno>

08008768 <__math_uflow>:
 8008768:	b508      	push	{r3, lr}
 800876a:	2200      	movs	r2, #0
 800876c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008770:	f7ff ffe6 	bl	8008740 <xflow>
 8008774:	ec41 0b10 	vmov	d0, r0, r1
 8008778:	bd08      	pop	{r3, pc}

0800877a <__math_oflow>:
 800877a:	b508      	push	{r3, lr}
 800877c:	2200      	movs	r2, #0
 800877e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008782:	f7ff ffdd 	bl	8008740 <xflow>
 8008786:	ec41 0b10 	vmov	d0, r0, r1
 800878a:	bd08      	pop	{r3, pc}

0800878c <__ieee754_sqrt>:
 800878c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008790:	ec55 4b10 	vmov	r4, r5, d0
 8008794:	4e67      	ldr	r6, [pc, #412]	; (8008934 <__ieee754_sqrt+0x1a8>)
 8008796:	43ae      	bics	r6, r5
 8008798:	ee10 0a10 	vmov	r0, s0
 800879c:	ee10 2a10 	vmov	r2, s0
 80087a0:	4629      	mov	r1, r5
 80087a2:	462b      	mov	r3, r5
 80087a4:	d10d      	bne.n	80087c2 <__ieee754_sqrt+0x36>
 80087a6:	f7f7 ff2f 	bl	8000608 <__aeabi_dmul>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4620      	mov	r0, r4
 80087b0:	4629      	mov	r1, r5
 80087b2:	f7f7 fd73 	bl	800029c <__adddf3>
 80087b6:	4604      	mov	r4, r0
 80087b8:	460d      	mov	r5, r1
 80087ba:	ec45 4b10 	vmov	d0, r4, r5
 80087be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c2:	2d00      	cmp	r5, #0
 80087c4:	dc0b      	bgt.n	80087de <__ieee754_sqrt+0x52>
 80087c6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80087ca:	4326      	orrs	r6, r4
 80087cc:	d0f5      	beq.n	80087ba <__ieee754_sqrt+0x2e>
 80087ce:	b135      	cbz	r5, 80087de <__ieee754_sqrt+0x52>
 80087d0:	f7f7 fd62 	bl	8000298 <__aeabi_dsub>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	f7f8 f840 	bl	800085c <__aeabi_ddiv>
 80087dc:	e7eb      	b.n	80087b6 <__ieee754_sqrt+0x2a>
 80087de:	1509      	asrs	r1, r1, #20
 80087e0:	f000 808d 	beq.w	80088fe <__ieee754_sqrt+0x172>
 80087e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087e8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80087ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087f0:	07c9      	lsls	r1, r1, #31
 80087f2:	bf5c      	itt	pl
 80087f4:	005b      	lslpl	r3, r3, #1
 80087f6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80087fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087fe:	bf58      	it	pl
 8008800:	0052      	lslpl	r2, r2, #1
 8008802:	2500      	movs	r5, #0
 8008804:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008808:	1076      	asrs	r6, r6, #1
 800880a:	0052      	lsls	r2, r2, #1
 800880c:	f04f 0e16 	mov.w	lr, #22
 8008810:	46ac      	mov	ip, r5
 8008812:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008816:	eb0c 0001 	add.w	r0, ip, r1
 800881a:	4298      	cmp	r0, r3
 800881c:	bfde      	ittt	le
 800881e:	1a1b      	suble	r3, r3, r0
 8008820:	eb00 0c01 	addle.w	ip, r0, r1
 8008824:	186d      	addle	r5, r5, r1
 8008826:	005b      	lsls	r3, r3, #1
 8008828:	f1be 0e01 	subs.w	lr, lr, #1
 800882c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008830:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008834:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008838:	d1ed      	bne.n	8008816 <__ieee754_sqrt+0x8a>
 800883a:	4674      	mov	r4, lr
 800883c:	2720      	movs	r7, #32
 800883e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008842:	4563      	cmp	r3, ip
 8008844:	eb01 000e 	add.w	r0, r1, lr
 8008848:	dc02      	bgt.n	8008850 <__ieee754_sqrt+0xc4>
 800884a:	d113      	bne.n	8008874 <__ieee754_sqrt+0xe8>
 800884c:	4290      	cmp	r0, r2
 800884e:	d811      	bhi.n	8008874 <__ieee754_sqrt+0xe8>
 8008850:	2800      	cmp	r0, #0
 8008852:	eb00 0e01 	add.w	lr, r0, r1
 8008856:	da57      	bge.n	8008908 <__ieee754_sqrt+0x17c>
 8008858:	f1be 0f00 	cmp.w	lr, #0
 800885c:	db54      	blt.n	8008908 <__ieee754_sqrt+0x17c>
 800885e:	f10c 0801 	add.w	r8, ip, #1
 8008862:	eba3 030c 	sub.w	r3, r3, ip
 8008866:	4290      	cmp	r0, r2
 8008868:	bf88      	it	hi
 800886a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800886e:	1a12      	subs	r2, r2, r0
 8008870:	440c      	add	r4, r1
 8008872:	46c4      	mov	ip, r8
 8008874:	005b      	lsls	r3, r3, #1
 8008876:	3f01      	subs	r7, #1
 8008878:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800887c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008880:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008884:	d1dd      	bne.n	8008842 <__ieee754_sqrt+0xb6>
 8008886:	4313      	orrs	r3, r2
 8008888:	d01b      	beq.n	80088c2 <__ieee754_sqrt+0x136>
 800888a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008938 <__ieee754_sqrt+0x1ac>
 800888e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800893c <__ieee754_sqrt+0x1b0>
 8008892:	e9da 0100 	ldrd	r0, r1, [sl]
 8008896:	e9db 2300 	ldrd	r2, r3, [fp]
 800889a:	f7f7 fcfd 	bl	8000298 <__aeabi_dsub>
 800889e:	e9da 8900 	ldrd	r8, r9, [sl]
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	4640      	mov	r0, r8
 80088a8:	4649      	mov	r1, r9
 80088aa:	f7f8 f929 	bl	8000b00 <__aeabi_dcmple>
 80088ae:	b140      	cbz	r0, 80088c2 <__ieee754_sqrt+0x136>
 80088b0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80088b4:	e9da 0100 	ldrd	r0, r1, [sl]
 80088b8:	e9db 2300 	ldrd	r2, r3, [fp]
 80088bc:	d126      	bne.n	800890c <__ieee754_sqrt+0x180>
 80088be:	3501      	adds	r5, #1
 80088c0:	463c      	mov	r4, r7
 80088c2:	106a      	asrs	r2, r5, #1
 80088c4:	0863      	lsrs	r3, r4, #1
 80088c6:	07e9      	lsls	r1, r5, #31
 80088c8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80088cc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80088d0:	bf48      	it	mi
 80088d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80088d6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80088da:	461c      	mov	r4, r3
 80088dc:	e76d      	b.n	80087ba <__ieee754_sqrt+0x2e>
 80088de:	0ad3      	lsrs	r3, r2, #11
 80088e0:	3815      	subs	r0, #21
 80088e2:	0552      	lsls	r2, r2, #21
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0fa      	beq.n	80088de <__ieee754_sqrt+0x152>
 80088e8:	02dc      	lsls	r4, r3, #11
 80088ea:	d50a      	bpl.n	8008902 <__ieee754_sqrt+0x176>
 80088ec:	f1c1 0420 	rsb	r4, r1, #32
 80088f0:	fa22 f404 	lsr.w	r4, r2, r4
 80088f4:	1e4d      	subs	r5, r1, #1
 80088f6:	408a      	lsls	r2, r1
 80088f8:	4323      	orrs	r3, r4
 80088fa:	1b41      	subs	r1, r0, r5
 80088fc:	e772      	b.n	80087e4 <__ieee754_sqrt+0x58>
 80088fe:	4608      	mov	r0, r1
 8008900:	e7f0      	b.n	80088e4 <__ieee754_sqrt+0x158>
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	3101      	adds	r1, #1
 8008906:	e7ef      	b.n	80088e8 <__ieee754_sqrt+0x15c>
 8008908:	46e0      	mov	r8, ip
 800890a:	e7aa      	b.n	8008862 <__ieee754_sqrt+0xd6>
 800890c:	f7f7 fcc6 	bl	800029c <__adddf3>
 8008910:	e9da 8900 	ldrd	r8, r9, [sl]
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4640      	mov	r0, r8
 800891a:	4649      	mov	r1, r9
 800891c:	f7f8 f8e6 	bl	8000aec <__aeabi_dcmplt>
 8008920:	b120      	cbz	r0, 800892c <__ieee754_sqrt+0x1a0>
 8008922:	1ca0      	adds	r0, r4, #2
 8008924:	bf08      	it	eq
 8008926:	3501      	addeq	r5, #1
 8008928:	3402      	adds	r4, #2
 800892a:	e7ca      	b.n	80088c2 <__ieee754_sqrt+0x136>
 800892c:	3401      	adds	r4, #1
 800892e:	f024 0401 	bic.w	r4, r4, #1
 8008932:	e7c6      	b.n	80088c2 <__ieee754_sqrt+0x136>
 8008934:	7ff00000 	.word	0x7ff00000
 8008938:	200001e0 	.word	0x200001e0
 800893c:	200001e8 	.word	0x200001e8

08008940 <_init>:
 8008940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008942:	bf00      	nop
 8008944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008946:	bc08      	pop	{r3}
 8008948:	469e      	mov	lr, r3
 800894a:	4770      	bx	lr

0800894c <_fini>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	bf00      	nop
 8008950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008952:	bc08      	pop	{r3}
 8008954:	469e      	mov	lr, r3
 8008956:	4770      	bx	lr
